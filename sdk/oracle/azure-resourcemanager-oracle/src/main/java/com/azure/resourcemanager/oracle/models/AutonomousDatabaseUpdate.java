// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracle.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.oracle.fluent.models.AutonomousDatabaseUpdateProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * The type used for update operations of the AutonomousDatabase.
 */
@Fluent
public final class AutonomousDatabaseUpdate {
    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * The updatable properties of the AutonomousDatabase.
     */
    @JsonProperty(value = "properties")
    private AutonomousDatabaseUpdateProperties innerProperties;

    /**
     * Creates an instance of AutonomousDatabaseUpdate class.
     */
    public AutonomousDatabaseUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The updatable properties of the AutonomousDatabase.
     * 
     * @return the innerProperties value.
     */
    private AutonomousDatabaseUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the adminPassword property: Admin password.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.innerProperties() == null ? null : this.innerProperties().adminPassword();
    }

    /**
     * Set the adminPassword property: Admin password.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withAdminPassword(String adminPassword) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withAdminPassword(adminPassword);
        return this;
    }

    /**
     * Get the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @return the autonomousMaintenanceScheduleType value.
     */
    public AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType() {
        return this.innerProperties() == null ? null : this.innerProperties().autonomousMaintenanceScheduleType();
    }

    /**
     * Set the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @param autonomousMaintenanceScheduleType the autonomousMaintenanceScheduleType value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withAutonomousMaintenanceScheduleType(autonomousMaintenanceScheduleType);
        return this;
    }

    /**
     * Get the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @return the computeCount value.
     */
    public Float computeCount() {
        return this.innerProperties() == null ? null : this.innerProperties().computeCount();
    }

    /**
     * Set the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @param computeCount the computeCount value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withComputeCount(Float computeCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withComputeCount(computeCount);
        return this;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @return the cpuCoreCount value.
     */
    public Integer cpuCoreCount() {
        return this.innerProperties() == null ? null : this.innerProperties().cpuCoreCount();
    }

    /**
     * Set the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @param cpuCoreCount the cpuCoreCount value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withCpuCoreCount(Integer cpuCoreCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withCpuCoreCount(cpuCoreCount);
        return this;
    }

    /**
     * Get the customerContacts property: Customer Contacts.
     * 
     * @return the customerContacts value.
     */
    public List<CustomerContact> customerContacts() {
        return this.innerProperties() == null ? null : this.innerProperties().customerContacts();
    }

    /**
     * Set the customerContacts property: Customer Contacts.
     * 
     * @param customerContacts the customerContacts value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withCustomerContacts(List<CustomerContact> customerContacts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withCustomerContacts(customerContacts);
        return this;
    }

    /**
     * Get the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @return the dataStorageSizeInTbs value.
     */
    public Integer dataStorageSizeInTbs() {
        return this.innerProperties() == null ? null : this.innerProperties().dataStorageSizeInTbs();
    }

    /**
     * Set the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @param dataStorageSizeInTbs the dataStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withDataStorageSizeInTbs(dataStorageSizeInTbs);
        return this;
    }

    /**
     * Get the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @return the dataStorageSizeInGbs value.
     */
    public Integer dataStorageSizeInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().dataStorageSizeInGbs();
    }

    /**
     * Set the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @param dataStorageSizeInGbs the dataStorageSizeInGbs value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withDataStorageSizeInGbs(dataStorageSizeInGbs);
        return this;
    }

    /**
     * Get the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @param displayName the displayName value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @return the isAutoScalingEnabled value.
     */
    public Boolean isAutoScalingEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isAutoScalingEnabled();
    }

    /**
     * Set the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @param isAutoScalingEnabled the isAutoScalingEnabled value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withIsAutoScalingEnabled(isAutoScalingEnabled);
        return this;
    }

    /**
     * Get the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @return the isAutoScalingForStorageEnabled value.
     */
    public Boolean isAutoScalingForStorageEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isAutoScalingForStorageEnabled();
    }

    /**
     * Set the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @param isAutoScalingForStorageEnabled the isAutoScalingForStorageEnabled value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withIsAutoScalingForStorageEnabled(isAutoScalingForStorageEnabled);
        return this;
    }

    /**
     * Get the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @return the peerDbId value.
     */
    public String peerDbId() {
        return this.innerProperties() == null ? null : this.innerProperties().peerDbId();
    }

    /**
     * Set the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @param peerDbId the peerDbId value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withPeerDbId(String peerDbId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withPeerDbId(peerDbId);
        return this;
    }

    /**
     * Get the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @return the isLocalDataGuardEnabled value.
     */
    public Boolean isLocalDataGuardEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isLocalDataGuardEnabled();
    }

    /**
     * Set the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @param isLocalDataGuardEnabled the isLocalDataGuardEnabled value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withIsLocalDataGuardEnabled(isLocalDataGuardEnabled);
        return this;
    }

    /**
     * Get the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @return the isMtlsConnectionRequired value.
     */
    public Boolean isMtlsConnectionRequired() {
        return this.innerProperties() == null ? null : this.innerProperties().isMtlsConnectionRequired();
    }

    /**
     * Set the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @param isMtlsConnectionRequired the isMtlsConnectionRequired value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withIsMtlsConnectionRequired(isMtlsConnectionRequired);
        return this;
    }

    /**
     * Get the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    public LicenseModel licenseModel() {
        return this.innerProperties() == null ? null : this.innerProperties().licenseModel();
    }

    /**
     * Set the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withLicenseModel(LicenseModel licenseModel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withLicenseModel(licenseModel);
        return this;
    }

    /**
     * Get the scheduledOperations property: The list of scheduled operations.
     * 
     * @return the scheduledOperations value.
     */
    public ScheduledOperationsTypeUpdate scheduledOperations() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledOperations();
    }

    /**
     * Set the scheduledOperations property: The list of scheduled operations.
     * 
     * @param scheduledOperations the scheduledOperations value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withScheduledOperations(ScheduledOperationsTypeUpdate scheduledOperations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withScheduledOperations(scheduledOperations);
        return this;
    }

    /**
     * Get the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @return the databaseEdition value.
     */
    public DatabaseEditionType databaseEdition() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseEdition();
    }

    /**
     * Set the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @param databaseEdition the databaseEdition value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withDatabaseEdition(DatabaseEditionType databaseEdition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withDatabaseEdition(databaseEdition);
        return this;
    }

    /**
     * Get the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @return the localAdgAutoFailoverMaxDataLossLimit value.
     */
    public Integer localAdgAutoFailoverMaxDataLossLimit() {
        return this.innerProperties() == null ? null : this.innerProperties().localAdgAutoFailoverMaxDataLossLimit();
    }

    /**
     * Set the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @param localAdgAutoFailoverMaxDataLossLimit the localAdgAutoFailoverMaxDataLossLimit value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withLocalAdgAutoFailoverMaxDataLossLimit(localAdgAutoFailoverMaxDataLossLimit);
        return this;
    }

    /**
     * Get the openMode property: Indicates the Autonomous Database mode.
     * 
     * @return the openMode value.
     */
    public OpenModeType openMode() {
        return this.innerProperties() == null ? null : this.innerProperties().openMode();
    }

    /**
     * Set the openMode property: Indicates the Autonomous Database mode.
     * 
     * @param openMode the openMode value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withOpenMode(OpenModeType openMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withOpenMode(openMode);
        return this;
    }

    /**
     * Get the permissionLevel property: The Autonomous Database permission level.
     * 
     * @return the permissionLevel value.
     */
    public PermissionLevelType permissionLevel() {
        return this.innerProperties() == null ? null : this.innerProperties().permissionLevel();
    }

    /**
     * Set the permissionLevel property: The Autonomous Database permission level.
     * 
     * @param permissionLevel the permissionLevel value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withPermissionLevel(PermissionLevelType permissionLevel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withPermissionLevel(permissionLevel);
        return this;
    }

    /**
     * Get the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @return the role value.
     */
    public RoleType role() {
        return this.innerProperties() == null ? null : this.innerProperties().role();
    }

    /**
     * Set the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @param role the role value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withRole(RoleType role) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withRole(role);
        return this;
    }

    /**
     * Get the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @return the backupRetentionPeriodInDays value.
     */
    public Integer backupRetentionPeriodInDays() {
        return this.innerProperties() == null ? null : this.innerProperties().backupRetentionPeriodInDays();
    }

    /**
     * Set the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @param backupRetentionPeriodInDays the backupRetentionPeriodInDays value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withBackupRetentionPeriodInDays(backupRetentionPeriodInDays);
        return this;
    }

    /**
     * Get the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @return the whitelistedIps value.
     */
    public List<String> whitelistedIps() {
        return this.innerProperties() == null ? null : this.innerProperties().whitelistedIps();
    }

    /**
     * Set the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @param whitelistedIps the whitelistedIps value to set.
     * @return the AutonomousDatabaseUpdate object itself.
     */
    public AutonomousDatabaseUpdate withWhitelistedIps(List<String> whitelistedIps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutonomousDatabaseUpdateProperties();
        }
        this.innerProperties().withWhitelistedIps(whitelistedIps);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
