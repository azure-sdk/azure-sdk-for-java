// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracle.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DbSystemShape resource definition.
 */
@Immutable
public final class DbSystemShapeInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private DbSystemShapeProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of DbSystemShapeInner class.
     */
    public DbSystemShapeInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private DbSystemShapeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the shapeFamily property: The family of the shape used for the DB system.
     * 
     * @return the shapeFamily value.
     */
    public String shapeFamily() {
        return this.innerProperties() == null ? null : this.innerProperties().shapeFamily();
    }

    /**
     * Get the availableCoreCount property: The maximum number of CPU cores that can be enabled on the DB system for
     * this shape.
     * 
     * @return the availableCoreCount value.
     */
    public Integer availableCoreCount() {
        return this.innerProperties() == null ? null : this.innerProperties().availableCoreCount();
    }

    /**
     * Get the minimumCoreCount property: The minimum number of CPU cores that can be enabled on the DB system for this
     * shape.
     * 
     * @return the minimumCoreCount value.
     */
    public Integer minimumCoreCount() {
        return this.innerProperties() == null ? null : this.innerProperties().minimumCoreCount();
    }

    /**
     * Get the runtimeMinimumCoreCount property: The runtime minimum number of CPU cores that can be enabled on the DB
     * system for this shape.
     * 
     * @return the runtimeMinimumCoreCount value.
     */
    public Integer runtimeMinimumCoreCount() {
        return this.innerProperties() == null ? null : this.innerProperties().runtimeMinimumCoreCount();
    }

    /**
     * Get the coreCountIncrement property: The discrete number by which the CPU core count for this shape can be
     * increased or decreased.
     * 
     * @return the coreCountIncrement value.
     */
    public Integer coreCountIncrement() {
        return this.innerProperties() == null ? null : this.innerProperties().coreCountIncrement();
    }

    /**
     * Get the minStorageCount property: The minimum number of Exadata storage servers available for the Exadata
     * infrastructure.
     * 
     * @return the minStorageCount value.
     */
    public Integer minStorageCount() {
        return this.innerProperties() == null ? null : this.innerProperties().minStorageCount();
    }

    /**
     * Get the maxStorageCount property: The maximum number of Exadata storage servers available for the Exadata
     * infrastructure.
     * 
     * @return the maxStorageCount value.
     */
    public Integer maxStorageCount() {
        return this.innerProperties() == null ? null : this.innerProperties().maxStorageCount();
    }

    /**
     * Get the availableDataStoragePerServerInTbs property: The maximum data storage available per storage server for
     * this shape. Only applicable to ExaCC Elastic shapes.
     * 
     * @return the availableDataStoragePerServerInTbs value.
     */
    public Double availableDataStoragePerServerInTbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableDataStoragePerServerInTbs();
    }

    /**
     * Get the availableMemoryPerNodeInGbs property: The maximum memory available per database node for this shape. Only
     * applicable to ExaCC Elastic shapes.
     * 
     * @return the availableMemoryPerNodeInGbs value.
     */
    public Integer availableMemoryPerNodeInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableMemoryPerNodeInGbs();
    }

    /**
     * Get the availableDbNodePerNodeInGbs property: The maximum Db Node storage available per database node for this
     * shape. Only applicable to ExaCC Elastic shapes.
     * 
     * @return the availableDbNodePerNodeInGbs value.
     */
    public Integer availableDbNodePerNodeInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableDbNodePerNodeInGbs();
    }

    /**
     * Get the minCoreCountPerNode property: The minimum number of CPU cores that can be enabled per node for this
     * shape.
     * 
     * @return the minCoreCountPerNode value.
     */
    public Integer minCoreCountPerNode() {
        return this.innerProperties() == null ? null : this.innerProperties().minCoreCountPerNode();
    }

    /**
     * Get the availableMemoryInGbs property: The maximum memory that can be enabled for this shape.
     * 
     * @return the availableMemoryInGbs value.
     */
    public Integer availableMemoryInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableMemoryInGbs();
    }

    /**
     * Get the minMemoryPerNodeInGbs property: The minimum memory that need be allocated per node for this shape.
     * 
     * @return the minMemoryPerNodeInGbs value.
     */
    public Integer minMemoryPerNodeInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().minMemoryPerNodeInGbs();
    }

    /**
     * Get the availableDbNodeStorageInGbs property: The maximum Db Node storage that can be enabled for this shape.
     * 
     * @return the availableDbNodeStorageInGbs value.
     */
    public Integer availableDbNodeStorageInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableDbNodeStorageInGbs();
    }

    /**
     * Get the minDbNodeStoragePerNodeInGbs property: The minimum Db Node storage that need be allocated per node for
     * this shape.
     * 
     * @return the minDbNodeStoragePerNodeInGbs value.
     */
    public Integer minDbNodeStoragePerNodeInGbs() {
        return this.innerProperties() == null ? null : this.innerProperties().minDbNodeStoragePerNodeInGbs();
    }

    /**
     * Get the availableDataStorageInTbs property: The maximum DATA storage that can be enabled for this shape.
     * 
     * @return the availableDataStorageInTbs value.
     */
    public Integer availableDataStorageInTbs() {
        return this.innerProperties() == null ? null : this.innerProperties().availableDataStorageInTbs();
    }

    /**
     * Get the minDataStorageInTbs property: The minimum data storage that need be allocated for this shape.
     * 
     * @return the minDataStorageInTbs value.
     */
    public Integer minDataStorageInTbs() {
        return this.innerProperties() == null ? null : this.innerProperties().minDataStorageInTbs();
    }

    /**
     * Get the minimumNodeCount property: The minimum number of database nodes available for this shape.
     * 
     * @return the minimumNodeCount value.
     */
    public Integer minimumNodeCount() {
        return this.innerProperties() == null ? null : this.innerProperties().minimumNodeCount();
    }

    /**
     * Get the maximumNodeCount property: The maximum number of database nodes available for this shape.
     * 
     * @return the maximumNodeCount value.
     */
    public Integer maximumNodeCount() {
        return this.innerProperties() == null ? null : this.innerProperties().maximumNodeCount();
    }

    /**
     * Get the availableCoreCountPerNode property: The maximum number of CPU cores per database node that can be enabled
     * for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
     * 
     * @return the availableCoreCountPerNode value.
     */
    public Integer availableCoreCountPerNode() {
        return this.innerProperties() == null ? null : this.innerProperties().availableCoreCountPerNode();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
