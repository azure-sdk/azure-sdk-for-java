// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracle.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.oracle.fluent.models.CloudVmClusterInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of CloudVmCluster.
 */
public interface CloudVmCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the ocid property: Cloud VM Cluster ocid.
     * 
     * @return the ocid value.
     */
    String ocid();

    /**
     * Gets the listenerPort property: The port number configured for the listener on the cloud VM cluster.
     * 
     * @return the listenerPort value.
     */
    Long listenerPort();

    /**
     * Gets the nodeCount property: The number of nodes in the cloud VM cluster.
     * 
     * @return the nodeCount value.
     */
    Integer nodeCount();

    /**
     * Gets the storageSizeInGbs property: The data disk group size to be allocated in GBs per VM.
     * 
     * @return the storageSizeInGbs value.
     */
    Integer storageSizeInGbs();

    /**
     * Gets the dataStorageSizeInTbs property: The data disk group size to be allocated in TBs.
     * 
     * @return the dataStorageSizeInTbs value.
     */
    Double dataStorageSizeInTbs();

    /**
     * Gets the dbNodeStorageSizeInGbs property: The local node storage to be allocated in GBs.
     * 
     * @return the dbNodeStorageSizeInGbs value.
     */
    Integer dbNodeStorageSizeInGbs();

    /**
     * Gets the memorySizeInGbs property: The memory to be allocated in GBs.
     * 
     * @return the memorySizeInGbs value.
     */
    Integer memorySizeInGbs();

    /**
     * Gets the timeCreated property: The date and time that the cloud VM cluster was created.
     * 
     * @return the timeCreated value.
     */
    OffsetDateTime timeCreated();

    /**
     * Gets the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    String lifecycleDetails();

    /**
     * Gets the timeZone property: The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time
     * Zones](/Content/Database/References/timezones.htm).
     * 
     * @return the timeZone value.
     */
    String timeZone();

    /**
     * Gets the zoneId property: The OCID of the zone the cloud VM cluster is associated with.
     * 
     * @return the zoneId value.
     */
    String zoneId();

    /**
     * Gets the hostname property: The hostname for the cloud VM cluster.
     * 
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the domain property: The domain name for the cloud VM cluster.
     * 
     * @return the domain value.
     */
    String domain();

    /**
     * Gets the cpuCoreCount property: The number of CPU cores enabled on the cloud VM cluster.
     * 
     * @return the cpuCoreCount value.
     */
    int cpuCoreCount();

    /**
     * Gets the ocpuCount property: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is
     * allowed for the fractional part.
     * 
     * @return the ocpuCount value.
     */
    Float ocpuCount();

    /**
     * Gets the clusterName property: The cluster name for cloud VM cluster. The cluster name must begin with an
     * alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
     * longer than 11 characters and is not case sensitive.
     * 
     * @return the clusterName value.
     */
    String clusterName();

    /**
     * Gets the dataStoragePercentage property: The percentage assigned to DATA storage (user data and database files).
     * The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager
     * backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See [Storage
     * Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation for details on
     * the impact of the configuration settings on storage.
     * 
     * @return the dataStoragePercentage value.
     */
    Integer dataStoragePercentage();

    /**
     * Gets the isLocalBackupEnabled property: If true, database backup on local Exadata storage is configured for the
     * cloud VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster.
     * 
     * @return the isLocalBackupEnabled value.
     */
    Boolean isLocalBackupEnabled();

    /**
     * Gets the cloudExadataInfrastructureId property: Cloud Exadata Infrastructure ID.
     * 
     * @return the cloudExadataInfrastructureId value.
     */
    String cloudExadataInfrastructureId();

    /**
     * Gets the isSparseDiskgroupEnabled property: If true, sparse disk group is configured for the cloud VM cluster. If
     * false, sparse disk group is not created.
     * 
     * @return the isSparseDiskgroupEnabled value.
     */
    Boolean isSparseDiskgroupEnabled();

    /**
     * Gets the systemVersion property: Operating system version of the image.
     * 
     * @return the systemVersion value.
     */
    String systemVersion();

    /**
     * Gets the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the cloud
     * VM cluster.
     * 
     * @return the sshPublicKeys value.
     */
    List<String> sshPublicKeys();

    /**
     * Gets the licenseModel property: The Oracle license model that applies to the cloud VM cluster. The default is
     * LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    LicenseModel licenseModel();

    /**
     * Gets the diskRedundancy property: The type of redundancy configured for the cloud Vm cluster. NORMAL is 2-way
     * redundancy. HIGH is 3-way redundancy.
     * 
     * @return the diskRedundancy value.
     */
    DiskRedundancy diskRedundancy();

    /**
     * Gets the scanIpIds property: The Single Client Access Name (SCAN) IP addresses associated with the cloud VM
     * cluster. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle
     * Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system,
     * this list is empty.
     * 
     * @return the scanIpIds value.
     */
    List<String> scanIpIds();

    /**
     * Gets the vipIds property: The virtual IP (VIP) addresses associated with the cloud VM cluster. The Cluster Ready
     * Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to
     * enable failover. If one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a
     * single-node DB system, this list is empty.
     * 
     * @return the vipIds value.
     */
    List<String> vipIds();

    /**
     * Gets the scanDnsName property: The FQDN of the DNS record for the SCAN IP addresses that are associated with the
     * cloud VM cluster.
     * 
     * @return the scanDnsName value.
     */
    String scanDnsName();

    /**
     * Gets the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     * @return the scanListenerPortTcp value.
     */
    Integer scanListenerPortTcp();

    /**
     * Gets the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The default port is
     * 2484.
     * 
     * @return the scanListenerPortTcpSsl value.
     */
    Integer scanListenerPortTcpSsl();

    /**
     * Gets the scanDnsRecordId property: The OCID of the DNS record for the SCAN IP addresses that are associated with
     * the cloud VM cluster.
     * 
     * @return the scanDnsRecordId value.
     */
    String scanDnsRecordId();

    /**
     * Gets the shape property: The model name of the Exadata hardware running the cloud VM cluster.
     * 
     * @return the shape value.
     */
    String shape();

    /**
     * Gets the provisioningState property: CloudVmCluster provisioning state.
     * 
     * @return the provisioningState value.
     */
    AzureResourceProvisioningState provisioningState();

    /**
     * Gets the lifecycleState property: CloudVmCluster lifecycle state.
     * 
     * @return the lifecycleState value.
     */
    CloudVmClusterLifecycleState lifecycleState();

    /**
     * Gets the vnetId property: VNET for network connectivity.
     * 
     * @return the vnetId value.
     */
    String vnetId();

    /**
     * Gets the giVersion property: Oracle Grid Infrastructure (GI) software version.
     * 
     * @return the giVersion value.
     */
    String giVersion();

    /**
     * Gets the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    String ociUrl();

    /**
     * Gets the nsgUrl property: HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure
     * Interface.
     * 
     * @return the nsgUrl value.
     */
    String nsgUrl();

    /**
     * Gets the subnetId property: Client subnet.
     * 
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
     * 
     * @return the backupSubnetCidr value.
     */
    String backupSubnetCidr();

    /**
     * Gets the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
     * Cluster will be added by default.
     * 
     * @return the nsgCidrs value.
     */
    List<NsgCidr> nsgCidrs();

    /**
     * Gets the dataCollectionOptions property: Indicates user preferences for the various diagnostic collection options
     * for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @return the dataCollectionOptions value.
     */
    DataCollectionOptions dataCollectionOptions();

    /**
     * Gets the displayName property: Display Name.
     * 
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the computeNodes property: The list of compute servers to be added to the cloud VM cluster.
     * 
     * @return the computeNodes value.
     */
    List<String> computeNodes();

    /**
     * Gets the iormConfigCache property: iormConfigCache details for cloud VM cluster.
     * 
     * @return the iormConfigCache value.
     */
    ExadataIormConfig iormConfigCache();

    /**
     * Gets the lastUpdateHistoryEntryId property: The OCID of the last maintenance update history entry.
     * 
     * @return the lastUpdateHistoryEntryId value.
     */
    String lastUpdateHistoryEntryId();

    /**
     * Gets the dbServers property: The list of DB servers.
     * 
     * @return the dbServers value.
     */
    List<String> dbServers();

    /**
     * Gets the compartmentId property: Cluster compartmentId.
     * 
     * @return the compartmentId value.
     */
    String compartmentId();

    /**
     * Gets the subnetOcid property: Cluster subnet ocid.
     * 
     * @return the subnetOcid value.
     */
    String subnetOcid();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.oracle.fluent.models.CloudVmClusterInner object.
     * 
     * @return the inner object.
     */
    CloudVmClusterInner innerModel();

    /**
     * The entirety of the CloudVmCluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The CloudVmCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the CloudVmCluster definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the CloudVmCluster definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithDataStorageSizeInTbs,
            DefinitionStages.WithDbNodeStorageSizeInGbs, DefinitionStages.WithMemorySizeInGbs,
            DefinitionStages.WithTimeZone, DefinitionStages.WithZoneId, DefinitionStages.WithHostname,
            DefinitionStages.WithDomain, DefinitionStages.WithCpuCoreCount, DefinitionStages.WithOcpuCount,
            DefinitionStages.WithClusterName, DefinitionStages.WithDataStoragePercentage,
            DefinitionStages.WithIsLocalBackupEnabled, DefinitionStages.WithCloudExadataInfrastructureId,
            DefinitionStages.WithIsSparseDiskgroupEnabled, DefinitionStages.WithSshPublicKeys,
            DefinitionStages.WithLicenseModel, DefinitionStages.WithScanListenerPortTcp,
            DefinitionStages.WithScanListenerPortTcpSsl, DefinitionStages.WithVnetId, DefinitionStages.WithGiVersion,
            DefinitionStages.WithSubnetId, DefinitionStages.WithBackupSubnetCidr, DefinitionStages.WithNsgCidrs,
            DefinitionStages.WithDataCollectionOptions, DefinitionStages.WithDisplayName,
            DefinitionStages.WithDbServers {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            CloudVmCluster create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CloudVmCluster create(Context context);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify dataStorageSizeInTbs.
         */
        interface WithDataStorageSizeInTbs {
            /**
             * Specifies the dataStorageSizeInTbs property: The data disk group size to be allocated in TBs..
             * 
             * @param dataStorageSizeInTbs The data disk group size to be allocated in TBs.
             * @return the next definition stage.
             */
            WithCreate withDataStorageSizeInTbs(Double dataStorageSizeInTbs);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify dbNodeStorageSizeInGbs.
         */
        interface WithDbNodeStorageSizeInGbs {
            /**
             * Specifies the dbNodeStorageSizeInGbs property: The local node storage to be allocated in GBs..
             * 
             * @param dbNodeStorageSizeInGbs The local node storage to be allocated in GBs.
             * @return the next definition stage.
             */
            WithCreate withDbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify memorySizeInGbs.
         */
        interface WithMemorySizeInGbs {
            /**
             * Specifies the memorySizeInGbs property: The memory to be allocated in GBs..
             * 
             * @param memorySizeInGbs The memory to be allocated in GBs.
             * @return the next definition stage.
             */
            WithCreate withMemorySizeInGbs(Integer memorySizeInGbs);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify timeZone.
         */
        interface WithTimeZone {
            /**
             * Specifies the timeZone property: The time zone of the cloud VM cluster. For details, see [Exadata
             * Infrastructure Time Zones](/Content/Database/References/timezones.htm)..
             * 
             * @param timeZone The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time
             * Zones](/Content/Database/References/timezones.htm).
             * @return the next definition stage.
             */
            WithCreate withTimeZone(String timeZone);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify zoneId.
         */
        interface WithZoneId {
            /**
             * Specifies the zoneId property: The OCID of the zone the cloud VM cluster is associated with..
             * 
             * @param zoneId The OCID of the zone the cloud VM cluster is associated with.
             * @return the next definition stage.
             */
            WithCreate withZoneId(String zoneId);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify hostname.
         */
        interface WithHostname {
            /**
             * Specifies the hostname property: The hostname for the cloud VM cluster..
             * 
             * @param hostname The hostname for the cloud VM cluster.
             * @return the next definition stage.
             */
            WithCreate withHostname(String hostname);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify domain.
         */
        interface WithDomain {
            /**
             * Specifies the domain property: The domain name for the cloud VM cluster..
             * 
             * @param domain The domain name for the cloud VM cluster.
             * @return the next definition stage.
             */
            WithCreate withDomain(String domain);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify cpuCoreCount.
         */
        interface WithCpuCoreCount {
            /**
             * Specifies the cpuCoreCount property: The number of CPU cores enabled on the cloud VM cluster..
             * 
             * @param cpuCoreCount The number of CPU cores enabled on the cloud VM cluster.
             * @return the next definition stage.
             */
            WithCreate withCpuCoreCount(int cpuCoreCount);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify ocpuCount.
         */
        interface WithOcpuCount {
            /**
             * Specifies the ocpuCount property: The number of OCPU cores to enable on the cloud VM cluster. Only 1
             * decimal place is allowed for the fractional part..
             * 
             * @param ocpuCount The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is
             * allowed for the fractional part.
             * @return the next definition stage.
             */
            WithCreate withOcpuCount(Float ocpuCount);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify clusterName.
         */
        interface WithClusterName {
            /**
             * Specifies the clusterName property: The cluster name for cloud VM cluster. The cluster name must begin
             * with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster
             * name can be no longer than 11 characters and is not case sensitive. .
             * 
             * @param clusterName The cluster name for cloud VM cluster. The cluster name must begin with an alphabetic
             * character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
             * longer than 11 characters and is not case sensitive.
             * @return the next definition stage.
             */
            WithCreate withClusterName(String clusterName);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify dataStoragePercentage.
         */
        interface WithDataStoragePercentage {
            /**
             * Specifies the dataStoragePercentage property: The percentage assigned to DATA storage (user data and
             * database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs,
             * and recovery manager backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned
             * to DATA storage. See [Storage Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the
             * Exadata documentation for details on the impact of the configuration settings on storage. .
             * 
             * @param dataStoragePercentage The percentage assigned to DATA storage (user data and database files). The
             * remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager
             * backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See
             * [Storage Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation
             * for details on the impact of the configuration settings on storage.
             * @return the next definition stage.
             */
            WithCreate withDataStoragePercentage(Integer dataStoragePercentage);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify isLocalBackupEnabled.
         */
        interface WithIsLocalBackupEnabled {
            /**
             * Specifies the isLocalBackupEnabled property: If true, database backup on local Exadata storage is
             * configured for the cloud VM cluster. If false, database backup on local Exadata storage is not available
             * in the cloud VM cluster. .
             * 
             * @param isLocalBackupEnabled If true, database backup on local Exadata storage is configured for the cloud
             * VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster.
             * @return the next definition stage.
             */
            WithCreate withIsLocalBackupEnabled(Boolean isLocalBackupEnabled);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify cloudExadataInfrastructureId.
         */
        interface WithCloudExadataInfrastructureId {
            /**
             * Specifies the cloudExadataInfrastructureId property: Cloud Exadata Infrastructure ID.
             * 
             * @param cloudExadataInfrastructureId Cloud Exadata Infrastructure ID.
             * @return the next definition stage.
             */
            WithCreate withCloudExadataInfrastructureId(String cloudExadataInfrastructureId);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify isSparseDiskgroupEnabled.
         */
        interface WithIsSparseDiskgroupEnabled {
            /**
             * Specifies the isSparseDiskgroupEnabled property: If true, sparse disk group is configured for the cloud
             * VM cluster. If false, sparse disk group is not created. .
             * 
             * @param isSparseDiskgroupEnabled If true, sparse disk group is configured for the cloud VM cluster. If
             * false, sparse disk group is not created.
             * @return the next definition stage.
             */
            WithCreate withIsSparseDiskgroupEnabled(Boolean isSparseDiskgroupEnabled);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify sshPublicKeys.
         */
        interface WithSshPublicKeys {
            /**
             * Specifies the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access
             * to the cloud VM cluster..
             * 
             * @param sshPublicKeys The public key portion of one or more key pairs used for SSH access to the cloud VM
             * cluster.
             * @return the next definition stage.
             */
            WithCreate withSshPublicKeys(List<String> sshPublicKeys);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify licenseModel.
         */
        interface WithLicenseModel {
            /**
             * Specifies the licenseModel property: The Oracle license model that applies to the cloud VM cluster. The
             * default is LICENSE_INCLUDED. .
             * 
             * @param licenseModel The Oracle license model that applies to the cloud VM cluster. The default is
             * LICENSE_INCLUDED.
             * @return the next definition stage.
             */
            WithCreate withLicenseModel(LicenseModel licenseModel);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify scanListenerPortTcp.
         */
        interface WithScanListenerPortTcp {
            /**
             * Specifies the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default
             * port is 1521..
             * 
             * @param scanListenerPortTcp The TCP Single Client Access Name (SCAN) port. The default port is 1521.
             * @return the next definition stage.
             */
            WithCreate withScanListenerPortTcp(Integer scanListenerPortTcp);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify scanListenerPortTcpSsl.
         */
        interface WithScanListenerPortTcpSsl {
            /**
             * Specifies the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The
             * default port is 2484..
             * 
             * @param scanListenerPortTcpSsl The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
             * @return the next definition stage.
             */
            WithCreate withScanListenerPortTcpSsl(Integer scanListenerPortTcpSsl);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify vnetId.
         */
        interface WithVnetId {
            /**
             * Specifies the vnetId property: VNET for network connectivity.
             * 
             * @param vnetId VNET for network connectivity.
             * @return the next definition stage.
             */
            WithCreate withVnetId(String vnetId);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify giVersion.
         */
        interface WithGiVersion {
            /**
             * Specifies the giVersion property: Oracle Grid Infrastructure (GI) software version.
             * 
             * @param giVersion Oracle Grid Infrastructure (GI) software version.
             * @return the next definition stage.
             */
            WithCreate withGiVersion(String giVersion);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify subnetId.
         */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: Client subnet.
             * 
             * @param subnetId Client subnet.
             * @return the next definition stage.
             */
            WithCreate withSubnetId(String subnetId);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify backupSubnetCidr.
         */
        interface WithBackupSubnetCidr {
            /**
             * Specifies the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
             * 
             * @param backupSubnetCidr Client OCI backup subnet CIDR, default is 192.168.252.0/22.
             * @return the next definition stage.
             */
            WithCreate withBackupSubnetCidr(String backupSubnetCidr);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify nsgCidrs.
         */
        interface WithNsgCidrs {
            /**
             * Specifies the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to
             * provision the VM Cluster will be added by default..
             * 
             * @param nsgCidrs CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
             * Cluster will be added by default.
             * @return the next definition stage.
             */
            WithCreate withNsgCidrs(List<NsgCidr> nsgCidrs);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify dataCollectionOptions.
         */
        interface WithDataCollectionOptions {
            /**
             * Specifies the dataCollectionOptions property: Indicates user preferences for the various diagnostic
             * collection options for the VM cluster/Cloud VM cluster/VMBM DBCS..
             * 
             * @param dataCollectionOptions Indicates user preferences for the various diagnostic collection options for
             * the VM cluster/Cloud VM cluster/VMBM DBCS.
             * @return the next definition stage.
             */
            WithCreate withDataCollectionOptions(DataCollectionOptions dataCollectionOptions);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify displayName.
         */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: Display Name.
             * 
             * @param displayName Display Name.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the CloudVmCluster definition allowing to specify dbServers.
         */
        interface WithDbServers {
            /**
             * Specifies the dbServers property: The list of DB servers..
             * 
             * @param dbServers The list of DB servers.
             * @return the next definition stage.
             */
            WithCreate withDbServers(List<String> dbServers);
        }
    }

    /**
     * Begins update for the CloudVmCluster resource.
     * 
     * @return the stage of resource update.
     */
    CloudVmCluster.Update update();

    /**
     * The template for CloudVmCluster update.
     */
    interface Update
        extends UpdateStages.WithTags, UpdateStages.WithStorageSizeInGbs, UpdateStages.WithDataStorageSizeInTbs,
        UpdateStages.WithDbNodeStorageSizeInGbs, UpdateStages.WithMemorySizeInGbs, UpdateStages.WithCpuCoreCount,
        UpdateStages.WithOcpuCount, UpdateStages.WithSshPublicKeys, UpdateStages.WithLicenseModel,
        UpdateStages.WithDataCollectionOptions, UpdateStages.WithDisplayName, UpdateStages.WithComputeNodes {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        CloudVmCluster apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        CloudVmCluster apply(Context context);
    }

    /**
     * The CloudVmCluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the CloudVmCluster update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify storageSizeInGbs.
         */
        interface WithStorageSizeInGbs {
            /**
             * Specifies the storageSizeInGbs property: The data disk group size to be allocated in GBs per VM..
             * 
             * @param storageSizeInGbs The data disk group size to be allocated in GBs per VM.
             * @return the next definition stage.
             */
            Update withStorageSizeInGbs(Integer storageSizeInGbs);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify dataStorageSizeInTbs.
         */
        interface WithDataStorageSizeInTbs {
            /**
             * Specifies the dataStorageSizeInTbs property: The data disk group size to be allocated in TBs..
             * 
             * @param dataStorageSizeInTbs The data disk group size to be allocated in TBs.
             * @return the next definition stage.
             */
            Update withDataStorageSizeInTbs(Double dataStorageSizeInTbs);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify dbNodeStorageSizeInGbs.
         */
        interface WithDbNodeStorageSizeInGbs {
            /**
             * Specifies the dbNodeStorageSizeInGbs property: The local node storage to be allocated in GBs..
             * 
             * @param dbNodeStorageSizeInGbs The local node storage to be allocated in GBs.
             * @return the next definition stage.
             */
            Update withDbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify memorySizeInGbs.
         */
        interface WithMemorySizeInGbs {
            /**
             * Specifies the memorySizeInGbs property: The memory to be allocated in GBs..
             * 
             * @param memorySizeInGbs The memory to be allocated in GBs.
             * @return the next definition stage.
             */
            Update withMemorySizeInGbs(Integer memorySizeInGbs);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify cpuCoreCount.
         */
        interface WithCpuCoreCount {
            /**
             * Specifies the cpuCoreCount property: The number of CPU cores enabled on the cloud VM cluster..
             * 
             * @param cpuCoreCount The number of CPU cores enabled on the cloud VM cluster.
             * @return the next definition stage.
             */
            Update withCpuCoreCount(Integer cpuCoreCount);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify ocpuCount.
         */
        interface WithOcpuCount {
            /**
             * Specifies the ocpuCount property: The number of OCPU cores to enable on the cloud VM cluster. Only 1
             * decimal place is allowed for the fractional part..
             * 
             * @param ocpuCount The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is
             * allowed for the fractional part.
             * @return the next definition stage.
             */
            Update withOcpuCount(Float ocpuCount);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify sshPublicKeys.
         */
        interface WithSshPublicKeys {
            /**
             * Specifies the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access
             * to the cloud VM cluster..
             * 
             * @param sshPublicKeys The public key portion of one or more key pairs used for SSH access to the cloud VM
             * cluster.
             * @return the next definition stage.
             */
            Update withSshPublicKeys(List<String> sshPublicKeys);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify licenseModel.
         */
        interface WithLicenseModel {
            /**
             * Specifies the licenseModel property: The Oracle license model that applies to the cloud VM cluster. The
             * default is LICENSE_INCLUDED. .
             * 
             * @param licenseModel The Oracle license model that applies to the cloud VM cluster. The default is
             * LICENSE_INCLUDED.
             * @return the next definition stage.
             */
            Update withLicenseModel(LicenseModel licenseModel);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify dataCollectionOptions.
         */
        interface WithDataCollectionOptions {
            /**
             * Specifies the dataCollectionOptions property: Indicates user preferences for the various diagnostic
             * collection options for the VM cluster/Cloud VM cluster/VMBM DBCS..
             * 
             * @param dataCollectionOptions Indicates user preferences for the various diagnostic collection options for
             * the VM cluster/Cloud VM cluster/VMBM DBCS.
             * @return the next definition stage.
             */
            Update withDataCollectionOptions(DataCollectionOptions dataCollectionOptions);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify displayName.
         */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: Display Name.
             * 
             * @param displayName Display Name.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the CloudVmCluster update allowing to specify computeNodes.
         */
        interface WithComputeNodes {
            /**
             * Specifies the computeNodes property: The list of compute servers to be added to the cloud VM cluster..
             * 
             * @param computeNodes The list of compute servers to be added to the cloud VM cluster.
             * @return the next definition stage.
             */
            Update withComputeNodes(List<String> computeNodes);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    CloudVmCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CloudVmCluster refresh(Context context);

    /**
     * Add VMs to the VM Cluster.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloudVmCluster resource definition.
     */
    CloudVmCluster addVms(AddRemoveDbNode body);

    /**
     * Add VMs to the VM Cluster.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloudVmCluster resource definition.
     */
    CloudVmCluster addVms(AddRemoveDbNode body, Context context);

    /**
     * List Private IP Addresses by the provided filter.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of PrivateIpAddressProperties along with {@link Response}.
     */
    Response<List<PrivateIpAddressProperties>> listPrivateIpAddressesWithResponse(PrivateIpAddressesFilter body,
        Context context);

    /**
     * List Private IP Addresses by the provided filter.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of PrivateIpAddressProperties.
     */
    List<PrivateIpAddressProperties> listPrivateIpAddresses(PrivateIpAddressesFilter body);

    /**
     * Remove VMs from the VM Cluster.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloudVmCluster resource definition.
     */
    CloudVmCluster removeVms(AddRemoveDbNode body);

    /**
     * Remove VMs from the VM Cluster.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloudVmCluster resource definition.
     */
    CloudVmCluster removeVms(AddRemoveDbNode body, Context context);
}
