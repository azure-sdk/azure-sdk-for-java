// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracle.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.oracle.fluent.models.CloudVmClusterInner;
import com.azure.resourcemanager.oracle.models.AddRemoveDbNode;
import com.azure.resourcemanager.oracle.models.CloudVmCluster;
import com.azure.resourcemanager.oracle.models.CloudVmClusterProvisioningState;
import com.azure.resourcemanager.oracle.models.CloudVmClusterUpdate;
import com.azure.resourcemanager.oracle.models.DataCollectionOptions;
import com.azure.resourcemanager.oracle.models.DiskRedundancy;
import com.azure.resourcemanager.oracle.models.ExadataIormConfig;
import com.azure.resourcemanager.oracle.models.LicenseModel;
import com.azure.resourcemanager.oracle.models.PrivateIpAddressProperties;
import com.azure.resourcemanager.oracle.models.PrivateIpAddressesFilter;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CloudVmClusterImpl implements CloudVmCluster, CloudVmCluster.Definition, CloudVmCluster.Update {
    private CloudVmClusterInner innerObject;

    private final com.azure.resourcemanager.oracle.OracleManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String ocid() {
        return this.innerModel().ocid();
    }

    public Long listenerPort() {
        return this.innerModel().listenerPort();
    }

    public Integer nodeCount() {
        return this.innerModel().nodeCount();
    }

    public Integer storageSizeInGbs() {
        return this.innerModel().storageSizeInGbs();
    }

    public Double dataStorageSizeInTbs() {
        return this.innerModel().dataStorageSizeInTbs();
    }

    public Integer dbNodeStorageSizeInGbs() {
        return this.innerModel().dbNodeStorageSizeInGbs();
    }

    public Integer memorySizeInGbs() {
        return this.innerModel().memorySizeInGbs();
    }

    public OffsetDateTime timeCreated() {
        return this.innerModel().timeCreated();
    }

    public String lifecycleDetails() {
        return this.innerModel().lifecycleDetails();
    }

    public String timeZone() {
        return this.innerModel().timeZone();
    }

    public String zoneId() {
        return this.innerModel().zoneId();
    }

    public String hostname() {
        return this.innerModel().hostname();
    }

    public String domain() {
        return this.innerModel().domain();
    }

    public int cpuCoreCount() {
        return this.innerModel().cpuCoreCount();
    }

    public Float ocpuCount() {
        return this.innerModel().ocpuCount();
    }

    public String clusterName() {
        return this.innerModel().clusterName();
    }

    public Integer dataStoragePercentage() {
        return this.innerModel().dataStoragePercentage();
    }

    public Boolean isLocalBackupEnabled() {
        return this.innerModel().isLocalBackupEnabled();
    }

    public String cloudExadataInfrastructureId() {
        return this.innerModel().cloudExadataInfrastructureId();
    }

    public Boolean isSparseDiskgroupEnabled() {
        return this.innerModel().isSparseDiskgroupEnabled();
    }

    public String systemVersion() {
        return this.innerModel().systemVersion();
    }

    public List<String> sshPublicKeys() {
        List<String> inner = this.innerModel().sshPublicKeys();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public LicenseModel licenseModel() {
        return this.innerModel().licenseModel();
    }

    public DiskRedundancy diskRedundancy() {
        return this.innerModel().diskRedundancy();
    }

    public List<String> scanIpIds() {
        List<String> inner = this.innerModel().scanIpIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> vipIds() {
        List<String> inner = this.innerModel().vipIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String scanDnsName() {
        return this.innerModel().scanDnsName();
    }

    public Integer scanListenerPortTcp() {
        return this.innerModel().scanListenerPortTcp();
    }

    public Integer scanListenerPortTcpSsl() {
        return this.innerModel().scanListenerPortTcpSsl();
    }

    public String scanDnsRecordId() {
        return this.innerModel().scanDnsRecordId();
    }

    public String shape() {
        return this.innerModel().shape();
    }

    public CloudVmClusterProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String vnetId() {
        return this.innerModel().vnetId();
    }

    public String giVersion() {
        return this.innerModel().giVersion();
    }

    public String ociUrl() {
        return this.innerModel().ociUrl();
    }

    public String subnetId() {
        return this.innerModel().subnetId();
    }

    public String backupSubnetCidr() {
        return this.innerModel().backupSubnetCidr();
    }

    public DataCollectionOptions dataCollectionOptions() {
        return this.innerModel().dataCollectionOptions();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public List<String> computeNodes() {
        List<String> inner = this.innerModel().computeNodes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ExadataIormConfig iormConfigCache() {
        return this.innerModel().iormConfigCache();
    }

    public String lastUpdateHistoryEntryId() {
        return this.innerModel().lastUpdateHistoryEntryId();
    }

    public List<String> dbServers() {
        List<String> inner = this.innerModel().dbServers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String compartmentId() {
        return this.innerModel().compartmentId();
    }

    public String subnetOcid() {
        return this.innerModel().subnetOcid();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CloudVmClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.oracle.OracleManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String cloudvmclustername;

    private CloudVmClusterUpdate updateProperties;

    public CloudVmClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CloudVmCluster create() {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters().createOrUpdate(resourceGroupName,
            cloudvmclustername, this.innerModel(), Context.NONE);
        return this;
    }

    public CloudVmCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters().createOrUpdate(resourceGroupName,
            cloudvmclustername, this.innerModel(), context);
        return this;
    }

    CloudVmClusterImpl(String name, com.azure.resourcemanager.oracle.OracleManager serviceManager) {
        this.innerObject = new CloudVmClusterInner();
        this.serviceManager = serviceManager;
        this.cloudvmclustername = name;
    }

    public CloudVmClusterImpl update() {
        this.updateProperties = new CloudVmClusterUpdate();
        return this;
    }

    public CloudVmCluster apply() {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters().update(resourceGroupName,
            cloudvmclustername, updateProperties, Context.NONE);
        return this;
    }

    public CloudVmCluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters().update(resourceGroupName,
            cloudvmclustername, updateProperties, context);
        return this;
    }

    CloudVmClusterImpl(CloudVmClusterInner innerObject, com.azure.resourcemanager.oracle.OracleManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.cloudvmclustername = Utils.getValueFromIdByName(innerObject.id(), "cloudVmClusters");
    }

    public CloudVmCluster refresh() {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters()
            .getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, Context.NONE).getValue();
        return this;
    }

    public CloudVmCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getCloudVmClusters()
            .getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, context).getValue();
        return this;
    }

    public CloudVmCluster addVms(AddRemoveDbNode body) {
        return serviceManager.cloudVmClusters().addVms(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster addVms(AddRemoveDbNode body, Context context) {
        return serviceManager.cloudVmClusters().addVms(resourceGroupName, cloudvmclustername, body, context);
    }

    public Response<List<PrivateIpAddressProperties>> listPrivateIpAddressesWithResponse(PrivateIpAddressesFilter body,
        Context context) {
        return serviceManager.cloudVmClusters().listPrivateIpAddressesWithResponse(resourceGroupName,
            cloudvmclustername, body, context);
    }

    public List<PrivateIpAddressProperties> listPrivateIpAddresses(PrivateIpAddressesFilter body) {
        return serviceManager.cloudVmClusters().listPrivateIpAddresses(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster removeVms(AddRemoveDbNode body) {
        return serviceManager.cloudVmClusters().removeVms(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster removeVms(AddRemoveDbNode body, Context context) {
        return serviceManager.cloudVmClusters().removeVms(resourceGroupName, cloudvmclustername, body, context);
    }

    public CloudVmClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CloudVmClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CloudVmClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public CloudVmClusterImpl withDataStorageSizeInTbs(Double dataStorageSizeInTbs) {
        if (isInCreateMode()) {
            this.innerModel().withDataStorageSizeInTbs(dataStorageSizeInTbs);
            return this;
        } else {
            this.updateProperties.withDataStorageSizeInTbs(dataStorageSizeInTbs);
            return this;
        }
    }

    public CloudVmClusterImpl withDbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
        if (isInCreateMode()) {
            this.innerModel().withDbNodeStorageSizeInGbs(dbNodeStorageSizeInGbs);
            return this;
        } else {
            this.updateProperties.withDbNodeStorageSizeInGbs(dbNodeStorageSizeInGbs);
            return this;
        }
    }

    public CloudVmClusterImpl withMemorySizeInGbs(Integer memorySizeInGbs) {
        if (isInCreateMode()) {
            this.innerModel().withMemorySizeInGbs(memorySizeInGbs);
            return this;
        } else {
            this.updateProperties.withMemorySizeInGbs(memorySizeInGbs);
            return this;
        }
    }

    public CloudVmClusterImpl withTimeZone(String timeZone) {
        this.innerModel().withTimeZone(timeZone);
        return this;
    }

    public CloudVmClusterImpl withZoneId(String zoneId) {
        this.innerModel().withZoneId(zoneId);
        return this;
    }

    public CloudVmClusterImpl withHostname(String hostname) {
        this.innerModel().withHostname(hostname);
        return this;
    }

    public CloudVmClusterImpl withDomain(String domain) {
        this.innerModel().withDomain(domain);
        return this;
    }

    public CloudVmClusterImpl withCpuCoreCount(int cpuCoreCount) {
        this.innerModel().withCpuCoreCount(cpuCoreCount);
        return this;
    }

    public CloudVmClusterImpl withOcpuCount(Float ocpuCount) {
        if (isInCreateMode()) {
            this.innerModel().withOcpuCount(ocpuCount);
            return this;
        } else {
            this.updateProperties.withOcpuCount(ocpuCount);
            return this;
        }
    }

    public CloudVmClusterImpl withClusterName(String clusterName) {
        this.innerModel().withClusterName(clusterName);
        return this;
    }

    public CloudVmClusterImpl withDataStoragePercentage(Integer dataStoragePercentage) {
        this.innerModel().withDataStoragePercentage(dataStoragePercentage);
        return this;
    }

    public CloudVmClusterImpl withIsLocalBackupEnabled(Boolean isLocalBackupEnabled) {
        this.innerModel().withIsLocalBackupEnabled(isLocalBackupEnabled);
        return this;
    }

    public CloudVmClusterImpl withCloudExadataInfrastructureId(String cloudExadataInfrastructureId) {
        this.innerModel().withCloudExadataInfrastructureId(cloudExadataInfrastructureId);
        return this;
    }

    public CloudVmClusterImpl withIsSparseDiskgroupEnabled(Boolean isSparseDiskgroupEnabled) {
        this.innerModel().withIsSparseDiskgroupEnabled(isSparseDiskgroupEnabled);
        return this;
    }

    public CloudVmClusterImpl withSshPublicKeys(List<String> sshPublicKeys) {
        if (isInCreateMode()) {
            this.innerModel().withSshPublicKeys(sshPublicKeys);
            return this;
        } else {
            this.updateProperties.withSshPublicKeys(sshPublicKeys);
            return this;
        }
    }

    public CloudVmClusterImpl withLicenseModel(LicenseModel licenseModel) {
        if (isInCreateMode()) {
            this.innerModel().withLicenseModel(licenseModel);
            return this;
        } else {
            this.updateProperties.withLicenseModel(licenseModel);
            return this;
        }
    }

    public CloudVmClusterImpl withScanListenerPortTcp(Integer scanListenerPortTcp) {
        this.innerModel().withScanListenerPortTcp(scanListenerPortTcp);
        return this;
    }

    public CloudVmClusterImpl withScanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
        this.innerModel().withScanListenerPortTcpSsl(scanListenerPortTcpSsl);
        return this;
    }

    public CloudVmClusterImpl withVnetId(String vnetId) {
        this.innerModel().withVnetId(vnetId);
        return this;
    }

    public CloudVmClusterImpl withGiVersion(String giVersion) {
        this.innerModel().withGiVersion(giVersion);
        return this;
    }

    public CloudVmClusterImpl withSubnetId(String subnetId) {
        this.innerModel().withSubnetId(subnetId);
        return this;
    }

    public CloudVmClusterImpl withBackupSubnetCidr(String backupSubnetCidr) {
        this.innerModel().withBackupSubnetCidr(backupSubnetCidr);
        return this;
    }

    public CloudVmClusterImpl withDataCollectionOptions(DataCollectionOptions dataCollectionOptions) {
        if (isInCreateMode()) {
            this.innerModel().withDataCollectionOptions(dataCollectionOptions);
            return this;
        } else {
            this.updateProperties.withDataCollectionOptions(dataCollectionOptions);
            return this;
        }
    }

    public CloudVmClusterImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.innerModel().withDisplayName(displayName);
            return this;
        } else {
            this.updateProperties.withDisplayName(displayName);
            return this;
        }
    }

    public CloudVmClusterImpl withDbServers(List<String> dbServers) {
        this.innerModel().withDbServers(dbServers);
        return this;
    }

    public CloudVmClusterImpl withStorageSizeInGbs(Integer storageSizeInGbs) {
        this.updateProperties.withStorageSizeInGbs(storageSizeInGbs);
        return this;
    }

    public CloudVmClusterImpl withCpuCoreCount(Integer cpuCoreCount) {
        this.updateProperties.withCpuCoreCount(cpuCoreCount);
        return this;
    }

    public CloudVmClusterImpl withComputeNodes(List<String> computeNodes) {
        this.updateProperties.withComputeNodes(computeNodes);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
