// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracle.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracle.fluent.GiVersionsClient;
import com.azure.resourcemanager.oracle.fluent.models.GiVersionInner;
import com.azure.resourcemanager.oracle.models.GiVersion;
import com.azure.resourcemanager.oracle.models.GiVersions;

public final class GiVersionsImpl implements GiVersions {
    private static final ClientLogger LOGGER = new ClientLogger(GiVersionsImpl.class);

    private final GiVersionsClient innerClient;

    private final com.azure.resourcemanager.oracle.OracleManager serviceManager;

    public GiVersionsImpl(GiVersionsClient innerClient, com.azure.resourcemanager.oracle.OracleManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GiVersion> listByLocation(String location) {
        PagedIterable<GiVersionInner> inner = this.serviceClient().listByLocation(location);
        return Utils.mapPage(inner, inner1 -> new GiVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<GiVersion> listByLocation(String location, Context context) {
        PagedIterable<GiVersionInner> inner = this.serviceClient().listByLocation(location, context);
        return Utils.mapPage(inner, inner1 -> new GiVersionImpl(inner1, this.manager()));
    }

    public Response<GiVersion> getWithResponse(String location, String giversionname, Context context) {
        Response<GiVersionInner> inner = this.serviceClient().getWithResponse(location, giversionname, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GiVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GiVersion get(String location, String giversionname) {
        GiVersionInner inner = this.serviceClient().get(location, giversionname);
        if (inner != null) {
            return new GiVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GiVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oracle.OracleManager manager() {
        return this.serviceManager;
    }
}
