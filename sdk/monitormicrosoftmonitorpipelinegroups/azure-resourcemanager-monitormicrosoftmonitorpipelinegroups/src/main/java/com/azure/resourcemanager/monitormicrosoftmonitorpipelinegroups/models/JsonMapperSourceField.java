// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * JsonArrayMapper source field used to describe the field from which the json array will be read.
 */
@Fluent
public final class JsonMapperSourceField implements JsonSerializable<JsonMapperSourceField> {
    /*
     * Define a source field name from which the json array mapper will read the json array. Leaving this empty, means
     * reading the body of the message itself.
     */
    private String fieldName;

    /**
     * Creates an instance of JsonMapperSourceField class.
     */
    public JsonMapperSourceField() {
    }

    /**
     * Get the fieldName property: Define a source field name from which the json array mapper will read the json array.
     * Leaving this empty, means reading the body of the message itself.
     * 
     * @return the fieldName value.
     */
    public String fieldName() {
        return this.fieldName;
    }

    /**
     * Set the fieldName property: Define a source field name from which the json array mapper will read the json array.
     * Leaving this empty, means reading the body of the message itself.
     * 
     * @param fieldName the fieldName value to set.
     * @return the JsonMapperSourceField object itself.
     */
    public JsonMapperSourceField withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldName", this.fieldName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonMapperSourceField from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonMapperSourceField if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JsonMapperSourceField.
     */
    public static JsonMapperSourceField fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonMapperSourceField deserializedJsonMapperSourceField = new JsonMapperSourceField();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldName".equals(jsonFieldName)) {
                    deserializedJsonMapperSourceField.fieldName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonMapperSourceField;
        });
    }
}
