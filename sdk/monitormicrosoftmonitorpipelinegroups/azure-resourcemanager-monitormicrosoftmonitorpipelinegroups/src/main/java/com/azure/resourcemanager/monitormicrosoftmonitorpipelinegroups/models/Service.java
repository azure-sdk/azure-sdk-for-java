// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service Info.
 */
@Fluent
public final class Service implements JsonSerializable<Service> {
    /*
     * Pipelines belonging to a given pipeline group.
     */
    private List<Pipeline> pipelines;

    /*
     * Persistence options to all pipelines in the instance.
     */
    private PersistenceConfigurations persistence;

    /**
     * Creates an instance of Service class.
     */
    public Service() {
    }

    /**
     * Get the pipelines property: Pipelines belonging to a given pipeline group.
     * 
     * @return the pipelines value.
     */
    public List<Pipeline> pipelines() {
        return this.pipelines;
    }

    /**
     * Set the pipelines property: Pipelines belonging to a given pipeline group.
     * 
     * @param pipelines the pipelines value to set.
     * @return the Service object itself.
     */
    public Service withPipelines(List<Pipeline> pipelines) {
        this.pipelines = pipelines;
        return this;
    }

    /**
     * Get the persistence property: Persistence options to all pipelines in the instance.
     * 
     * @return the persistence value.
     */
    public PersistenceConfigurations persistence() {
        return this.persistence;
    }

    /**
     * Set the persistence property: Persistence options to all pipelines in the instance.
     * 
     * @param persistence the persistence value to set.
     * @return the Service object itself.
     */
    public Service withPersistence(PersistenceConfigurations persistence) {
        this.persistence = persistence;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pipelines() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property pipelines in model Service"));
        } else {
            pipelines().forEach(e -> e.validate());
        }
        if (persistence() != null) {
            persistence().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Service.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("pipelines", this.pipelines, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("persistence", this.persistence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Service from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Service if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Service.
     */
    public static Service fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Service deserializedService = new Service();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipelines".equals(fieldName)) {
                    List<Pipeline> pipelines = reader.readArray(reader1 -> Pipeline.fromJson(reader1));
                    deserializedService.pipelines = pipelines;
                } else if ("persistence".equals(fieldName)) {
                    deserializedService.persistence = PersistenceConfigurations.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedService;
        });
    }
}
