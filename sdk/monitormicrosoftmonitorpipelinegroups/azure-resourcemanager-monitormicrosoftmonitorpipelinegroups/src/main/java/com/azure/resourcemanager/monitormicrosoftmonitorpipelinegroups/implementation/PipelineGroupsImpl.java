// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.fluent.PipelineGroupsClient;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.fluent.models.PipelineGroupInner;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.PipelineGroup;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.PipelineGroups;

public final class PipelineGroupsImpl implements PipelineGroups {
    private static final ClientLogger LOGGER = new ClientLogger(PipelineGroupsImpl.class);

    private final PipelineGroupsClient innerClient;

    private final com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.AzureMonitorPipelinesManager serviceManager;

    public PipelineGroupsImpl(PipelineGroupsClient innerClient,
        com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.AzureMonitorPipelinesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PipelineGroup> list() {
        PagedIterable<PipelineGroupInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<PipelineGroup> list(Context context) {
        PagedIterable<PipelineGroupInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<PipelineGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PipelineGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<PipelineGroup> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PipelineGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineGroupImpl(inner1, this.manager()));
    }

    public Response<PipelineGroup> getByResourceGroupWithResponse(String resourceGroupName, String pipelineGroupName,
        Context context) {
        Response<PipelineGroupInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, pipelineGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PipelineGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PipelineGroup getByResourceGroup(String resourceGroupName, String pipelineGroupName) {
        PipelineGroupInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, pipelineGroupName);
        if (inner != null) {
            return new PipelineGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String pipelineGroupName) {
        this.serviceClient().delete(resourceGroupName, pipelineGroupName);
    }

    public void delete(String resourceGroupName, String pipelineGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, pipelineGroupName, context);
    }

    public PipelineGroup getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineGroupName = ResourceManagerUtils.getValueFromIdByName(id, "pipelineGroups");
        if (pipelineGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelineGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, pipelineGroupName, Context.NONE).getValue();
    }

    public Response<PipelineGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineGroupName = ResourceManagerUtils.getValueFromIdByName(id, "pipelineGroups");
        if (pipelineGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelineGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, pipelineGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineGroupName = ResourceManagerUtils.getValueFromIdByName(id, "pipelineGroups");
        if (pipelineGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelineGroups'.", id)));
        }
        this.delete(resourceGroupName, pipelineGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineGroupName = ResourceManagerUtils.getValueFromIdByName(id, "pipelineGroups");
        if (pipelineGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelineGroups'.", id)));
        }
        this.delete(resourceGroupName, pipelineGroupName, context);
    }

    private PipelineGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.AzureMonitorPipelinesManager manager() {
        return this.serviceManager;
    }

    public PipelineGroupImpl define(String name) {
        return new PipelineGroupImpl(name, this.manager());
    }
}
