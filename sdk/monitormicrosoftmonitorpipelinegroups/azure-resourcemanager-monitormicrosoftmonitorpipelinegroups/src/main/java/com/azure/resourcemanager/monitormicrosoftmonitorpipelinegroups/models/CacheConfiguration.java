// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cache configurations.
 */
@Fluent
public final class CacheConfiguration implements JsonSerializable<CacheConfiguration> {
    /*
     * Max storage usage in megabytes.
     */
    private Integer maxStorageUsage;

    /*
     * Retention period in minutes.
     */
    private Integer retentionPeriod;

    /**
     * Creates an instance of CacheConfiguration class.
     */
    public CacheConfiguration() {
    }

    /**
     * Get the maxStorageUsage property: Max storage usage in megabytes.
     * 
     * @return the maxStorageUsage value.
     */
    public Integer maxStorageUsage() {
        return this.maxStorageUsage;
    }

    /**
     * Set the maxStorageUsage property: Max storage usage in megabytes.
     * 
     * @param maxStorageUsage the maxStorageUsage value to set.
     * @return the CacheConfiguration object itself.
     */
    public CacheConfiguration withMaxStorageUsage(Integer maxStorageUsage) {
        this.maxStorageUsage = maxStorageUsage;
        return this;
    }

    /**
     * Get the retentionPeriod property: Retention period in minutes.
     * 
     * @return the retentionPeriod value.
     */
    public Integer retentionPeriod() {
        return this.retentionPeriod;
    }

    /**
     * Set the retentionPeriod property: Retention period in minutes.
     * 
     * @param retentionPeriod the retentionPeriod value to set.
     * @return the CacheConfiguration object itself.
     */
    public CacheConfiguration withRetentionPeriod(Integer retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxStorageUsage", this.maxStorageUsage);
        jsonWriter.writeNumberField("retentionPeriod", this.retentionPeriod);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheConfiguration.
     */
    public static CacheConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheConfiguration deserializedCacheConfiguration = new CacheConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxStorageUsage".equals(fieldName)) {
                    deserializedCacheConfiguration.maxStorageUsage = reader.getNullable(JsonReader::getInt);
                } else if ("retentionPeriod".equals(fieldName)) {
                    deserializedCacheConfiguration.retentionPeriod = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheConfiguration;
        });
    }
}
