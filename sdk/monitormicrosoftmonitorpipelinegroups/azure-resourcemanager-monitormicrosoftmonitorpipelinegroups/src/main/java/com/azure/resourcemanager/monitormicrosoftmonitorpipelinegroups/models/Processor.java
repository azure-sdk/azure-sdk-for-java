// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Processor Info.
 */
@Fluent
public final class Processor implements JsonSerializable<Processor> {
    /*
     * The type of processor.
     */
    private ProcessorType type;

    /*
     * The name of processor.
     */
    private String name;

    /*
     * Batch processor configurations.
     */
    private BatchProcessor batch;

    /**
     * Creates an instance of Processor class.
     */
    public Processor() {
    }

    /**
     * Get the type property: The type of processor.
     * 
     * @return the type value.
     */
    public ProcessorType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of processor.
     * 
     * @param type the type value to set.
     * @return the Processor object itself.
     */
    public Processor withType(ProcessorType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: The name of processor.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of processor.
     * 
     * @param name the name value to set.
     * @return the Processor object itself.
     */
    public Processor withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the batch property: Batch processor configurations.
     * 
     * @return the batch value.
     */
    public BatchProcessor batch() {
        return this.batch;
    }

    /**
     * Set the batch property: Batch processor configurations.
     * 
     * @param batch the batch value to set.
     * @return the Processor object itself.
     */
    public Processor withBatch(BatchProcessor batch) {
        this.batch = batch;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model Processor"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Processor"));
        }
        if (batch() != null) {
            batch().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Processor.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("batch", this.batch);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Processor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Processor if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Processor.
     */
    public static Processor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Processor deserializedProcessor = new Processor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedProcessor.type = ProcessorType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedProcessor.name = reader.getString();
                } else if ("batch".equals(fieldName)) {
                    deserializedProcessor.batch = BatchProcessor.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessor;
        });
    }
}
