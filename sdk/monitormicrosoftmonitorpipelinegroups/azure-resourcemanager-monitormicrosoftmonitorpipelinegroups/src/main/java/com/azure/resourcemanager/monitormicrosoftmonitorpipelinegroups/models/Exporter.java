// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Exporter Info.
 */
@Fluent
public final class Exporter implements JsonSerializable<Exporter> {
    /*
     * The type of exporter.
     */
    private ExporterType type;

    /*
     * The name of exporter.
     */
    private String name;

    /*
     * Azure Monitor Workspace Logs specific configurations.
     */
    private AzureMonitorWorkspaceLogsExporter azureMonitorWorkspaceLogs;

    /*
     * TCP based exporter. Used for pipelineGroup exporter.
     */
    private TcpExporter tcp;

    /**
     * Creates an instance of Exporter class.
     */
    public Exporter() {
    }

    /**
     * Get the type property: The type of exporter.
     * 
     * @return the type value.
     */
    public ExporterType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of exporter.
     * 
     * @param type the type value to set.
     * @return the Exporter object itself.
     */
    public Exporter withType(ExporterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: The name of exporter.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of exporter.
     * 
     * @param name the name value to set.
     * @return the Exporter object itself.
     */
    public Exporter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the azureMonitorWorkspaceLogs property: Azure Monitor Workspace Logs specific configurations.
     * 
     * @return the azureMonitorWorkspaceLogs value.
     */
    public AzureMonitorWorkspaceLogsExporter azureMonitorWorkspaceLogs() {
        return this.azureMonitorWorkspaceLogs;
    }

    /**
     * Set the azureMonitorWorkspaceLogs property: Azure Monitor Workspace Logs specific configurations.
     * 
     * @param azureMonitorWorkspaceLogs the azureMonitorWorkspaceLogs value to set.
     * @return the Exporter object itself.
     */
    public Exporter withAzureMonitorWorkspaceLogs(AzureMonitorWorkspaceLogsExporter azureMonitorWorkspaceLogs) {
        this.azureMonitorWorkspaceLogs = azureMonitorWorkspaceLogs;
        return this;
    }

    /**
     * Get the tcp property: TCP based exporter. Used for pipelineGroup exporter.
     * 
     * @return the tcp value.
     */
    public TcpExporter tcp() {
        return this.tcp;
    }

    /**
     * Set the tcp property: TCP based exporter. Used for pipelineGroup exporter.
     * 
     * @param tcp the tcp value to set.
     * @return the Exporter object itself.
     */
    public Exporter withTcp(TcpExporter tcp) {
        this.tcp = tcp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model Exporter"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Exporter"));
        }
        if (azureMonitorWorkspaceLogs() != null) {
            azureMonitorWorkspaceLogs().validate();
        }
        if (tcp() != null) {
            tcp().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Exporter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("azureMonitorWorkspaceLogs", this.azureMonitorWorkspaceLogs);
        jsonWriter.writeJsonField("tcp", this.tcp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Exporter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Exporter if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Exporter.
     */
    public static Exporter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Exporter deserializedExporter = new Exporter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedExporter.type = ExporterType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedExporter.name = reader.getString();
                } else if ("azureMonitorWorkspaceLogs".equals(fieldName)) {
                    deserializedExporter.azureMonitorWorkspaceLogs = AzureMonitorWorkspaceLogsExporter.fromJson(reader);
                } else if ("tcp".equals(fieldName)) {
                    deserializedExporter.tcp = TcpExporter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExporter;
        });
    }
}
