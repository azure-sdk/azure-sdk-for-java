// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties that need to be specified to create a new pipeline group instance.
 */
@Fluent
public final class PipelineGroupPropertiesUpdate implements JsonSerializable<PipelineGroupPropertiesUpdate> {
    /*
     * Defines the amount of replicas of the pipeline group instance.
     */
    private Integer replicas;

    /*
     * The receivers specified for a pipeline group instance.
     */
    private List<Receiver> receivers;

    /*
     * The processors specified for a pipeline group instance.
     */
    private List<Processor> processors;

    /*
     * The exporters specified for a pipeline group instance.
     */
    private List<Exporter> exporters;

    /*
     * The service section for a given pipeline group instance.
     */
    private ServiceUpdate service;

    /*
     * Networking configurations for the pipeline group instance.
     */
    private List<NetworkingConfiguration> networkingConfigurations;

    /**
     * Creates an instance of PipelineGroupPropertiesUpdate class.
     */
    public PipelineGroupPropertiesUpdate() {
    }

    /**
     * Get the replicas property: Defines the amount of replicas of the pipeline group instance.
     * 
     * @return the replicas value.
     */
    public Integer replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: Defines the amount of replicas of the pipeline group instance.
     * 
     * @param replicas the replicas value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate withReplicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the receivers property: The receivers specified for a pipeline group instance.
     * 
     * @return the receivers value.
     */
    public List<Receiver> receivers() {
        return this.receivers;
    }

    /**
     * Set the receivers property: The receivers specified for a pipeline group instance.
     * 
     * @param receivers the receivers value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate withReceivers(List<Receiver> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * Get the processors property: The processors specified for a pipeline group instance.
     * 
     * @return the processors value.
     */
    public List<Processor> processors() {
        return this.processors;
    }

    /**
     * Set the processors property: The processors specified for a pipeline group instance.
     * 
     * @param processors the processors value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate withProcessors(List<Processor> processors) {
        this.processors = processors;
        return this;
    }

    /**
     * Get the exporters property: The exporters specified for a pipeline group instance.
     * 
     * @return the exporters value.
     */
    public List<Exporter> exporters() {
        return this.exporters;
    }

    /**
     * Set the exporters property: The exporters specified for a pipeline group instance.
     * 
     * @param exporters the exporters value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate withExporters(List<Exporter> exporters) {
        this.exporters = exporters;
        return this;
    }

    /**
     * Get the service property: The service section for a given pipeline group instance.
     * 
     * @return the service value.
     */
    public ServiceUpdate service() {
        return this.service;
    }

    /**
     * Set the service property: The service section for a given pipeline group instance.
     * 
     * @param service the service value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate withService(ServiceUpdate service) {
        this.service = service;
        return this;
    }

    /**
     * Get the networkingConfigurations property: Networking configurations for the pipeline group instance.
     * 
     * @return the networkingConfigurations value.
     */
    public List<NetworkingConfiguration> networkingConfigurations() {
        return this.networkingConfigurations;
    }

    /**
     * Set the networkingConfigurations property: Networking configurations for the pipeline group instance.
     * 
     * @param networkingConfigurations the networkingConfigurations value to set.
     * @return the PipelineGroupPropertiesUpdate object itself.
     */
    public PipelineGroupPropertiesUpdate
        withNetworkingConfigurations(List<NetworkingConfiguration> networkingConfigurations) {
        this.networkingConfigurations = networkingConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (receivers() != null) {
            receivers().forEach(e -> e.validate());
        }
        if (processors() != null) {
            processors().forEach(e -> e.validate());
        }
        if (exporters() != null) {
            exporters().forEach(e -> e.validate());
        }
        if (service() != null) {
            service().validate();
        }
        if (networkingConfigurations() != null) {
            networkingConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("replicas", this.replicas);
        jsonWriter.writeArrayField("receivers", this.receivers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("processors", this.processors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("exporters", this.exporters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("service", this.service);
        jsonWriter.writeArrayField("networkingConfigurations", this.networkingConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineGroupPropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineGroupPropertiesUpdate if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineGroupPropertiesUpdate.
     */
    public static PipelineGroupPropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineGroupPropertiesUpdate deserializedPipelineGroupPropertiesUpdate
                = new PipelineGroupPropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("replicas".equals(fieldName)) {
                    deserializedPipelineGroupPropertiesUpdate.replicas = reader.getNullable(JsonReader::getInt);
                } else if ("receivers".equals(fieldName)) {
                    List<Receiver> receivers = reader.readArray(reader1 -> Receiver.fromJson(reader1));
                    deserializedPipelineGroupPropertiesUpdate.receivers = receivers;
                } else if ("processors".equals(fieldName)) {
                    List<Processor> processors = reader.readArray(reader1 -> Processor.fromJson(reader1));
                    deserializedPipelineGroupPropertiesUpdate.processors = processors;
                } else if ("exporters".equals(fieldName)) {
                    List<Exporter> exporters = reader.readArray(reader1 -> Exporter.fromJson(reader1));
                    deserializedPipelineGroupPropertiesUpdate.exporters = exporters;
                } else if ("service".equals(fieldName)) {
                    deserializedPipelineGroupPropertiesUpdate.service = ServiceUpdate.fromJson(reader);
                } else if ("networkingConfigurations".equals(fieldName)) {
                    List<NetworkingConfiguration> networkingConfigurations
                        = reader.readArray(reader1 -> NetworkingConfiguration.fromJson(reader1));
                    deserializedPipelineGroupPropertiesUpdate.networkingConfigurations = networkingConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineGroupPropertiesUpdate;
        });
    }
}
