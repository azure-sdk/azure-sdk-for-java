// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Batch processor.
 */
@Fluent
public final class BatchProcessor implements JsonSerializable<BatchProcessor> {
    /*
     * Size of the batch.
     */
    private Integer batchSize;

    /*
     * Timeout in milliseconds.
     */
    private Integer timeout;

    /**
     * Creates an instance of BatchProcessor class.
     */
    public BatchProcessor() {
    }

    /**
     * Get the batchSize property: Size of the batch.
     * 
     * @return the batchSize value.
     */
    public Integer batchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: Size of the batch.
     * 
     * @param batchSize the batchSize value to set.
     * @return the BatchProcessor object itself.
     */
    public BatchProcessor withBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * Get the timeout property: Timeout in milliseconds.
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Timeout in milliseconds.
     * 
     * @param timeout the timeout value to set.
     * @return the BatchProcessor object itself.
     */
    public BatchProcessor withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("batchSize", this.batchSize);
        jsonWriter.writeNumberField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchProcessor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchProcessor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchProcessor.
     */
    public static BatchProcessor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchProcessor deserializedBatchProcessor = new BatchProcessor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("batchSize".equals(fieldName)) {
                    deserializedBatchProcessor.batchSize = reader.getNullable(JsonReader::getInt);
                } else if ("timeout".equals(fieldName)) {
                    deserializedBatchProcessor.timeout = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchProcessor;
        });
    }
}
