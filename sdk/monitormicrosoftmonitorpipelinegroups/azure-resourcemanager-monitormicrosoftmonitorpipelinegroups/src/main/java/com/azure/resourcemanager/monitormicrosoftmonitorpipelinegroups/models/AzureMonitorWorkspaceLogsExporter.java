// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Monitor Workspace Logs specific configurations.
 */
@Fluent
public final class AzureMonitorWorkspaceLogsExporter implements JsonSerializable<AzureMonitorWorkspaceLogsExporter> {
    /*
     * API configurations for Azure Monitor workspace exporter.
     */
    private AzureMonitorWorkspaceLogsApiConfig api;

    /*
     * Concurrency configuration for the exporter.
     */
    private ConcurrencyConfiguration concurrency;

    /*
     * Cache configurations.
     */
    private CacheConfiguration cache;

    /**
     * Creates an instance of AzureMonitorWorkspaceLogsExporter class.
     */
    public AzureMonitorWorkspaceLogsExporter() {
    }

    /**
     * Get the api property: API configurations for Azure Monitor workspace exporter.
     * 
     * @return the api value.
     */
    public AzureMonitorWorkspaceLogsApiConfig api() {
        return this.api;
    }

    /**
     * Set the api property: API configurations for Azure Monitor workspace exporter.
     * 
     * @param api the api value to set.
     * @return the AzureMonitorWorkspaceLogsExporter object itself.
     */
    public AzureMonitorWorkspaceLogsExporter withApi(AzureMonitorWorkspaceLogsApiConfig api) {
        this.api = api;
        return this;
    }

    /**
     * Get the concurrency property: Concurrency configuration for the exporter.
     * 
     * @return the concurrency value.
     */
    public ConcurrencyConfiguration concurrency() {
        return this.concurrency;
    }

    /**
     * Set the concurrency property: Concurrency configuration for the exporter.
     * 
     * @param concurrency the concurrency value to set.
     * @return the AzureMonitorWorkspaceLogsExporter object itself.
     */
    public AzureMonitorWorkspaceLogsExporter withConcurrency(ConcurrencyConfiguration concurrency) {
        this.concurrency = concurrency;
        return this;
    }

    /**
     * Get the cache property: Cache configurations.
     * 
     * @return the cache value.
     */
    public CacheConfiguration cache() {
        return this.cache;
    }

    /**
     * Set the cache property: Cache configurations.
     * 
     * @param cache the cache value to set.
     * @return the AzureMonitorWorkspaceLogsExporter object itself.
     */
    public AzureMonitorWorkspaceLogsExporter withCache(CacheConfiguration cache) {
        this.cache = cache;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (api() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property api in model AzureMonitorWorkspaceLogsExporter"));
        } else {
            api().validate();
        }
        if (concurrency() != null) {
            concurrency().validate();
        }
        if (cache() != null) {
            cache().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureMonitorWorkspaceLogsExporter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("api", this.api);
        jsonWriter.writeJsonField("concurrency", this.concurrency);
        jsonWriter.writeJsonField("cache", this.cache);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureMonitorWorkspaceLogsExporter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureMonitorWorkspaceLogsExporter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureMonitorWorkspaceLogsExporter.
     */
    public static AzureMonitorWorkspaceLogsExporter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureMonitorWorkspaceLogsExporter deserializedAzureMonitorWorkspaceLogsExporter
                = new AzureMonitorWorkspaceLogsExporter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("api".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceLogsExporter.api
                        = AzureMonitorWorkspaceLogsApiConfig.fromJson(reader);
                } else if ("concurrency".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceLogsExporter.concurrency
                        = ConcurrencyConfiguration.fromJson(reader);
                } else if ("cache".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceLogsExporter.cache = CacheConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureMonitorWorkspaceLogsExporter;
        });
    }
}
