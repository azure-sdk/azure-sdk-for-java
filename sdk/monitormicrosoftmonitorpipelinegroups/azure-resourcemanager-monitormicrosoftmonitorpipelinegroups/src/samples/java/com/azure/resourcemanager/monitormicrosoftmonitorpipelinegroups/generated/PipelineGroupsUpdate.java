// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.generated;

import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.AzureMonitorWorkspaceLogsApiConfig;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.AzureMonitorWorkspaceLogsExporter;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.ConcurrencyConfiguration;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.Exporter;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.ExporterType;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.Pipeline;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.PipelineGroup;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.PipelineGroupPropertiesUpdate;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.PipelineType;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.Receiver;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.ReceiverType;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.RecordMap;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.SchemaMap;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.ServiceUpdate;
import com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.models.SyslogReceiver;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for PipelineGroups Update.
 */
public final class PipelineGroupsUpdate {
    /*
     * x-ms-original-file:
     * specification/monitor/resource-manager/Microsoft.Monitor/PipelineGroups/preview/2024-10-01-preview/examples/
     * PipelineGroupUpdate.json
     */
    /**
     * Sample code: Updates a PipelineGroup instance.
     * 
     * @param manager Entry point to AzureMonitorPipelinesManager.
     */
    public static void updatesAPipelineGroupInstance(
        com.azure.resourcemanager.monitormicrosoftmonitorpipelinegroups.AzureMonitorPipelinesManager manager) {
        PipelineGroup resource = manager.pipelineGroups()
            .getByResourceGroupWithResponse("myResourceGroup", "plGroup1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("tag1", "A", "tag2", "B"))
            .withProperties(new PipelineGroupPropertiesUpdate().withReplicas(3)
                .withReceivers(Arrays.asList(new Receiver().withType(ReceiverType.SYSLOG)
                    .withName("syslog-receiver1")
                    .withSyslog(new SyslogReceiver().withEndpoint("0.0.0.0:514"))))
                .withProcessors(Arrays.asList())
                .withExporters(Arrays.asList(new Exporter().withType(ExporterType.AZURE_MONITOR_WORKSPACE_LOGS)
                    .withName("my-workspace-logs-exporter1")
                    .withAzureMonitorWorkspaceLogs(new AzureMonitorWorkspaceLogsExporter()
                        .withApi(new AzureMonitorWorkspaceLogsApiConfig()
                            .withDataCollectionEndpointUrl(
                                "https://logs-myingestion-eb0s.eastus-1.ingest.monitor.azure.com")
                            .withStream("Custom-MyTableRawData_CL")
                            .withDataCollectionRule("dcr-00000000000000000000000000000000")
                            .withSchema(new SchemaMap()
                                .withRecordMap(Arrays.asList(new RecordMap().withFrom("body").withTo("Body"),
                                    new RecordMap().withFrom("severity_text").withTo("SeverityText"),
                                    new RecordMap().withFrom("time_unix_nano").withTo("TimeGenerated")))))
                        .withConcurrency(new ConcurrencyConfiguration().withWorkerCount(4).withBatchQueueSize(100)))))
                .withService(
                    new ServiceUpdate().withPipelines(Arrays.asList(new Pipeline().withName("MyPipelineForLogs1")
                        .withType(PipelineType.LOGS)
                        .withReceivers(Arrays.asList("syslog-receiver1"))
                        .withProcessors(Arrays.asList())
                        .withExporters(Arrays.asList("my-workspace-logs-exporter1"))))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
