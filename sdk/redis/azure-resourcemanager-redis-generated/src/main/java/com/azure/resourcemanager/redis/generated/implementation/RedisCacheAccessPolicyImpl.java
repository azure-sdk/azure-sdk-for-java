// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisCacheAccessPolicyInner;
import com.azure.resourcemanager.redis.generated.models.AccessPolicyProvisioningState;
import com.azure.resourcemanager.redis.generated.models.AccessPolicyType;
import com.azure.resourcemanager.redis.generated.models.RedisCacheAccessPolicy;

public final class RedisCacheAccessPolicyImpl
    implements RedisCacheAccessPolicy, RedisCacheAccessPolicy.Definition, RedisCacheAccessPolicy.Update {
    private RedisCacheAccessPolicyInner innerObject;

    private final com.azure.resourcemanager.redis.generated.RedisManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public AccessPolicyProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AccessPolicyType typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public String permissions() {
        return this.innerModel().permissions();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public RedisCacheAccessPolicyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.redis.generated.RedisManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String cacheName;

    private String accessPolicyName;

    public RedisCacheAccessPolicyImpl withExistingRedi(String resourceGroupName, String cacheName) {
        this.resourceGroupName = resourceGroupName;
        this.cacheName = cacheName;
        return this;
    }

    public RedisCacheAccessPolicy create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .createUpdate(resourceGroupName, cacheName, accessPolicyName, this.innerModel(), Context.NONE);
        return this;
    }

    public RedisCacheAccessPolicy create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .createUpdate(resourceGroupName, cacheName, accessPolicyName, this.innerModel(), context);
        return this;
    }

    RedisCacheAccessPolicyImpl(String name, com.azure.resourcemanager.redis.generated.RedisManager serviceManager) {
        this.innerObject = new RedisCacheAccessPolicyInner();
        this.serviceManager = serviceManager;
        this.accessPolicyName = name;
    }

    public RedisCacheAccessPolicyImpl update() {
        return this;
    }

    public RedisCacheAccessPolicy apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .createUpdate(resourceGroupName, cacheName, accessPolicyName, this.innerModel(), Context.NONE);
        return this;
    }

    public RedisCacheAccessPolicy apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .createUpdate(resourceGroupName, cacheName, accessPolicyName, this.innerModel(), context);
        return this;
    }

    RedisCacheAccessPolicyImpl(
        RedisCacheAccessPolicyInner innerObject,
        com.azure.resourcemanager.redis.generated.RedisManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.cacheName = Utils.getValueFromIdByName(innerObject.id(), "redis");
        this.accessPolicyName = Utils.getValueFromIdByName(innerObject.id(), "accessPolicies");
    }

    public RedisCacheAccessPolicy refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .getWithResponse(resourceGroupName, cacheName, accessPolicyName, Context.NONE)
                .getValue();
        return this;
    }

    public RedisCacheAccessPolicy refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessPolicies()
                .getWithResponse(resourceGroupName, cacheName, accessPolicyName, context)
                .getValue();
        return this;
    }

    public RedisCacheAccessPolicyImpl withPermissions(String permissions) {
        this.innerModel().withPermissions(permissions);
        return this;
    }
}
