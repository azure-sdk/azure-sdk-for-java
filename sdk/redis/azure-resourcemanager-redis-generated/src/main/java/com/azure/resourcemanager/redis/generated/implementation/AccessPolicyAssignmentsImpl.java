// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redis.generated.fluent.AccessPolicyAssignmentsClient;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisCacheAccessPolicyAssignmentInner;
import com.azure.resourcemanager.redis.generated.models.AccessPolicyAssignments;
import com.azure.resourcemanager.redis.generated.models.RedisCacheAccessPolicyAssignment;

public final class AccessPolicyAssignmentsImpl implements AccessPolicyAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(AccessPolicyAssignmentsImpl.class);

    private final AccessPolicyAssignmentsClient innerClient;

    private final com.azure.resourcemanager.redis.generated.RedisManager serviceManager;

    public AccessPolicyAssignmentsImpl(AccessPolicyAssignmentsClient innerClient,
        com.azure.resourcemanager.redis.generated.RedisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String cacheName, String accessPolicyAssignmentName) {
        this.serviceClient().delete(resourceGroupName, cacheName, accessPolicyAssignmentName);
    }

    public void delete(String resourceGroupName, String cacheName, String accessPolicyAssignmentName, Context context) {
        this.serviceClient().delete(resourceGroupName, cacheName, accessPolicyAssignmentName, context);
    }

    public Response<RedisCacheAccessPolicyAssignment> getWithResponse(String resourceGroupName, String cacheName,
        String accessPolicyAssignmentName, Context context) {
        Response<RedisCacheAccessPolicyAssignmentInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, cacheName, accessPolicyAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RedisCacheAccessPolicyAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RedisCacheAccessPolicyAssignment get(String resourceGroupName, String cacheName,
        String accessPolicyAssignmentName) {
        RedisCacheAccessPolicyAssignmentInner inner
            = this.serviceClient().get(resourceGroupName, cacheName, accessPolicyAssignmentName);
        if (inner != null) {
            return new RedisCacheAccessPolicyAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RedisCacheAccessPolicyAssignment> list(String resourceGroupName, String cacheName) {
        PagedIterable<RedisCacheAccessPolicyAssignmentInner> inner
            = this.serviceClient().list(resourceGroupName, cacheName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RedisCacheAccessPolicyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RedisCacheAccessPolicyAssignment> list(String resourceGroupName, String cacheName,
        Context context) {
        PagedIterable<RedisCacheAccessPolicyAssignmentInner> inner
            = this.serviceClient().list(resourceGroupName, cacheName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RedisCacheAccessPolicyAssignmentImpl(inner1, this.manager()));
    }

    public RedisCacheAccessPolicyAssignment getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = ResourceManagerUtils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "accessPolicyAssignments");
        if (accessPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicyAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, accessPolicyAssignmentName, Context.NONE).getValue();
    }

    public Response<RedisCacheAccessPolicyAssignment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = ResourceManagerUtils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "accessPolicyAssignments");
        if (accessPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicyAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, accessPolicyAssignmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = ResourceManagerUtils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "accessPolicyAssignments");
        if (accessPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicyAssignments'.", id)));
        }
        this.delete(resourceGroupName, cacheName, accessPolicyAssignmentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = ResourceManagerUtils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "accessPolicyAssignments");
        if (accessPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicyAssignments'.", id)));
        }
        this.delete(resourceGroupName, cacheName, accessPolicyAssignmentName, context);
    }

    private AccessPolicyAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.redis.generated.RedisManager manager() {
        return this.serviceManager;
    }

    public RedisCacheAccessPolicyAssignmentImpl define(String name) {
        return new RedisCacheAccessPolicyAssignmentImpl(name, this.manager());
    }
}
