// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redis.generated.fluent.AccessPoliciesClient;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisCacheAccessPolicyInner;
import com.azure.resourcemanager.redis.generated.models.AccessPolicies;
import com.azure.resourcemanager.redis.generated.models.RedisCacheAccessPolicy;

public final class AccessPoliciesImpl implements AccessPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(AccessPoliciesImpl.class);

    private final AccessPoliciesClient innerClient;

    private final com.azure.resourcemanager.redis.generated.RedisManager serviceManager;

    public AccessPoliciesImpl(
        AccessPoliciesClient innerClient, com.azure.resourcemanager.redis.generated.RedisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public RedisCacheAccessPolicy delete(String resourceGroupName, String cacheName, String accessPolicyName) {
        RedisCacheAccessPolicyInner inner = this.serviceClient().delete(resourceGroupName, cacheName, accessPolicyName);
        if (inner != null) {
            return new RedisCacheAccessPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RedisCacheAccessPolicy delete(
        String resourceGroupName, String cacheName, String accessPolicyName, Context context) {
        RedisCacheAccessPolicyInner inner =
            this.serviceClient().delete(resourceGroupName, cacheName, accessPolicyName, context);
        if (inner != null) {
            return new RedisCacheAccessPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RedisCacheAccessPolicy> getWithResponse(
        String resourceGroupName, String cacheName, String accessPolicyName, Context context) {
        Response<RedisCacheAccessPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, cacheName, accessPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RedisCacheAccessPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RedisCacheAccessPolicy get(String resourceGroupName, String cacheName, String accessPolicyName) {
        RedisCacheAccessPolicyInner inner = this.serviceClient().get(resourceGroupName, cacheName, accessPolicyName);
        if (inner != null) {
            return new RedisCacheAccessPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RedisCacheAccessPolicy> list(String resourceGroupName, String cacheName) {
        PagedIterable<RedisCacheAccessPolicyInner> inner = this.serviceClient().list(resourceGroupName, cacheName);
        return Utils.mapPage(inner, inner1 -> new RedisCacheAccessPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<RedisCacheAccessPolicy> list(String resourceGroupName, String cacheName, Context context) {
        PagedIterable<RedisCacheAccessPolicyInner> inner =
            this.serviceClient().list(resourceGroupName, cacheName, context);
        return Utils.mapPage(inner, inner1 -> new RedisCacheAccessPolicyImpl(inner1, this.manager()));
    }

    public RedisCacheAccessPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyName = Utils.getValueFromIdByName(id, "accessPolicies");
        if (accessPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, accessPolicyName, Context.NONE).getValue();
    }

    public Response<RedisCacheAccessPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyName = Utils.getValueFromIdByName(id, "accessPolicies");
        if (accessPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, accessPolicyName, context);
    }

    public RedisCacheAccessPolicy deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyName = Utils.getValueFromIdByName(id, "accessPolicies");
        if (accessPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicies'.", id)));
        }
        return this.delete(resourceGroupName, cacheName, accessPolicyName, Context.NONE);
    }

    public RedisCacheAccessPolicy deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String accessPolicyName = Utils.getValueFromIdByName(id, "accessPolicies");
        if (accessPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'accessPolicies'.", id)));
        }
        return this.delete(resourceGroupName, cacheName, accessPolicyName, context);
    }

    private AccessPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.redis.generated.RedisManager manager() {
        return this.serviceManager;
    }

    public RedisCacheAccessPolicyImpl define(String name) {
        return new RedisCacheAccessPolicyImpl(name, this.manager());
    }
}
