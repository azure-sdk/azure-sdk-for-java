// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of AccessPolicies. */
public interface AccessPolicies {
    /**
     * Deletes the access policy from a redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String cacheName, String accessPolicyName);

    /**
     * Deletes the access policy from a redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String cacheName, String accessPolicyName, Context context);

    /**
     * Gets the detailed information about an access policy of a redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed information about an access policy of a redis cache along with {@link Response}.
     */
    Response<RedisCacheAccessPolicy> getWithResponse(
        String resourceGroupName, String cacheName, String accessPolicyName, Context context);

    /**
     * Gets the detailed information about an access policy of a redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed information about an access policy of a redis cache.
     */
    RedisCacheAccessPolicy get(String resourceGroupName, String cacheName, String accessPolicyName);

    /**
     * Gets the list of access policies associated with this redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of access policies associated with this redis cache as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<RedisCacheAccessPolicy> list(String resourceGroupName, String cacheName);

    /**
     * Gets the list of access policies associated with this redis cache.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of access policies associated with this redis cache as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<RedisCacheAccessPolicy> list(String resourceGroupName, String cacheName, Context context);

    /**
     * Gets the detailed information about an access policy of a redis cache.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed information about an access policy of a redis cache along with {@link Response}.
     */
    RedisCacheAccessPolicy getById(String id);

    /**
     * Gets the detailed information about an access policy of a redis cache.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed information about an access policy of a redis cache along with {@link Response}.
     */
    Response<RedisCacheAccessPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the access policy from a redis cache.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the access policy from a redis cache.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new RedisCacheAccessPolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new RedisCacheAccessPolicy definition.
     */
    RedisCacheAccessPolicy.DefinitionStages.Blank define(String name);
}
