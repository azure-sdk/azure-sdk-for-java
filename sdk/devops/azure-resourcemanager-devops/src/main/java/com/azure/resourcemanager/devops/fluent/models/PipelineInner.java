// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devops.models.BootstrapConfiguration;
import com.azure.resourcemanager.devops.models.OrganizationReference;
import com.azure.resourcemanager.devops.models.ProjectReference;
import java.io.IOException;
import java.util.Map;

/**
 * Azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for Azure
 * resources.
 */
@Fluent
public final class PipelineInner extends Resource {
    /*
     * Custom properties of the Pipeline.
     */
    private PipelineProperties innerProperties = new PipelineProperties();

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PipelineInner class.
     */
    public PipelineInner() {
    }

    /**
     * Get the innerProperties property: Custom properties of the Pipeline.
     * 
     * @return the innerProperties value.
     */
    private PipelineProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PipelineInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PipelineInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the pipelineId property: Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     * 
     * @return the pipelineId value.
     */
    public Integer pipelineId() {
        return this.innerProperties() == null ? null : this.innerProperties().pipelineId();
    }

    /**
     * Get the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     * 
     * @return the organization value.
     */
    public OrganizationReference organization() {
        return this.innerProperties() == null ? null : this.innerProperties().organization();
    }

    /**
     * Set the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     * 
     * @param organization the organization value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withOrganization(OrganizationReference organization) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withOrganization(organization);
        return this;
    }

    /**
     * Get the project property: Reference to the Azure DevOps Project containing the Pipeline.
     * 
     * @return the project value.
     */
    public ProjectReference project() {
        return this.innerProperties() == null ? null : this.innerProperties().project();
    }

    /**
     * Set the project property: Reference to the Azure DevOps Project containing the Pipeline.
     * 
     * @param project the project value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withProject(ProjectReference project) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withProject(project);
        return this;
    }

    /**
     * Get the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     * 
     * @return the bootstrapConfiguration value.
     */
    public BootstrapConfiguration bootstrapConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().bootstrapConfiguration();
    }

    /**
     * Set the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     * 
     * @param bootstrapConfiguration the bootstrapConfiguration value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withBootstrapConfiguration(BootstrapConfiguration bootstrapConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withBootstrapConfiguration(bootstrapConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model PipelineInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineInner.
     */
    public static PipelineInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineInner deserializedPipelineInner = new PipelineInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPipelineInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPipelineInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPipelineInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedPipelineInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPipelineInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedPipelineInner.innerProperties = PipelineProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineInner;
        });
    }
}
