// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devops.models.InputDescriptor;
import java.io.IOException;
import java.util.List;

/**
 * Definition of a pipeline template.
 */
@Fluent
public final class PipelineTemplateDefinitionInner implements JsonSerializable<PipelineTemplateDefinitionInner> {
    /*
     * Unique identifier of the pipeline template.
     */
    private String id;

    /*
     * Description of the pipeline enabled by the template.
     */
    private String description;

    /*
     * List of input parameters required by the template to create a pipeline.
     */
    private List<InputDescriptor> inputs;

    /**
     * Creates an instance of PipelineTemplateDefinitionInner class.
     */
    public PipelineTemplateDefinitionInner() {
    }

    /**
     * Get the id property: Unique identifier of the pipeline template.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique identifier of the pipeline template.
     * 
     * @param id the id value to set.
     * @return the PipelineTemplateDefinitionInner object itself.
     */
    public PipelineTemplateDefinitionInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the description property: Description of the pipeline enabled by the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the pipeline enabled by the template.
     * 
     * @param description the description value to set.
     * @return the PipelineTemplateDefinitionInner object itself.
     */
    public PipelineTemplateDefinitionInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the inputs property: List of input parameters required by the template to create a pipeline.
     * 
     * @return the inputs value.
     */
    public List<InputDescriptor> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: List of input parameters required by the template to create a pipeline.
     * 
     * @param inputs the inputs value to set.
     * @return the PipelineTemplateDefinitionInner object itself.
     */
    public PipelineTemplateDefinitionInner withInputs(List<InputDescriptor> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property id in model PipelineTemplateDefinitionInner"));
        }
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineTemplateDefinitionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineTemplateDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineTemplateDefinitionInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineTemplateDefinitionInner.
     */
    public static PipelineTemplateDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineTemplateDefinitionInner deserializedPipelineTemplateDefinitionInner
                = new PipelineTemplateDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPipelineTemplateDefinitionInner.id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedPipelineTemplateDefinitionInner.description = reader.getString();
                } else if ("inputs".equals(fieldName)) {
                    List<InputDescriptor> inputs = reader.readArray(reader1 -> InputDescriptor.fromJson(reader1));
                    deserializedPipelineTemplateDefinitionInner.inputs = inputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineTemplateDefinitionInner;
        });
    }
}
