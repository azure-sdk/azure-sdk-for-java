// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Repository containing the source code for a pipeline.
 */
@Fluent
public final class CodeRepository implements JsonSerializable<CodeRepository> {
    /*
     * Type of code repository.
     */
    private CodeRepositoryType repositoryType;

    /*
     * Unique immutable identifier of the code repository.
     */
    private String id;

    /*
     * Default branch used to configure Continuous Integration (CI) in the pipeline.
     */
    private String defaultBranch;

    /*
     * Authorization info to access the code repository.
     */
    private Authorization authorization;

    /*
     * Repository-specific properties.
     */
    private Map<String, String> properties;

    /**
     * Creates an instance of CodeRepository class.
     */
    public CodeRepository() {
    }

    /**
     * Get the repositoryType property: Type of code repository.
     * 
     * @return the repositoryType value.
     */
    public CodeRepositoryType repositoryType() {
        return this.repositoryType;
    }

    /**
     * Set the repositoryType property: Type of code repository.
     * 
     * @param repositoryType the repositoryType value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withRepositoryType(CodeRepositoryType repositoryType) {
        this.repositoryType = repositoryType;
        return this;
    }

    /**
     * Get the id property: Unique immutable identifier of the code repository.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique immutable identifier of the code repository.
     * 
     * @param id the id value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the defaultBranch property: Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     * @return the defaultBranch value.
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Set the defaultBranch property: Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     * @param defaultBranch the defaultBranch value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }

    /**
     * Get the authorization property: Authorization info to access the code repository.
     * 
     * @return the authorization value.
     */
    public Authorization authorization() {
        return this.authorization;
    }

    /**
     * Set the authorization property: Authorization info to access the code repository.
     * 
     * @param authorization the authorization value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withAuthorization(Authorization authorization) {
        this.authorization = authorization;
        return this;
    }

    /**
     * Get the properties property: Repository-specific properties.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Repository-specific properties.
     * 
     * @param properties the properties value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repositoryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property repositoryType in model CodeRepository"));
        }
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model CodeRepository"));
        }
        if (defaultBranch() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property defaultBranch in model CodeRepository"));
        }
        if (authorization() != null) {
            authorization().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CodeRepository.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryType",
            this.repositoryType == null ? null : this.repositoryType.toString());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("defaultBranch", this.defaultBranch);
        jsonWriter.writeJsonField("authorization", this.authorization);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeRepository from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeRepository if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeRepository.
     */
    public static CodeRepository fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CodeRepository deserializedCodeRepository = new CodeRepository();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryType".equals(fieldName)) {
                    deserializedCodeRepository.repositoryType = CodeRepositoryType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedCodeRepository.id = reader.getString();
                } else if ("defaultBranch".equals(fieldName)) {
                    deserializedCodeRepository.defaultBranch = reader.getString();
                } else if ("authorization".equals(fieldName)) {
                    deserializedCodeRepository.authorization = Authorization.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedCodeRepository.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCodeRepository;
        });
    }
}
