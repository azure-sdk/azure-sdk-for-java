// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Representation of a pipeline template input parameter.
 */
@Fluent
public final class InputDescriptor implements JsonSerializable<InputDescriptor> {
    /*
     * Identifier of the input parameter.
     */
    private String id;

    /*
     * Description of the input parameter.
     */
    private String description;

    /*
     * Data type of the value of the input parameter.
     */
    private InputDataType type;

    /*
     * List of possible values for the input parameter.
     */
    private List<InputValue> possibleValues;

    /**
     * Creates an instance of InputDescriptor class.
     */
    public InputDescriptor() {
    }

    /**
     * Get the id property: Identifier of the input parameter.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of the input parameter.
     * 
     * @param id the id value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the description property: Description of the input parameter.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the input parameter.
     * 
     * @param description the description value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the type property: Data type of the value of the input parameter.
     * 
     * @return the type value.
     */
    public InputDataType type() {
        return this.type;
    }

    /**
     * Set the type property: Data type of the value of the input parameter.
     * 
     * @param type the type value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withType(InputDataType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the possibleValues property: List of possible values for the input parameter.
     * 
     * @return the possibleValues value.
     */
    public List<InputValue> possibleValues() {
        return this.possibleValues;
    }

    /**
     * Set the possibleValues property: List of possible values for the input parameter.
     * 
     * @param possibleValues the possibleValues value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withPossibleValues(List<InputValue> possibleValues) {
        this.possibleValues = possibleValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model InputDescriptor"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model InputDescriptor"));
        }
        if (possibleValues() != null) {
            possibleValues().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InputDescriptor.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("possibleValues", this.possibleValues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputDescriptor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputDescriptor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InputDescriptor.
     */
    public static InputDescriptor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputDescriptor deserializedInputDescriptor = new InputDescriptor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedInputDescriptor.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedInputDescriptor.type = InputDataType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedInputDescriptor.description = reader.getString();
                } else if ("possibleValues".equals(fieldName)) {
                    List<InputValue> possibleValues = reader.readArray(reader1 -> InputValue.fromJson(reader1));
                    deserializedInputDescriptor.possibleValues = possibleValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputDescriptor;
        });
    }
}
