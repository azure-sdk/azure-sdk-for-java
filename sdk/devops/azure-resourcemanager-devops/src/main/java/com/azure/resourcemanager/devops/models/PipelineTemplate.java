// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Template used to bootstrap the pipeline.
 */
@Fluent
public final class PipelineTemplate implements JsonSerializable<PipelineTemplate> {
    /*
     * Unique identifier of the pipeline template.
     */
    private String id;

    /*
     * Dictionary of input parameters used in the pipeline template.
     */
    private Map<String, String> parameters;

    /**
     * Creates an instance of PipelineTemplate class.
     */
    public PipelineTemplate() {
    }

    /**
     * Get the id property: Unique identifier of the pipeline template.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique identifier of the pipeline template.
     * 
     * @param id the id value to set.
     * @return the PipelineTemplate object itself.
     */
    public PipelineTemplate withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the parameters property: Dictionary of input parameters used in the pipeline template.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Dictionary of input parameters used in the pipeline template.
     * 
     * @param parameters the parameters value to set.
     * @return the PipelineTemplate object itself.
     */
    public PipelineTemplate withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model PipelineTemplate"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineTemplate.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineTemplate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineTemplate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineTemplate.
     */
    public static PipelineTemplate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineTemplate deserializedPipelineTemplate = new PipelineTemplate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPipelineTemplate.id = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedPipelineTemplate.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineTemplate;
        });
    }
}
