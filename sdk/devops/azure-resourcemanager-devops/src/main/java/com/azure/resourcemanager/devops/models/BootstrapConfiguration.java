// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration used to bootstrap a Pipeline.
 */
@Fluent
public final class BootstrapConfiguration implements JsonSerializable<BootstrapConfiguration> {
    /*
     * Repository containing the source code for the pipeline.
     */
    private CodeRepository repository;

    /*
     * Template used to bootstrap the pipeline.
     */
    private PipelineTemplate template;

    /**
     * Creates an instance of BootstrapConfiguration class.
     */
    public BootstrapConfiguration() {
    }

    /**
     * Get the repository property: Repository containing the source code for the pipeline.
     * 
     * @return the repository value.
     */
    public CodeRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Repository containing the source code for the pipeline.
     * 
     * @param repository the repository value to set.
     * @return the BootstrapConfiguration object itself.
     */
    public BootstrapConfiguration withRepository(CodeRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the template property: Template used to bootstrap the pipeline.
     * 
     * @return the template value.
     */
    public PipelineTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: Template used to bootstrap the pipeline.
     * 
     * @param template the template value to set.
     * @return the BootstrapConfiguration object itself.
     */
    public BootstrapConfiguration withTemplate(PipelineTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repository() != null) {
            repository().validate();
        }
        if (template() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property template in model BootstrapConfiguration"));
        } else {
            template().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BootstrapConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("template", this.template);
        jsonWriter.writeJsonField("repository", this.repository);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BootstrapConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BootstrapConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BootstrapConfiguration.
     */
    public static BootstrapConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BootstrapConfiguration deserializedBootstrapConfiguration = new BootstrapConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("template".equals(fieldName)) {
                    deserializedBootstrapConfiguration.template = PipelineTemplate.fromJson(reader);
                } else if ("repository".equals(fieldName)) {
                    deserializedBootstrapConfiguration.repository = CodeRepository.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBootstrapConfiguration;
        });
    }
}
