// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devops.models.BootstrapConfiguration;
import com.azure.resourcemanager.devops.models.OrganizationReference;
import com.azure.resourcemanager.devops.models.ProjectReference;
import java.io.IOException;

/**
 * Custom properties of a Pipeline.
 */
@Fluent
public final class PipelineProperties implements JsonSerializable<PipelineProperties> {
    /*
     * Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     */
    private Integer pipelineId;

    /*
     * Reference to the Azure DevOps Organization containing the Pipeline.
     */
    private OrganizationReference organization;

    /*
     * Reference to the Azure DevOps Project containing the Pipeline.
     */
    private ProjectReference project;

    /*
     * Configuration used to bootstrap the Pipeline.
     */
    private BootstrapConfiguration bootstrapConfiguration;

    /**
     * Creates an instance of PipelineProperties class.
     */
    public PipelineProperties() {
    }

    /**
     * Get the pipelineId property: Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     * 
     * @return the pipelineId value.
     */
    public Integer pipelineId() {
        return this.pipelineId;
    }

    /**
     * Get the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     * 
     * @return the organization value.
     */
    public OrganizationReference organization() {
        return this.organization;
    }

    /**
     * Set the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     * 
     * @param organization the organization value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withOrganization(OrganizationReference organization) {
        this.organization = organization;
        return this;
    }

    /**
     * Get the project property: Reference to the Azure DevOps Project containing the Pipeline.
     * 
     * @return the project value.
     */
    public ProjectReference project() {
        return this.project;
    }

    /**
     * Set the project property: Reference to the Azure DevOps Project containing the Pipeline.
     * 
     * @param project the project value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withProject(ProjectReference project) {
        this.project = project;
        return this;
    }

    /**
     * Get the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     * 
     * @return the bootstrapConfiguration value.
     */
    public BootstrapConfiguration bootstrapConfiguration() {
        return this.bootstrapConfiguration;
    }

    /**
     * Set the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     * 
     * @param bootstrapConfiguration the bootstrapConfiguration value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withBootstrapConfiguration(BootstrapConfiguration bootstrapConfiguration) {
        this.bootstrapConfiguration = bootstrapConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (organization() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property organization in model PipelineProperties"));
        } else {
            organization().validate();
        }
        if (project() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property project in model PipelineProperties"));
        } else {
            project().validate();
        }
        if (bootstrapConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bootstrapConfiguration in model PipelineProperties"));
        } else {
            bootstrapConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("organization", this.organization);
        jsonWriter.writeJsonField("project", this.project);
        jsonWriter.writeJsonField("bootstrapConfiguration", this.bootstrapConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineProperties.
     */
    public static PipelineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineProperties deserializedPipelineProperties = new PipelineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organization".equals(fieldName)) {
                    deserializedPipelineProperties.organization = OrganizationReference.fromJson(reader);
                } else if ("project".equals(fieldName)) {
                    deserializedPipelineProperties.project = ProjectReference.fromJson(reader);
                } else if ("bootstrapConfiguration".equals(fieldName)) {
                    deserializedPipelineProperties.bootstrapConfiguration = BootstrapConfiguration.fromJson(reader);
                } else if ("pipelineId".equals(fieldName)) {
                    deserializedPipelineProperties.pipelineId = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineProperties;
        });
    }
}
