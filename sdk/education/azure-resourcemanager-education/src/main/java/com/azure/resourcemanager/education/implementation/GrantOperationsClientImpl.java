// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.education.fluent.GrantOperationsClient;
import com.azure.resourcemanager.education.models.GrantOperationsRenewalResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GrantOperationsClient. */
public final class GrantOperationsClientImpl implements GrantOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final GrantOperationsService service;

    /** The service client containing this operation class. */
    private final EducationManagementClientImpl client;

    /**
     * Initializes an instance of GrantOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GrantOperationsClientImpl(EducationManagementClientImpl client) {
        this.service =
            RestProxy.create(GrantOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EducationManagementClientGrantOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "EducationManagementC")
    private interface GrantOperationsService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"
                + "/providers/Microsoft.Education/grants/default/renew")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<GrantOperationsRenewalResponse> renewal(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Request grant renewal.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GrantOperationsRenewalResponse> renewalWithResponseAsync(
        String billingAccountName, String billingProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String apiVersion = "2022-10-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .renewal(
                            this.client.getEndpoint(),
                            billingAccountName,
                            billingProfileName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request grant renewal.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GrantOperationsRenewalResponse> renewalWithResponseAsync(
        String billingAccountName, String billingProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String apiVersion = "2022-10-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .renewal(this.client.getEndpoint(), billingAccountName, billingProfileName, apiVersion, accept, context);
    }

    /**
     * Request grant renewal.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> renewalAsync(String billingAccountName, String billingProfileName) {
        return renewalWithResponseAsync(billingAccountName, billingProfileName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Request grant renewal.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GrantOperationsRenewalResponse renewalWithResponse(
        String billingAccountName, String billingProfileName, Context context) {
        return renewalWithResponseAsync(billingAccountName, billingProfileName, context).block();
    }

    /**
     * Request grant renewal.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renewal(String billingAccountName, String billingProfileName) {
        renewalWithResponse(billingAccountName, billingProfileName, Context.NONE);
    }
}
