// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.FirstPartyAppDefinition;
import com.azure.resourcemanager.testbase.models.GalleryAppDefinition;
import com.azure.resourcemanager.testbase.models.InplaceUpgradeOSInfo;
import com.azure.resourcemanager.testbase.models.IntuneEnrollmentMetadata;
import com.azure.resourcemanager.testbase.models.PackageStatus;
import com.azure.resourcemanager.testbase.models.PackageValidationResult;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The properties of the Test Base Package. */
@Fluent
public final class PackageProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Application name
     */
    @JsonProperty(value = "applicationName", required = true)
    private String applicationName;

    /*
     * Application version
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /*
     * The id of draft package. Used to create or update this package from a draft package.
     */
    @JsonProperty(value = "draftPackageId")
    private String draftPackageId;

    /*
     * The status of the package.
     */
    @JsonProperty(value = "packageStatus", access = JsonProperty.Access.WRITE_ONLY)
    private PackageStatus packageStatus;

    /*
     * Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
     */
    @JsonProperty(value = "isEnabled", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isEnabled;

    /*
     * The file path of the package.
     */
    @JsonProperty(value = "blobPath")
    private String blobPath;

    /*
     * The validation results. There's validation on package when it's created or updated.
     */
    @JsonProperty(value = "validationResults", access = JsonProperty.Access.WRITE_ONLY)
    private List<PackageValidationResult> validationResults;

    /*
     * OOB, functional or flow driven. Mapped to the data in 'tests' property.
     */
    @JsonProperty(value = "testTypes", access = JsonProperty.Access.WRITE_ONLY)
    private List<TestType> testTypes;

    /*
     * Specifies the target OSs of specific OS Update types.
     */
    @JsonProperty(value = "targetOSList")
    private List<TargetOSInfo> targetOSList;

    /*
     * Specifies the baseline os and target os for inplace upgrade.
     */
    @JsonProperty(value = "inplaceUpgradeOSPair")
    private InplaceUpgradeOSInfo inplaceUpgradeOSPair;

    /*
     * The UTC timestamp when the package was last modified.
     */
    @JsonProperty(value = "lastModifiedTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTime;

    /*
     * The flighting ring for feature update.
     */
    @JsonProperty(value = "flightingRing")
    private String flightingRing;

    /*
     * The list of first party applications to test along with user application.
     */
    @JsonProperty(value = "firstPartyApps")
    private List<FirstPartyAppDefinition> firstPartyApps;

    /*
     * The list of gallery apps to test along with user application.
     */
    @JsonProperty(value = "galleryApps", access = JsonProperty.Access.WRITE_ONLY)
    private List<GalleryAppDefinition> galleryApps;

    /*
     * The detailed test information.
     */
    @JsonProperty(value = "tests")
    private List<Test> tests;

    /*
     * The metadata of Intune enrollment.
     */
    @JsonProperty(value = "intuneEnrollmentMetadata")
    private IntuneEnrollmentMetadata intuneEnrollmentMetadata;

    /** Creates an instance of PackageProperties class. */
    public PackageProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: Application name.
     *
     * @param applicationName the applicationName value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the version property: Application version.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Application version.
     *
     * @param version the version value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the draftPackageId property: The id of draft package. Used to create or update this package from a draft
     * package.
     *
     * @return the draftPackageId value.
     */
    public String draftPackageId() {
        return this.draftPackageId;
    }

    /**
     * Set the draftPackageId property: The id of draft package. Used to create or update this package from a draft
     * package.
     *
     * @param draftPackageId the draftPackageId value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withDraftPackageId(String draftPackageId) {
        this.draftPackageId = draftPackageId;
        return this;
    }

    /**
     * Get the packageStatus property: The status of the package.
     *
     * @return the packageStatus value.
     */
    public PackageStatus packageStatus() {
        return this.packageStatus;
    }

    /**
     * Get the isEnabled property: Flag showing that whether the package is enabled. It doesn't schedule test for
     * package which is not enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Get the blobPath property: The file path of the package.
     *
     * @return the blobPath value.
     */
    public String blobPath() {
        return this.blobPath;
    }

    /**
     * Set the blobPath property: The file path of the package.
     *
     * @param blobPath the blobPath value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withBlobPath(String blobPath) {
        this.blobPath = blobPath;
        return this;
    }

    /**
     * Get the validationResults property: The validation results. There's validation on package when it's created or
     * updated.
     *
     * @return the validationResults value.
     */
    public List<PackageValidationResult> validationResults() {
        return this.validationResults;
    }

    /**
     * Get the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    public List<TestType> testTypes() {
        return this.testTypes;
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.targetOSList;
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withTargetOSList(List<TargetOSInfo> targetOSList) {
        this.targetOSList = targetOSList;
        return this;
    }

    /**
     * Get the inplaceUpgradeOSPair property: Specifies the baseline os and target os for inplace upgrade.
     *
     * @return the inplaceUpgradeOSPair value.
     */
    public InplaceUpgradeOSInfo inplaceUpgradeOSPair() {
        return this.inplaceUpgradeOSPair;
    }

    /**
     * Set the inplaceUpgradeOSPair property: Specifies the baseline os and target os for inplace upgrade.
     *
     * @param inplaceUpgradeOSPair the inplaceUpgradeOSPair value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair) {
        this.inplaceUpgradeOSPair = inplaceUpgradeOSPair;
        return this;
    }

    /**
     * Get the lastModifiedTime property: The UTC timestamp when the package was last modified.
     *
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.flightingRing;
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withFlightingRing(String flightingRing) {
        this.flightingRing = flightingRing;
        return this;
    }

    /**
     * Get the firstPartyApps property: The list of first party applications to test along with user application.
     *
     * @return the firstPartyApps value.
     */
    public List<FirstPartyAppDefinition> firstPartyApps() {
        return this.firstPartyApps;
    }

    /**
     * Set the firstPartyApps property: The list of first party applications to test along with user application.
     *
     * @param firstPartyApps the firstPartyApps value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps) {
        this.firstPartyApps = firstPartyApps;
        return this;
    }

    /**
     * Get the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @return the galleryApps value.
     */
    public List<GalleryAppDefinition> galleryApps() {
        return this.galleryApps;
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.tests;
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withTests(List<Test> tests) {
        this.tests = tests;
        return this;
    }

    /**
     * Get the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @return the intuneEnrollmentMetadata value.
     */
    public IntuneEnrollmentMetadata intuneEnrollmentMetadata() {
        return this.intuneEnrollmentMetadata;
    }

    /**
     * Set the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @param intuneEnrollmentMetadata the intuneEnrollmentMetadata value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withIntuneEnrollmentMetadata(IntuneEnrollmentMetadata intuneEnrollmentMetadata) {
        this.intuneEnrollmentMetadata = intuneEnrollmentMetadata;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property applicationName in model PackageProperties"));
        }
        if (version() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property version in model PackageProperties"));
        }
        if (validationResults() != null) {
            validationResults().forEach(e -> e.validate());
        }
        if (targetOSList() != null) {
            targetOSList().forEach(e -> e.validate());
        }
        if (inplaceUpgradeOSPair() != null) {
            inplaceUpgradeOSPair().validate();
        }
        if (firstPartyApps() != null) {
            firstPartyApps().forEach(e -> e.validate());
        }
        if (galleryApps() != null) {
            galleryApps().forEach(e -> e.validate());
        }
        if (tests() != null) {
            tests().forEach(e -> e.validate());
        }
        if (intuneEnrollmentMetadata() != null) {
            intuneEnrollmentMetadata().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PackageProperties.class);
}
