// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.CustomImagesClient;
import com.azure.resourcemanager.testbase.fluent.models.CustomImageResourceInner;
import com.azure.resourcemanager.testbase.fluent.models.VerificationResultInner;
import com.azure.resourcemanager.testbase.models.CustomImageResource;
import com.azure.resourcemanager.testbase.models.CustomImages;
import com.azure.resourcemanager.testbase.models.ImageNameCheckAvailabilityParameters;
import com.azure.resourcemanager.testbase.models.VerificationResult;

public final class CustomImagesImpl implements CustomImages {
    private static final ClientLogger LOGGER = new ClientLogger(CustomImagesImpl.class);

    private final CustomImagesClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public CustomImagesImpl(CustomImagesClient innerClient,
        com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CustomImageResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName) {
        PagedIterable<CustomImageResourceInner> inner
            = this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName);
        return Utils.mapPage(inner, inner1 -> new CustomImageResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomImageResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName, Context context) {
        PagedIterable<CustomImageResourceInner> inner
            = this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName, context);
        return Utils.mapPage(inner, inner1 -> new CustomImageResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String customImageName) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, customImageName);
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String customImageName, Context context) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, customImageName, context);
    }

    public Response<CustomImageResource> getWithResponse(String resourceGroupName, String testBaseAccountName,
        String customImageName, Context context) {
        Response<CustomImageResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, testBaseAccountName, customImageName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CustomImageResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomImageResource get(String resourceGroupName, String testBaseAccountName, String customImageName) {
        CustomImageResourceInner inner
            = this.serviceClient().get(resourceGroupName, testBaseAccountName, customImageName);
        if (inner != null) {
            return new CustomImageResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VerificationResult> checkImageNameAvailabilityWithResponse(String resourceGroupName,
        String testBaseAccountName, ImageNameCheckAvailabilityParameters parameters, Context context) {
        Response<VerificationResultInner> inner = this.serviceClient()
            .checkImageNameAvailabilityWithResponse(resourceGroupName, testBaseAccountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VerificationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VerificationResult checkImageNameAvailability(String resourceGroupName, String testBaseAccountName,
        ImageNameCheckAvailabilityParameters parameters) {
        VerificationResultInner inner
            = this.serviceClient().checkImageNameAvailability(resourceGroupName, testBaseAccountName, parameters);
        if (inner != null) {
            return new VerificationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CustomImageResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customImageName = Utils.getValueFromIdByName(id, "customImages");
        if (customImageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customImages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, customImageName, Context.NONE).getValue();
    }

    public Response<CustomImageResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customImageName = Utils.getValueFromIdByName(id, "customImages");
        if (customImageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customImages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, customImageName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customImageName = Utils.getValueFromIdByName(id, "customImages");
        if (customImageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customImages'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, customImageName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customImageName = Utils.getValueFromIdByName(id, "customImages");
        if (customImageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customImages'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, customImageName, context);
    }

    private CustomImagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }

    public CustomImageResourceImpl define(String name) {
        return new CustomImageResourceImpl(name, this.manager());
    }
}
