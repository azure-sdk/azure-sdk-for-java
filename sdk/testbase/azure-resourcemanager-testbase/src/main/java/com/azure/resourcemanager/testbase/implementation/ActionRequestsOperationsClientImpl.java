// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.testbase.fluent.ActionRequestsOperationsClient;
import com.azure.resourcemanager.testbase.fluent.models.ActionRequestInner;
import com.azure.resourcemanager.testbase.models.ActionRequests;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ActionRequestsOperationsClient.
 */
public final class ActionRequestsOperationsClientImpl implements ActionRequestsOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ActionRequestsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final TestBaseImpl client;

    /**
     * Initializes an instance of ActionRequestsOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ActionRequestsOperationsClientImpl(TestBaseImpl client) {
        this.service = RestProxy.create(ActionRequestsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TestBaseActionRequestsOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TestBaseActionReques")
    public interface ActionRequestsOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests/{actionRequestName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActionRequestInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName, @QueryParam("api-version") String apiVersion,
            @PathParam("actionRequestName") String actionRequestName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests/{actionRequestName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActionRequestInner>> put(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("actionRequestName") String actionRequestName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ActionRequestInner actionRequest, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests/{actionRequestName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("actionRequestName") String actionRequestName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActionRequests>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName, @QueryParam("api-version") String apiVersion,
            @QueryParam("requestType") String requestType, @QueryParam("top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActionRequests>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get the action request under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the action request under the specified test base account along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ActionRequestInner>> getWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String actionRequestName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    testBaseAccountName, this.client.getApiVersion(), actionRequestName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the action request under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the action request under the specified test base account along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ActionRequestInner>> getWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String actionRequestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            testBaseAccountName, this.client.getApiVersion(), actionRequestName, accept, context);
    }

    /**
     * Get the action request under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the action request under the specified test base account on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ActionRequestInner> getAsync(String resourceGroupName, String testBaseAccountName,
        String actionRequestName) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the action request under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the action request under the specified test base account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ActionRequestInner> getWithResponse(String resourceGroupName, String testBaseAccountName,
        String actionRequestName, Context context) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName, context).block();
    }

    /**
     * Get the action request under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the action request under the specified test base account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ActionRequestInner get(String resourceGroupName, String testBaseAccountName, String actionRequestName) {
        return getWithResponse(resourceGroupName, testBaseAccountName, actionRequestName, Context.NONE).getValue();
    }

    /**
     * Create (submit) an action request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param actionRequest The actionRequest parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ActionRequestInner>> putWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String actionRequestName, ActionRequestInner actionRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        if (actionRequest != null) {
            actionRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.put(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, testBaseAccountName, actionRequestName, this.client.getApiVersion(), actionRequest,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create (submit) an action request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param actionRequest The actionRequest parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ActionRequestInner>> putWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String actionRequestName, ActionRequestInner actionRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        if (actionRequest != null) {
            actionRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.put(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            testBaseAccountName, actionRequestName, this.client.getApiVersion(), actionRequest, accept, context);
    }

    /**
     * Create (submit) an action request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ActionRequestInner> putAsync(String resourceGroupName, String testBaseAccountName,
        String actionRequestName) {
        final ActionRequestInner actionRequest = null;
        return putWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName, actionRequest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create (submit) an action request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param actionRequest The actionRequest parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ActionRequestInner> putWithResponse(String resourceGroupName, String testBaseAccountName,
        String actionRequestName, ActionRequestInner actionRequest, Context context) {
        return putWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName, actionRequest, context)
            .block();
    }

    /**
     * Create (submit) an action request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ActionRequestInner put(String resourceGroupName, String testBaseAccountName, String actionRequestName) {
        final ActionRequestInner actionRequest = null;
        return putWithResponse(resourceGroupName, testBaseAccountName, actionRequestName, actionRequest, Context.NONE)
            .getValue();
    }

    /**
     * Delete (revoke) an action request. Only requests in review can be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String testBaseAccountName,
        String actionRequestName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    testBaseAccountName, actionRequestName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete (revoke) an action request. Only requests in review can be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String testBaseAccountName,
        String actionRequestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (actionRequestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter actionRequestName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            testBaseAccountName, actionRequestName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete (revoke) an action request. Only requests in review can be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String testBaseAccountName, String actionRequestName) {
        return deleteWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete (revoke) an action request. Only requests in review can be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String testBaseAccountName,
        String actionRequestName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, testBaseAccountName, actionRequestName, context).block();
    }

    /**
     * Delete (revoke) an action request. Only requests in review can be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param actionRequestName The actionRequestName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String testBaseAccountName, String actionRequestName) {
        deleteWithResponse(resourceGroupName, testBaseAccountName, actionRequestName, Context.NONE);
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param requestType The requestType parameter.
     * @param top How many of the sorted items to consider including in the result set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActionRequestInner>> listSinglePageAsync(String resourceGroupName,
        String testBaseAccountName, String requestType, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, testBaseAccountName, this.client.getApiVersion(), requestType, top, accept, context))
            .<PagedResponse<ActionRequestInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param requestType The requestType parameter.
     * @param top How many of the sorted items to consider including in the result set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActionRequestInner>> listSinglePageAsync(String resourceGroupName,
        String testBaseAccountName, String requestType, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, testBaseAccountName,
                this.client.getApiVersion(), requestType, top, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param requestType The requestType parameter.
     * @param top How many of the sorted items to consider including in the result set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ActionRequestInner> listAsync(String resourceGroupName, String testBaseAccountName,
        String requestType, Integer top) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, testBaseAccountName, requestType, top),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ActionRequestInner> listAsync(String resourceGroupName, String testBaseAccountName) {
        final String requestType = null;
        final Integer top = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, testBaseAccountName, requestType, top),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param requestType The requestType parameter.
     * @param top How many of the sorted items to consider including in the result set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ActionRequestInner> listAsync(String resourceGroupName, String testBaseAccountName,
        String requestType, Integer top, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, testBaseAccountName, requestType, top, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ActionRequestInner> list(String resourceGroupName, String testBaseAccountName) {
        final String requestType = null;
        final Integer top = null;
        return new PagedIterable<>(listAsync(resourceGroupName, testBaseAccountName, requestType, top));
    }

    /**
     * List all action requests under the specified test base account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param requestType The requestType parameter.
     * @param top How many of the sorted items to consider including in the result set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ActionRequestInner> list(String resourceGroupName, String testBaseAccountName,
        String requestType, Integer top, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, testBaseAccountName, requestType, top, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActionRequestInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ActionRequestInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActionRequestInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
