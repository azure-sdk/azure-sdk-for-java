// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.testbase.fluent.FirstPartyAppsClient;
import com.azure.resourcemanager.testbase.fluent.models.FirstPartyAppResourceInner;
import com.azure.resourcemanager.testbase.models.FirstPartyAppListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FirstPartyAppsClient.
 */
public final class FirstPartyAppsClientImpl implements FirstPartyAppsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FirstPartyAppsService service;

    /**
     * The service client containing this operation class.
     */
    private final TestBaseImpl client;

    /**
     * Initializes an instance of FirstPartyAppsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FirstPartyAppsClientImpl(TestBaseImpl client) {
        this.service
            = RestProxy.create(FirstPartyAppsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TestBaseFirstPartyApps to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TestBaseFirstPartyAp")
    public interface FirstPartyAppsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/firstPartyApps")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirstPartyAppListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/firstPartyApps/{firstPartyAppResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirstPartyAppResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("firstPartyAppResourceName") String firstPartyAppResourceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirstPartyAppListResult>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirstPartyAppResourceInner>> listSinglePageAsync(String resourceGroupName,
        String testBaseAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, testBaseAccountName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<FirstPartyAppResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirstPartyAppResourceInner>> listSinglePageAsync(String resourceGroupName,
        String testBaseAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, testBaseAccountName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FirstPartyAppResourceInner> listAsync(String resourceGroupName, String testBaseAccountName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, testBaseAccountName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FirstPartyAppResourceInner> listAsync(String resourceGroupName, String testBaseAccountName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, testBaseAccountName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirstPartyAppResourceInner> list(String resourceGroupName, String testBaseAccountName) {
        return new PagedIterable<>(listAsync(resourceGroupName, testBaseAccountName));
    }

    /**
     * Lists all first party applications currently available for test runs under a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirstPartyAppResourceInner> list(String resourceGroupName, String testBaseAccountName,
        Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, testBaseAccountName, context));
    }

    /**
     * Gets a first party application to prepare a test run for a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param firstPartyAppResourceName The resource name of a first party application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a first party application to prepare a test run for a Test Base Account along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FirstPartyAppResourceInner>> getWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String firstPartyAppResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (firstPartyAppResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter firstPartyAppResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    testBaseAccountName, firstPartyAppResourceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a first party application to prepare a test run for a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param firstPartyAppResourceName The resource name of a first party application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a first party application to prepare a test run for a Test Base Account along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FirstPartyAppResourceInner>> getWithResponseAsync(String resourceGroupName,
        String testBaseAccountName, String firstPartyAppResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (firstPartyAppResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter firstPartyAppResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            testBaseAccountName, firstPartyAppResourceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a first party application to prepare a test run for a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param firstPartyAppResourceName The resource name of a first party application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a first party application to prepare a test run for a Test Base Account on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FirstPartyAppResourceInner> getAsync(String resourceGroupName, String testBaseAccountName,
        String firstPartyAppResourceName) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, firstPartyAppResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a first party application to prepare a test run for a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param firstPartyAppResourceName The resource name of a first party application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a first party application to prepare a test run for a Test Base Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FirstPartyAppResourceInner> getWithResponse(String resourceGroupName, String testBaseAccountName,
        String firstPartyAppResourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, firstPartyAppResourceName, context).block();
    }

    /**
     * Gets a first party application to prepare a test run for a Test Base Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param firstPartyAppResourceName The resource name of a first party application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a first party application to prepare a test run for a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirstPartyAppResourceInner get(String resourceGroupName, String testBaseAccountName,
        String firstPartyAppResourceName) {
        return getWithResponse(resourceGroupName, testBaseAccountName, firstPartyAppResourceName, Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirstPartyAppResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<FirstPartyAppResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of currently available first party applications along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirstPartyAppResourceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
