// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.AnswerCitation;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The chat response properties. */
@Fluent
public final class ChatResponseProperties {
    /*
     * The question from the request
     */
    @JsonProperty(value = "question", required = true)
    private String question;

    /*
     * The answer from the system
     */
    @JsonProperty(value = "answer", required = true)
    private String answer;

    /*
     * The citations property.
     */
    @JsonProperty(value = "citations")
    private List<AnswerCitation> citations;

    /*
     * The usage of questions within the chat session
     */
    @JsonProperty(value = "usage", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private int usage;

    /*
     * The limit of questions within the chat session
     */
    @JsonProperty(value = "limit", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private int limit;

    /** Creates an instance of ChatResponseProperties class. */
    public ChatResponseProperties() {
    }

    /**
     * Get the question property: The question from the request.
     *
     * @return the question value.
     */
    public String question() {
        return this.question;
    }

    /**
     * Set the question property: The question from the request.
     *
     * @param question the question value to set.
     * @return the ChatResponseProperties object itself.
     */
    public ChatResponseProperties withQuestion(String question) {
        this.question = question;
        return this;
    }

    /**
     * Get the answer property: The answer from the system.
     *
     * @return the answer value.
     */
    public String answer() {
        return this.answer;
    }

    /**
     * Set the answer property: The answer from the system.
     *
     * @param answer the answer value to set.
     * @return the ChatResponseProperties object itself.
     */
    public ChatResponseProperties withAnswer(String answer) {
        this.answer = answer;
        return this;
    }

    /**
     * Get the citations property: The citations property.
     *
     * @return the citations value.
     */
    public List<AnswerCitation> citations() {
        return this.citations;
    }

    /**
     * Set the citations property: The citations property.
     *
     * @param citations the citations value to set.
     * @return the ChatResponseProperties object itself.
     */
    public ChatResponseProperties withCitations(List<AnswerCitation> citations) {
        this.citations = citations;
        return this;
    }

    /**
     * Get the usage property: The usage of questions within the chat session.
     *
     * @return the usage value.
     */
    public int usage() {
        return this.usage;
    }

    /**
     * Get the limit property: The limit of questions within the chat session.
     *
     * @return the limit value.
     */
    public int limit() {
        return this.limit;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (question() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property question in model ChatResponseProperties"));
        }
        if (answer() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property answer in model ChatResponseProperties"));
        }
        if (citations() != null) {
            citations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChatResponseProperties.class);
}
