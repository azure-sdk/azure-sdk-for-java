// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.ImageArchitecture;
import com.azure.resourcemanager.testbase.models.ImageOSState;
import com.azure.resourcemanager.testbase.models.ImageSecurityType;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The image properties under the image definition name.
 */
@Fluent
public final class ImageDefinitionProperties {
    /*
     * Custom image architecture.
     */
    @JsonProperty(value = "architecture", required = true)
    private ImageArchitecture architecture;

    /*
     * Custom image OS state.
     */
    @JsonProperty(value = "osState", required = true)
    private ImageOSState osState;

    /*
     * Custom image security type.
     */
    @JsonProperty(value = "securityType", required = true)
    private ImageSecurityType securityType;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Creates an instance of ImageDefinitionProperties class.
     */
    public ImageDefinitionProperties() {
    }

    /**
     * Get the architecture property: Custom image architecture.
     * 
     * @return the architecture value.
     */
    public ImageArchitecture architecture() {
        return this.architecture;
    }

    /**
     * Set the architecture property: Custom image architecture.
     * 
     * @param architecture the architecture value to set.
     * @return the ImageDefinitionProperties object itself.
     */
    public ImageDefinitionProperties withArchitecture(ImageArchitecture architecture) {
        this.architecture = architecture;
        return this;
    }

    /**
     * Get the osState property: Custom image OS state.
     * 
     * @return the osState value.
     */
    public ImageOSState osState() {
        return this.osState;
    }

    /**
     * Set the osState property: Custom image OS state.
     * 
     * @param osState the osState value to set.
     * @return the ImageDefinitionProperties object itself.
     */
    public ImageDefinitionProperties withOsState(ImageOSState osState) {
        this.osState = osState;
        return this;
    }

    /**
     * Get the securityType property: Custom image security type.
     * 
     * @return the securityType value.
     */
    public ImageSecurityType securityType() {
        return this.securityType;
    }

    /**
     * Set the securityType property: Custom image security type.
     * 
     * @param securityType the securityType value to set.
     * @return the ImageDefinitionProperties object itself.
     */
    public ImageDefinitionProperties withSecurityType(ImageSecurityType securityType) {
        this.securityType = securityType;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (architecture() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property architecture in model ImageDefinitionProperties"));
        }
        if (osState() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property osState in model ImageDefinitionProperties"));
        }
        if (securityType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property securityType in model ImageDefinitionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageDefinitionProperties.class);
}
