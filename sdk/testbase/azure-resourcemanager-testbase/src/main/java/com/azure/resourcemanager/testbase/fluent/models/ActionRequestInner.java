// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.testbase.models.PreReleaseAccessRequestSpec;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.RequestStatus;
import com.azure.resourcemanager.testbase.models.RequestTypes;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * The ActionRequest model.
 */
@Fluent
public final class ActionRequestInner extends ProxyResource {
    /*
     * Test Base Draft Package properties.
     */
    @JsonProperty(value = "properties")
    private ActionRequestProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ActionRequestInner class.
     */
    public ActionRequestInner() {
    }

    /**
     * Get the innerProperties property: Test Base Draft Package properties.
     * 
     * @return the innerProperties value.
     */
    private ActionRequestProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the requestType property: The requestType property.
     * 
     * @return the requestType value.
     */
    public RequestTypes requestType() {
        return this.innerProperties() == null ? null : this.innerProperties().requestType();
    }

    /**
     * Set the requestType property: The requestType property.
     * 
     * @param requestType the requestType value to set.
     * @return the ActionRequestInner object itself.
     */
    public ActionRequestInner withRequestType(RequestTypes requestType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ActionRequestProperties();
        }
        this.innerProperties().withRequestType(requestType);
        return this;
    }

    /**
     * Get the preReleaseAccessRequestSpec property: The preReleaseAccessRequestSpec property.
     * 
     * @return the preReleaseAccessRequestSpec value.
     */
    public PreReleaseAccessRequestSpec preReleaseAccessRequestSpec() {
        return this.innerProperties() == null ? null : this.innerProperties().preReleaseAccessRequestSpec();
    }

    /**
     * Set the preReleaseAccessRequestSpec property: The preReleaseAccessRequestSpec property.
     * 
     * @param preReleaseAccessRequestSpec the preReleaseAccessRequestSpec value to set.
     * @return the ActionRequestInner object itself.
     */
    public ActionRequestInner withPreReleaseAccessRequestSpec(PreReleaseAccessRequestSpec preReleaseAccessRequestSpec) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ActionRequestProperties();
        }
        this.innerProperties().withPreReleaseAccessRequestSpec(preReleaseAccessRequestSpec);
        return this;
    }

    /**
     * Get the creationDate property: The creationDate property.
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().creationDate();
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public RequestStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
