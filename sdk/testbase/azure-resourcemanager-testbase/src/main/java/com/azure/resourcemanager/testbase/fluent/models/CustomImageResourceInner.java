// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.testbase.models.ImageSource;
import com.azure.resourcemanager.testbase.models.ImageStatus;
import com.azure.resourcemanager.testbase.models.ImageValidationResults;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * The test base custom image resource.
 */
@Fluent
public final class CustomImageResourceInner extends ProxyResource {
    /*
     * Test Base custom image properties.
     */
    @JsonProperty(value = "properties")
    private CustomImageProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of CustomImageResourceInner class.
     */
    public CustomImageResourceInner() {
    }

    /**
     * Get the innerProperties property: Test Base custom image properties.
     * 
     * @return the innerProperties value.
     */
    private CustomImageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the vhdId property: The Id of the associated VHD resource.
     * 
     * @return the vhdId value.
     */
    public String vhdId() {
        return this.innerProperties() == null ? null : this.innerProperties().vhdId();
    }

    /**
     * Set the vhdId property: The Id of the associated VHD resource.
     * 
     * @param vhdId the vhdId value to set.
     * @return the CustomImageResourceInner object itself.
     */
    public CustomImageResourceInner withVhdId(String vhdId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomImageProperties();
        }
        this.innerProperties().withVhdId(vhdId);
        return this;
    }

    /**
     * Get the definitionName property: Image definition name.
     * 
     * @return the definitionName value.
     */
    public String definitionName() {
        return this.innerProperties() == null ? null : this.innerProperties().definitionName();
    }

    /**
     * Set the definitionName property: Image definition name.
     * 
     * @param definitionName the definitionName value to set.
     * @return the CustomImageResourceInner object itself.
     */
    public CustomImageResourceInner withDefinitionName(String definitionName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomImageProperties();
        }
        this.innerProperties().withDefinitionName(definitionName);
        return this;
    }

    /**
     * Get the versionName property: Image version name.
     * 
     * @return the versionName value.
     */
    public String versionName() {
        return this.innerProperties() == null ? null : this.innerProperties().versionName();
    }

    /**
     * Set the versionName property: Image version name.
     * 
     * @param versionName the versionName value to set.
     * @return the CustomImageResourceInner object itself.
     */
    public CustomImageResourceInner withVersionName(String versionName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomImageProperties();
        }
        this.innerProperties().withVersionName(versionName);
        return this;
    }

    /**
     * Get the source property: Custom image source type.
     * 
     * @return the source value.
     */
    public ImageSource source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Set the source property: Custom image source type.
     * 
     * @param source the source value to set.
     * @return the CustomImageResourceInner object itself.
     */
    public CustomImageResourceInner withSource(ImageSource source) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomImageProperties();
        }
        this.innerProperties().withSource(source);
        return this;
    }

    /**
     * Get the product property: Product of the custom image.
     * 
     * @return the product value.
     */
    public String product() {
        return this.innerProperties() == null ? null : this.innerProperties().product();
    }

    /**
     * Get the release property: Release of the custom image OS.
     * 
     * @return the release value.
     */
    public String release() {
        return this.innerProperties() == null ? null : this.innerProperties().release();
    }

    /**
     * Get the status property: Status of the custom image.
     * 
     * @return the status value.
     */
    public ImageStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the creationTime property: The UTC timestamp when the custom image was published.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTime();
    }

    /**
     * Get the validationResults property: The validation result of the custom image.
     * 
     * @return the validationResults value.
     */
    public ImageValidationResults validationResults() {
        return this.innerProperties() == null ? null : this.innerProperties().validationResults();
    }

    /**
     * Get the osDiskImageSizeInGB property: This property indicates the size of the VHD to be created.
     * 
     * @return the osDiskImageSizeInGB value.
     */
    public Long osDiskImageSizeInGB() {
        return this.innerProperties() == null ? null : this.innerProperties().osDiskImageSizeInGB();
    }

    /**
     * Get the releaseVersionDate property: The release version date of the release of the custom image OS.
     * 
     * @return the releaseVersionDate value.
     */
    public OffsetDateTime releaseVersionDate() {
        return this.innerProperties() == null ? null : this.innerProperties().releaseVersionDate();
    }

    /**
     * Get the vhdFileName property: The file name of the associated VHD resource.
     * 
     * @return the vhdFileName value.
     */
    public String vhdFileName() {
        return this.innerProperties() == null ? null : this.innerProperties().vhdFileName();
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
