// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.testbase.fluent.models.AvailableInplaceUpgradeOSResourceInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A list of available In-place Upgrade OSs. */
@Fluent
public final class AvailableInplaceUpgradeOSListResult {
    /*
     * The list of available In-place Upgrade OS.
     */
    @JsonProperty(value = "value")
    private List<AvailableInplaceUpgradeOSResourceInner> value;

    /*
     * Link to the next set of results. Not empty if value contains incomplete list of results.
     */
    @JsonProperty(value = "nextLink", access = JsonProperty.Access.WRITE_ONLY)
    private String nextLink;

    /** Creates an instance of AvailableInplaceUpgradeOSListResult class. */
    public AvailableInplaceUpgradeOSListResult() {
    }

    /**
     * Get the value property: The list of available In-place Upgrade OS.
     *
     * @return the value value.
     */
    public List<AvailableInplaceUpgradeOSResourceInner> value() {
        return this.value;
    }

    /**
     * Set the value property: The list of available In-place Upgrade OS.
     *
     * @param value the value value to set.
     * @return the AvailableInplaceUpgradeOSListResult object itself.
     */
    public AvailableInplaceUpgradeOSListResult withValue(List<AvailableInplaceUpgradeOSResourceInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: Link to the next set of results. Not empty if value contains incomplete list of
     * results.
     *
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
