// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.DraftPackagesClient;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageGetPathResponseInner;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageResourceInner;
import com.azure.resourcemanager.testbase.models.CopyFromPackageOperationParameters;
import com.azure.resourcemanager.testbase.models.DraftPackageListResult;
import com.azure.resourcemanager.testbase.models.DraftPackageUpdateParameters;
import com.azure.resourcemanager.testbase.models.ExtractFileOperationParameters;
import com.azure.resourcemanager.testbase.models.GenerateOperationParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DraftPackagesClient. */
public final class DraftPackagesClientImpl implements DraftPackagesClient {
    /** The proxy service used to perform REST calls. */
    private final DraftPackagesService service;

    /** The service client containing this operation class. */
    private final TestBaseImpl client;

    /**
     * Initializes an instance of DraftPackagesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DraftPackagesClientImpl(TestBaseImpl client) {
        this.service =
            RestProxy.create(DraftPackagesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TestBaseDraftPackages to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TestBaseDraftPackage")
    public interface DraftPackagesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageListResult>> listByTestBaseAccount(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("packageName") String packageName,
            @QueryParam("editPackage") Boolean editPackage,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DraftPackageResourceInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DraftPackageUpdateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/getPath")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageGetPathResponseInner>> getPath(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/copyFromPackage")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> copyFromPackage(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CopyFromPackageOperationParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/extractFile")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> extractFile(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ExtractFileOperationParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/generateFoldersAndScripts")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> generateFoldersAndScripts(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("draftPackageName") String draftPackageName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GenerateOperationParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DraftPackageListResult>> listByTestBaseAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName Parameter used to filter draft packages by linked Test Base Package.
     * @param editPackage Parameter used to filter draft packages by editPackage property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DraftPackageResourceInner>> listByTestBaseAccountSinglePageAsync(
        String resourceGroupName, String testBaseAccountName, String packageName, Boolean editPackage) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByTestBaseAccount(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            packageName,
                            editPackage,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<DraftPackageResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName Parameter used to filter draft packages by linked Test Base Package.
     * @param editPackage Parameter used to filter draft packages by editPackage property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DraftPackageResourceInner>> listByTestBaseAccountSinglePageAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        Boolean editPackage,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTestBaseAccount(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                packageName,
                editPackage,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName Parameter used to filter draft packages by linked Test Base Package.
     * @param editPackage Parameter used to filter draft packages by editPackage property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DraftPackageResourceInner> listByTestBaseAccountAsync(
        String resourceGroupName, String testBaseAccountName, String packageName, Boolean editPackage) {
        return new PagedFlux<>(
            () ->
                listByTestBaseAccountSinglePageAsync(resourceGroupName, testBaseAccountName, packageName, editPackage),
            nextLink -> listByTestBaseAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DraftPackageResourceInner> listByTestBaseAccountAsync(
        String resourceGroupName, String testBaseAccountName) {
        final String packageName = null;
        final Boolean editPackage = null;
        return new PagedFlux<>(
            () ->
                listByTestBaseAccountSinglePageAsync(resourceGroupName, testBaseAccountName, packageName, editPackage),
            nextLink -> listByTestBaseAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName Parameter used to filter draft packages by linked Test Base Package.
     * @param editPackage Parameter used to filter draft packages by editPackage property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DraftPackageResourceInner> listByTestBaseAccountAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        Boolean editPackage,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByTestBaseAccountSinglePageAsync(
                    resourceGroupName, testBaseAccountName, packageName, editPackage, context),
            nextLink -> listByTestBaseAccountNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DraftPackageResourceInner> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName) {
        final String packageName = null;
        final Boolean editPackage = null;
        return new PagedIterable<>(
            listByTestBaseAccountAsync(resourceGroupName, testBaseAccountName, packageName, editPackage));
    }

    /**
     * Lists all the draft packages under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName Parameter used to filter draft packages by linked Test Base Package.
     * @param editPackage Parameter used to filter draft packages by editPackage property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DraftPackageResourceInner> listByTestBaseAccount(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        Boolean editPackage,
        Context context) {
        return new PagedIterable<>(
            listByTestBaseAccountAsync(resourceGroupName, testBaseAccountName, packageName, editPackage, context));
    }

    /**
     * Creates or replaces a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to create a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or replaces a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to create a Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageResourceInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Creates or replaces a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to create a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DraftPackageResourceInner> createAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageResourceInner parameters) {
        return createWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or replaces a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to create a Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DraftPackageResourceInner> createWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageResourceInner parameters,
        Context context) {
        return createWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .block();
    }

    /**
     * Creates or replaces a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to create a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DraftPackageResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageResourceInner parameters) {
        return createWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, parameters, Context.NONE)
            .getValue();
    }

    /**
     * Updates an existing Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to update a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageUpdateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to update a Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageUpdateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Updates an existing Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to update a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DraftPackageResourceInner> updateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageUpdateParameters parameters) {
        return updateWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates an existing Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to update a Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DraftPackageResourceInner> updateWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageUpdateParameters parameters,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .block();
    }

    /**
     * Updates an existing Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to update a Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Draft Package resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DraftPackageResourceInner update(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        DraftPackageUpdateParameters parameters) {
        return updateWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, parameters, Context.NONE)
            .getValue();
    }

    /**
     * Deletes a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        return deleteWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, context).block();
    }

    /**
     * Deletes a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        deleteWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE);
    }

    /**
     * Gets a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Draft Package along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> getWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Draft Package along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageResourceInner>> getWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Draft Package on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DraftPackageResourceInner> getAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Draft Package along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DraftPackageResourceInner> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, context).block();
    }

    /**
     * Gets a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Draft Package.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DraftPackageResourceInner get(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        return getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE).getValue();
    }

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageGetPathResponseInner>> getPathWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getPath(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DraftPackageGetPathResponseInner>> getPathWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getPath(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DraftPackageGetPathResponseInner> getPathAsync(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        return getPathWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DraftPackageGetPathResponseInner> getPathWithResponse(
        String resourceGroupName, String testBaseAccountName, String draftPackageName, Context context) {
        return getPathWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, context).block();
    }

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DraftPackageGetPathResponseInner getPath(
        String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        return getPathWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE).getValue();
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> copyFromPackageWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .copyFromPackage(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> copyFromPackageWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .copyFromPackage(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCopyFromPackageAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            copyFromPackageWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCopyFromPackageAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            copyFromPackageWithResponseAsync(
                resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCopyFromPackage(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        return this
            .beginCopyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .getSyncPoller();
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCopyFromPackage(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters,
        Context context) {
        return this
            .beginCopyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> copyFromPackageAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        return beginCopyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> copyFromPackageAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters,
        Context context) {
        return beginCopyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyFromPackage(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        copyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters).block();
    }

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyFromPackage(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        CopyFromPackageOperationParameters parameters,
        Context context) {
        copyFromPackageAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context).block();
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> extractFileWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .extractFile(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> extractFileWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .extractFile(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginExtractFileAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            extractFileWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginExtractFileAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            extractFileWithResponseAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginExtractFile(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters) {
        return this
            .beginExtractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .getSyncPoller();
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginExtractFile(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters,
        Context context) {
        return this
            .beginExtractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> extractFileAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters) {
        return beginExtractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> extractFileAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters,
        Context context) {
        return beginExtractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void extractFile(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters) {
        extractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters).block();
    }

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void extractFile(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        ExtractFileOperationParameters parameters,
        Context context) {
        extractFileAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context).block();
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generateFoldersAndScriptsWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .generateFoldersAndScripts(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            draftPackageName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generateFoldersAndScriptsWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (draftPackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter draftPackageName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .generateFoldersAndScripts(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                draftPackageName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginGenerateFoldersAndScriptsAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            generateFoldersAndScriptsWithResponseAsync(
                resourceGroupName, testBaseAccountName, draftPackageName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginGenerateFoldersAndScriptsAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            generateFoldersAndScriptsWithResponseAsync(
                resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginGenerateFoldersAndScripts(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters) {
        return this
            .beginGenerateFoldersAndScriptsAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .getSyncPoller();
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginGenerateFoldersAndScripts(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters,
        Context context) {
        return this
            .beginGenerateFoldersAndScriptsAsync(
                resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> generateFoldersAndScriptsAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters) {
        return beginGenerateFoldersAndScriptsAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> generateFoldersAndScriptsAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters,
        Context context) {
        return beginGenerateFoldersAndScriptsAsync(
                resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void generateFoldersAndScripts(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters) {
        generateFoldersAndScriptsAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters).block();
    }

    /**
     * Generates folders and scripts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param draftPackageName The resource name of the Test Base Draft Package.
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void generateFoldersAndScripts(
        String resourceGroupName,
        String testBaseAccountName,
        String draftPackageName,
        GenerateOperationParameters parameters,
        Context context) {
        generateFoldersAndScriptsAsync(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DraftPackageResourceInner>> listByTestBaseAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTestBaseAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DraftPackageResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Draft Packages along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DraftPackageResourceInner>> listByTestBaseAccountNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTestBaseAccountNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
