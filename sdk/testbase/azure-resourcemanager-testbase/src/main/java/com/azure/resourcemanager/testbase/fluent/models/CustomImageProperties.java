// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.ImageSource;
import com.azure.resourcemanager.testbase.models.ImageStatus;
import com.azure.resourcemanager.testbase.models.ImageValidationResults;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The properties of the test base custom image. */
@Fluent
public final class CustomImageProperties {
    /*
     * The Id of the associated VHD resource.
     */
    @JsonProperty(value = "vhdId")
    private String vhdId;

    /*
     * Image definition name.
     */
    @JsonProperty(value = "definitionName", required = true)
    private String definitionName;

    /*
     * Image version name.
     */
    @JsonProperty(value = "versionName", required = true)
    private String versionName;

    /*
     * Custom image source type.
     */
    @JsonProperty(value = "source", required = true)
    private ImageSource source;

    /*
     * Product of the custom image.
     */
    @JsonProperty(value = "product", access = JsonProperty.Access.WRITE_ONLY)
    private String product;

    /*
     * Release of the custom image OS.
     */
    @JsonProperty(value = "release", access = JsonProperty.Access.WRITE_ONLY)
    private String release;

    /*
     * Status of the custom image.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ImageStatus status;

    /*
     * The UTC timestamp when the custom image was published.
     */
    @JsonProperty(value = "creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /*
     * The validation result of the custom image.
     */
    @JsonProperty(value = "validationResults", access = JsonProperty.Access.WRITE_ONLY)
    private ImageValidationResults validationResults;

    /*
     * This property indicates the size of the VHD to be created.
     */
    @JsonProperty(value = "osDiskImageSizeInGB", access = JsonProperty.Access.WRITE_ONLY)
    private Long osDiskImageSizeInGB;

    /*
     * The release version date of the release of the custom image OS.
     */
    @JsonProperty(value = "releaseVersionDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime releaseVersionDate;

    /*
     * The file name of the associated VHD resource.
     */
    @JsonProperty(value = "vhdFileName", access = JsonProperty.Access.WRITE_ONLY)
    private String vhdFileName;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of CustomImageProperties class. */
    public CustomImageProperties() {
    }

    /**
     * Get the vhdId property: The Id of the associated VHD resource.
     *
     * @return the vhdId value.
     */
    public String vhdId() {
        return this.vhdId;
    }

    /**
     * Set the vhdId property: The Id of the associated VHD resource.
     *
     * @param vhdId the vhdId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withVhdId(String vhdId) {
        this.vhdId = vhdId;
        return this;
    }

    /**
     * Get the definitionName property: Image definition name.
     *
     * @return the definitionName value.
     */
    public String definitionName() {
        return this.definitionName;
    }

    /**
     * Set the definitionName property: Image definition name.
     *
     * @param definitionName the definitionName value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withDefinitionName(String definitionName) {
        this.definitionName = definitionName;
        return this;
    }

    /**
     * Get the versionName property: Image version name.
     *
     * @return the versionName value.
     */
    public String versionName() {
        return this.versionName;
    }

    /**
     * Set the versionName property: Image version name.
     *
     * @param versionName the versionName value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withVersionName(String versionName) {
        this.versionName = versionName;
        return this;
    }

    /**
     * Get the source property: Custom image source type.
     *
     * @return the source value.
     */
    public ImageSource source() {
        return this.source;
    }

    /**
     * Set the source property: Custom image source type.
     *
     * @param source the source value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withSource(ImageSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the product property: Product of the custom image.
     *
     * @return the product value.
     */
    public String product() {
        return this.product;
    }

    /**
     * Get the release property: Release of the custom image OS.
     *
     * @return the release value.
     */
    public String release() {
        return this.release;
    }

    /**
     * Get the status property: Status of the custom image.
     *
     * @return the status value.
     */
    public ImageStatus status() {
        return this.status;
    }

    /**
     * Get the creationTime property: The UTC timestamp when the custom image was published.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the validationResults property: The validation result of the custom image.
     *
     * @return the validationResults value.
     */
    public ImageValidationResults validationResults() {
        return this.validationResults;
    }

    /**
     * Get the osDiskImageSizeInGB property: This property indicates the size of the VHD to be created.
     *
     * @return the osDiskImageSizeInGB value.
     */
    public Long osDiskImageSizeInGB() {
        return this.osDiskImageSizeInGB;
    }

    /**
     * Get the releaseVersionDate property: The release version date of the release of the custom image OS.
     *
     * @return the releaseVersionDate value.
     */
    public OffsetDateTime releaseVersionDate() {
        return this.releaseVersionDate;
    }

    /**
     * Get the vhdFileName property: The file name of the associated VHD resource.
     *
     * @return the vhdFileName value.
     */
    public String vhdFileName() {
        return this.vhdFileName;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (definitionName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property definitionName in model CustomImageProperties"));
        }
        if (versionName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property versionName in model CustomImageProperties"));
        }
        if (source() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property source in model CustomImageProperties"));
        }
        if (validationResults() != null) {
            validationResults().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomImageProperties.class);
}
