// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.ApplicationType;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties of a gallery application.
 */
@Fluent
public final class GalleryAppProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The application type of a gallery application.
     */
    @JsonProperty(value = "applicationType", required = true)
    private ApplicationType applicationType;

    /*
     * The id of a gallery application.
     */
    @JsonProperty(value = "applicationId", required = true)
    private String applicationId;

    /*
     * The name of a gallery application.
     */
    @JsonProperty(value = "applicationName", required = true)
    private String applicationName;

    /*
     * The number of users using a gallery application.
     */
    @JsonProperty(value = "popularity", required = true)
    private long popularity;

    /**
     * Creates an instance of GalleryAppProperties class.
     */
    public GalleryAppProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the applicationType property: The application type of a gallery application.
     * 
     * @return the applicationType value.
     */
    public ApplicationType applicationType() {
        return this.applicationType;
    }

    /**
     * Set the applicationType property: The application type of a gallery application.
     * 
     * @param applicationType the applicationType value to set.
     * @return the GalleryAppProperties object itself.
     */
    public GalleryAppProperties withApplicationType(ApplicationType applicationType) {
        this.applicationType = applicationType;
        return this;
    }

    /**
     * Get the applicationId property: The id of a gallery application.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: The id of a gallery application.
     * 
     * @param applicationId the applicationId value to set.
     * @return the GalleryAppProperties object itself.
     */
    public GalleryAppProperties withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the applicationName property: The name of a gallery application.
     * 
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: The name of a gallery application.
     * 
     * @param applicationName the applicationName value to set.
     * @return the GalleryAppProperties object itself.
     */
    public GalleryAppProperties withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the popularity property: The number of users using a gallery application.
     * 
     * @return the popularity value.
     */
    public long popularity() {
        return this.popularity;
    }

    /**
     * Set the popularity property: The number of users using a gallery application.
     * 
     * @param popularity the popularity value to set.
     * @return the GalleryAppProperties object itself.
     */
    public GalleryAppProperties withPopularity(long popularity) {
        this.popularity = popularity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property applicationType in model GalleryAppProperties"));
        }
        if (applicationId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property applicationId in model GalleryAppProperties"));
        }
        if (applicationName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property applicationName in model GalleryAppProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GalleryAppProperties.class);
}
