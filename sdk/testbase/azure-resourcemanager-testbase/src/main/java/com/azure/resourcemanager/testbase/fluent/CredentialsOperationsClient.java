// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.CredentialResourceInner;

/**
 * An instance of this class provides access to all the operations defined in CredentialsOperationsClient.
 */
public interface CredentialsOperationsClient {
    /**
     * Creates or replaces a Test Base Credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @param parameters Parameters supplied to create a Test Base Credential.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base credential resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CredentialResourceInner> createWithResponse(String resourceGroupName, String testBaseAccountName,
        String credentialName, CredentialResourceInner parameters, Context context);

    /**
     * Creates or replaces a Test Base Credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @param parameters Parameters supplied to create a Test Base Credential.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base credential resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CredentialResourceInner create(String resourceGroupName, String testBaseAccountName, String credentialName,
        CredentialResourceInner parameters);

    /**
     * Updates an existing test base credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @param parameters Parameters supplied to create a test base credential.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base credential resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CredentialResourceInner> updateWithResponse(String resourceGroupName, String testBaseAccountName,
        String credentialName, CredentialResourceInner parameters, Context context);

    /**
     * Updates an existing test base credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @param parameters Parameters supplied to create a test base credential.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base credential resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CredentialResourceInner update(String resourceGroupName, String testBaseAccountName, String credentialName,
        CredentialResourceInner parameters);

    /**
     * Deletes an existing test base credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String testBaseAccountName, String credentialName,
        Context context);

    /**
     * Deletes an existing test base credential.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param credentialName The credential resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String testBaseAccountName, String credentialName);
}
