// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.testbase.models.ImageArchitecture;
import com.azure.resourcemanager.testbase.models.ImageOSState;
import com.azure.resourcemanager.testbase.models.ImageSecurityType;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The test base image definition resource. */
@Fluent
public final class ImageDefinitionResourceInner extends ProxyResource {
    /*
     * Test Base custom image properties.
     */
    @JsonProperty(value = "properties")
    private ImageDefinitionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ImageDefinitionResourceInner class. */
    public ImageDefinitionResourceInner() {
    }

    /**
     * Get the innerProperties property: Test Base custom image properties.
     *
     * @return the innerProperties value.
     */
    private ImageDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the architecture property: Custom image architecture.
     *
     * @return the architecture value.
     */
    public ImageArchitecture architecture() {
        return this.innerProperties() == null ? null : this.innerProperties().architecture();
    }

    /**
     * Set the architecture property: Custom image architecture.
     *
     * @param architecture the architecture value to set.
     * @return the ImageDefinitionResourceInner object itself.
     */
    public ImageDefinitionResourceInner withArchitecture(ImageArchitecture architecture) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageDefinitionProperties();
        }
        this.innerProperties().withArchitecture(architecture);
        return this;
    }

    /**
     * Get the osState property: Custom image OS state.
     *
     * @return the osState value.
     */
    public ImageOSState osState() {
        return this.innerProperties() == null ? null : this.innerProperties().osState();
    }

    /**
     * Set the osState property: Custom image OS state.
     *
     * @param osState the osState value to set.
     * @return the ImageDefinitionResourceInner object itself.
     */
    public ImageDefinitionResourceInner withOsState(ImageOSState osState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageDefinitionProperties();
        }
        this.innerProperties().withOsState(osState);
        return this;
    }

    /**
     * Get the securityType property: Custom image security type.
     *
     * @return the securityType value.
     */
    public ImageSecurityType securityType() {
        return this.innerProperties() == null ? null : this.innerProperties().securityType();
    }

    /**
     * Set the securityType property: Custom image security type.
     *
     * @param securityType the securityType value to set.
     * @return the ImageDefinitionResourceInner object itself.
     */
    public ImageDefinitionResourceInner withSecurityType(ImageSecurityType securityType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageDefinitionProperties();
        }
        this.innerProperties().withSecurityType(securityType);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
