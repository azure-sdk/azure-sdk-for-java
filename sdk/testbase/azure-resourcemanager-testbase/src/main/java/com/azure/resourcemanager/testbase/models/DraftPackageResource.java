// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageResourceInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of DraftPackageResource. */
public interface DraftPackageResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    String applicationName();

    /**
     * Gets the version property: Application version.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the draftPackagePath property: The relative path of the folder hosting package files.
     *
     * @return the draftPackagePath value.
     */
    String draftPackagePath();

    /**
     * Gets the workingPath property: The relative path for a temporarily folder for package creation work.
     *
     * @return the workingPath value.
     */
    String workingPath();

    /**
     * Gets the appFileName property: The name of the app file.
     *
     * @return the appFileName value.
     */
    String appFileName();

    /**
     * Gets the sourceType property: The source type.
     *
     * @return the sourceType value.
     */
    DraftPackageSourceType sourceType();

    /**
     * Gets the useSample property: Specifies whether a sample package should be used instead of the one uploaded by the
     * user.
     *
     * @return the useSample value.
     */
    Boolean useSample();

    /**
     * Gets the comments property: Comments added by user.
     *
     * @return the comments value.
     */
    String comments();

    /**
     * Gets the intuneMetadata property: Metadata used to generate draft package folder and scripts.
     *
     * @return the intuneMetadata value.
     */
    DraftPackageIntuneAppMetadata intuneMetadata();

    /**
     * Gets the highlightedFiles property: The highlight files in the package.
     *
     * @return the highlightedFiles value.
     */
    List<HighlightedFile> highlightedFiles();

    /**
     * Gets the packageTags property: Tags of the package to be created.
     *
     * @return the packageTags value.
     */
    Map<String, String> packageTags();

    /**
     * Gets the editPackage property: Specifies whether this draft package is used to edit a package.
     *
     * @return the editPackage value.
     */
    Boolean editPackage();

    /**
     * Gets the packageId property: Specifies the package id from which the draft package copied.
     *
     * @return the packageId value.
     */
    String packageId();

    /**
     * Gets the useAutofill property: Indicates whether user choose to enable script auto-fill.
     *
     * @return the useAutofill value.
     */
    Boolean useAutofill();

    /**
     * Gets the executableLaunchCommand property: The executable launch command for script auto-fill. Will be used to
     * run the application.
     *
     * @return the executableLaunchCommand value.
     */
    String executableLaunchCommand();

    /**
     * Gets the processName property: The process name for script auto-fill. Will be used to identify the application
     * process.
     *
     * @return the processName value.
     */
    String processName();

    /**
     * Gets the tabState property: Tab state.
     *
     * @return the tabState value.
     */
    TabState tabState();

    /**
     * Gets the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    List<TestType> testTypes();

    /**
     * Gets the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    List<TargetOSInfo> targetOSList();

    /**
     * Gets the inplaceUpgradeOSPair property: Specifies the baseline os and target os for inplace upgrade.
     *
     * @return the inplaceUpgradeOSPair value.
     */
    InplaceUpgradeOSInfo inplaceUpgradeOSPair();

    /**
     * Gets the lastModifiedTime property: The UTC timestamp when the package was last modified.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    String flightingRing();

    /**
     * Gets the firstPartyApps property: The list of first party applications to test along with user application.
     *
     * @return the firstPartyApps value.
     */
    List<FirstPartyAppDefinition> firstPartyApps();

    /**
     * Gets the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @return the galleryApps value.
     */
    List<GalleryAppDefinition> galleryApps();

    /**
     * Gets the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    List<Test> tests();

    /**
     * Gets the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @return the intuneEnrollmentMetadata value.
     */
    IntuneEnrollmentMetadata intuneEnrollmentMetadata();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.testbase.fluent.models.DraftPackageResourceInner object.
     *
     * @return the inner object.
     */
    DraftPackageResourceInner innerModel();

    /** The entirety of the DraftPackageResource definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /** The DraftPackageResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the DraftPackageResource definition. */
        interface Blank extends WithParentResource {
        }

        /** The stage of the DraftPackageResource definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, testBaseAccountName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param testBaseAccountName The resource name of the Test Base Account.
             * @return the next definition stage.
             */
            WithCreate withExistingTestBaseAccount(String resourceGroupName, String testBaseAccountName);
        }

        /**
         * The stage of the DraftPackageResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithApplicationName,
                DefinitionStages.WithVersion,
                DefinitionStages.WithAppFileName,
                DefinitionStages.WithSourceType,
                DefinitionStages.WithUseSample,
                DefinitionStages.WithComments,
                DefinitionStages.WithIntuneMetadata,
                DefinitionStages.WithHighlightedFiles,
                DefinitionStages.WithPackageTags,
                DefinitionStages.WithEditPackage,
                DefinitionStages.WithPackageId,
                DefinitionStages.WithUseAutofill,
                DefinitionStages.WithExecutableLaunchCommand,
                DefinitionStages.WithProcessName,
                DefinitionStages.WithTabState,
                DefinitionStages.WithTestTypes,
                DefinitionStages.WithTargetOSList,
                DefinitionStages.WithInplaceUpgradeOSPair,
                DefinitionStages.WithFlightingRing,
                DefinitionStages.WithFirstPartyApps,
                DefinitionStages.WithGalleryApps,
                DefinitionStages.WithTests,
                DefinitionStages.WithIntuneEnrollmentMetadata {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DraftPackageResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DraftPackageResource create(Context context);
        }

        /** The stage of the DraftPackageResource definition allowing to specify applicationName. */
        interface WithApplicationName {
            /**
             * Specifies the applicationName property: Application name.
             *
             * @param applicationName Application name.
             * @return the next definition stage.
             */
            WithCreate withApplicationName(String applicationName);
        }

        /** The stage of the DraftPackageResource definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: Application version.
             *
             * @param version Application version.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }

        /** The stage of the DraftPackageResource definition allowing to specify appFileName. */
        interface WithAppFileName {
            /**
             * Specifies the appFileName property: The name of the app file..
             *
             * @param appFileName The name of the app file.
             * @return the next definition stage.
             */
            WithCreate withAppFileName(String appFileName);
        }

        /** The stage of the DraftPackageResource definition allowing to specify sourceType. */
        interface WithSourceType {
            /**
             * Specifies the sourceType property: The source type..
             *
             * @param sourceType The source type.
             * @return the next definition stage.
             */
            WithCreate withSourceType(DraftPackageSourceType sourceType);
        }

        /** The stage of the DraftPackageResource definition allowing to specify useSample. */
        interface WithUseSample {
            /**
             * Specifies the useSample property: Specifies whether a sample package should be used instead of the one
             * uploaded by the user..
             *
             * @param useSample Specifies whether a sample package should be used instead of the one uploaded by the
             *     user.
             * @return the next definition stage.
             */
            WithCreate withUseSample(Boolean useSample);
        }

        /** The stage of the DraftPackageResource definition allowing to specify comments. */
        interface WithComments {
            /**
             * Specifies the comments property: Comments added by user..
             *
             * @param comments Comments added by user.
             * @return the next definition stage.
             */
            WithCreate withComments(String comments);
        }

        /** The stage of the DraftPackageResource definition allowing to specify intuneMetadata. */
        interface WithIntuneMetadata {
            /**
             * Specifies the intuneMetadata property: Metadata used to generate draft package folder and scripts..
             *
             * @param intuneMetadata Metadata used to generate draft package folder and scripts.
             * @return the next definition stage.
             */
            WithCreate withIntuneMetadata(DraftPackageIntuneAppMetadata intuneMetadata);
        }

        /** The stage of the DraftPackageResource definition allowing to specify highlightedFiles. */
        interface WithHighlightedFiles {
            /**
             * Specifies the highlightedFiles property: The highlight files in the package..
             *
             * @param highlightedFiles The highlight files in the package.
             * @return the next definition stage.
             */
            WithCreate withHighlightedFiles(List<HighlightedFile> highlightedFiles);
        }

        /** The stage of the DraftPackageResource definition allowing to specify packageTags. */
        interface WithPackageTags {
            /**
             * Specifies the packageTags property: Tags of the package to be created..
             *
             * @param packageTags Tags of the package to be created.
             * @return the next definition stage.
             */
            WithCreate withPackageTags(Map<String, String> packageTags);
        }

        /** The stage of the DraftPackageResource definition allowing to specify editPackage. */
        interface WithEditPackage {
            /**
             * Specifies the editPackage property: Specifies whether this draft package is used to edit a package..
             *
             * @param editPackage Specifies whether this draft package is used to edit a package.
             * @return the next definition stage.
             */
            WithCreate withEditPackage(Boolean editPackage);
        }

        /** The stage of the DraftPackageResource definition allowing to specify packageId. */
        interface WithPackageId {
            /**
             * Specifies the packageId property: Specifies the package id from which the draft package copied..
             *
             * @param packageId Specifies the package id from which the draft package copied.
             * @return the next definition stage.
             */
            WithCreate withPackageId(String packageId);
        }

        /** The stage of the DraftPackageResource definition allowing to specify useAutofill. */
        interface WithUseAutofill {
            /**
             * Specifies the useAutofill property: Indicates whether user choose to enable script auto-fill..
             *
             * @param useAutofill Indicates whether user choose to enable script auto-fill.
             * @return the next definition stage.
             */
            WithCreate withUseAutofill(Boolean useAutofill);
        }

        /** The stage of the DraftPackageResource definition allowing to specify executableLaunchCommand. */
        interface WithExecutableLaunchCommand {
            /**
             * Specifies the executableLaunchCommand property: The executable launch command for script auto-fill. Will
             * be used to run the application..
             *
             * @param executableLaunchCommand The executable launch command for script auto-fill. Will be used to run
             *     the application.
             * @return the next definition stage.
             */
            WithCreate withExecutableLaunchCommand(String executableLaunchCommand);
        }

        /** The stage of the DraftPackageResource definition allowing to specify processName. */
        interface WithProcessName {
            /**
             * Specifies the processName property: The process name for script auto-fill. Will be used to identify the
             * application process..
             *
             * @param processName The process name for script auto-fill. Will be used to identify the application
             *     process.
             * @return the next definition stage.
             */
            WithCreate withProcessName(String processName);
        }

        /** The stage of the DraftPackageResource definition allowing to specify tabState. */
        interface WithTabState {
            /**
             * Specifies the tabState property: Tab state..
             *
             * @param tabState Tab state.
             * @return the next definition stage.
             */
            WithCreate withTabState(TabState tabState);
        }

        /** The stage of the DraftPackageResource definition allowing to specify testTypes. */
        interface WithTestTypes {
            /**
             * Specifies the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests'
             * property..
             *
             * @param testTypes OOB, functional or flow driven. Mapped to the data in 'tests' property.
             * @return the next definition stage.
             */
            WithCreate withTestTypes(List<TestType> testTypes);
        }

        /** The stage of the DraftPackageResource definition allowing to specify targetOSList. */
        interface WithTargetOSList {
            /**
             * Specifies the targetOSList property: Specifies the target OSs of specific OS Update types..
             *
             * @param targetOSList Specifies the target OSs of specific OS Update types.
             * @return the next definition stage.
             */
            WithCreate withTargetOSList(List<TargetOSInfo> targetOSList);
        }

        /** The stage of the DraftPackageResource definition allowing to specify inplaceUpgradeOSPair. */
        interface WithInplaceUpgradeOSPair {
            /**
             * Specifies the inplaceUpgradeOSPair property: Specifies the baseline os and target os for inplace
             * upgrade..
             *
             * @param inplaceUpgradeOSPair Specifies the baseline os and target os for inplace upgrade.
             * @return the next definition stage.
             */
            WithCreate withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair);
        }

        /** The stage of the DraftPackageResource definition allowing to specify flightingRing. */
        interface WithFlightingRing {
            /**
             * Specifies the flightingRing property: The flighting ring for feature update..
             *
             * @param flightingRing The flighting ring for feature update.
             * @return the next definition stage.
             */
            WithCreate withFlightingRing(String flightingRing);
        }

        /** The stage of the DraftPackageResource definition allowing to specify firstPartyApps. */
        interface WithFirstPartyApps {
            /**
             * Specifies the firstPartyApps property: The list of first party applications to test along with user
             * application..
             *
             * @param firstPartyApps The list of first party applications to test along with user application.
             * @return the next definition stage.
             */
            WithCreate withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps);
        }

        /** The stage of the DraftPackageResource definition allowing to specify galleryApps. */
        interface WithGalleryApps {
            /**
             * Specifies the galleryApps property: The list of gallery apps to test along with user application..
             *
             * @param galleryApps The list of gallery apps to test along with user application.
             * @return the next definition stage.
             */
            WithCreate withGalleryApps(List<GalleryAppDefinition> galleryApps);
        }

        /** The stage of the DraftPackageResource definition allowing to specify tests. */
        interface WithTests {
            /**
             * Specifies the tests property: The detailed test information..
             *
             * @param tests The detailed test information.
             * @return the next definition stage.
             */
            WithCreate withTests(List<Test> tests);
        }

        /** The stage of the DraftPackageResource definition allowing to specify intuneEnrollmentMetadata. */
        interface WithIntuneEnrollmentMetadata {
            /**
             * Specifies the intuneEnrollmentMetadata property: The metadata of Intune enrollment..
             *
             * @param intuneEnrollmentMetadata The metadata of Intune enrollment.
             * @return the next definition stage.
             */
            WithCreate withIntuneEnrollmentMetadata(IntuneEnrollmentMetadata intuneEnrollmentMetadata);
        }
    }

    /**
     * Begins update for the DraftPackageResource resource.
     *
     * @return the stage of resource update.
     */
    DraftPackageResource.Update update();

    /** The template for DraftPackageResource update. */
    interface Update
        extends UpdateStages.WithApplicationName,
            UpdateStages.WithVersion,
            UpdateStages.WithAppFileName,
            UpdateStages.WithSourceType,
            UpdateStages.WithUseSample,
            UpdateStages.WithComments,
            UpdateStages.WithIntuneMetadata,
            UpdateStages.WithHighlightedFiles,
            UpdateStages.WithPackageTags,
            UpdateStages.WithPackageId,
            UpdateStages.WithUseAutofill,
            UpdateStages.WithExecutableLaunchCommand,
            UpdateStages.WithProcessName,
            UpdateStages.WithTabState,
            UpdateStages.WithTestTypes,
            UpdateStages.WithTargetOSList,
            UpdateStages.WithInplaceUpgradeOSPair,
            UpdateStages.WithFlightingRing,
            UpdateStages.WithFirstPartyApps,
            UpdateStages.WithGalleryApps,
            UpdateStages.WithTests,
            UpdateStages.WithIntuneEnrollmentMetadata {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DraftPackageResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DraftPackageResource apply(Context context);
    }

    /** The DraftPackageResource update stages. */
    interface UpdateStages {
        /** The stage of the DraftPackageResource update allowing to specify applicationName. */
        interface WithApplicationName {
            /**
             * Specifies the applicationName property: Application name.
             *
             * @param applicationName Application name.
             * @return the next definition stage.
             */
            Update withApplicationName(String applicationName);
        }

        /** The stage of the DraftPackageResource update allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: Application version.
             *
             * @param version Application version.
             * @return the next definition stage.
             */
            Update withVersion(String version);
        }

        /** The stage of the DraftPackageResource update allowing to specify appFileName. */
        interface WithAppFileName {
            /**
             * Specifies the appFileName property: The name of the app file..
             *
             * @param appFileName The name of the app file.
             * @return the next definition stage.
             */
            Update withAppFileName(String appFileName);
        }

        /** The stage of the DraftPackageResource update allowing to specify sourceType. */
        interface WithSourceType {
            /**
             * Specifies the sourceType property: The source type..
             *
             * @param sourceType The source type.
             * @return the next definition stage.
             */
            Update withSourceType(DraftPackageSourceType sourceType);
        }

        /** The stage of the DraftPackageResource update allowing to specify useSample. */
        interface WithUseSample {
            /**
             * Specifies the useSample property: Specifies whether a sample package should be used instead of the one
             * uploaded by the user..
             *
             * @param useSample Specifies whether a sample package should be used instead of the one uploaded by the
             *     user.
             * @return the next definition stage.
             */
            Update withUseSample(Boolean useSample);
        }

        /** The stage of the DraftPackageResource update allowing to specify comments. */
        interface WithComments {
            /**
             * Specifies the comments property: Comments added by user..
             *
             * @param comments Comments added by user.
             * @return the next definition stage.
             */
            Update withComments(String comments);
        }

        /** The stage of the DraftPackageResource update allowing to specify intuneMetadata. */
        interface WithIntuneMetadata {
            /**
             * Specifies the intuneMetadata property: Metadata used to generate draft package folder and scripts..
             *
             * @param intuneMetadata Metadata used to generate draft package folder and scripts.
             * @return the next definition stage.
             */
            Update withIntuneMetadata(DraftPackageIntuneAppMetadata intuneMetadata);
        }

        /** The stage of the DraftPackageResource update allowing to specify highlightedFiles. */
        interface WithHighlightedFiles {
            /**
             * Specifies the highlightedFiles property: The highlight files in the package..
             *
             * @param highlightedFiles The highlight files in the package.
             * @return the next definition stage.
             */
            Update withHighlightedFiles(List<HighlightedFile> highlightedFiles);
        }

        /** The stage of the DraftPackageResource update allowing to specify packageTags. */
        interface WithPackageTags {
            /**
             * Specifies the packageTags property: Tags of the package to be created..
             *
             * @param packageTags Tags of the package to be created.
             * @return the next definition stage.
             */
            Update withPackageTags(Map<String, String> packageTags);
        }

        /** The stage of the DraftPackageResource update allowing to specify packageId. */
        interface WithPackageId {
            /**
             * Specifies the packageId property: Specifies the package id from which the draft package copied..
             *
             * @param packageId Specifies the package id from which the draft package copied.
             * @return the next definition stage.
             */
            Update withPackageId(String packageId);
        }

        /** The stage of the DraftPackageResource update allowing to specify useAutofill. */
        interface WithUseAutofill {
            /**
             * Specifies the useAutofill property: Indicates whether user choose to enable script auto-fill..
             *
             * @param useAutofill Indicates whether user choose to enable script auto-fill.
             * @return the next definition stage.
             */
            Update withUseAutofill(Boolean useAutofill);
        }

        /** The stage of the DraftPackageResource update allowing to specify executableLaunchCommand. */
        interface WithExecutableLaunchCommand {
            /**
             * Specifies the executableLaunchCommand property: The executable launch command for script auto-fill. Will
             * be used to run the application..
             *
             * @param executableLaunchCommand The executable launch command for script auto-fill. Will be used to run
             *     the application.
             * @return the next definition stage.
             */
            Update withExecutableLaunchCommand(String executableLaunchCommand);
        }

        /** The stage of the DraftPackageResource update allowing to specify processName. */
        interface WithProcessName {
            /**
             * Specifies the processName property: The process name for script auto-fill. Will be used to identify the
             * application process..
             *
             * @param processName The process name for script auto-fill. Will be used to identify the application
             *     process.
             * @return the next definition stage.
             */
            Update withProcessName(String processName);
        }

        /** The stage of the DraftPackageResource update allowing to specify tabState. */
        interface WithTabState {
            /**
             * Specifies the tabState property: Tab state..
             *
             * @param tabState Tab state.
             * @return the next definition stage.
             */
            Update withTabState(TabState tabState);
        }

        /** The stage of the DraftPackageResource update allowing to specify testTypes. */
        interface WithTestTypes {
            /**
             * Specifies the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests'
             * property..
             *
             * @param testTypes OOB, functional or flow driven. Mapped to the data in 'tests' property.
             * @return the next definition stage.
             */
            Update withTestTypes(List<TestType> testTypes);
        }

        /** The stage of the DraftPackageResource update allowing to specify targetOSList. */
        interface WithTargetOSList {
            /**
             * Specifies the targetOSList property: Specifies the target OSs of specific OS Update types..
             *
             * @param targetOSList Specifies the target OSs of specific OS Update types.
             * @return the next definition stage.
             */
            Update withTargetOSList(List<TargetOSInfo> targetOSList);
        }

        /** The stage of the DraftPackageResource update allowing to specify inplaceUpgradeOSPair. */
        interface WithInplaceUpgradeOSPair {
            /**
             * Specifies the inplaceUpgradeOSPair property: Specifies the baseline os and target os for in-place
             * upgrade..
             *
             * @param inplaceUpgradeOSPair Specifies the baseline os and target os for in-place upgrade.
             * @return the next definition stage.
             */
            Update withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair);
        }

        /** The stage of the DraftPackageResource update allowing to specify flightingRing. */
        interface WithFlightingRing {
            /**
             * Specifies the flightingRing property: The flighting ring for feature update..
             *
             * @param flightingRing The flighting ring for feature update.
             * @return the next definition stage.
             */
            Update withFlightingRing(String flightingRing);
        }

        /** The stage of the DraftPackageResource update allowing to specify firstPartyApps. */
        interface WithFirstPartyApps {
            /**
             * Specifies the firstPartyApps property: Specifies the list of first party applications to test along with
             * user application..
             *
             * @param firstPartyApps Specifies the list of first party applications to test along with user application.
             * @return the next definition stage.
             */
            Update withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps);
        }

        /** The stage of the DraftPackageResource update allowing to specify galleryApps. */
        interface WithGalleryApps {
            /**
             * Specifies the galleryApps property: The list of gallery apps to test along with user application..
             *
             * @param galleryApps The list of gallery apps to test along with user application.
             * @return the next definition stage.
             */
            Update withGalleryApps(List<GalleryAppDefinition> galleryApps);
        }

        /** The stage of the DraftPackageResource update allowing to specify tests. */
        interface WithTests {
            /**
             * Specifies the tests property: The detailed test information..
             *
             * @param tests The detailed test information.
             * @return the next definition stage.
             */
            Update withTests(List<Test> tests);
        }

        /** The stage of the DraftPackageResource update allowing to specify intuneEnrollmentMetadata. */
        interface WithIntuneEnrollmentMetadata {
            /**
             * Specifies the intuneEnrollmentMetadata property: The metadata of Intune enrollment..
             *
             * @param intuneEnrollmentMetadata The metadata of Intune enrollment.
             * @return the next definition stage.
             */
            Update withIntuneEnrollmentMetadata(IntuneEnrollmentMetadata intuneEnrollmentMetadata);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DraftPackageResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DraftPackageResource refresh(Context context);

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS along with {@link Response}.
     */
    Response<DraftPackageGetPathResponse> getPathWithResponse(Context context);

    /**
     * Gets draft package path and temp working path with SAS.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return draft package path and temp working path with SAS.
     */
    DraftPackageGetPathResponse getPath();

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void copyFromPackage(CopyFromPackageOperationParameters parameters);

    /**
     * Copy package file and metadata from a package to this draft package.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void copyFromPackage(CopyFromPackageOperationParameters parameters, Context context);

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void extractFile(ExtractFileOperationParameters parameters);

    /**
     * Performs extracting file operation for a Test Base Draft Package.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void extractFile(ExtractFileOperationParameters parameters, Context context);

    /**
     * Generates folders and scripts.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void generateFoldersAndScripts(GenerateOperationParameters parameters);

    /**
     * Generates folders and scripts.
     *
     * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void generateFoldersAndScripts(GenerateOperationParameters parameters, Context context);
}
