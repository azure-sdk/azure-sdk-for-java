// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.OsProductState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Properties of feature update supported OSes proxy resource. */
@Fluent
public final class FeatureUpdateSupportedOsesProperties {
    /*
     * The osId property.
     */
    @JsonProperty(value = "osId", required = true)
    private String osId;

    /*
     * The osName property.
     */
    @JsonProperty(value = "osName", required = true)
    private String osName;

    /*
     * The insiderChannel property.
     */
    @JsonProperty(value = "insiderChannel", required = true)
    private String insiderChannel;

    /*
     * The version property.
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /*
     * The displayText property.
     */
    @JsonProperty(value = "displayText", required = true)
    private String displayText;

    /*
     * The baselineProducts property.
     */
    @JsonProperty(value = "baselineProducts", required = true)
    private List<String> baselineProducts;

    /*
     * Timestamp when the OS starts to be supported.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * State of the OS product.
     */
    @JsonProperty(value = "state", required = true)
    private OsProductState state;

    /** Creates an instance of FeatureUpdateSupportedOsesProperties class. */
    public FeatureUpdateSupportedOsesProperties() {
    }

    /**
     * Get the osId property: The osId property.
     *
     * @return the osId value.
     */
    public String osId() {
        return this.osId;
    }

    /**
     * Set the osId property: The osId property.
     *
     * @param osId the osId value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withOsId(String osId) {
        this.osId = osId;
        return this;
    }

    /**
     * Get the osName property: The osName property.
     *
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: The osName property.
     *
     * @param osName the osName value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the insiderChannel property: The insiderChannel property.
     *
     * @return the insiderChannel value.
     */
    public String insiderChannel() {
        return this.insiderChannel;
    }

    /**
     * Set the insiderChannel property: The insiderChannel property.
     *
     * @param insiderChannel the insiderChannel value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withInsiderChannel(String insiderChannel) {
        this.insiderChannel = insiderChannel;
        return this;
    }

    /**
     * Get the version property: The version property.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version property.
     *
     * @param version the version value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the displayText property: The displayText property.
     *
     * @return the displayText value.
     */
    public String displayText() {
        return this.displayText;
    }

    /**
     * Set the displayText property: The displayText property.
     *
     * @param displayText the displayText value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withDisplayText(String displayText) {
        this.displayText = displayText;
        return this;
    }

    /**
     * Get the baselineProducts property: The baselineProducts property.
     *
     * @return the baselineProducts value.
     */
    public List<String> baselineProducts() {
        return this.baselineProducts;
    }

    /**
     * Set the baselineProducts property: The baselineProducts property.
     *
     * @param baselineProducts the baselineProducts value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withBaselineProducts(List<String> baselineProducts) {
        this.baselineProducts = baselineProducts;
        return this;
    }

    /**
     * Get the startTime property: Timestamp when the OS starts to be supported.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Timestamp when the OS starts to be supported.
     *
     * @param startTime the startTime value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the state property: State of the OS product.
     *
     * @return the state value.
     */
    public OsProductState state() {
        return this.state;
    }

    /**
     * Set the state property: State of the OS product.
     *
     * @param state the state value to set.
     * @return the FeatureUpdateSupportedOsesProperties object itself.
     */
    public FeatureUpdateSupportedOsesProperties withState(OsProductState state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property osId in model FeatureUpdateSupportedOsesProperties"));
        }
        if (osName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property osName in model FeatureUpdateSupportedOsesProperties"));
        }
        if (insiderChannel() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property insiderChannel in model FeatureUpdateSupportedOsesProperties"));
        }
        if (version() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property version in model FeatureUpdateSupportedOsesProperties"));
        }
        if (displayText() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property displayText in model FeatureUpdateSupportedOsesProperties"));
        }
        if (baselineProducts() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property baselineProducts in model FeatureUpdateSupportedOsesProperties"));
        }
        if (startTime() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property startTime in model FeatureUpdateSupportedOsesProperties"));
        }
        if (state() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property state in model FeatureUpdateSupportedOsesProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FeatureUpdateSupportedOsesProperties.class);
}
