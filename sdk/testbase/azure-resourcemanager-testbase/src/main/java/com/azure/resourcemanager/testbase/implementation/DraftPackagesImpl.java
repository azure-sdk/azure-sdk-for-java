// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.DraftPackagesClient;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageGetPathResponseInner;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageResourceInner;
import com.azure.resourcemanager.testbase.models.CopyFromPackageOperationParameters;
import com.azure.resourcemanager.testbase.models.DraftPackageGetPathResponse;
import com.azure.resourcemanager.testbase.models.DraftPackageResource;
import com.azure.resourcemanager.testbase.models.DraftPackages;
import com.azure.resourcemanager.testbase.models.ExtractFileOperationParameters;
import com.azure.resourcemanager.testbase.models.GenerateOperationParameters;

public final class DraftPackagesImpl implements DraftPackages {
    private static final ClientLogger LOGGER = new ClientLogger(DraftPackagesImpl.class);

    private final DraftPackagesClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public DraftPackagesImpl(DraftPackagesClient innerClient,
        com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DraftPackageResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName) {
        PagedIterable<DraftPackageResourceInner> inner
            = this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName);
        return Utils.mapPage(inner, inner1 -> new DraftPackageResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DraftPackageResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName, String packageName, Boolean editPackage, Context context) {
        PagedIterable<DraftPackageResourceInner> inner = this.serviceClient().listByTestBaseAccount(resourceGroupName,
            testBaseAccountName, packageName, editPackage, context);
        return Utils.mapPage(inner, inner1 -> new DraftPackageResourceImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String testBaseAccountName,
        String draftPackageName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, testBaseAccountName, draftPackageName,
            context);
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, draftPackageName);
    }

    public Response<DraftPackageResource> getWithResponse(String resourceGroupName, String testBaseAccountName,
        String draftPackageName, Context context) {
        Response<DraftPackageResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DraftPackageResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DraftPackageResource get(String resourceGroupName, String testBaseAccountName, String draftPackageName) {
        DraftPackageResourceInner inner
            = this.serviceClient().get(resourceGroupName, testBaseAccountName, draftPackageName);
        if (inner != null) {
            return new DraftPackageResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DraftPackageGetPathResponse> getPathWithResponse(String resourceGroupName,
        String testBaseAccountName, String draftPackageName, Context context) {
        Response<DraftPackageGetPathResponseInner> inner = this.serviceClient().getPathWithResponse(resourceGroupName,
            testBaseAccountName, draftPackageName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DraftPackageGetPathResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DraftPackageGetPathResponse getPath(String resourceGroupName, String testBaseAccountName,
        String draftPackageName) {
        DraftPackageGetPathResponseInner inner
            = this.serviceClient().getPath(resourceGroupName, testBaseAccountName, draftPackageName);
        if (inner != null) {
            return new DraftPackageGetPathResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void copyFromPackage(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        CopyFromPackageOperationParameters parameters) {
        this.serviceClient().copyFromPackage(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
    }

    public void copyFromPackage(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        CopyFromPackageOperationParameters parameters, Context context) {
        this.serviceClient().copyFromPackage(resourceGroupName, testBaseAccountName, draftPackageName, parameters,
            context);
    }

    public void extractFile(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        ExtractFileOperationParameters parameters) {
        this.serviceClient().extractFile(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
    }

    public void extractFile(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        ExtractFileOperationParameters parameters, Context context) {
        this.serviceClient().extractFile(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
    }

    public void generateFoldersAndScripts(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        GenerateOperationParameters parameters) {
        this.serviceClient().generateFoldersAndScripts(resourceGroupName, testBaseAccountName, draftPackageName,
            parameters);
    }

    public void generateFoldersAndScripts(String resourceGroupName, String testBaseAccountName, String draftPackageName,
        GenerateOperationParameters parameters, Context context) {
        this.serviceClient().generateFoldersAndScripts(resourceGroupName, testBaseAccountName, draftPackageName,
            parameters, context);
    }

    public DraftPackageResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String draftPackageName = Utils.getValueFromIdByName(id, "draftPackages");
        if (draftPackageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'draftPackages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE).getValue();
    }

    public Response<DraftPackageResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String draftPackageName = Utils.getValueFromIdByName(id, "draftPackages");
        if (draftPackageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'draftPackages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String draftPackageName = Utils.getValueFromIdByName(id, "draftPackages");
        if (draftPackageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'draftPackages'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String draftPackageName = Utils.getValueFromIdByName(id, "draftPackages");
        if (draftPackageName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'draftPackages'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, context);
    }

    private DraftPackagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }

    public DraftPackageResourceImpl define(String name) {
        return new DraftPackageResourceImpl(name, this.manager());
    }
}
