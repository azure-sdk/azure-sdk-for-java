// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of the definition of a first party application of the Test Base package. */
@Fluent
public final class FirstPartyAppDefinition {
    /*
     * The media name of a first party application of a Test Base Account.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The architecture of a first party application of a Test Base Account.
     */
    @JsonProperty(value = "architecture")
    private Architecture architecture;

    /*
     * The channel info of a first party application of a Test Base Account.
     */
    @JsonProperty(value = "channel")
    private String channel;

    /*
     * The ring info of a first party application of a Test Base Account.
     */
    @JsonProperty(value = "ring")
    private String ring;

    /*
     * Specifies how the first party applications should be inter-operated with user's application.
     */
    @JsonProperty(value = "interopExecutionMode")
    private InteropExecutionMode interopExecutionMode;

    /** Creates an instance of FirstPartyAppDefinition class. */
    public FirstPartyAppDefinition() {
    }

    /**
     * Get the name property: The media name of a first party application of a Test Base Account.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The media name of a first party application of a Test Base Account.
     *
     * @param name the name value to set.
     * @return the FirstPartyAppDefinition object itself.
     */
    public FirstPartyAppDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the architecture property: The architecture of a first party application of a Test Base Account.
     *
     * @return the architecture value.
     */
    public Architecture architecture() {
        return this.architecture;
    }

    /**
     * Set the architecture property: The architecture of a first party application of a Test Base Account.
     *
     * @param architecture the architecture value to set.
     * @return the FirstPartyAppDefinition object itself.
     */
    public FirstPartyAppDefinition withArchitecture(Architecture architecture) {
        this.architecture = architecture;
        return this;
    }

    /**
     * Get the channel property: The channel info of a first party application of a Test Base Account.
     *
     * @return the channel value.
     */
    public String channel() {
        return this.channel;
    }

    /**
     * Set the channel property: The channel info of a first party application of a Test Base Account.
     *
     * @param channel the channel value to set.
     * @return the FirstPartyAppDefinition object itself.
     */
    public FirstPartyAppDefinition withChannel(String channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Get the ring property: The ring info of a first party application of a Test Base Account.
     *
     * @return the ring value.
     */
    public String ring() {
        return this.ring;
    }

    /**
     * Set the ring property: The ring info of a first party application of a Test Base Account.
     *
     * @param ring the ring value to set.
     * @return the FirstPartyAppDefinition object itself.
     */
    public FirstPartyAppDefinition withRing(String ring) {
        this.ring = ring;
        return this;
    }

    /**
     * Get the interopExecutionMode property: Specifies how the first party applications should be inter-operated with
     * user's application.
     *
     * @return the interopExecutionMode value.
     */
    public InteropExecutionMode interopExecutionMode() {
        return this.interopExecutionMode;
    }

    /**
     * Set the interopExecutionMode property: Specifies how the first party applications should be inter-operated with
     * user's application.
     *
     * @param interopExecutionMode the interopExecutionMode value to set.
     * @return the FirstPartyAppDefinition object itself.
     */
    public FirstPartyAppDefinition withInteropExecutionMode(InteropExecutionMode interopExecutionMode) {
        this.interopExecutionMode = interopExecutionMode;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
