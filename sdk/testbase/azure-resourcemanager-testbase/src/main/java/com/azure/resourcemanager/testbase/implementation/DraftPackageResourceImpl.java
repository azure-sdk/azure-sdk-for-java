// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageResourceInner;
import com.azure.resourcemanager.testbase.models.CopyFromPackageOperationParameters;
import com.azure.resourcemanager.testbase.models.DraftPackageGetPathResponse;
import com.azure.resourcemanager.testbase.models.DraftPackageIntuneAppMetadata;
import com.azure.resourcemanager.testbase.models.DraftPackageResource;
import com.azure.resourcemanager.testbase.models.DraftPackageSourceType;
import com.azure.resourcemanager.testbase.models.DraftPackageUpdateParameters;
import com.azure.resourcemanager.testbase.models.ExtractFileOperationParameters;
import com.azure.resourcemanager.testbase.models.FirstPartyAppDefinition;
import com.azure.resourcemanager.testbase.models.GalleryAppDefinition;
import com.azure.resourcemanager.testbase.models.GenerateOperationParameters;
import com.azure.resourcemanager.testbase.models.HighlightedFile;
import com.azure.resourcemanager.testbase.models.InplaceUpgradeOSInfo;
import com.azure.resourcemanager.testbase.models.IntuneEnrollmentMetadata;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.TabState;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DraftPackageResourceImpl
    implements DraftPackageResource, DraftPackageResource.Definition, DraftPackageResource.Update {
    private DraftPackageResourceInner innerObject;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String applicationName() {
        return this.innerModel().applicationName();
    }

    public String version() {
        return this.innerModel().version();
    }

    public String draftPackagePath() {
        return this.innerModel().draftPackagePath();
    }

    public String workingPath() {
        return this.innerModel().workingPath();
    }

    public String appFileName() {
        return this.innerModel().appFileName();
    }

    public DraftPackageSourceType sourceType() {
        return this.innerModel().sourceType();
    }

    public Boolean useSample() {
        return this.innerModel().useSample();
    }

    public String comments() {
        return this.innerModel().comments();
    }

    public DraftPackageIntuneAppMetadata intuneMetadata() {
        return this.innerModel().intuneMetadata();
    }

    public List<HighlightedFile> highlightedFiles() {
        List<HighlightedFile> inner = this.innerModel().highlightedFiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> packageTags() {
        Map<String, String> inner = this.innerModel().packageTags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Boolean editPackage() {
        return this.innerModel().editPackage();
    }

    public String packageId() {
        return this.innerModel().packageId();
    }

    public Boolean useAutofill() {
        return this.innerModel().useAutofill();
    }

    public String executableLaunchCommand() {
        return this.innerModel().executableLaunchCommand();
    }

    public String processName() {
        return this.innerModel().processName();
    }

    public TabState tabState() {
        return this.innerModel().tabState();
    }

    public List<TestType> testTypes() {
        List<TestType> inner = this.innerModel().testTypes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<TargetOSInfo> targetOSList() {
        List<TargetOSInfo> inner = this.innerModel().targetOSList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public InplaceUpgradeOSInfo inplaceUpgradeOSPair() {
        return this.innerModel().inplaceUpgradeOSPair();
    }

    public OffsetDateTime lastModifiedTime() {
        return this.innerModel().lastModifiedTime();
    }

    public String flightingRing() {
        return this.innerModel().flightingRing();
    }

    public List<FirstPartyAppDefinition> firstPartyApps() {
        List<FirstPartyAppDefinition> inner = this.innerModel().firstPartyApps();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<GalleryAppDefinition> galleryApps() {
        List<GalleryAppDefinition> inner = this.innerModel().galleryApps();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Test> tests() {
        List<Test> inner = this.innerModel().tests();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public IntuneEnrollmentMetadata intuneEnrollmentMetadata() {
        return this.innerModel().intuneEnrollmentMetadata();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DraftPackageResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String testBaseAccountName;

    private String draftPackageName;

    private DraftPackageUpdateParameters updateParameters;

    public DraftPackageResourceImpl withExistingTestBaseAccount(String resourceGroupName, String testBaseAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.testBaseAccountName = testBaseAccountName;
        return this;
    }

    public DraftPackageResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .createWithResponse(
                    resourceGroupName, testBaseAccountName, draftPackageName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public DraftPackageResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .createWithResponse(
                    resourceGroupName, testBaseAccountName, draftPackageName, this.innerModel(), context)
                .getValue();
        return this;
    }

    DraftPackageResourceImpl(String name, com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerObject = new DraftPackageResourceInner();
        this.serviceManager = serviceManager;
        this.draftPackageName = name;
    }

    public DraftPackageResourceImpl update() {
        this.updateParameters = new DraftPackageUpdateParameters();
        return this;
    }

    public DraftPackageResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .updateWithResponse(
                    resourceGroupName, testBaseAccountName, draftPackageName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public DraftPackageResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .updateWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, updateParameters, context)
                .getValue();
        return this;
    }

    DraftPackageResourceImpl(
        DraftPackageResourceInner innerObject, com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.testBaseAccountName = Utils.getValueFromIdByName(innerObject.id(), "testBaseAccounts");
        this.draftPackageName = Utils.getValueFromIdByName(innerObject.id(), "draftPackages");
    }

    public DraftPackageResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, Context.NONE)
                .getValue();
        return this;
    }

    public DraftPackageResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDraftPackages()
                .getWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, context)
                .getValue();
        return this;
    }

    public Response<DraftPackageGetPathResponse> getPathWithResponse(Context context) {
        return serviceManager
            .draftPackages()
            .getPathWithResponse(resourceGroupName, testBaseAccountName, draftPackageName, context);
    }

    public DraftPackageGetPathResponse getPath() {
        return serviceManager.draftPackages().getPath(resourceGroupName, testBaseAccountName, draftPackageName);
    }

    public void copyFromPackage(CopyFromPackageOperationParameters parameters) {
        serviceManager
            .draftPackages()
            .copyFromPackage(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
    }

    public void copyFromPackage(CopyFromPackageOperationParameters parameters, Context context) {
        serviceManager
            .draftPackages()
            .copyFromPackage(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
    }

    public void extractFile(ExtractFileOperationParameters parameters) {
        serviceManager
            .draftPackages()
            .extractFile(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
    }

    public void extractFile(ExtractFileOperationParameters parameters, Context context) {
        serviceManager
            .draftPackages()
            .extractFile(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
    }

    public void generateFoldersAndScripts(GenerateOperationParameters parameters) {
        serviceManager
            .draftPackages()
            .generateFoldersAndScripts(resourceGroupName, testBaseAccountName, draftPackageName, parameters);
    }

    public void generateFoldersAndScripts(GenerateOperationParameters parameters, Context context) {
        serviceManager
            .draftPackages()
            .generateFoldersAndScripts(resourceGroupName, testBaseAccountName, draftPackageName, parameters, context);
    }

    public DraftPackageResourceImpl withApplicationName(String applicationName) {
        if (isInCreateMode()) {
            this.innerModel().withApplicationName(applicationName);
            return this;
        } else {
            this.updateParameters.withApplicationName(applicationName);
            return this;
        }
    }

    public DraftPackageResourceImpl withVersion(String version) {
        if (isInCreateMode()) {
            this.innerModel().withVersion(version);
            return this;
        } else {
            this.updateParameters.withVersion(version);
            return this;
        }
    }

    public DraftPackageResourceImpl withAppFileName(String appFileName) {
        if (isInCreateMode()) {
            this.innerModel().withAppFileName(appFileName);
            return this;
        } else {
            this.updateParameters.withAppFileName(appFileName);
            return this;
        }
    }

    public DraftPackageResourceImpl withSourceType(DraftPackageSourceType sourceType) {
        if (isInCreateMode()) {
            this.innerModel().withSourceType(sourceType);
            return this;
        } else {
            this.updateParameters.withSourceType(sourceType);
            return this;
        }
    }

    public DraftPackageResourceImpl withUseSample(Boolean useSample) {
        if (isInCreateMode()) {
            this.innerModel().withUseSample(useSample);
            return this;
        } else {
            this.updateParameters.withUseSample(useSample);
            return this;
        }
    }

    public DraftPackageResourceImpl withComments(String comments) {
        if (isInCreateMode()) {
            this.innerModel().withComments(comments);
            return this;
        } else {
            this.updateParameters.withComments(comments);
            return this;
        }
    }

    public DraftPackageResourceImpl withIntuneMetadata(DraftPackageIntuneAppMetadata intuneMetadata) {
        if (isInCreateMode()) {
            this.innerModel().withIntuneMetadata(intuneMetadata);
            return this;
        } else {
            this.updateParameters.withIntuneMetadata(intuneMetadata);
            return this;
        }
    }

    public DraftPackageResourceImpl withHighlightedFiles(List<HighlightedFile> highlightedFiles) {
        if (isInCreateMode()) {
            this.innerModel().withHighlightedFiles(highlightedFiles);
            return this;
        } else {
            this.updateParameters.withHighlightedFiles(highlightedFiles);
            return this;
        }
    }

    public DraftPackageResourceImpl withPackageTags(Map<String, String> packageTags) {
        if (isInCreateMode()) {
            this.innerModel().withPackageTags(packageTags);
            return this;
        } else {
            this.updateParameters.withPackageTags(packageTags);
            return this;
        }
    }

    public DraftPackageResourceImpl withEditPackage(Boolean editPackage) {
        this.innerModel().withEditPackage(editPackage);
        return this;
    }

    public DraftPackageResourceImpl withPackageId(String packageId) {
        if (isInCreateMode()) {
            this.innerModel().withPackageId(packageId);
            return this;
        } else {
            this.updateParameters.withPackageId(packageId);
            return this;
        }
    }

    public DraftPackageResourceImpl withUseAutofill(Boolean useAutofill) {
        if (isInCreateMode()) {
            this.innerModel().withUseAutofill(useAutofill);
            return this;
        } else {
            this.updateParameters.withUseAutofill(useAutofill);
            return this;
        }
    }

    public DraftPackageResourceImpl withExecutableLaunchCommand(String executableLaunchCommand) {
        if (isInCreateMode()) {
            this.innerModel().withExecutableLaunchCommand(executableLaunchCommand);
            return this;
        } else {
            this.updateParameters.withExecutableLaunchCommand(executableLaunchCommand);
            return this;
        }
    }

    public DraftPackageResourceImpl withProcessName(String processName) {
        if (isInCreateMode()) {
            this.innerModel().withProcessName(processName);
            return this;
        } else {
            this.updateParameters.withProcessName(processName);
            return this;
        }
    }

    public DraftPackageResourceImpl withTabState(TabState tabState) {
        if (isInCreateMode()) {
            this.innerModel().withTabState(tabState);
            return this;
        } else {
            this.updateParameters.withTabState(tabState);
            return this;
        }
    }

    public DraftPackageResourceImpl withTestTypes(List<TestType> testTypes) {
        if (isInCreateMode()) {
            this.innerModel().withTestTypes(testTypes);
            return this;
        } else {
            this.updateParameters.withTestTypes(testTypes);
            return this;
        }
    }

    public DraftPackageResourceImpl withTargetOSList(List<TargetOSInfo> targetOSList) {
        if (isInCreateMode()) {
            this.innerModel().withTargetOSList(targetOSList);
            return this;
        } else {
            this.updateParameters.withTargetOSList(targetOSList);
            return this;
        }
    }

    public DraftPackageResourceImpl withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair) {
        if (isInCreateMode()) {
            this.innerModel().withInplaceUpgradeOSPair(inplaceUpgradeOSPair);
            return this;
        } else {
            this.updateParameters.withInplaceUpgradeOSPair(inplaceUpgradeOSPair);
            return this;
        }
    }

    public DraftPackageResourceImpl withFlightingRing(String flightingRing) {
        if (isInCreateMode()) {
            this.innerModel().withFlightingRing(flightingRing);
            return this;
        } else {
            this.updateParameters.withFlightingRing(flightingRing);
            return this;
        }
    }

    public DraftPackageResourceImpl withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps) {
        if (isInCreateMode()) {
            this.innerModel().withFirstPartyApps(firstPartyApps);
            return this;
        } else {
            this.updateParameters.withFirstPartyApps(firstPartyApps);
            return this;
        }
    }

    public DraftPackageResourceImpl withGalleryApps(List<GalleryAppDefinition> galleryApps) {
        if (isInCreateMode()) {
            this.innerModel().withGalleryApps(galleryApps);
            return this;
        } else {
            this.updateParameters.withGalleryApps(galleryApps);
            return this;
        }
    }

    public DraftPackageResourceImpl withTests(List<Test> tests) {
        if (isInCreateMode()) {
            this.innerModel().withTests(tests);
            return this;
        } else {
            this.updateParameters.withTests(tests);
            return this;
        }
    }

    public DraftPackageResourceImpl withIntuneEnrollmentMetadata(IntuneEnrollmentMetadata intuneEnrollmentMetadata) {
        if (isInCreateMode()) {
            this.innerModel().withIntuneEnrollmentMetadata(intuneEnrollmentMetadata);
            return this;
        } else {
            this.updateParameters.withIntuneEnrollmentMetadata(intuneEnrollmentMetadata);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
