// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.ImageDefinitionsClient;
import com.azure.resourcemanager.testbase.fluent.models.ImageDefinitionResourceInner;
import com.azure.resourcemanager.testbase.models.ImageDefinitionResource;
import com.azure.resourcemanager.testbase.models.ImageDefinitions;

public final class ImageDefinitionsImpl implements ImageDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(ImageDefinitionsImpl.class);

    private final ImageDefinitionsClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public ImageDefinitionsImpl(ImageDefinitionsClient innerClient,
        com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ImageDefinitionResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName) {
        PagedIterable<ImageDefinitionResourceInner> inner
            = this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName);
        return Utils.mapPage(inner, inner1 -> new ImageDefinitionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ImageDefinitionResource> listByTestBaseAccount(String resourceGroupName,
        String testBaseAccountName, Context context) {
        PagedIterable<ImageDefinitionResourceInner> inner
            = this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName, context);
        return Utils.mapPage(inner, inner1 -> new ImageDefinitionResourceImpl(inner1, this.manager()));
    }

    public Response<ImageDefinitionResource> getWithResponse(String resourceGroupName, String testBaseAccountName,
        String imageDefinitionName, Context context) {
        Response<ImageDefinitionResourceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            testBaseAccountName, imageDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ImageDefinitionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ImageDefinitionResource get(String resourceGroupName, String testBaseAccountName,
        String imageDefinitionName) {
        ImageDefinitionResourceInner inner
            = this.serviceClient().get(resourceGroupName, testBaseAccountName, imageDefinitionName);
        if (inner != null) {
            return new ImageDefinitionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String testBaseAccountName,
        String imageDefinitionName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, testBaseAccountName, imageDefinitionName,
            context);
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String imageDefinitionName) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, imageDefinitionName);
    }

    public ImageDefinitionResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String imageDefinitionName = Utils.getValueFromIdByName(id, "imageDefinitions");
        if (imageDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'imageDefinitions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, imageDefinitionName, Context.NONE)
            .getValue();
    }

    public Response<ImageDefinitionResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String imageDefinitionName = Utils.getValueFromIdByName(id, "imageDefinitions");
        if (imageDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'imageDefinitions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, imageDefinitionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String imageDefinitionName = Utils.getValueFromIdByName(id, "imageDefinitions");
        if (imageDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'imageDefinitions'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, testBaseAccountName, imageDefinitionName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String imageDefinitionName = Utils.getValueFromIdByName(id, "imageDefinitions");
        if (imageDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'imageDefinitions'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, testBaseAccountName, imageDefinitionName, context);
    }

    private ImageDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }

    public ImageDefinitionResourceImpl define(String name) {
        return new ImageDefinitionResourceImpl(name, this.manager());
    }
}
