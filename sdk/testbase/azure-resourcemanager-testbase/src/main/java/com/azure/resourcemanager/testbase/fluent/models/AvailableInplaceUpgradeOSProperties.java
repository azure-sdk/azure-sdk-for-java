// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.ReleaseProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The Available In-place Upgrade OS properties.
 */
@Fluent
public final class AvailableInplaceUpgradeOSProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The name of an Available In-place Upgrade source OS of a Test Base Account.
     */
    @JsonProperty(value = "sourceOsName")
    private String sourceOsName;

    /*
     * The the release list of the source os.
     */
    @JsonProperty(value = "sourceOsReleases")
    private List<ReleaseProperties> sourceOsReleases;

    /*
     * The list of the corresponding Available In-place Upgrade target OS name of a Test Base Account.
     */
    @JsonProperty(value = "supportedTargetOsNameList")
    private List<String> supportedTargetOsNameList;

    /**
     * Creates an instance of AvailableInplaceUpgradeOSProperties class.
     */
    public AvailableInplaceUpgradeOSProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sourceOsName property: The name of an Available In-place Upgrade source OS of a Test Base Account.
     * 
     * @return the sourceOsName value.
     */
    public String sourceOsName() {
        return this.sourceOsName;
    }

    /**
     * Set the sourceOsName property: The name of an Available In-place Upgrade source OS of a Test Base Account.
     * 
     * @param sourceOsName the sourceOsName value to set.
     * @return the AvailableInplaceUpgradeOSProperties object itself.
     */
    public AvailableInplaceUpgradeOSProperties withSourceOsName(String sourceOsName) {
        this.sourceOsName = sourceOsName;
        return this;
    }

    /**
     * Get the sourceOsReleases property: The the release list of the source os.
     * 
     * @return the sourceOsReleases value.
     */
    public List<ReleaseProperties> sourceOsReleases() {
        return this.sourceOsReleases;
    }

    /**
     * Set the sourceOsReleases property: The the release list of the source os.
     * 
     * @param sourceOsReleases the sourceOsReleases value to set.
     * @return the AvailableInplaceUpgradeOSProperties object itself.
     */
    public AvailableInplaceUpgradeOSProperties withSourceOsReleases(List<ReleaseProperties> sourceOsReleases) {
        this.sourceOsReleases = sourceOsReleases;
        return this;
    }

    /**
     * Get the supportedTargetOsNameList property: The list of the corresponding Available In-place Upgrade target OS
     * name of a Test Base Account.
     * 
     * @return the supportedTargetOsNameList value.
     */
    public List<String> supportedTargetOsNameList() {
        return this.supportedTargetOsNameList;
    }

    /**
     * Set the supportedTargetOsNameList property: The list of the corresponding Available In-place Upgrade target OS
     * name of a Test Base Account.
     * 
     * @param supportedTargetOsNameList the supportedTargetOsNameList value to set.
     * @return the AvailableInplaceUpgradeOSProperties object itself.
     */
    public AvailableInplaceUpgradeOSProperties withSupportedTargetOsNameList(List<String> supportedTargetOsNameList) {
        this.supportedTargetOsNameList = supportedTargetOsNameList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceOsReleases() != null) {
            sourceOsReleases().forEach(e -> e.validate());
        }
    }
}
