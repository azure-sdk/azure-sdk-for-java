// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.testbase.fluent.models.DraftPackageUpdateParameterProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Parameters supplied to update a Test Base Draft Package. */
@Fluent
public final class DraftPackageUpdateParameters {
    /*
     * Test Base Draft Package update parameters.
     */
    @JsonProperty(value = "properties")
    private DraftPackageUpdateParameterProperties innerProperties;

    /** Creates an instance of DraftPackageUpdateParameters class. */
    public DraftPackageUpdateParameters() {
    }

    /**
     * Get the innerProperties property: Test Base Draft Package update parameters.
     *
     * @return the innerProperties value.
     */
    private DraftPackageUpdateParameterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationName();
    }

    /**
     * Set the applicationName property: Application name.
     *
     * @param applicationName the applicationName value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withApplicationName(String applicationName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withApplicationName(applicationName);
        return this;
    }

    /**
     * Get the version property: Application version.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Application version.
     *
     * @param version the version value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the appFileName property: The name of the app file.
     *
     * @return the appFileName value.
     */
    public String appFileName() {
        return this.innerProperties() == null ? null : this.innerProperties().appFileName();
    }

    /**
     * Set the appFileName property: The name of the app file.
     *
     * @param appFileName the appFileName value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withAppFileName(String appFileName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withAppFileName(appFileName);
        return this;
    }

    /**
     * Get the sourceType property: The source type.
     *
     * @return the sourceType value.
     */
    public DraftPackageSourceType sourceType() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceType();
    }

    /**
     * Set the sourceType property: The source type.
     *
     * @param sourceType the sourceType value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withSourceType(DraftPackageSourceType sourceType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withSourceType(sourceType);
        return this;
    }

    /**
     * Get the useSample property: Specifies whether a sample package should be used instead of the one uploaded by the
     * user.
     *
     * @return the useSample value.
     */
    public Boolean useSample() {
        return this.innerProperties() == null ? null : this.innerProperties().useSample();
    }

    /**
     * Set the useSample property: Specifies whether a sample package should be used instead of the one uploaded by the
     * user.
     *
     * @param useSample the useSample value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withUseSample(Boolean useSample) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withUseSample(useSample);
        return this;
    }

    /**
     * Get the comments property: Comments added by user.
     *
     * @return the comments value.
     */
    public String comments() {
        return this.innerProperties() == null ? null : this.innerProperties().comments();
    }

    /**
     * Set the comments property: Comments added by user.
     *
     * @param comments the comments value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withComments(String comments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withComments(comments);
        return this;
    }

    /**
     * Get the intuneMetadata property: Metadata used to generate draft package folder and scripts.
     *
     * @return the intuneMetadata value.
     */
    public DraftPackageIntuneAppMetadata intuneMetadata() {
        return this.innerProperties() == null ? null : this.innerProperties().intuneMetadata();
    }

    /**
     * Set the intuneMetadata property: Metadata used to generate draft package folder and scripts.
     *
     * @param intuneMetadata the intuneMetadata value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withIntuneMetadata(DraftPackageIntuneAppMetadata intuneMetadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withIntuneMetadata(intuneMetadata);
        return this;
    }

    /**
     * Get the highlightedFiles property: The highlight files in the package.
     *
     * @return the highlightedFiles value.
     */
    public List<HighlightedFile> highlightedFiles() {
        return this.innerProperties() == null ? null : this.innerProperties().highlightedFiles();
    }

    /**
     * Set the highlightedFiles property: The highlight files in the package.
     *
     * @param highlightedFiles the highlightedFiles value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withHighlightedFiles(List<HighlightedFile> highlightedFiles) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withHighlightedFiles(highlightedFiles);
        return this;
    }

    /**
     * Get the packageTags property: Tags of the package to be created.
     *
     * @return the packageTags value.
     */
    public Map<String, String> packageTags() {
        return this.innerProperties() == null ? null : this.innerProperties().packageTags();
    }

    /**
     * Set the packageTags property: Tags of the package to be created.
     *
     * @param packageTags the packageTags value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withPackageTags(Map<String, String> packageTags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withPackageTags(packageTags);
        return this;
    }

    /**
     * Get the packageId property: Specifies the package id from which the draft package copied.
     *
     * @return the packageId value.
     */
    public String packageId() {
        return this.innerProperties() == null ? null : this.innerProperties().packageId();
    }

    /**
     * Set the packageId property: Specifies the package id from which the draft package copied.
     *
     * @param packageId the packageId value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withPackageId(String packageId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withPackageId(packageId);
        return this;
    }

    /**
     * Get the useAutofill property: Indicates whether user choose to enable script auto-fill.
     *
     * @return the useAutofill value.
     */
    public Boolean useAutofill() {
        return this.innerProperties() == null ? null : this.innerProperties().useAutofill();
    }

    /**
     * Set the useAutofill property: Indicates whether user choose to enable script auto-fill.
     *
     * @param useAutofill the useAutofill value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withUseAutofill(Boolean useAutofill) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withUseAutofill(useAutofill);
        return this;
    }

    /**
     * Get the executableLaunchCommand property: The executable launch command for script auto-fill. Will be used to run
     * the application.
     *
     * @return the executableLaunchCommand value.
     */
    public String executableLaunchCommand() {
        return this.innerProperties() == null ? null : this.innerProperties().executableLaunchCommand();
    }

    /**
     * Set the executableLaunchCommand property: The executable launch command for script auto-fill. Will be used to run
     * the application.
     *
     * @param executableLaunchCommand the executableLaunchCommand value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withExecutableLaunchCommand(String executableLaunchCommand) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withExecutableLaunchCommand(executableLaunchCommand);
        return this;
    }

    /**
     * Get the processName property: The process name for script auto-fill. Will be used to identify the application
     * process.
     *
     * @return the processName value.
     */
    public String processName() {
        return this.innerProperties() == null ? null : this.innerProperties().processName();
    }

    /**
     * Set the processName property: The process name for script auto-fill. Will be used to identify the application
     * process.
     *
     * @param processName the processName value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withProcessName(String processName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withProcessName(processName);
        return this;
    }

    /**
     * Get the tabState property: Tab state.
     *
     * @return the tabState value.
     */
    public TabState tabState() {
        return this.innerProperties() == null ? null : this.innerProperties().tabState();
    }

    /**
     * Set the tabState property: Tab state.
     *
     * @param tabState the tabState value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withTabState(TabState tabState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withTabState(tabState);
        return this;
    }

    /**
     * Get the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    public List<TestType> testTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().testTypes();
    }

    /**
     * Set the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @param testTypes the testTypes value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withTestTypes(List<TestType> testTypes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withTestTypes(testTypes);
        return this;
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.innerProperties() == null ? null : this.innerProperties().targetOSList();
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withTargetOSList(List<TargetOSInfo> targetOSList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withTargetOSList(targetOSList);
        return this;
    }

    /**
     * Get the inplaceUpgradeOSPair property: Specifies the baseline os and target os for in-place upgrade.
     *
     * @return the inplaceUpgradeOSPair value.
     */
    public InplaceUpgradeOSInfo inplaceUpgradeOSPair() {
        return this.innerProperties() == null ? null : this.innerProperties().inplaceUpgradeOSPair();
    }

    /**
     * Set the inplaceUpgradeOSPair property: Specifies the baseline os and target os for in-place upgrade.
     *
     * @param inplaceUpgradeOSPair the inplaceUpgradeOSPair value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withInplaceUpgradeOSPair(inplaceUpgradeOSPair);
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.innerProperties() == null ? null : this.innerProperties().flightingRing();
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withFlightingRing(String flightingRing) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withFlightingRing(flightingRing);
        return this;
    }

    /**
     * Get the firstPartyApps property: Specifies the list of first party applications to test along with user
     * application.
     *
     * @return the firstPartyApps value.
     */
    public List<FirstPartyAppDefinition> firstPartyApps() {
        return this.innerProperties() == null ? null : this.innerProperties().firstPartyApps();
    }

    /**
     * Set the firstPartyApps property: Specifies the list of first party applications to test along with user
     * application.
     *
     * @param firstPartyApps the firstPartyApps value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withFirstPartyApps(firstPartyApps);
        return this;
    }

    /**
     * Get the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @return the galleryApps value.
     */
    public List<GalleryAppDefinition> galleryApps() {
        return this.innerProperties() == null ? null : this.innerProperties().galleryApps();
    }

    /**
     * Set the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @param galleryApps the galleryApps value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withGalleryApps(List<GalleryAppDefinition> galleryApps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withGalleryApps(galleryApps);
        return this;
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.innerProperties() == null ? null : this.innerProperties().tests();
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withTests(List<Test> tests) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withTests(tests);
        return this;
    }

    /**
     * Get the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @return the intuneEnrollmentMetadata value.
     */
    public IntuneEnrollmentMetadata intuneEnrollmentMetadata() {
        return this.innerProperties() == null ? null : this.innerProperties().intuneEnrollmentMetadata();
    }

    /**
     * Set the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @param intuneEnrollmentMetadata the intuneEnrollmentMetadata value to set.
     * @return the DraftPackageUpdateParameters object itself.
     */
    public DraftPackageUpdateParameters withIntuneEnrollmentMetadata(
        IntuneEnrollmentMetadata intuneEnrollmentMetadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DraftPackageUpdateParameterProperties();
        }
        this.innerProperties().withIntuneEnrollmentMetadata(intuneEnrollmentMetadata);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
