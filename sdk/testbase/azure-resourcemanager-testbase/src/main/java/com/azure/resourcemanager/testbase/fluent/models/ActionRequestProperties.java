// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.PreReleaseAccessRequestSpec;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.RequestStatus;
import com.azure.resourcemanager.testbase.models.RequestTypes;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The ActionRequestProperties model. */
@Fluent
public final class ActionRequestProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The requestType property.
     */
    @JsonProperty(value = "requestType", required = true)
    private RequestTypes requestType;

    /*
     * The preReleaseAccessRequestSpec property.
     */
    @JsonProperty(value = "preReleaseAccessRequestSpec")
    private PreReleaseAccessRequestSpec preReleaseAccessRequestSpec;

    /*
     * The creationDate property.
     */
    @JsonProperty(value = "creationDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationDate;

    /*
     * The status property.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private RequestStatus status;

    /** Creates an instance of ActionRequestProperties class. */
    public ActionRequestProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the requestType property: The requestType property.
     *
     * @return the requestType value.
     */
    public RequestTypes requestType() {
        return this.requestType;
    }

    /**
     * Set the requestType property: The requestType property.
     *
     * @param requestType the requestType value to set.
     * @return the ActionRequestProperties object itself.
     */
    public ActionRequestProperties withRequestType(RequestTypes requestType) {
        this.requestType = requestType;
        return this;
    }

    /**
     * Get the preReleaseAccessRequestSpec property: The preReleaseAccessRequestSpec property.
     *
     * @return the preReleaseAccessRequestSpec value.
     */
    public PreReleaseAccessRequestSpec preReleaseAccessRequestSpec() {
        return this.preReleaseAccessRequestSpec;
    }

    /**
     * Set the preReleaseAccessRequestSpec property: The preReleaseAccessRequestSpec property.
     *
     * @param preReleaseAccessRequestSpec the preReleaseAccessRequestSpec value to set.
     * @return the ActionRequestProperties object itself.
     */
    public ActionRequestProperties withPreReleaseAccessRequestSpec(
        PreReleaseAccessRequestSpec preReleaseAccessRequestSpec) {
        this.preReleaseAccessRequestSpec = preReleaseAccessRequestSpec;
        return this;
    }

    /**
     * Get the creationDate property: The creationDate property.
     *
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    public RequestStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requestType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property requestType in model ActionRequestProperties"));
        }
        if (preReleaseAccessRequestSpec() != null) {
            preReleaseAccessRequestSpec().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActionRequestProperties.class);
}
