// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.AnswerCitation;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The chat response payload.
 */
@Fluent
public final class ChatResponseInner {
    /*
     * The properties of chat response.
     */
    @JsonProperty(value = "properties", required = true)
    private ChatResponseProperties innerProperties = new ChatResponseProperties();

    /**
     * Creates an instance of ChatResponseInner class.
     */
    public ChatResponseInner() {
    }

    /**
     * Get the innerProperties property: The properties of chat response.
     * 
     * @return the innerProperties value.
     */
    private ChatResponseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the question property: The question from the request.
     * 
     * @return the question value.
     */
    public String question() {
        return this.innerProperties() == null ? null : this.innerProperties().question();
    }

    /**
     * Set the question property: The question from the request.
     * 
     * @param question the question value to set.
     * @return the ChatResponseInner object itself.
     */
    public ChatResponseInner withQuestion(String question) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChatResponseProperties();
        }
        this.innerProperties().withQuestion(question);
        return this;
    }

    /**
     * Get the answer property: The answer from the system.
     * 
     * @return the answer value.
     */
    public String answer() {
        return this.innerProperties() == null ? null : this.innerProperties().answer();
    }

    /**
     * Set the answer property: The answer from the system.
     * 
     * @param answer the answer value to set.
     * @return the ChatResponseInner object itself.
     */
    public ChatResponseInner withAnswer(String answer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChatResponseProperties();
        }
        this.innerProperties().withAnswer(answer);
        return this;
    }

    /**
     * Get the citations property: The citations property.
     * 
     * @return the citations value.
     */
    public List<AnswerCitation> citations() {
        return this.innerProperties() == null ? null : this.innerProperties().citations();
    }

    /**
     * Set the citations property: The citations property.
     * 
     * @param citations the citations value to set.
     * @return the ChatResponseInner object itself.
     */
    public ChatResponseInner withCitations(List<AnswerCitation> citations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChatResponseProperties();
        }
        this.innerProperties().withCitations(citations);
        return this;
    }

    /**
     * Get the usage property: The usage of questions within the chat session.
     * 
     * @return the usage value.
     */
    public int usage() {
        return this.innerProperties() == null ? 0 : this.innerProperties().usage();
    }

    /**
     * Get the limit property: The limit of questions within the chat session.
     * 
     * @return the limit value.
     */
    public int limit() {
        return this.innerProperties() == null ? 0 : this.innerProperties().limit();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerProperties in model ChatResponseInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChatResponseInner.class);
}
