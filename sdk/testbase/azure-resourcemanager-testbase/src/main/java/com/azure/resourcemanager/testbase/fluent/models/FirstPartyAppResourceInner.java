// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.testbase.models.Architecture;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The first party application resource.
 */
@Fluent
public final class FirstPartyAppResourceInner extends ProxyResource {
    /*
     * Properties of a first party application.
     */
    @JsonProperty(value = "properties")
    private FirstPartyAppProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of FirstPartyAppResourceInner class.
     */
    public FirstPartyAppResourceInner() {
    }

    /**
     * Get the innerProperties property: Properties of a first party application.
     * 
     * @return the innerProperties value.
     */
    private FirstPartyAppProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the mediaType property: The media type of a first party application of a Test Base Account.
     * 
     * @return the mediaType value.
     */
    public String mediaType() {
        return this.innerProperties() == null ? null : this.innerProperties().mediaType();
    }

    /**
     * Set the mediaType property: The media type of a first party application of a Test Base Account.
     * 
     * @param mediaType the mediaType value to set.
     * @return the FirstPartyAppResourceInner object itself.
     */
    public FirstPartyAppResourceInner withMediaType(String mediaType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirstPartyAppProperties();
        }
        this.innerProperties().withMediaType(mediaType);
        return this;
    }

    /**
     * Get the architecture property: The architecture of a first party application of a Test Base Account.
     * 
     * @return the architecture value.
     */
    public Architecture architecture() {
        return this.innerProperties() == null ? null : this.innerProperties().architecture();
    }

    /**
     * Set the architecture property: The architecture of a first party application of a Test Base Account.
     * 
     * @param architecture the architecture value to set.
     * @return the FirstPartyAppResourceInner object itself.
     */
    public FirstPartyAppResourceInner withArchitecture(Architecture architecture) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirstPartyAppProperties();
        }
        this.innerProperties().withArchitecture(architecture);
        return this;
    }

    /**
     * Get the channel property: The channel info of a first party application of a Test Base Account.
     * 
     * @return the channel value.
     */
    public String channel() {
        return this.innerProperties() == null ? null : this.innerProperties().channel();
    }

    /**
     * Set the channel property: The channel info of a first party application of a Test Base Account.
     * 
     * @param channel the channel value to set.
     * @return the FirstPartyAppResourceInner object itself.
     */
    public FirstPartyAppResourceInner withChannel(String channel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirstPartyAppProperties();
        }
        this.innerProperties().withChannel(channel);
        return this;
    }

    /**
     * Get the ring property: The ring info of a first party application of a Test Base Account.
     * 
     * @return the ring value.
     */
    public String ring() {
        return this.innerProperties() == null ? null : this.innerProperties().ring();
    }

    /**
     * Set the ring property: The ring info of a first party application of a Test Base Account.
     * 
     * @param ring the ring value to set.
     * @return the FirstPartyAppResourceInner object itself.
     */
    public FirstPartyAppResourceInner withRing(String ring) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirstPartyAppProperties();
        }
        this.innerProperties().withRing(ring);
        return this;
    }

    /**
     * Get the supportedProducts property: The supported OS products of a first party application of a Test Base
     * Account.
     * 
     * @return the supportedProducts value.
     */
    public List<String> supportedProducts() {
        return this.innerProperties() == null ? null : this.innerProperties().supportedProducts();
    }

    /**
     * Set the supportedProducts property: The supported OS products of a first party application of a Test Base
     * Account.
     * 
     * @param supportedProducts the supportedProducts value to set.
     * @return the FirstPartyAppResourceInner object itself.
     */
    public FirstPartyAppResourceInner withSupportedProducts(List<String> supportedProducts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirstPartyAppProperties();
        }
        this.innerProperties().withSupportedProducts(supportedProducts);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
