// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.models.ChatResponseInner;
import com.azure.resourcemanager.testbase.models.ChatRequest;

/**
 * An instance of this class provides access to all the operations defined in ChatSessionOperationsClient.
 */
public interface ChatSessionOperationsClient {
    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChatResponseInner>, ChatResponseInner> beginChat(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters);

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChatResponseInner>, ChatResponseInner> beginChat(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters, Context context);

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChatResponseInner chat(String resourceGroupName, String testBaseAccountName, String chatSessionName,
        ChatRequest parameters);

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChatResponseInner chat(String resourceGroupName, String testBaseAccountName, String chatSessionName,
        ChatRequest parameters, Context context);
}
