// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.models.CustomImageResourceInner;
import com.azure.resourcemanager.testbase.fluent.models.VerificationResultInner;
import com.azure.resourcemanager.testbase.models.ImageNameCheckAvailabilityParameters;

/** An instance of this class provides access to all the operations defined in CustomImagesClient. */
public interface CustomImagesClient {
    /**
     * Lists all the custom images under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base custom images as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomImageResourceInner> listByTestBaseAccount(String resourceGroupName, String testBaseAccountName);

    /**
     * Lists all the custom images under a test base account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base custom images as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomImageResourceInner> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Creates a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param parameters Parameters supplied to create a test base custom image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the test base custom image resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CustomImageResourceInner>, CustomImageResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        String customImageName,
        CustomImageResourceInner parameters);

    /**
     * Creates a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param parameters Parameters supplied to create a test base custom image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the test base custom image resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CustomImageResourceInner>, CustomImageResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        String customImageName,
        CustomImageResourceInner parameters,
        Context context);

    /**
     * Creates a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param parameters Parameters supplied to create a test base custom image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base custom image resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomImageResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        String customImageName,
        CustomImageResourceInner parameters);

    /**
     * Creates a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param parameters Parameters supplied to create a test base custom image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test base custom image resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomImageResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        String customImageName,
        CustomImageResourceInner parameters,
        Context context);

    /**
     * Deletes a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, String customImageName);

    /**
     * Deletes a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, String customImageName, Context context);

    /**
     * Deletes a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String testBaseAccountName, String customImageName);

    /**
     * Deletes a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String testBaseAccountName, String customImageName, Context context);

    /**
     * Gets a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a test base custom image along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CustomImageResourceInner> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String customImageName, Context context);

    /**
     * Gets a test base custom image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customImageName The resource name of the test base custom image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a test base custom image.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomImageResourceInner get(String resourceGroupName, String testBaseAccountName, String customImageName);

    /**
     * Checks that the test vase custom image generated from VHD resource has valid and unique definition and version,
     * return architecture and OS state of potential existing image definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to the test base custom image CheckAvailability operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed result of a validation or rule checking along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VerificationResultInner> checkImageNameAvailabilityWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        ImageNameCheckAvailabilityParameters parameters,
        Context context);

    /**
     * Checks that the test vase custom image generated from VHD resource has valid and unique definition and version,
     * return architecture and OS state of potential existing image definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to the test base custom image CheckAvailability operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed result of a validation or rule checking.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VerificationResultInner checkImageNameAvailability(
        String resourceGroupName, String testBaseAccountName, ImageNameCheckAvailabilityParameters parameters);
}
