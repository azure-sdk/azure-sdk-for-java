// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.RestApiForTestBase;
import com.azure.resourcemanager.testbase.implementation.AnalysisResultOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.AnalysisResultsImpl;
import com.azure.resourcemanager.testbase.implementation.FavoriteProcessImpl;
import com.azure.resourcemanager.testbase.implementation.FavoriteProcessesImpl;
import com.azure.resourcemanager.testbase.implementation.OSUpdateOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.OSUpdatesImpl;
import com.azure.resourcemanager.testbase.implementation.OperationsImpl;
import com.azure.resourcemanager.testbase.implementation.PackageOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.PackagesImpl;
import com.azure.resourcemanager.testbase.implementation.ResourceProvidersImpl;
import com.azure.resourcemanager.testbase.implementation.RestApiForTestBaseBuilder;
import com.azure.resourcemanager.testbase.implementation.SKUsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountAvailableOSImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountAvailableOSsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountFlightingRingOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountFlightingRingsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountTestTypeOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountTestTypesImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountUsagesImpl;
import com.azure.resourcemanager.testbase.implementation.TestBaseAccountsImpl;
import com.azure.resourcemanager.testbase.implementation.TestResultOperationsImpl;
import com.azure.resourcemanager.testbase.implementation.TestResultsImpl;
import com.azure.resourcemanager.testbase.implementation.TestSummariesImpl;
import com.azure.resourcemanager.testbase.implementation.TestSummaryOperationsImpl;
import com.azure.resourcemanager.testbase.models.AnalysisResultOperations;
import com.azure.resourcemanager.testbase.models.AnalysisResults;
import com.azure.resourcemanager.testbase.models.FavoriteProcess;
import com.azure.resourcemanager.testbase.models.FavoriteProcesses;
import com.azure.resourcemanager.testbase.models.OSUpdateOperations;
import com.azure.resourcemanager.testbase.models.OSUpdates;
import com.azure.resourcemanager.testbase.models.Operations;
import com.azure.resourcemanager.testbase.models.PackageOperations;
import com.azure.resourcemanager.testbase.models.Packages;
import com.azure.resourcemanager.testbase.models.ResourceProviders;
import com.azure.resourcemanager.testbase.models.SKUs;
import com.azure.resourcemanager.testbase.models.TestBaseAccountAvailableOS;
import com.azure.resourcemanager.testbase.models.TestBaseAccountAvailableOSs;
import com.azure.resourcemanager.testbase.models.TestBaseAccountFlightingRingOperations;
import com.azure.resourcemanager.testbase.models.TestBaseAccountFlightingRings;
import com.azure.resourcemanager.testbase.models.TestBaseAccountOperations;
import com.azure.resourcemanager.testbase.models.TestBaseAccountTestTypeOperations;
import com.azure.resourcemanager.testbase.models.TestBaseAccountTestTypes;
import com.azure.resourcemanager.testbase.models.TestBaseAccountUsages;
import com.azure.resourcemanager.testbase.models.TestBaseAccounts;
import com.azure.resourcemanager.testbase.models.TestResultOperations;
import com.azure.resourcemanager.testbase.models.TestResults;
import com.azure.resourcemanager.testbase.models.TestSummaries;
import com.azure.resourcemanager.testbase.models.TestSummaryOperations;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to TestbaseManager. REST API for Test Base. */
public final class TestbaseManager {
    private SKUs sKUs;

    private TestBaseAccounts testBaseAccounts;

    private TestBaseAccountOperations testBaseAccountOperations;

    private TestBaseAccountUsages testBaseAccountUsages;

    private ResourceProviders resourceProviders;

    private TestBaseAccountAvailableOSs testBaseAccountAvailableOSs;

    private TestBaseAccountAvailableOS testBaseAccountAvailableOS;

    private TestBaseAccountFlightingRings testBaseAccountFlightingRings;

    private TestBaseAccountFlightingRingOperations testBaseAccountFlightingRingOperations;

    private TestBaseAccountTestTypes testBaseAccountTestTypes;

    private TestBaseAccountTestTypeOperations testBaseAccountTestTypeOperations;

    private Packages packages;

    private PackageOperations packageOperations;

    private TestSummaries testSummaries;

    private TestSummaryOperations testSummaryOperations;

    private TestResults testResults;

    private TestResultOperations testResultOperations;

    private OSUpdates oSUpdates;

    private OSUpdateOperations oSUpdateOperations;

    private FavoriteProcesses favoriteProcesses;

    private FavoriteProcess favoriteProcess;

    private AnalysisResults analysisResults;

    private AnalysisResultOperations analysisResultOperations;

    private Operations operations;

    private final RestApiForTestBase clientObject;

    private TestbaseManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new RestApiForTestBaseBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of testbase service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the testbase service API instance.
     */
    public static TestbaseManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of testbase service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the testbase service API instance.
     */
    public static TestbaseManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new TestbaseManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create TestbaseManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new TestbaseManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of testbase service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the testbase service API instance.
         */
        public TestbaseManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.testbase")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new TestbaseManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of SKUs.
     *
     * @return Resource collection API of SKUs.
     */
    public SKUs sKUs() {
        if (this.sKUs == null) {
            this.sKUs = new SKUsImpl(clientObject.getSKUs(), this);
        }
        return sKUs;
    }

    /**
     * Gets the resource collection API of TestBaseAccounts.
     *
     * @return Resource collection API of TestBaseAccounts.
     */
    public TestBaseAccounts testBaseAccounts() {
        if (this.testBaseAccounts == null) {
            this.testBaseAccounts = new TestBaseAccountsImpl(clientObject.getTestBaseAccounts(), this);
        }
        return testBaseAccounts;
    }

    /**
     * Gets the resource collection API of TestBaseAccountOperations. It manages TestBaseAccountResource.
     *
     * @return Resource collection API of TestBaseAccountOperations.
     */
    public TestBaseAccountOperations testBaseAccountOperations() {
        if (this.testBaseAccountOperations == null) {
            this.testBaseAccountOperations =
                new TestBaseAccountOperationsImpl(clientObject.getTestBaseAccountOperations(), this);
        }
        return testBaseAccountOperations;
    }

    /**
     * Gets the resource collection API of TestBaseAccountUsages.
     *
     * @return Resource collection API of TestBaseAccountUsages.
     */
    public TestBaseAccountUsages testBaseAccountUsages() {
        if (this.testBaseAccountUsages == null) {
            this.testBaseAccountUsages = new TestBaseAccountUsagesImpl(clientObject.getTestBaseAccountUsages(), this);
        }
        return testBaseAccountUsages;
    }

    /**
     * Gets the resource collection API of ResourceProviders.
     *
     * @return Resource collection API of ResourceProviders.
     */
    public ResourceProviders resourceProviders() {
        if (this.resourceProviders == null) {
            this.resourceProviders = new ResourceProvidersImpl(clientObject.getResourceProviders(), this);
        }
        return resourceProviders;
    }

    /**
     * Gets the resource collection API of TestBaseAccountAvailableOSs.
     *
     * @return Resource collection API of TestBaseAccountAvailableOSs.
     */
    public TestBaseAccountAvailableOSs testBaseAccountAvailableOSs() {
        if (this.testBaseAccountAvailableOSs == null) {
            this.testBaseAccountAvailableOSs =
                new TestBaseAccountAvailableOSsImpl(clientObject.getTestBaseAccountAvailableOSs(), this);
        }
        return testBaseAccountAvailableOSs;
    }

    /**
     * Gets the resource collection API of TestBaseAccountAvailableOS.
     *
     * @return Resource collection API of TestBaseAccountAvailableOS.
     */
    public TestBaseAccountAvailableOS testBaseAccountAvailableOS() {
        if (this.testBaseAccountAvailableOS == null) {
            this.testBaseAccountAvailableOS =
                new TestBaseAccountAvailableOSImpl(clientObject.getTestBaseAccountAvailableOS(), this);
        }
        return testBaseAccountAvailableOS;
    }

    /**
     * Gets the resource collection API of TestBaseAccountFlightingRings.
     *
     * @return Resource collection API of TestBaseAccountFlightingRings.
     */
    public TestBaseAccountFlightingRings testBaseAccountFlightingRings() {
        if (this.testBaseAccountFlightingRings == null) {
            this.testBaseAccountFlightingRings =
                new TestBaseAccountFlightingRingsImpl(clientObject.getTestBaseAccountFlightingRings(), this);
        }
        return testBaseAccountFlightingRings;
    }

    /**
     * Gets the resource collection API of TestBaseAccountFlightingRingOperations.
     *
     * @return Resource collection API of TestBaseAccountFlightingRingOperations.
     */
    public TestBaseAccountFlightingRingOperations testBaseAccountFlightingRingOperations() {
        if (this.testBaseAccountFlightingRingOperations == null) {
            this.testBaseAccountFlightingRingOperations =
                new TestBaseAccountFlightingRingOperationsImpl(
                    clientObject.getTestBaseAccountFlightingRingOperations(), this);
        }
        return testBaseAccountFlightingRingOperations;
    }

    /**
     * Gets the resource collection API of TestBaseAccountTestTypes.
     *
     * @return Resource collection API of TestBaseAccountTestTypes.
     */
    public TestBaseAccountTestTypes testBaseAccountTestTypes() {
        if (this.testBaseAccountTestTypes == null) {
            this.testBaseAccountTestTypes =
                new TestBaseAccountTestTypesImpl(clientObject.getTestBaseAccountTestTypes(), this);
        }
        return testBaseAccountTestTypes;
    }

    /**
     * Gets the resource collection API of TestBaseAccountTestTypeOperations.
     *
     * @return Resource collection API of TestBaseAccountTestTypeOperations.
     */
    public TestBaseAccountTestTypeOperations testBaseAccountTestTypeOperations() {
        if (this.testBaseAccountTestTypeOperations == null) {
            this.testBaseAccountTestTypeOperations =
                new TestBaseAccountTestTypeOperationsImpl(clientObject.getTestBaseAccountTestTypeOperations(), this);
        }
        return testBaseAccountTestTypeOperations;
    }

    /**
     * Gets the resource collection API of Packages.
     *
     * @return Resource collection API of Packages.
     */
    public Packages packages() {
        if (this.packages == null) {
            this.packages = new PackagesImpl(clientObject.getPackages(), this);
        }
        return packages;
    }

    /**
     * Gets the resource collection API of PackageOperations. It manages PackageResource.
     *
     * @return Resource collection API of PackageOperations.
     */
    public PackageOperations packageOperations() {
        if (this.packageOperations == null) {
            this.packageOperations = new PackageOperationsImpl(clientObject.getPackageOperations(), this);
        }
        return packageOperations;
    }

    /**
     * Gets the resource collection API of TestSummaries.
     *
     * @return Resource collection API of TestSummaries.
     */
    public TestSummaries testSummaries() {
        if (this.testSummaries == null) {
            this.testSummaries = new TestSummariesImpl(clientObject.getTestSummaries(), this);
        }
        return testSummaries;
    }

    /**
     * Gets the resource collection API of TestSummaryOperations.
     *
     * @return Resource collection API of TestSummaryOperations.
     */
    public TestSummaryOperations testSummaryOperations() {
        if (this.testSummaryOperations == null) {
            this.testSummaryOperations = new TestSummaryOperationsImpl(clientObject.getTestSummaryOperations(), this);
        }
        return testSummaryOperations;
    }

    /**
     * Gets the resource collection API of TestResults.
     *
     * @return Resource collection API of TestResults.
     */
    public TestResults testResults() {
        if (this.testResults == null) {
            this.testResults = new TestResultsImpl(clientObject.getTestResults(), this);
        }
        return testResults;
    }

    /**
     * Gets the resource collection API of TestResultOperations.
     *
     * @return Resource collection API of TestResultOperations.
     */
    public TestResultOperations testResultOperations() {
        if (this.testResultOperations == null) {
            this.testResultOperations = new TestResultOperationsImpl(clientObject.getTestResultOperations(), this);
        }
        return testResultOperations;
    }

    /**
     * Gets the resource collection API of OSUpdates.
     *
     * @return Resource collection API of OSUpdates.
     */
    public OSUpdates oSUpdates() {
        if (this.oSUpdates == null) {
            this.oSUpdates = new OSUpdatesImpl(clientObject.getOSUpdates(), this);
        }
        return oSUpdates;
    }

    /**
     * Gets the resource collection API of OSUpdateOperations.
     *
     * @return Resource collection API of OSUpdateOperations.
     */
    public OSUpdateOperations oSUpdateOperations() {
        if (this.oSUpdateOperations == null) {
            this.oSUpdateOperations = new OSUpdateOperationsImpl(clientObject.getOSUpdateOperations(), this);
        }
        return oSUpdateOperations;
    }

    /**
     * Gets the resource collection API of FavoriteProcesses.
     *
     * @return Resource collection API of FavoriteProcesses.
     */
    public FavoriteProcesses favoriteProcesses() {
        if (this.favoriteProcesses == null) {
            this.favoriteProcesses = new FavoriteProcessesImpl(clientObject.getFavoriteProcesses(), this);
        }
        return favoriteProcesses;
    }

    /**
     * Gets the resource collection API of FavoriteProcess. It manages FavoriteProcessResource.
     *
     * @return Resource collection API of FavoriteProcess.
     */
    public FavoriteProcess favoriteProcess() {
        if (this.favoriteProcess == null) {
            this.favoriteProcess = new FavoriteProcessImpl(clientObject.getFavoriteProcess(), this);
        }
        return favoriteProcess;
    }

    /**
     * Gets the resource collection API of AnalysisResults.
     *
     * @return Resource collection API of AnalysisResults.
     */
    public AnalysisResults analysisResults() {
        if (this.analysisResults == null) {
            this.analysisResults = new AnalysisResultsImpl(clientObject.getAnalysisResults(), this);
        }
        return analysisResults;
    }

    /**
     * Gets the resource collection API of AnalysisResultOperations.
     *
     * @return Resource collection API of AnalysisResultOperations.
     */
    public AnalysisResultOperations analysisResultOperations() {
        if (this.analysisResultOperations == null) {
            this.analysisResultOperations =
                new AnalysisResultOperationsImpl(clientObject.getAnalysisResultOperations(), this);
        }
        return analysisResultOperations;
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * @return Wrapped service client RestApiForTestBase providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public RestApiForTestBase serviceClient() {
        return this.clientObject;
    }
}
