// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.ChatSessionOperationsClient;
import com.azure.resourcemanager.testbase.fluent.models.ChatResponseInner;
import com.azure.resourcemanager.testbase.models.ChatRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ChatSessionOperationsClient.
 */
public final class ChatSessionOperationsClientImpl implements ChatSessionOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ChatSessionOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final TestBaseImpl client;

    /**
     * Initializes an instance of ChatSessionOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ChatSessionOperationsClientImpl(TestBaseImpl client) {
        this.service = RestProxy.create(ChatSessionOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TestBaseChatSessionOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TestBaseChatSessionO")
    public interface ChatSessionOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/chatSessions/{chatSessionName}/chat")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> chat(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("chatSessionName") String chatSessionName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ChatRequest parameters, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> chatWithResponseAsync(String resourceGroupName, String testBaseAccountName,
        String chatSessionName, ChatRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (chatSessionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter chatSessionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.chat(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    testBaseAccountName, chatSessionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> chatWithResponseAsync(String resourceGroupName, String testBaseAccountName,
        String chatSessionName, ChatRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (chatSessionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter chatSessionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.chat(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            testBaseAccountName, chatSessionName, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChatResponseInner>, ChatResponseInner> beginChatAsync(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = chatWithResponseAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters);
        return this.client.<ChatResponseInner, ChatResponseInner>getLroResult(mono, this.client.getHttpPipeline(),
            ChatResponseInner.class, ChatResponseInner.class, this.client.getContext());
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChatResponseInner>, ChatResponseInner> beginChatAsync(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = chatWithResponseAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters, context);
        return this.client.<ChatResponseInner, ChatResponseInner>getLroResult(mono, this.client.getHttpPipeline(),
            ChatResponseInner.class, ChatResponseInner.class, context);
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChatResponseInner>, ChatResponseInner> beginChat(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters) {
        return this.beginChatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters).getSyncPoller();
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChatResponseInner>, ChatResponseInner> beginChat(String resourceGroupName,
        String testBaseAccountName, String chatSessionName, ChatRequest parameters, Context context) {
        return this.beginChatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChatResponseInner> chatAsync(String resourceGroupName, String testBaseAccountName,
        String chatSessionName, ChatRequest parameters) {
        return beginChatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChatResponseInner> chatAsync(String resourceGroupName, String testBaseAccountName,
        String chatSessionName, ChatRequest parameters, Context context) {
        return beginChatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatResponseInner chat(String resourceGroupName, String testBaseAccountName, String chatSessionName,
        ChatRequest parameters) {
        return chatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters).block();
    }

    /**
     * Start a new chat turn. Ask a question and see the answer in response.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param chatSessionName The chat session name.
     * @param parameters Payload to ask a question.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the chat response payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatResponseInner chat(String resourceGroupName, String testBaseAccountName, String chatSessionName,
        ChatRequest parameters, Context context) {
        return chatAsync(resourceGroupName, testBaseAccountName, chatSessionName, parameters, context).block();
    }
}
