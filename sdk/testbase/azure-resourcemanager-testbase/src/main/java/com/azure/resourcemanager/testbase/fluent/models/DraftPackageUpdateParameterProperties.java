// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.testbase.models.DraftPackageIntuneAppMetadata;
import com.azure.resourcemanager.testbase.models.DraftPackageSourceType;
import com.azure.resourcemanager.testbase.models.FirstPartyAppDefinition;
import com.azure.resourcemanager.testbase.models.GalleryAppDefinition;
import com.azure.resourcemanager.testbase.models.HighlightedFile;
import com.azure.resourcemanager.testbase.models.InplaceUpgradeOSInfo;
import com.azure.resourcemanager.testbase.models.IntuneEnrollmentMetadata;
import com.azure.resourcemanager.testbase.models.TabState;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The properties of draft package update parameters. */
@Fluent
public final class DraftPackageUpdateParameterProperties {
    /*
     * Application name
     */
    @JsonProperty(value = "applicationName")
    private String applicationName;

    /*
     * Application version
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * The name of the app file.
     */
    @JsonProperty(value = "appFileName")
    private String appFileName;

    /*
     * The source type.
     */
    @JsonProperty(value = "sourceType")
    private DraftPackageSourceType sourceType;

    /*
     * Specifies whether a sample package should be used instead of the one uploaded by the user.
     */
    @JsonProperty(value = "useSample")
    private Boolean useSample;

    /*
     * Comments added by user.
     */
    @JsonProperty(value = "comments")
    private String comments;

    /*
     * Metadata used to generate draft package folder and scripts.
     */
    @JsonProperty(value = "intuneMetadata")
    private DraftPackageIntuneAppMetadata intuneMetadata;

    /*
     * The highlight files in the package.
     */
    @JsonProperty(value = "highlightedFiles")
    private List<HighlightedFile> highlightedFiles;

    /*
     * Tags of the package to be created.
     */
    @JsonProperty(value = "packageTags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> packageTags;

    /*
     * Specifies the package id from which the draft package copied.
     */
    @JsonProperty(value = "packageId")
    private String packageId;

    /*
     * Indicates whether user choose to enable script auto-fill.
     */
    @JsonProperty(value = "useAutofill")
    private Boolean useAutofill;

    /*
     * The executable launch command for script auto-fill. Will be used to run the application.
     */
    @JsonProperty(value = "executableLaunchCommand")
    private String executableLaunchCommand;

    /*
     * The process name for script auto-fill. Will be used to identify the application process.
     */
    @JsonProperty(value = "processName")
    private String processName;

    /*
     * Tab state.
     */
    @JsonProperty(value = "tabState")
    private TabState tabState;

    /*
     * OOB, functional or flow driven. Mapped to the data in 'tests' property.
     */
    @JsonProperty(value = "testTypes")
    private List<TestType> testTypes;

    /*
     * Specifies the target OSs of specific OS Update types.
     */
    @JsonProperty(value = "targetOSList")
    private List<TargetOSInfo> targetOSList;

    /*
     * Specifies the baseline os and target os for in-place upgrade.
     */
    @JsonProperty(value = "inplaceUpgradeOSPair")
    private InplaceUpgradeOSInfo inplaceUpgradeOSPair;

    /*
     * The flighting ring for feature update.
     */
    @JsonProperty(value = "flightingRing")
    private String flightingRing;

    /*
     * Specifies the list of first party applications to test along with user application.
     */
    @JsonProperty(value = "firstPartyApps")
    private List<FirstPartyAppDefinition> firstPartyApps;

    /*
     * The list of gallery apps to test along with user application.
     */
    @JsonProperty(value = "galleryApps")
    private List<GalleryAppDefinition> galleryApps;

    /*
     * The detailed test information.
     */
    @JsonProperty(value = "tests")
    private List<Test> tests;

    /*
     * The metadata of Intune enrollment.
     */
    @JsonProperty(value = "intuneEnrollmentMetadata")
    private IntuneEnrollmentMetadata intuneEnrollmentMetadata;

    /** Creates an instance of DraftPackageUpdateParameterProperties class. */
    public DraftPackageUpdateParameterProperties() {
    }

    /**
     * Get the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: Application name.
     *
     * @param applicationName the applicationName value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the version property: Application version.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Application version.
     *
     * @param version the version value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the appFileName property: The name of the app file.
     *
     * @return the appFileName value.
     */
    public String appFileName() {
        return this.appFileName;
    }

    /**
     * Set the appFileName property: The name of the app file.
     *
     * @param appFileName the appFileName value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withAppFileName(String appFileName) {
        this.appFileName = appFileName;
        return this;
    }

    /**
     * Get the sourceType property: The source type.
     *
     * @return the sourceType value.
     */
    public DraftPackageSourceType sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: The source type.
     *
     * @param sourceType the sourceType value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withSourceType(DraftPackageSourceType sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the useSample property: Specifies whether a sample package should be used instead of the one uploaded by the
     * user.
     *
     * @return the useSample value.
     */
    public Boolean useSample() {
        return this.useSample;
    }

    /**
     * Set the useSample property: Specifies whether a sample package should be used instead of the one uploaded by the
     * user.
     *
     * @param useSample the useSample value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withUseSample(Boolean useSample) {
        this.useSample = useSample;
        return this;
    }

    /**
     * Get the comments property: Comments added by user.
     *
     * @return the comments value.
     */
    public String comments() {
        return this.comments;
    }

    /**
     * Set the comments property: Comments added by user.
     *
     * @param comments the comments value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withComments(String comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Get the intuneMetadata property: Metadata used to generate draft package folder and scripts.
     *
     * @return the intuneMetadata value.
     */
    public DraftPackageIntuneAppMetadata intuneMetadata() {
        return this.intuneMetadata;
    }

    /**
     * Set the intuneMetadata property: Metadata used to generate draft package folder and scripts.
     *
     * @param intuneMetadata the intuneMetadata value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withIntuneMetadata(DraftPackageIntuneAppMetadata intuneMetadata) {
        this.intuneMetadata = intuneMetadata;
        return this;
    }

    /**
     * Get the highlightedFiles property: The highlight files in the package.
     *
     * @return the highlightedFiles value.
     */
    public List<HighlightedFile> highlightedFiles() {
        return this.highlightedFiles;
    }

    /**
     * Set the highlightedFiles property: The highlight files in the package.
     *
     * @param highlightedFiles the highlightedFiles value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withHighlightedFiles(List<HighlightedFile> highlightedFiles) {
        this.highlightedFiles = highlightedFiles;
        return this;
    }

    /**
     * Get the packageTags property: Tags of the package to be created.
     *
     * @return the packageTags value.
     */
    public Map<String, String> packageTags() {
        return this.packageTags;
    }

    /**
     * Set the packageTags property: Tags of the package to be created.
     *
     * @param packageTags the packageTags value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withPackageTags(Map<String, String> packageTags) {
        this.packageTags = packageTags;
        return this;
    }

    /**
     * Get the packageId property: Specifies the package id from which the draft package copied.
     *
     * @return the packageId value.
     */
    public String packageId() {
        return this.packageId;
    }

    /**
     * Set the packageId property: Specifies the package id from which the draft package copied.
     *
     * @param packageId the packageId value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withPackageId(String packageId) {
        this.packageId = packageId;
        return this;
    }

    /**
     * Get the useAutofill property: Indicates whether user choose to enable script auto-fill.
     *
     * @return the useAutofill value.
     */
    public Boolean useAutofill() {
        return this.useAutofill;
    }

    /**
     * Set the useAutofill property: Indicates whether user choose to enable script auto-fill.
     *
     * @param useAutofill the useAutofill value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withUseAutofill(Boolean useAutofill) {
        this.useAutofill = useAutofill;
        return this;
    }

    /**
     * Get the executableLaunchCommand property: The executable launch command for script auto-fill. Will be used to run
     * the application.
     *
     * @return the executableLaunchCommand value.
     */
    public String executableLaunchCommand() {
        return this.executableLaunchCommand;
    }

    /**
     * Set the executableLaunchCommand property: The executable launch command for script auto-fill. Will be used to run
     * the application.
     *
     * @param executableLaunchCommand the executableLaunchCommand value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withExecutableLaunchCommand(String executableLaunchCommand) {
        this.executableLaunchCommand = executableLaunchCommand;
        return this;
    }

    /**
     * Get the processName property: The process name for script auto-fill. Will be used to identify the application
     * process.
     *
     * @return the processName value.
     */
    public String processName() {
        return this.processName;
    }

    /**
     * Set the processName property: The process name for script auto-fill. Will be used to identify the application
     * process.
     *
     * @param processName the processName value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withProcessName(String processName) {
        this.processName = processName;
        return this;
    }

    /**
     * Get the tabState property: Tab state.
     *
     * @return the tabState value.
     */
    public TabState tabState() {
        return this.tabState;
    }

    /**
     * Set the tabState property: Tab state.
     *
     * @param tabState the tabState value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withTabState(TabState tabState) {
        this.tabState = tabState;
        return this;
    }

    /**
     * Get the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    public List<TestType> testTypes() {
        return this.testTypes;
    }

    /**
     * Set the testTypes property: OOB, functional or flow driven. Mapped to the data in 'tests' property.
     *
     * @param testTypes the testTypes value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withTestTypes(List<TestType> testTypes) {
        this.testTypes = testTypes;
        return this;
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.targetOSList;
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withTargetOSList(List<TargetOSInfo> targetOSList) {
        this.targetOSList = targetOSList;
        return this;
    }

    /**
     * Get the inplaceUpgradeOSPair property: Specifies the baseline os and target os for in-place upgrade.
     *
     * @return the inplaceUpgradeOSPair value.
     */
    public InplaceUpgradeOSInfo inplaceUpgradeOSPair() {
        return this.inplaceUpgradeOSPair;
    }

    /**
     * Set the inplaceUpgradeOSPair property: Specifies the baseline os and target os for in-place upgrade.
     *
     * @param inplaceUpgradeOSPair the inplaceUpgradeOSPair value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withInplaceUpgradeOSPair(InplaceUpgradeOSInfo inplaceUpgradeOSPair) {
        this.inplaceUpgradeOSPair = inplaceUpgradeOSPair;
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.flightingRing;
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withFlightingRing(String flightingRing) {
        this.flightingRing = flightingRing;
        return this;
    }

    /**
     * Get the firstPartyApps property: Specifies the list of first party applications to test along with user
     * application.
     *
     * @return the firstPartyApps value.
     */
    public List<FirstPartyAppDefinition> firstPartyApps() {
        return this.firstPartyApps;
    }

    /**
     * Set the firstPartyApps property: Specifies the list of first party applications to test along with user
     * application.
     *
     * @param firstPartyApps the firstPartyApps value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withFirstPartyApps(List<FirstPartyAppDefinition> firstPartyApps) {
        this.firstPartyApps = firstPartyApps;
        return this;
    }

    /**
     * Get the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @return the galleryApps value.
     */
    public List<GalleryAppDefinition> galleryApps() {
        return this.galleryApps;
    }

    /**
     * Set the galleryApps property: The list of gallery apps to test along with user application.
     *
     * @param galleryApps the galleryApps value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withGalleryApps(List<GalleryAppDefinition> galleryApps) {
        this.galleryApps = galleryApps;
        return this;
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.tests;
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withTests(List<Test> tests) {
        this.tests = tests;
        return this;
    }

    /**
     * Get the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @return the intuneEnrollmentMetadata value.
     */
    public IntuneEnrollmentMetadata intuneEnrollmentMetadata() {
        return this.intuneEnrollmentMetadata;
    }

    /**
     * Set the intuneEnrollmentMetadata property: The metadata of Intune enrollment.
     *
     * @param intuneEnrollmentMetadata the intuneEnrollmentMetadata value to set.
     * @return the DraftPackageUpdateParameterProperties object itself.
     */
    public DraftPackageUpdateParameterProperties withIntuneEnrollmentMetadata(
        IntuneEnrollmentMetadata intuneEnrollmentMetadata) {
        this.intuneEnrollmentMetadata = intuneEnrollmentMetadata;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (intuneMetadata() != null) {
            intuneMetadata().validate();
        }
        if (highlightedFiles() != null) {
            highlightedFiles().forEach(e -> e.validate());
        }
        if (tabState() != null) {
            tabState().validate();
        }
        if (targetOSList() != null) {
            targetOSList().forEach(e -> e.validate());
        }
        if (inplaceUpgradeOSPair() != null) {
            inplaceUpgradeOSPair().validate();
        }
        if (firstPartyApps() != null) {
            firstPartyApps().forEach(e -> e.validate());
        }
        if (galleryApps() != null) {
            galleryApps().forEach(e -> e.validate());
        }
        if (tests() != null) {
            tests().forEach(e -> e.validate());
        }
        if (intuneEnrollmentMetadata() != null) {
            intuneEnrollmentMetadata().validate();
        }
    }
}
