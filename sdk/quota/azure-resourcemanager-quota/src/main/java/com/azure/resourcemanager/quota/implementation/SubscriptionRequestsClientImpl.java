// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.quota.fluent.SubscriptionRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaSubscriptionIdInner;
import com.azure.resourcemanager.quota.models.GroupQuotaSubscriptionIdList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SubscriptionRequestsClient. */
public final class SubscriptionRequestsClientImpl implements SubscriptionRequestsClient {
    /** The proxy service used to perform REST calls. */
    private final SubscriptionRequestsService service;

    /** The service client containing this operation class. */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of SubscriptionRequestsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SubscriptionRequestsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service =
            RestProxy
                .create(SubscriptionRequestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiSubscriptionRequests to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface SubscriptionRequestsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("requestId") String requestId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listSinglePageAsync(String mgId, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listSinglePageAsync(
        String mgId, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaSubscriptionIdInner> listAsync(String mgId, String groupQuotaName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, groupQuotaName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaSubscriptionIdInner> listAsync(String mgId, String groupQuotaName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, groupQuotaName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String mgId, String groupQuotaName) {
        return new PagedIterable<>(listAsync(mgId, groupQuotaName));
    }

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String mgId, String groupQuotaName, Context context) {
        return new PagedIterable<>(listAsync(mgId, groupQuotaName, context));
    }

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaSubscriptionIdInner>> getWithResponseAsync(
        String mgId, String groupQuotaName, String requestId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(this.client.getEndpoint(), mgId, groupQuotaName, requestId, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaSubscriptionIdInner>> getWithResponseAsync(
        String mgId, String groupQuotaName, String requestId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), mgId, groupQuotaName, requestId, apiVersion, accept, context);
    }

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> getAsync(String mgId, String groupQuotaName, String requestId) {
        return getWithResponseAsync(mgId, groupQuotaName, requestId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotaSubscriptionIdInner> getWithResponse(
        String mgId, String groupQuotaName, String requestId, Context context) {
        return getWithResponseAsync(mgId, groupQuotaName, requestId, context).block();
    }

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner get(String mgId, String groupQuotaName, String requestId) {
        return getWithResponse(mgId, groupQuotaName, requestId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
