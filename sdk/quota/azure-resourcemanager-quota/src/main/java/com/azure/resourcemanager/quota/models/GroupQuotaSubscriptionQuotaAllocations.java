// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;

/** Resource collection API of GroupQuotaSubscriptionQuotaAllocations. */
public interface GroupQuotaSubscriptionQuotaAllocations {
    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedIterable}.
     */
    PagedIterable<SubscriptionQuotaAllocations> list(String mgId, String resourceProviderScope, String groupQuotaName);

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedIterable}.
     */
    PagedIterable<SubscriptionQuotaAllocations> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    SubscriptionQuotaAllocations createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    SubscriptionQuotaAllocations createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    SubscriptionQuotaAllocations update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    SubscriptionQuotaAllocations update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context);

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response}.
     */
    Response<SubscriptionQuotaAllocations> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context);

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    SubscriptionQuotaAllocations get(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);
}
