// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;

/**
 * An instance of this class provides access to all the operations defined in
 * GroupQuotaSubscriptionQuotaAllocationsClient.
 */
public interface GroupQuotaSubscriptionQuotaAllocationsClient {
    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter);

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter, Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubscriptionQuotaAllocationsInner update(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest);

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubscriptionQuotaAllocationsInner update(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context);

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SubscriptionQuotaAllocationsInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceName, String filter, Context context);

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubscriptionQuotaAllocationsInner get(String managementGroupId, String groupQuotaName, String resourceName,
        String filter);
}
