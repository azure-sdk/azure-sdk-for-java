// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaSubscriptionIdInner;

/** An instance of this class provides access to all the operations defined in SubscriptionRequestsClient. */
public interface SubscriptionRequestsClient {
    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaSubscriptionIdInner> list(String mgId, String groupQuotaName);

    /**
     * List the status of all requests to add subscriptionIds to the GroupQuotasEntity.
     *
     * <p>List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1
     * year.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaSubscriptionIdInner> list(String mgId, String groupQuotaName, Context context);

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GroupQuotaSubscriptionIdInner> getWithResponse(
        String mgId, String groupQuotaName, String requestId, Context context);

    /**
     * Get the status of a single subscriptionId request by requestId.
     *
     * <p>Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus
     * URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the
     * intermediate status. This API provides the finals status with the request details and status.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaSubscriptionIdInner get(String mgId, String groupQuotaName, String requestId);
}
