// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionQuotaAllocationsClient;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;
import com.azure.resourcemanager.quota.models.GroupQuotaSubscriptionQuotaAllocations;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocations;

public final class GroupQuotaSubscriptionQuotaAllocationsImpl implements GroupQuotaSubscriptionQuotaAllocations {
    private static final ClientLogger LOGGER = new ClientLogger(GroupQuotaSubscriptionQuotaAllocationsImpl.class);

    private final GroupQuotaSubscriptionQuotaAllocationsClient innerClient;

    private final com.azure.resourcemanager.quota.QuotaManager serviceManager;

    public GroupQuotaSubscriptionQuotaAllocationsImpl(
        GroupQuotaSubscriptionQuotaAllocationsClient innerClient,
        com.azure.resourcemanager.quota.QuotaManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SubscriptionQuotaAllocations> list(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        PagedIterable<SubscriptionQuotaAllocationsInner> inner =
            this.serviceClient().list(mgId, resourceProviderScope, groupQuotaName);
        return Utils.mapPage(inner, inner1 -> new SubscriptionQuotaAllocationsImpl(inner1, this.manager()));
    }

    public PagedIterable<SubscriptionQuotaAllocations> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        PagedIterable<SubscriptionQuotaAllocationsInner> inner =
            this.serviceClient().list(mgId, resourceProviderScope, groupQuotaName, context);
        return Utils.mapPage(inner, inner1 -> new SubscriptionQuotaAllocationsImpl(inner1, this.manager()));
    }

    public SubscriptionQuotaAllocations createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        SubscriptionQuotaAllocationsInner inner =
            this
                .serviceClient()
                .createOrUpdate(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest);
        if (inner != null) {
            return new SubscriptionQuotaAllocationsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SubscriptionQuotaAllocations createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        SubscriptionQuotaAllocationsInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context);
        if (inner != null) {
            return new SubscriptionQuotaAllocationsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SubscriptionQuotaAllocations update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        SubscriptionQuotaAllocationsInner inner =
            this
                .serviceClient()
                .update(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest);
        if (inner != null) {
            return new SubscriptionQuotaAllocationsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SubscriptionQuotaAllocations update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        SubscriptionQuotaAllocationsInner inner =
            this
                .serviceClient()
                .update(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context);
        if (inner != null) {
            return new SubscriptionQuotaAllocationsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SubscriptionQuotaAllocations> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context) {
        Response<SubscriptionQuotaAllocationsInner> inner =
            this.serviceClient().getWithResponse(mgId, resourceProviderScope, groupQuotaName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SubscriptionQuotaAllocationsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SubscriptionQuotaAllocations get(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        SubscriptionQuotaAllocationsInner inner =
            this.serviceClient().get(mgId, resourceProviderScope, groupQuotaName, resourceName);
        if (inner != null) {
            return new SubscriptionQuotaAllocationsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GroupQuotaSubscriptionQuotaAllocationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.quota.QuotaManager manager() {
        return this.serviceManager;
    }
}
