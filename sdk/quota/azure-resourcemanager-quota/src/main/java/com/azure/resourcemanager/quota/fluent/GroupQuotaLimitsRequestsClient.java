// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quota.fluent.models.SubmittedResourceRequestStatusInner;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsRequestsClient.
 */
public interface GroupQuotaLimitsRequestsClient {
    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String filter);

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String filter, Context context);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SubmittedResourceRequestStatusInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String requestId, String filter, Context context);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubmittedResourceRequestStatusInner get(String managementGroupId, String groupQuotaName, String requestId,
        String filter);
}
