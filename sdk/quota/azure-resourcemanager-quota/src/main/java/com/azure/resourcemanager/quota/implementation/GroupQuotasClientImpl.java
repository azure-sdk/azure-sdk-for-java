// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotasClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotasEntityInner;
import com.azure.resourcemanager.quota.models.GroupQuotaList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupQuotasClient. */
public final class GroupQuotasClientImpl implements GroupQuotasClient {
    /** The proxy service used to perform REST calls. */
    private final GroupQuotasService service;

    /** The service client containing this operation class. */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotasClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotasClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service =
            RestProxy.create(GroupQuotasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotas to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotasService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotasEntityInner groupQuotaPutRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotasEntityInner groupQuotasPatchRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotasEntityInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (groupQuotaPutRequestBody != null) {
            groupQuotaPutRequestBody.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            mgId,
                            groupQuotaName,
                            apiVersion,
                            groupQuotaPutRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (groupQuotaPutRequestBody != null) {
            groupQuotaPutRequestBody.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, groupQuotaPutRequestBody, accept, context);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(mgId, groupQuotaName, groupQuotaPutRequestBody);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                this.client.getContext());
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdateAsync(
        String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(mgId, groupQuotaName, groupQuotaPutRequestBody);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                this.client.getContext());
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(mgId, groupQuotaName, groupQuotaPutRequestBody, context);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                context);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdate(
        String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        return this.beginCreateOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody).getSyncPoller();
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdate(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        return this.beginCreateOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody, context).getSyncPoller();
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> createOrUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        return beginCreateOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> createOrUpdateAsync(String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        return beginCreateOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> createOrUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        return beginCreateOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner createOrUpdate(String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        return createOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody).block();
    }

    /**
     * Creates a new GroupQuota for the name passed.
     *
     * <p>Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner createOrUpdate(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        return createOrUpdateAsync(mgId, groupQuotaName, groupQuotaPutRequestBody, context).block();
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (groupQuotasPatchRequestBody != null) {
            groupQuotasPatchRequestBody.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            mgId,
                            groupQuotaName,
                            apiVersion,
                            groupQuotasPatchRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (groupQuotasPatchRequestBody != null) {
            groupQuotasPatchRequestBody.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                mgId,
                groupQuotaName,
                apiVersion,
                groupQuotasPatchRequestBody,
                accept,
                context);
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                this.client.getContext());
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdateAsync(
        String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotasPatchRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                this.client.getContext());
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody, context);
        return this
            .client
            .<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotasEntityInner.class,
                GroupQuotasEntityInner.class,
                context);
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdate(
        String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotasPatchRequestBody = null;
        return this.beginUpdateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody).getSyncPoller();
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdate(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody, Context context) {
        return this.beginUpdateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody, context).getSyncPoller();
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> updateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody) {
        return beginUpdateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> updateAsync(String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotasPatchRequestBody = null;
        return beginUpdateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> updateAsync(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody, Context context) {
        return beginUpdateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner update(String mgId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotasPatchRequestBody = null;
        return updateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody).block();
    }

    /**
     * Updates a new GroupQuotas for the name passed.
     *
     * <p>Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The
     * status can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked. Any change in the filters will be applicable to the future quota
     * assignments, existing quota assigned to subscriptions from the GroupQuotas remains unchanged.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner update(
        String mgId, String groupQuotaName, GroupQuotasEntityInner groupQuotasPatchRequestBody, Context context) {
        return updateAsync(mgId, groupQuotaName, groupQuotasPatchRequestBody, context).block();
    }

    /**
     * Gets GroupQuotas for the name passed.
     *
     * <p>Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on
     * groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotasEntityInner>> getWithResponseAsync(String mgId, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets GroupQuotas for the name passed.
     *
     * <p>Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on
     * groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotasEntityInner>> getWithResponseAsync(
        String mgId, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context);
    }

    /**
     * Gets GroupQuotas for the name passed.
     *
     * <p>Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on
     * groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> getAsync(String mgId, String groupQuotaName) {
        return getWithResponseAsync(mgId, groupQuotaName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets GroupQuotas for the name passed.
     *
     * <p>Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on
     * groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotasEntityInner> getWithResponse(String mgId, String groupQuotaName, Context context) {
        return getWithResponseAsync(mgId, groupQuotaName, context).block();
    }

    /**
     * Gets GroupQuotas for the name passed.
     *
     * <p>Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on
     * groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner get(String mgId, String groupQuotaName) {
        return getWithResponse(mgId, groupQuotaName, Context.NONE).getValue();
    }

    /**
     * Deletes GroupQuotas for the name passed.
     *
     * <p>Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String mgId, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes GroupQuotas for the name passed.
     *
     * <p>Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String mgId, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), mgId, groupQuotaName, apiVersion, accept, context);
    }

    /**
     * Deletes GroupQuotas for the name passed.
     *
     * <p>Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String mgId, String groupQuotaName) {
        return deleteWithResponseAsync(mgId, groupQuotaName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes GroupQuotas for the name passed.
     *
     * <p>Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String mgId, String groupQuotaName, Context context) {
        return deleteWithResponseAsync(mgId, groupQuotaName, context).block();
    }

    /**
     * Deletes GroupQuotas for the name passed.
     *
     * <p>Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String mgId, String groupQuotaName) {
        deleteWithResponse(mgId, groupQuotaName, Context.NONE);
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listSinglePageAsync(String mgId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), mgId, apiVersion, accept, context))
            .<PagedResponse<GroupQuotasEntityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listSinglePageAsync(String mgId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), mgId, apiVersion, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotasEntityInner> listAsync(String mgId) {
        return new PagedFlux<>(() -> listSinglePageAsync(mgId), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotasEntityInner> listAsync(String mgId, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotasEntityInner> list(String mgId) {
        return new PagedIterable<>(listAsync(mgId));
    }

    /**
     * Lists GroupQuotas for the scope passed.
     *
     * <p>Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details
     * on groupQuota can be access from the groupQuota APIs.
     *
     * @param mgId Management Group Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotasEntityInner> list(String mgId, Context context) {
        return new PagedIterable<>(listAsync(mgId, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotasEntityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
