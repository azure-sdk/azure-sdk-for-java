// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionQuotaAllocationsClient;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationsList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * GroupQuotaSubscriptionQuotaAllocationsClient.
 */
public final class GroupQuotaSubscriptionQuotaAllocationsClientImpl
    implements GroupQuotaSubscriptionQuotaAllocationsClient {
    /** The proxy service used to perform REST calls. */
    private final GroupQuotaSubscriptionQuotaAllocationsService service;

    /** The service client containing this operation class. */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionQuotaAllocationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionQuotaAllocationsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service =
            RestProxy
                .create(
                    GroupQuotaSubscriptionQuotaAllocationsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaSubscriptionQuotaAllocations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaSubscriptionQuotaAllocationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SubscriptionQuotaAllocationsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationsInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationsInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationsInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName));
    }

    /**
     * Gets all the quota assigned to a subscription for the specific Resource Provider, Location.
     *
     * <p>Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription
     * can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota assigned to a subscription for the specific Resource Provider, Location as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationsInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName, context));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            allocateQuotaRequest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                allocateQuotaRequest,
                accept,
                context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginCreateOrUpdateAsync(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest);
        return this
            .client
            .<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                SubscriptionQuotaAllocationsInner.class,
                SubscriptionQuotaAllocationsInner.class,
                this.client.getContext());
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginCreateOrUpdateAsync(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context);
        return this
            .client
            .<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                SubscriptionQuotaAllocationsInner.class,
                SubscriptionQuotaAllocationsInner.class,
                context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginCreateOrUpdate(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return this
            .beginCreateOrUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginCreateOrUpdate(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            Context context) {
        return this
            .beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> createOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return beginCreateOrUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> createOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return createOrUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest)
            .block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     *
     * <p>Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG
     * groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned
     * back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota
     * to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return createOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            allocateQuotaRequest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                allocateQuotaRequest,
                accept,
                context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginUpdateAsync(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest);
        return this
            .client
            .<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                SubscriptionQuotaAllocationsInner.class,
                SubscriptionQuotaAllocationsInner.class,
                this.client.getContext());
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginUpdateAsync(
            String mgId,
            String resourceProviderScope,
            String groupQuotaName,
            String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context);
        return this
            .client
            .<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                SubscriptionQuotaAllocationsInner.class,
                SubscriptionQuotaAllocationsInner.class,
                context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return this
            .beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota assigned to a subscription for the specific Resource
     *     Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return this
            .beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> updateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> updateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return beginUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return updateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest).block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     *
     * <p>Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited
     * by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return updateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .block();
    }

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> getAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionQuotaAllocationsInner> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, context).block();
    }

    /**
     * Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     *
     * <p>Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the
     * subscription can be assigned back to the MG Group Quota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner get(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        return getWithResponse(mgId, resourceProviderScope, groupQuotaName, resourceName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubscriptionQuotaAllocationsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
