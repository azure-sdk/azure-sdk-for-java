// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionQuotaAllocationsClient;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationsList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * GroupQuotaSubscriptionQuotaAllocationsClient.
 */
public final class GroupQuotaSubscriptionQuotaAllocationsClientImpl
    implements GroupQuotaSubscriptionQuotaAllocationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaSubscriptionQuotaAllocationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionQuotaAllocationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionQuotaAllocationsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service = RestProxy.create(GroupQuotaSubscriptionQuotaAllocationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaSubscriptionQuotaAllocations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaSubscriptionQuotaAllocationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsList>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubscriptionQuotaAllocationsInner allocateQuotaRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), managementGroupId,
                this.client.getSubscriptionId(), groupQuotaName, this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<SubscriptionQuotaAllocationsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(), groupQuotaName,
                this.client.getApiVersion(), filter, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationsInner> listAsync(String managementGroupId, String groupQuotaName,
        String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationsInner> listAsync(String managementGroupId, String groupQuotaName,
        String filter, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter));
    }

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter, Context context) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter, context));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), managementGroupId,
                this.client.getSubscriptionId(), groupQuotaName, resourceName, this.client.getApiVersion(),
                allocateQuotaRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
            groupQuotaName, resourceName, this.client.getApiVersion(), allocateQuotaRequest, accept, context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceName, allocateQuotaRequest, context);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return this.beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest).block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * to check the status using Async polling as standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * 
     * Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can
     * also reduce the quota allocated to subscription to give back the group back to MG. The quota assignment back to
     * MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum unused quota
     * allocated back to MG group quota will be the group quota allocated to the subscriptions. So, this API can used to
     * assign Quota to subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.update(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
                    groupQuotaName, resourceName, this.client.getApiVersion(), allocateQuotaRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (allocateQuotaRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter allocateQuotaRequest is required and cannot be null."));
        } else {
            allocateQuotaRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
            groupQuotaName, resourceName, this.client.getApiVersion(), allocateQuotaRequest, accept, context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest);
        return this.client.<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(mono,
            this.client.getHttpPipeline(), SubscriptionQuotaAllocationsInner.class,
            SubscriptionQuotaAllocationsInner.class, this.client.getContext());
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceName,
            SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context);
        return this.client.<SubscriptionQuotaAllocationsInner, SubscriptionQuotaAllocationsInner>getLroResult(mono,
            this.client.getHttpPipeline(), SubscriptionQuotaAllocationsInner.class,
            SubscriptionQuotaAllocationsInner.class, context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return this.beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of quota allocated to a subscription for the specific Resource
     * Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsInner>, SubscriptionQuotaAllocationsInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceName,
        SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        return this.beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context)
            .getSyncPoller();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner update(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest) {
        return updateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest).block();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern
     * with 202 response and status polling API.
     * 
     * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
     * allocated to subscription to give back the group back to MG. The quota assignment back to MG group quota is
     * limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota to
     * subscriptions and assign back unused quota, which was previously allocated from MG group quota to
     * subscription(s).
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner update(String managementGroupId, String groupQuotaName,
        String resourceName, SubscriptionQuotaAllocationsInner allocateQuotaRequest, Context context) {
        return updateAsync(managementGroupId, groupQuotaName, resourceName, allocateQuotaRequest, context).block();
    }

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
                    groupQuotaName, resourceName, this.client.getApiVersion(), filter, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
            groupQuotaName, resourceName, this.client.getApiVersion(), filter, accept, context);
    }

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsInner> getAsync(String managementGroupId, String groupQuotaName,
        String resourceName, String filter) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceName, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionQuotaAllocationsInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceName, String filter, Context context) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceName, filter, context).block();
    }

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsInner get(String managementGroupId, String groupQuotaName, String resourceName,
        String filter) {
        return getWithResponse(managementGroupId, groupQuotaName, resourceName, filter, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubscriptionQuotaAllocationsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationsInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
