// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of GroupQuotaSubscriptions. */
public interface GroupQuotaSubscriptions {
    /**
     * Adds subscription to the GroupQuotas.
     *
     * <p>Adds a subscription to GroupQuotas.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity.
     */
    GroupQuotaSubscriptionId createOrUpdate(String mgId, String groupQuotaName);

    /**
     * Adds subscription to the GroupQuotas.
     *
     * <p>Adds a subscription to GroupQuotas.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity.
     */
    GroupQuotaSubscriptionId createOrUpdate(String mgId, String groupQuotaName, Context context);

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity.
     */
    GroupQuotaSubscriptionId update(String mgId, String groupQuotaName);

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity.
     */
    GroupQuotaSubscriptionId update(String mgId, String groupQuotaName, Context context);

    /**
     * Removes the subscription from GroupQuotas.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String mgId, String groupQuotaName, Context context);

    /**
     * Removes the subscription from GroupQuotas.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String mgId, String groupQuotaName);

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotasEntity.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity along with {@link
     *     Response}.
     */
    Response<GroupQuotaSubscriptionId> getWithResponse(String mgId, String groupQuotaName, Context context);

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotasEntity.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotaSEntity.
     */
    GroupQuotaSubscriptionId get(String mgId, String groupQuotaName);

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotasEntity.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    PagedIterable<GroupQuotaSubscriptionId> list(String mgId, String groupQuotaName);

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotasEntity.
     *
     * @param mgId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    PagedIterable<GroupQuotaSubscriptionId> list(String mgId, String groupQuotaName, Context context);
}
