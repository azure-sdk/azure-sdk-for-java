// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionQuotaAllocationRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationRequestInner;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationRequestList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * GroupQuotaSubscriptionQuotaAllocationRequestsClient.
 */
public final class GroupQuotaSubscriptionQuotaAllocationRequestsClientImpl
    implements GroupQuotaSubscriptionQuotaAllocationRequestsClient {
    /** The proxy service used to perform REST calls. */
    private final GroupQuotaSubscriptionQuotaAllocationRequestsService service;

    /** The service client containing this operation class. */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionQuotaAllocationRequestsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionQuotaAllocationRequestsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service =
            RestProxy
                .create(
                    GroupQuotaSubscriptionQuotaAllocationRequestsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaSubscriptionQuotaAllocationRequests
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaSubscriptionQuotaAllocationRequestsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationRequestInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("allocationId") String allocationId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationRequestList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationRequestList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     *
     * <p>Get the quota allocation request status for the subscriptionId by allocationId.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationRequestInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String allocationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (allocationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter allocationId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            allocationId,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     *
     * <p>Get the quota allocation request status for the subscriptionId by allocationId.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationRequestInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String allocationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (allocationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter allocationId is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                allocationId,
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     *
     * <p>Get the quota allocation request status for the subscriptionId by allocationId.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationRequestInner> getAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String allocationId) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, allocationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     *
     * <p>Get the quota allocation request status for the subscriptionId by allocationId.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionQuotaAllocationRequestInner> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String allocationId, Context context) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, allocationId, context).block();
    }

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     *
     * <p>Get the quota allocation request status for the subscriptionId by allocationId.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationRequestInner get(
        String mgId, String resourceProviderScope, String groupQuotaName, String allocationId) {
        return getWithResponse(mgId, resourceProviderScope, groupQuotaName, allocationId, Context.NONE).getValue();
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationRequestInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            mgId,
                            this.client.getSubscriptionId(),
                            resourceProviderScope,
                            groupQuotaName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SubscriptionQuotaAllocationRequestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationRequestInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                mgId,
                this.client.getSubscriptionId(),
                resourceProviderScope,
                groupQuotaName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationRequestInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubscriptionQuotaAllocationRequestInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationRequestInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName));
    }

    /**
     * Lists all the quota allocation requests.to subscriptions
     *
     * <p>Lists all the allocation requests.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubscriptionQuotaAllocationRequestInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationRequestInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubscriptionQuotaAllocationRequestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubscriptionQuotaAllocationRequestInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
