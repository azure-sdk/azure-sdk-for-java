// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitInner;
import com.azure.resourcemanager.quota.models.GroupQuotaLimitList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsClient.
 */
public final class GroupQuotaLimitsClientImpl implements GroupQuotaLimitsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaLimitsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaLimitsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLimitsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service
            = RestProxy.create(GroupQuotaLimitsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaLimits to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaLimitsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotaLimitInner groupQuotaLimitRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotaLimitInner groupQuotaLimitRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitList>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceName, this.client.getApiVersion(), groupQuotaLimitRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName, resourceName,
            this.client.getApiVersion(), groupQuotaLimitRequest, accept, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceName, groupQuotaLimitRequest, context);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return this.beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return this
            .beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceName, this.client.getApiVersion(), groupQuotaLimitRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName, resourceName,
            this.client.getApiVersion(), groupQuotaLimitRequest, accept, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdateAsync(
        String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this.client.<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(mono, this.client.getHttpPipeline(),
            GroupQuotaLimitInner.class, GroupQuotaLimitInner.class, this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this.client.<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(mono, this.client.getHttpPipeline(),
            GroupQuotaLimitInner.class, GroupQuotaLimitInner.class, this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdateAsync(
        String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context);
        return this.client.<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(mono, this.client.getHttpPipeline(),
            GroupQuotaLimitInner.class, GroupQuotaLimitInner.class, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(String managementGroupId,
        String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return this.beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return this.beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner update(String managementGroupId, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return updateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest).block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner update(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context) {
        return updateAsync(managementGroupId, groupQuotaName, resourceName, groupQuotaLimitRequest, context).block();
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaLimitInner>> getWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceName, this.client.getApiVersion(), filter, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaLimitInner>> getWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, resourceName,
            this.client.getApiVersion(), filter, accept, context);
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> getAsync(String managementGroupId, String groupQuotaName, String resourceName,
        String filter) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceName, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotaLimitInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceName, String filter, Context context) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceName, filter, context).block();
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner get(String managementGroupId, String groupQuotaName, String resourceName,
        String filter) {
        return getWithResponse(managementGroupId, groupQuotaName, resourceName, filter, Context.NONE).getValue();
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<GroupQuotaLimitInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(), filter,
                accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaLimitInner> listAsync(String managementGroupId, String groupQuotaName, String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaLimitInner> listAsync(String managementGroupId, String groupQuotaName, String filter,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaLimitInner> list(String managementGroupId, String groupQuotaName, String filter) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaLimitInner> list(String managementGroupId, String groupQuotaName, String filter,
        Context context) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotaLimitInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
