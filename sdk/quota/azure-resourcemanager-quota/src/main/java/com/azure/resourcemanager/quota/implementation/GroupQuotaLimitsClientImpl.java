// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitInner;
import com.azure.resourcemanager.quota.models.GroupQuotaLimitList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupQuotaLimitsClient. */
public final class GroupQuotaLimitsClientImpl implements GroupQuotaLimitsClient {
    /** The proxy service used to perform REST calls. */
    private final GroupQuotaLimitsService service;

    /** The service client containing this operation class. */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaLimitsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLimitsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service =
            RestProxy.create(GroupQuotaLimitsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaLimits to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaLimitsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotaLimitInner groupQuotaLimitRequest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GroupQuotaLimitInner groupQuotaLimitRequest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("mgId") String mgId,
            @PathParam("resourceProviderScope") String resourceProviderScope,
            @PathParam("groupQuotaName") String groupQuotaName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaLimitList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            mgId,
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            groupQuotaLimitRequest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                mgId,
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                groupQuotaLimitRequest,
                accept,
                context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotaLimitInner.class,
                GroupQuotaLimitInner.class,
                this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdateAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotaLimitInner.class,
                GroupQuotaLimitInner.class,
                this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono, this.client.getHttpPipeline(), GroupQuotaLimitInner.class, GroupQuotaLimitInner.class, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return this
            .beginCreateOrUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> createOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        return beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> createOrUpdateAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> createOrUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return beginCreateOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner createOrUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return createOrUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return createOrUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            mgId,
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            groupQuotaLimitRequest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaLimitRequest != null) {
            groupQuotaLimitRequest.validate();
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                mgId,
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                groupQuotaLimitRequest,
                accept,
                context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotaLimitInner.class,
                GroupQuotaLimitInner.class,
                this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdateAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GroupQuotaLimitInner.class,
                GroupQuotaLimitInner.class,
                this.client.getContext());
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context);
        return this
            .client
            .<GroupQuotaLimitInner, GroupQuotaLimitInner>getLroResult(
                mono, this.client.getHttpPipeline(), GroupQuotaLimitInner.class, GroupQuotaLimitInner.class, context);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return this
            .beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return this
            .beginUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .getSyncPoller();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest) {
        return beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return beginUpdateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> updateAsync(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return beginUpdateAsync(
                mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner update(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        final GroupQuotaLimitInner groupQuotaLimitRequest = null;
        return updateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest).block();
    }

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context) {
        return updateAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, groupQuotaLimitRequest, context)
            .block();
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaLimitInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            mgId,
                            resourceProviderScope,
                            groupQuotaName,
                            resourceName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaLimitInner>> getWithResponseAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                mgId,
                resourceProviderScope,
                groupQuotaName,
                resourceName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitInner> getAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotaLimitInner> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context) {
        return getWithResponseAsync(mgId, resourceProviderScope, groupQuotaName, resourceName, context).block();
    }

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitInner get(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName) {
        return getWithResponse(mgId, resourceProviderScope, groupQuotaName, resourceName, Context.NONE).getValue();
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            mgId,
                            resourceProviderScope,
                            groupQuotaName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<GroupQuotaLimitInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listSinglePageAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (mgId == null) {
            return Mono.error(new IllegalArgumentException("Parameter mgId is required and cannot be null."));
        }
        if (resourceProviderScope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderScope is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String apiVersion = "2023-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), mgId, resourceProviderScope, groupQuotaName, apiVersion, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaLimitInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaLimitInner> listAsync(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(mgId, resourceProviderScope, groupQuotaName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaLimitInner> list(String mgId, String resourceProviderScope, String groupQuotaName) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName));
    }

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaLimitInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context) {
        return new PagedIterable<>(listAsync(mgId, resourceProviderScope, groupQuotaName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotaLimitInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaLimitInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
