// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of GroupQuotaSubscriptionQuotaAllocationRequests.
 */
public interface GroupQuotaSubscriptionQuotaAllocationRequests {
    /**
     * Get the status of the quota allocation request for the subscriptionId.
     * 
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response}.
     */
    Response<QuotaAllocationRequestStatus> getWithResponse(String managementGroupId, String groupQuotaName,
        String allocationId, Context context);

    /**
     * Get the status of the quota allocation request for the subscriptionId.
     * 
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param allocationId Resource allocation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId.
     */
    QuotaAllocationRequestStatus get(String managementGroupId, String groupQuotaName, String allocationId);

    /**
     * Lists all the quota allocation requests.to subscriptions
     * 
     * Lists all the allocation requests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of QuotaAllocation Request Status as paginated response with {@link PagedIterable}.
     */
    PagedIterable<QuotaAllocationRequestStatus> list(String managementGroupId, String groupQuotaName, String filter);

    /**
     * Lists all the quota allocation requests.to subscriptions
     * 
     * Lists all the allocation requests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of QuotaAllocation Request Status as paginated response with {@link PagedIterable}.
     */
    PagedIterable<QuotaAllocationRequestStatus> list(String managementGroupId, String groupQuotaName, String filter,
        Context context);
}
