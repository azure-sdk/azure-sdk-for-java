// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.SubmittedResourceRequestStatusInner;
import com.azure.resourcemanager.quota.models.SubmittedResourceRequestStatusList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsRequestsClient.
 */
public final class GroupQuotaLimitsRequestsClientImpl implements GroupQuotaLimitsRequestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaLimitsRequestsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaLimitsRequestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLimitsRequestsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service = RestProxy.create(GroupQuotaLimitsRequestsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaLimitsRequests to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaLimitsRequestsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("requestId") String requestId,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(), filter,
                accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubmittedResourceRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubmittedResourceRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String filter, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String filter) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter));
    }

    /**
     * List the status of all GroupQuota requests.
     * 
     * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
     * for 1 year. Use the $filter parameter to filter out the specific resource based on the ResourceProvider/Location.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String filter, Context context) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, filter, context));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubmittedResourceRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String requestId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, requestId,
                this.client.getApiVersion(), filter, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubmittedResourceRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String requestId, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, requestId,
            this.client.getApiVersion(), filter, accept, context);
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> getAsync(String managementGroupId, String groupQuotaName,
        String requestId, String filter) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, requestId, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubmittedResourceRequestStatusInner> getWithResponse(String managementGroupId,
        String groupQuotaName, String requestId, String filter, Context context) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, requestId, filter, context).block();
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmittedResourceRequestStatusInner get(String managementGroupId, String groupQuotaName, String requestId,
        String filter) {
        return getWithResponse(managementGroupId, groupQuotaName, requestId, filter, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
