// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitInner;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsClient.
 */
public interface GroupQuotaLimitsClient {
    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource.
     * 
     * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
     * resourceProviderScope. The resourceProviderScope will be provided in the request body, as resourceProviderScope.
     * Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
     * GroupQuotaLimitRequestId will be returned by the Service in the response. The status can be polled periodically.
     * The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI for groupQuotaRequests and full details can be checked from the Get API for groupQuotaRequests.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(String managementGroupId,
        String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(String managementGroupId,
        String groupQuotaName, String resourceName, GroupQuotaLimitInner groupQuotaLimitRequest, Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner update(String managementGroupId, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     * 
     * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
     * body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by the Service. The status will
     * be updated periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner update(String managementGroupId, String groupQuotaName, String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest, Context context);

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GroupQuotaLimitInner> getWithResponse(String managementGroupId, String groupQuotaName, String resourceName,
        String filter, Context context);

    /**
     * Gets the resource groupQuotaLimits for the MGId for a resource.
     * 
     * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query
     * parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq eastus. The $filter is a
     * required parameter to filter out the specific resource based on the ResourceProvider/Location. It will include
     * the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner get(String managementGroupId, String groupQuotaName, String resourceName, String filter);

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaLimitInner> list(String managementGroupId, String groupQuotaName, String filter);

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     * 
     * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
     * provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from the group
     * quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |provider eq {resourceProvider} and location eq {location}
     * Example: $filter= provider eq Microsoft.Compute and location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the filter as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaLimitInner> list(String managementGroupId, String groupQuotaName, String filter,
        Context context);
}
