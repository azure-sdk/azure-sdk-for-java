// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitInner;

/** An instance of this class provides access to all the operations defined in GroupQuotaLimitsClient. */
public interface GroupQuotaLimitsClient {
    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginCreateOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner createOrUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status can be polled periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner createOrUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GroupQuotaLimitInner>, GroupQuotaLimitInner> beginUpdate(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner update(String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);

    /**
     * Updates the GroupQuotaLimits for the specific resource under a Management Group.
     *
     * <p>Updates the GroupQuotaLimits for the specific resource under a Management Group. A groupQuotaLimitRequestId
     * will be returned by the Service. The status will be updated periodically. The status Async polling is using
     * standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to
     * Get URI and full details can be checked.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param groupQuotaLimitRequest The GroupQuotaLimit Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group Quota limit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner update(
        String mgId,
        String resourceProviderScope,
        String groupQuotaName,
        String resourceName,
        GroupQuotaLimitInner groupQuotaLimitRequest,
        Context context);

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GroupQuotaLimitInner> getWithResponse(
        String mgId, String resourceProviderScope, String groupQuotaName, String resourceName, Context context);

    /**
     * Gets the resource groupQuotaLimits for the MGId.
     *
     * <p>Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
     * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource groupQuotaLimits for the MGId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GroupQuotaLimitInner get(String mgId, String resourceProviderScope, String groupQuotaName, String resourceName);

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaLimitInner> list(String mgId, String resourceProviderScope, String groupQuotaName);

    /**
     * Gets the List of resources groupQuotaLimits for the MGId, based on the scope.
     *
     * <p>Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
     * providers/Microsoft.Compute/locations/&lt;eastus&gt;. The list elements will be same as the Get API - It will
     * include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the
     * groupQuota.
     *
     * @param mgId Management Group Id.
     * @param resourceProviderScope Scope for the resource. Some resources do not require location parameter, such as
     *     CosmosDb, so can be skipped in scope. For most of the resources require -
     *     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName -
     *     providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to
     *     specify resources for any all the RPs.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of resources groupQuotaLimits for the MGId, based on the scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GroupQuotaLimitInner> list(
        String mgId, String resourceProviderScope, String groupQuotaName, Context context);
}
