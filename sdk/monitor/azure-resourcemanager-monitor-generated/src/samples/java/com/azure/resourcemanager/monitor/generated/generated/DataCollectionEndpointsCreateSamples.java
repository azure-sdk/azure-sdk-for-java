// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.generated;

import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointNetworkAcls;
import com.azure.resourcemanager.monitor.generated.models.KnownPublicNetworkAccessOptions;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DataCollectionEndpoints Create.
 */
public final class DataCollectionEndpointsCreateSamples {
    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/
     * DataCollectionEndpointsCreate.json
     */
    /**
     * Sample code: Create a data collection endpoint.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void
        createADataCollectionEndpoint(com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionEndpoints()
            .define("myDataCollectionEndpoint")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withNetworkAcls(new DataCollectionEndpointNetworkAcls()
                .withPublicNetworkAccess(KnownPublicNetworkAccessOptions.ENABLED))
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/
     * DataCollectionEndpointsUpdate.json
     */
    /**
     * Sample code: Update a data collection endpoint.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void
        updateADataCollectionEndpoint(com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionEndpoints()
            .define("myDataCollectionEndpoint")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("tag1", "A", "tag2", "B", "tag3", "C"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
