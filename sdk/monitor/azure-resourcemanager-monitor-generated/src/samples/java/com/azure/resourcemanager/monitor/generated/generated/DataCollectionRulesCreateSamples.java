// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.generated;

import com.azure.resourcemanager.monitor.generated.models.AgentSetting;
import com.azure.resourcemanager.monitor.generated.models.ColumnDefinition;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleAgentSettings;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleDataSources;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleDestinations;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleReferences;
import com.azure.resourcemanager.monitor.generated.models.DataFlow;
import com.azure.resourcemanager.monitor.generated.models.KnownAgentSettingName;
import com.azure.resourcemanager.monitor.generated.models.KnownColumnDefinitionType;
import com.azure.resourcemanager.monitor.generated.models.KnownDataCollectionRuleResourceKind;
import com.azure.resourcemanager.monitor.generated.models.KnownDataFlowStreams;
import com.azure.resourcemanager.monitor.generated.models.KnownLogFilesDataSourceFormat;
import com.azure.resourcemanager.monitor.generated.models.KnownLogFileTextSettingsRecordStartTimestampFormat;
import com.azure.resourcemanager.monitor.generated.models.KnownPerfCounterDataSourceStreams;
import com.azure.resourcemanager.monitor.generated.models.KnownStorageBlobLookupType;
import com.azure.resourcemanager.monitor.generated.models.KnownSyslogDataSourceFacilityNames;
import com.azure.resourcemanager.monitor.generated.models.KnownSyslogDataSourceLogLevels;
import com.azure.resourcemanager.monitor.generated.models.KnownSyslogDataSourceStreams;
import com.azure.resourcemanager.monitor.generated.models.KnownWindowsEventLogDataSourceStreams;
import com.azure.resourcemanager.monitor.generated.models.LogAnalyticsDestination;
import com.azure.resourcemanager.monitor.generated.models.LogFilesDataSource;
import com.azure.resourcemanager.monitor.generated.models.LogFilesDataSourceSettings;
import com.azure.resourcemanager.monitor.generated.models.LogFileSettingsText;
import com.azure.resourcemanager.monitor.generated.models.PerfCounterDataSource;
import com.azure.resourcemanager.monitor.generated.models.ReferencesSpecEnrichmentData;
import com.azure.resourcemanager.monitor.generated.models.StorageBlob;
import com.azure.resourcemanager.monitor.generated.models.StreamDeclaration;
import com.azure.resourcemanager.monitor.generated.models.SyslogDataSource;
import com.azure.resourcemanager.monitor.generated.models.WindowsEventLogDataSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DataCollectionRules Create.
 */
public final class DataCollectionRulesCreateSamples {
    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/DataCollectionRulesCreateAgentSettings.json
     */
    /**
     * Sample code: Create or update an agent settings configuration.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void
        createOrUpdateAnAgentSettingsConfiguration(com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionRules()
            .define("myCollectionRule")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withKind(KnownDataCollectionRuleResourceKind.fromString("AgentSettings"))
            .withDescription("An agent settings configuration")
            .withAgentSettings(new DataCollectionRuleAgentSettings().withLogs(
                Arrays.asList(new AgentSetting().withName(KnownAgentSettingName.MAX_DISK_QUOTA_IN_MB).withValue("5000"),
                    new AgentSetting().withName(KnownAgentSettingName.USE_TIME_RECEIVED_FOR_FORWARDED_EVENTS)
                        .withValue("1"))))
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/DataCollectionRulesCreate.json
     */
    /**
     * Sample code: Create or update data collection rule.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void
        createOrUpdateDataCollectionRule(com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionRules()
            .define("myCollectionRule")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withDataSources(new DataCollectionRuleDataSources()
                .withPerformanceCounters(Arrays.asList(
                    new PerfCounterDataSource()
                        .withStreams(Arrays.asList(KnownPerfCounterDataSourceStreams.MICROSOFT_PERF))
                        .withSamplingFrequencyInSeconds(15)
                        .withCounterSpecifiers(Arrays.asList("\\Processor(_Total)\\% Processor Time",
                            "\\Memory\\Committed Bytes", "\\LogicalDisk(_Total)\\Free Megabytes",
                            "\\PhysicalDisk(_Total)\\Avg. Disk Queue Length"))
                        .withName("cloudTeamCoreCounters"),
                    new PerfCounterDataSource()
                        .withStreams(Arrays.asList(KnownPerfCounterDataSourceStreams.MICROSOFT_PERF))
                        .withSamplingFrequencyInSeconds(30)
                        .withCounterSpecifiers(Arrays.asList("\\Process(_Total)\\Thread Count"))
                        .withName("appTeamExtraCounters")))
                .withWindowsEventLogs(Arrays.asList(
                    new WindowsEventLogDataSource()
                        .withStreams(Arrays.asList(KnownWindowsEventLogDataSourceStreams.MICROSOFT_WINDOWS_EVENT))
                        .withXPathQueries(Arrays.asList("Security!"))
                        .withName("cloudSecurityTeamEvents"),
                    new WindowsEventLogDataSource()
                        .withStreams(Arrays.asList(KnownWindowsEventLogDataSourceStreams.MICROSOFT_WINDOWS_EVENT))
                        .withXPathQueries(Arrays.asList("System![System[(Level = 1 or Level = 2 or Level = 3)]]",
                            "Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]"))
                        .withName("appTeam1AppEvents")))
                .withSyslog(Arrays.asList(
                    new SyslogDataSource().withStreams(Arrays.asList(KnownSyslogDataSourceStreams.MICROSOFT_SYSLOG))
                        .withFacilityNames(Arrays.asList(KnownSyslogDataSourceFacilityNames.CRON))
                        .withLogLevels(Arrays.asList(KnownSyslogDataSourceLogLevels.DEBUG,
                            KnownSyslogDataSourceLogLevels.CRITICAL, KnownSyslogDataSourceLogLevels.EMERGENCY))
                        .withName("cronSyslog"),
                    new SyslogDataSource().withStreams(Arrays.asList(KnownSyslogDataSourceStreams.MICROSOFT_SYSLOG))
                        .withFacilityNames(Arrays.asList(KnownSyslogDataSourceFacilityNames.SYSLOG))
                        .withLogLevels(Arrays.asList(KnownSyslogDataSourceLogLevels.ALERT,
                            KnownSyslogDataSourceLogLevels.CRITICAL, KnownSyslogDataSourceLogLevels.EMERGENCY))
                        .withName("syslogBase"))))
            .withDestinations(new DataCollectionRuleDestinations()
                .withLogAnalytics(Arrays.asList(new LogAnalyticsDestination().withWorkspaceResourceId(
                    "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace")
                    .withName("centralWorkspace"))))
            .withDataFlows(
                Arrays.asList(new DataFlow()
                    .withStreams(Arrays.asList(KnownDataFlowStreams.MICROSOFT_PERF,
                        KnownDataFlowStreams.MICROSOFT_SYSLOG, KnownDataFlowStreams.MICROSOFT_WINDOWS_EVENT))
                    .withDestinations(Arrays.asList("centralWorkspace"))))
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/DataCollectionRulesCreateEmbeddedDCE.json
     */
    /**
     * Sample code: Create or update data collection rule with embedded ingestion endpoints.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateDataCollectionRuleWithEmbeddedIngestionEndpoints(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionRules()
            .define("myCollectionRule")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withKind(KnownDataCollectionRuleResourceKind.fromString(" Direct"))
            .withDescription("A Direct Ingestion Rule with builtin ingestion fqdns")
            .withStreamDeclarations(mapOf("Custom-LOGS1_CL",
                new StreamDeclaration().withColumns(
                    Arrays.asList(new ColumnDefinition().withName("Time").withType(KnownColumnDefinitionType.DATETIME),
                        new ColumnDefinition().withName("Computer").withType(KnownColumnDefinitionType.STRING),
                        new ColumnDefinition().withName("AdditionalContext").withType(KnownColumnDefinitionType.STRING),
                        new ColumnDefinition().withName("CounterName").withType(KnownColumnDefinitionType.STRING),
                        new ColumnDefinition().withName("CounterValue").withType(KnownColumnDefinitionType.REAL)))))
            .withDestinations(new DataCollectionRuleDestinations()
                .withLogAnalytics(Arrays.asList(new LogAnalyticsDestination().withWorkspaceResourceId(
                    "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace")
                    .withName("centralWorkspace"))))
            .withDataFlows(Arrays.asList(new DataFlow()
                .withStreams(Arrays.asList(KnownDataFlowStreams.fromString("Custom-LOGS1_CL")))
                .withDestinations(Arrays.asList("myworkspace"))
                .withTransformKql(
                    "source | extend jsonContext = parse_json(AdditionalContext) | project TimeGenerated = Time, Computer, AdditionalContext = jsonContext, CounterName=tostring(jsonContext.CounterName), CounterValue=toreal(jsonContext.CounterValue)")
                .withOutputStream("Custom-LOGS1_CL")))
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2023-03-11/examples/DataCollectionRulesCreateEnrichment.json
     */
    /**
     * Sample code: Create or update data collection rule with enrichment.
     * 
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateDataCollectionRuleWithEnrichment(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager.dataCollectionRules()
            .define("myCollectionRule")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withDescription("A rule showcasing ingestion time enrichment")
            .withDataCollectionEndpointId(
                "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myDataCollectionEndpoint")
            .withReferences(new DataCollectionRuleReferences().withEnrichmentData(
                new ReferencesSpecEnrichmentData().withStorageBlobs(Arrays.asList(new StorageBlob().withResourceId(
                    "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourcegroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myenrichmentstorage")
                    .withBlobUrl("https://myenrichmentstorage.blob.core.windows.net/enrichment")
                    .withLookupType(KnownStorageBlobLookupType.STRING)
                    .withName("mytextdatastore")))))
            .withStreamDeclarations(mapOf("Custom-TabularDataABC",
                new StreamDeclaration().withColumns(Arrays.asList(
                    new ColumnDefinition().withName("TimeGenerated").withType(KnownColumnDefinitionType.DATETIME),
                    new ColumnDefinition().withName("Message").withType(KnownColumnDefinitionType.STRING),
                    new ColumnDefinition().withName("AdditionalContext").withType(KnownColumnDefinitionType.STRING)))))
            .withDataSources(new DataCollectionRuleDataSources()
                .withLogFiles(Arrays.asList(new LogFilesDataSource().withStreams(Arrays.asList("Custom-TabularDataABC"))
                    .withFilePatterns(Arrays.asList("C:\\JavaLogs\\*\\*.log"))
                    .withFormat(KnownLogFilesDataSourceFormat.TEXT)
                    .withSettings(new LogFilesDataSourceSettings().withText(new LogFileSettingsText()
                        .withRecordStartTimestampFormat(KnownLogFileTextSettingsRecordStartTimestampFormat.ISO_8601)))
                    .withName("myTabularLogDataSource"))))
            .withDestinations(new DataCollectionRuleDestinations()
                .withLogAnalytics(Arrays.asList(new LogAnalyticsDestination().withWorkspaceResourceId(
                    "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace")
                    .withName("centralWorkspace"))))
            .withDataFlows(Arrays.asList(new DataFlow()
                .withStreams(Arrays.asList(KnownDataFlowStreams.fromString("Custom-TabularDataABC")))
                .withDestinations(Arrays.asList("centralWorkspace"))
                .withTransformKql(
                    "source | extend LookupData = lookup_string_am('mytextdatastore', Message) | project TimeGenerated, Message, AdditionalContext = LookupData.Message")
                .withOutputStream("Custom-LOGS1_CL")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
