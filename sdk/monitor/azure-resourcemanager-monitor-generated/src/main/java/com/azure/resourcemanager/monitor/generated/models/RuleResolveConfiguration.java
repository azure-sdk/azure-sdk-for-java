// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * TBD. Relevant only for rules of the kind LogAlert.
 */
@Fluent
public final class RuleResolveConfiguration implements JsonSerializable<RuleResolveConfiguration> {
    /*
     * The flag that indicates whether or not to auto resolve a fired alert.
     */
    private Boolean autoResolved;

    /*
     * The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO
     * 8601 duration format.
     */
    private Duration timeToResolve;

    /**
     * Creates an instance of RuleResolveConfiguration class.
     */
    public RuleResolveConfiguration() {
    }

    /**
     * Get the autoResolved property: The flag that indicates whether or not to auto resolve a fired alert.
     * 
     * @return the autoResolved value.
     */
    public Boolean autoResolved() {
        return this.autoResolved;
    }

    /**
     * Set the autoResolved property: The flag that indicates whether or not to auto resolve a fired alert.
     * 
     * @param autoResolved the autoResolved value to set.
     * @return the RuleResolveConfiguration object itself.
     */
    public RuleResolveConfiguration withAutoResolved(Boolean autoResolved) {
        this.autoResolved = autoResolved;
        return this;
    }

    /**
     * Get the timeToResolve property: The duration a rule must evaluate as healthy before the fired alert is
     * automatically resolved represented in ISO 8601 duration format.
     * 
     * @return the timeToResolve value.
     */
    public Duration timeToResolve() {
        return this.timeToResolve;
    }

    /**
     * Set the timeToResolve property: The duration a rule must evaluate as healthy before the fired alert is
     * automatically resolved represented in ISO 8601 duration format.
     * 
     * @param timeToResolve the timeToResolve value to set.
     * @return the RuleResolveConfiguration object itself.
     */
    public RuleResolveConfiguration withTimeToResolve(Duration timeToResolve) {
        this.timeToResolve = timeToResolve;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoResolved", this.autoResolved);
        jsonWriter.writeStringField("timeToResolve", CoreUtils.durationToStringWithDays(this.timeToResolve));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleResolveConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleResolveConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuleResolveConfiguration.
     */
    public static RuleResolveConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleResolveConfiguration deserializedRuleResolveConfiguration = new RuleResolveConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoResolved".equals(fieldName)) {
                    deserializedRuleResolveConfiguration.autoResolved = reader.getNullable(JsonReader::getBoolean);
                } else if ("timeToResolve".equals(fieldName)) {
                    deserializedRuleResolveConfiguration.timeToResolve
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleResolveConfiguration;
        });
    }
}
