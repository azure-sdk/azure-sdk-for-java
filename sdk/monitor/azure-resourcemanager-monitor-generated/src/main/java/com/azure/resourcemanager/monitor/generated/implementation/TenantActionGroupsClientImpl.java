// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.monitor.generated.fluent.TenantActionGroupsClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.TenantActionGroupResourceInner;
import com.azure.resourcemanager.monitor.generated.models.ActionGroupPatchBody;
import com.azure.resourcemanager.monitor.generated.models.TenantActionGroupList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TenantActionGroupsClient. */
public final class TenantActionGroupsClientImpl implements TenantActionGroupsClient {
    /** The proxy service used to perform REST calls. */
    private final TenantActionGroupsService service;

    /** The service client containing this operation class. */
    private final MonitorClientImpl client;

    /**
     * Initializes an instance of TenantActionGroupsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TenantActionGroupsClientImpl(MonitorClientImpl client) {
        this.service =
            RestProxy.create(TenantActionGroupsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MonitorClientTenantActionGroups to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MonitorClientTenantA")
    public interface TenantActionGroupsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActionGroupResourceInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("tenantActionGroupName") String tenantActionGroupName,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TenantActionGroupResourceInner actionGroup,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActionGroupResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("tenantActionGroupName") String tenantActionGroupName,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("tenantActionGroupName") String tenantActionGroupName,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActionGroupResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("tenantActionGroupName") String tenantActionGroupName,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ActionGroupPatchBody tenantActionGroupPatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActionGroupList>> listByManagementGroupId(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create a new tenant action group or update an existing one.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param actionGroup The tenant action group to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> createOrUpdateWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantActionGroupResourceInner actionGroup) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (actionGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionGroup is required and cannot be null."));
        } else {
            actionGroup.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            this.client.getApiVersion(),
                            actionGroup,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new tenant action group or update an existing one.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param actionGroup The tenant action group to create or use for the update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> createOrUpdateWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantActionGroupResourceInner actionGroup,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (actionGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionGroup is required and cannot be null."));
        } else {
            actionGroup.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                this.client.getApiVersion(),
                actionGroup,
                accept,
                context);
    }

    /**
     * Create a new tenant action group or update an existing one.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param actionGroup The tenant action group to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActionGroupResourceInner> createOrUpdateAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantActionGroupResourceInner actionGroup) {
        return createOrUpdateWithResponseAsync(managementGroupId, tenantActionGroupName, xMsClientTenantId, actionGroup)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a new tenant action group or update an existing one.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param actionGroup The tenant action group to create or use for the update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActionGroupResourceInner> createOrUpdateWithResponse(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantActionGroupResourceInner actionGroup,
        Context context) {
        return createOrUpdateWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, actionGroup, context)
            .block();
    }

    /**
     * Create a new tenant action group or update an existing one.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param actionGroup The tenant action group to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActionGroupResourceInner createOrUpdate(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantActionGroupResourceInner actionGroup) {
        return createOrUpdateWithResponse(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, actionGroup, Context.NONE)
            .getValue();
    }

    /**
     * Get a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> getWithResponseAsync(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> getWithResponseAsync(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActionGroupResourceInner> getAsync(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        return getWithResponseAsync(managementGroupId, tenantActionGroupName, xMsClientTenantId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActionGroupResourceInner> getWithResponse(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, Context context) {
        return getWithResponseAsync(managementGroupId, tenantActionGroupName, xMsClientTenantId, context).block();
    }

    /**
     * Get a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActionGroupResourceInner get(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        return getWithResponse(managementGroupId, tenantActionGroupName, xMsClientTenantId, Context.NONE).getValue();
    }

    /**
     * Delete a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        return deleteWithResponseAsync(managementGroupId, tenantActionGroupName, xMsClientTenantId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, Context context) {
        return deleteWithResponseAsync(managementGroupId, tenantActionGroupName, xMsClientTenantId, context).block();
    }

    /**
     * Delete a tenant action group.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String tenantActionGroupName, String xMsClientTenantId) {
        deleteWithResponse(managementGroupId, tenantActionGroupName, xMsClientTenantId, Context.NONE);
    }

    /**
     * Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate method.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param tenantActionGroupPatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> updateWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        ActionGroupPatchBody tenantActionGroupPatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (tenantActionGroupPatch == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter tenantActionGroupPatch is required and cannot be null."));
        } else {
            tenantActionGroupPatch.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            this.client.getApiVersion(),
                            tenantActionGroupPatch,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate method.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param tenantActionGroupPatch Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActionGroupResourceInner>> updateWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        ActionGroupPatchBody tenantActionGroupPatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (tenantActionGroupPatch == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter tenantActionGroupPatch is required and cannot be null."));
        } else {
            tenantActionGroupPatch.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                this.client.getApiVersion(),
                tenantActionGroupPatch,
                accept,
                context);
    }

    /**
     * Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate method.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param tenantActionGroupPatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActionGroupResourceInner> updateAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        ActionGroupPatchBody tenantActionGroupPatch) {
        return updateWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, tenantActionGroupPatch)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate method.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param tenantActionGroupPatch Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActionGroupResourceInner> updateWithResponse(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        ActionGroupPatchBody tenantActionGroupPatch,
        Context context) {
        return updateWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, tenantActionGroupPatch, context)
            .block();
    }

    /**
     * Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate method.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param tenantActionGroupPatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a tenant action group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActionGroupResourceInner update(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        ActionGroupPatchBody tenantActionGroupPatch) {
        return updateWithResponse(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, tenantActionGroupPatch, Context.NONE)
            .getValue();
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActionGroupResourceInner>> listByManagementGroupIdSinglePageAsync(
        String managementGroupId, String xMsClientTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByManagementGroupId(
                            this.client.getEndpoint(),
                            managementGroupId,
                            xMsClientTenantId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<TenantActionGroupResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActionGroupResourceInner>> listByManagementGroupIdSinglePageAsync(
        String managementGroupId, String xMsClientTenantId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagementGroupId(
                this.client.getEndpoint(),
                managementGroupId,
                xMsClientTenantId,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null));
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActionGroupResourceInner> listByManagementGroupIdAsync(
        String managementGroupId, String xMsClientTenantId) {
        return new PagedFlux<>(() -> listByManagementGroupIdSinglePageAsync(managementGroupId, xMsClientTenantId));
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActionGroupResourceInner> listByManagementGroupIdAsync(
        String managementGroupId, String xMsClientTenantId, Context context) {
        return new PagedFlux<>(
            () -> listByManagementGroupIdSinglePageAsync(managementGroupId, xMsClientTenantId, context));
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActionGroupResourceInner> listByManagementGroupId(
        String managementGroupId, String xMsClientTenantId) {
        return new PagedIterable<>(listByManagementGroupIdAsync(managementGroupId, xMsClientTenantId));
    }

    /**
     * Get a list of all tenant action groups in a management group.
     *
     * @param managementGroupId The management group id.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all tenant action groups in a management group as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActionGroupResourceInner> listByManagementGroupId(
        String managementGroupId, String xMsClientTenantId, Context context) {
        return new PagedIterable<>(listByManagementGroupIdAsync(managementGroupId, xMsClientTenantId, context));
    }
}
