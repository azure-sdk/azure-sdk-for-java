// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties of an Azure Monitor Workspace.
 */
@Fluent
public class AzureMonitorWorkspace {
    /*
     * The immutable Id of the Azure Monitor Workspace. This property is read-only.
     */
    @JsonProperty(value = "accountId", access = JsonProperty.Access.WRITE_ONLY)
    private String accountId;

    /*
     * Properties related to the metrics container in the Azure Monitor Workspace
     */
    @JsonProperty(value = "metrics", access = JsonProperty.Access.WRITE_ONLY)
    private AzureMonitorWorkspaceMetrics metrics;

    /*
     * The provisioning state of the Azure Monitor Workspace. Set to Succeeded if everything is healthy.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The Data Collection Rule and Endpoint used for ingestion by default.
     */
    @JsonProperty(value = "defaultIngestionSettings", access = JsonProperty.Access.WRITE_ONLY)
    private AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings;

    /*
     * List of private endpoint connections
     */
    @JsonProperty(value = "privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnection> privateEndpointConnections;

    /*
     * Gets or sets allow or disallow public network access to Azure Monitor Workspace
     */
    @JsonProperty(value = "publicNetworkAccess")
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of AzureMonitorWorkspace class.
     */
    public AzureMonitorWorkspace() {
    }

    /**
     * Get the accountId property: The immutable Id of the Azure Monitor Workspace. This property is read-only.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get the metrics property: Properties related to the metrics container in the Azure Monitor Workspace.
     * 
     * @return the metrics value.
     */
    public AzureMonitorWorkspaceMetrics metrics() {
        return this.metrics;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Azure Monitor Workspace. Set to Succeeded if
     * everything is healthy.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the defaultIngestionSettings property: The Data Collection Rule and Endpoint used for ingestion by default.
     * 
     * @return the defaultIngestionSettings value.
     */
    public AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings() {
        return this.defaultIngestionSettings;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the publicNetworkAccess property: Gets or sets allow or disallow public network access to Azure Monitor
     * Workspace.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Gets or sets allow or disallow public network access to Azure Monitor
     * Workspace.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AzureMonitorWorkspace object itself.
     */
    public AzureMonitorWorkspace withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metrics() != null) {
            metrics().validate();
        }
        if (defaultIngestionSettings() != null) {
            defaultIngestionSettings().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }
}
