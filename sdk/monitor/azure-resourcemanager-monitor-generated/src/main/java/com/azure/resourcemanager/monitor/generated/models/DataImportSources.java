// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DataImportSources model.
 */
@Fluent
public class DataImportSources implements JsonSerializable<DataImportSources> {
    /*
     * Definition of Event Hub configuration.
     */
    private DataImportSourcesEventHub eventHub;

    /**
     * Creates an instance of DataImportSources class.
     */
    public DataImportSources() {
    }

    /**
     * Get the eventHub property: Definition of Event Hub configuration.
     * 
     * @return the eventHub value.
     */
    public DataImportSourcesEventHub eventHub() {
        return this.eventHub;
    }

    /**
     * Set the eventHub property: Definition of Event Hub configuration.
     * 
     * @param eventHub the eventHub value to set.
     * @return the DataImportSources object itself.
     */
    public DataImportSources withEventHub(DataImportSourcesEventHub eventHub) {
        this.eventHub = eventHub;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventHub() != null) {
            eventHub().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("eventHub", this.eventHub);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataImportSources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataImportSources if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataImportSources.
     */
    public static DataImportSources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataImportSources deserializedDataImportSources = new DataImportSources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventHub".equals(fieldName)) {
                    deserializedDataImportSources.eventHub = DataImportSourcesEventHub.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataImportSources;
        });
    }
}
