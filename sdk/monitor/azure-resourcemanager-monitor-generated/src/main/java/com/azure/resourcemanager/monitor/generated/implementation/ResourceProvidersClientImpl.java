// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.monitor.generated.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.TestNotificationDetailsResponseAutoGeneratedInner;
import com.azure.resourcemanager.monitor.generated.models.TenantNotificationRequestBody;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ResourceProvidersClient. */
public final class ResourceProvidersClientImpl implements ResourceProvidersClient {
    /** The proxy service used to perform REST calls. */
    private final ResourceProvidersService service;

    /** The service client containing this operation class. */
    private final MonitorClientImpl client;

    /**
     * Initializes an instance of ResourceProvidersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ResourceProvidersClientImpl(MonitorClientImpl client) {
        this.service =
            RestProxy.create(ResourceProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MonitorClientResourceProviders to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MonitorClientResourc")
    public interface ResourceProvidersService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/createNotifications")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createNotificationsAtTenantActionGroupResourceLevel(
            @HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("tenantActionGroupName") String tenantActionGroupName,
            @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TenantNotificationRequestBody notificationRequest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/notificationStatus/{notificationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TestNotificationDetailsResponseAutoGeneratedInner>>
            getTestNotificationsAtTenantActionGroupResourceLevel(
                @HostParam("$host") String endpoint,
                @PathParam("managementGroupId") String managementGroupId,
                @PathParam("tenantActionGroupName") String tenantActionGroupName,
                @HeaderParam("x-ms-client-tenant-id") String xMsClientTenantId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("notificationId") String notificationId,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (notificationRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter notificationRequest is required and cannot be null."));
        } else {
            notificationRequest.validate();
        }
        final String apiVersion = "2023-05-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createNotificationsAtTenantActionGroupResourceLevel(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            apiVersion,
                            notificationRequest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (notificationRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter notificationRequest is required and cannot be null."));
        } else {
            notificationRequest.validate();
        }
        final String apiVersion = "2023-05-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createNotificationsAtTenantActionGroupResourceLevel(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                apiVersion,
                notificationRequest,
                accept,
                context);
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<TestNotificationDetailsResponseAutoGeneratedInner>,
            TestNotificationDetailsResponseAutoGeneratedInner>
        beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest);
        return this
            .client
            .<TestNotificationDetailsResponseAutoGeneratedInner, TestNotificationDetailsResponseAutoGeneratedInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    TestNotificationDetailsResponseAutoGeneratedInner.class,
                    TestNotificationDetailsResponseAutoGeneratedInner.class,
                    this.client.getContext());
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<TestNotificationDetailsResponseAutoGeneratedInner>,
            TestNotificationDetailsResponseAutoGeneratedInner>
        beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest, context);
        return this
            .client
            .<TestNotificationDetailsResponseAutoGeneratedInner, TestNotificationDetailsResponseAutoGeneratedInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    TestNotificationDetailsResponseAutoGeneratedInner.class,
                    TestNotificationDetailsResponseAutoGeneratedInner.class,
                    context);
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<TestNotificationDetailsResponseAutoGeneratedInner>,
            TestNotificationDetailsResponseAutoGeneratedInner>
        beginCreateNotificationsAtTenantActionGroupResourceLevel(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest) {
        return this
            .beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest)
            .getSyncPoller();
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<TestNotificationDetailsResponseAutoGeneratedInner>,
            TestNotificationDetailsResponseAutoGeneratedInner>
        beginCreateNotificationsAtTenantActionGroupResourceLevel(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest,
            Context context) {
        return this
            .beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest, context)
            .getSyncPoller();
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestNotificationDetailsResponseAutoGeneratedInner>
        createNotificationsAtTenantActionGroupResourceLevelAsync(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest) {
        return beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestNotificationDetailsResponseAutoGeneratedInner>
        createNotificationsAtTenantActionGroupResourceLevelAsync(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            TenantNotificationRequestBody notificationRequest,
            Context context) {
        return beginCreateNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestNotificationDetailsResponseAutoGeneratedInner createNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest) {
        return createNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest)
            .block();
    }

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestNotificationDetailsResponseAutoGeneratedInner createNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest,
        Context context) {
        return createNotificationsAtTenantActionGroupResourceLevelAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationRequest, context)
            .block();
    }

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TestNotificationDetailsResponseAutoGeneratedInner>>
        getTestNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
            String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, String notificationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (notificationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter notificationId is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTestNotificationsAtTenantActionGroupResourceLevel(
                            this.client.getEndpoint(),
                            managementGroupId,
                            tenantActionGroupName,
                            xMsClientTenantId,
                            apiVersion,
                            notificationId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TestNotificationDetailsResponseAutoGeneratedInner>>
        getTestNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            String notificationId,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (tenantActionGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter tenantActionGroupName is required and cannot be null."));
        }
        if (xMsClientTenantId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter xMsClientTenantId is required and cannot be null."));
        }
        if (notificationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter notificationId is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTestNotificationsAtTenantActionGroupResourceLevel(
                this.client.getEndpoint(),
                managementGroupId,
                tenantActionGroupName,
                xMsClientTenantId,
                apiVersion,
                notificationId,
                accept,
                context);
    }

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestNotificationDetailsResponseAutoGeneratedInner>
        getTestNotificationsAtTenantActionGroupResourceLevelAsync(
            String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, String notificationId) {
        return getTestNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestNotificationDetailsResponseAutoGeneratedInner>
        getTestNotificationsAtTenantActionGroupResourceLevelWithResponse(
            String managementGroupId,
            String tenantActionGroupName,
            String xMsClientTenantId,
            String notificationId,
            Context context) {
        return getTestNotificationsAtTenantActionGroupResourceLevelWithResponseAsync(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationId, context)
            .block();
    }

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestNotificationDetailsResponseAutoGeneratedInner getTestNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, String notificationId) {
        return getTestNotificationsAtTenantActionGroupResourceLevelWithResponse(
                managementGroupId, tenantActionGroupName, xMsClientTenantId, notificationId, Context.NONE)
            .getValue();
    }
}
