// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Metadata about the resource.
 */
@Immutable
public class Metadata {
    /*
     * Azure offering managing this resource on-behalf-of customer.
     */
    @JsonProperty(value = "provisionedBy", access = JsonProperty.Access.WRITE_ONLY)
    private String provisionedBy;

    /*
     * Resource Id of azure offering managing this resource on-behalf-of customer.
     */
    @JsonProperty(value = "provisionedByResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String provisionedByResourceId;

    /*
     * Immutable Id of azure offering managing this resource on-behalf-of customer.
     */
    @JsonProperty(value = "provisionedByImmutableId", access = JsonProperty.Access.WRITE_ONLY)
    private String provisionedByImmutableId;

    /**
     * Creates an instance of Metadata class.
     */
    public Metadata() {
    }

    /**
     * Get the provisionedBy property: Azure offering managing this resource on-behalf-of customer.
     * 
     * @return the provisionedBy value.
     */
    public String provisionedBy() {
        return this.provisionedBy;
    }

    /**
     * Get the provisionedByResourceId property: Resource Id of azure offering managing this resource on-behalf-of
     * customer.
     * 
     * @return the provisionedByResourceId value.
     */
    public String provisionedByResourceId() {
        return this.provisionedByResourceId;
    }

    /**
     * Get the provisionedByImmutableId property: Immutable Id of azure offering managing this resource on-behalf-of
     * customer.
     * 
     * @return the provisionedByImmutableId value.
     */
    public String provisionedByImmutableId() {
        return this.provisionedByImmutableId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
