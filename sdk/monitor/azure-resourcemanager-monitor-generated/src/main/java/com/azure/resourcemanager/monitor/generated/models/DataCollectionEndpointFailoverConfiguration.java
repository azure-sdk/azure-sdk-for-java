// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Failover configuration on this endpoint. This property is READ-ONLY.
 */
@Fluent
public final class DataCollectionEndpointFailoverConfiguration extends FailoverConfigurationSpec {
    /**
     * Creates an instance of DataCollectionEndpointFailoverConfiguration class.
     */
    public DataCollectionEndpointFailoverConfiguration() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointFailoverConfiguration withActiveLocation(String activeLocation) {
        super.withActiveLocation(activeLocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointFailoverConfiguration withLocations(List<LocationSpec> locations) {
        super.withLocations(locations);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activeLocation", activeLocation());
        jsonWriter.writeArrayField("locations", locations(), (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollectionEndpointFailoverConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollectionEndpointFailoverConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataCollectionEndpointFailoverConfiguration.
     */
    public static DataCollectionEndpointFailoverConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollectionEndpointFailoverConfiguration deserializedDataCollectionEndpointFailoverConfiguration
                = new DataCollectionEndpointFailoverConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeLocation".equals(fieldName)) {
                    deserializedDataCollectionEndpointFailoverConfiguration.withActiveLocation(reader.getString());
                } else if ("locations".equals(fieldName)) {
                    List<LocationSpec> locations = reader.readArray(reader1 -> LocationSpec.fromJson(reader1));
                    deserializedDataCollectionEndpointFailoverConfiguration.withLocations(locations);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollectionEndpointFailoverConfiguration;
        });
    }
}
