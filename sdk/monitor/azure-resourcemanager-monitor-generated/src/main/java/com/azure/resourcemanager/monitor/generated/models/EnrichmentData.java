// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * All the enrichment data sources referenced in data flows.
 */
@Fluent
public class EnrichmentData implements JsonSerializable<EnrichmentData> {
    /*
     * All the storage blobs used as enrichment data sources
     */
    private List<StorageBlob> storageBlobs;

    /**
     * Creates an instance of EnrichmentData class.
     */
    public EnrichmentData() {
    }

    /**
     * Get the storageBlobs property: All the storage blobs used as enrichment data sources.
     * 
     * @return the storageBlobs value.
     */
    public List<StorageBlob> storageBlobs() {
        return this.storageBlobs;
    }

    /**
     * Set the storageBlobs property: All the storage blobs used as enrichment data sources.
     * 
     * @param storageBlobs the storageBlobs value to set.
     * @return the EnrichmentData object itself.
     */
    public EnrichmentData withStorageBlobs(List<StorageBlob> storageBlobs) {
        this.storageBlobs = storageBlobs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageBlobs() != null) {
            storageBlobs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("storageBlobs", this.storageBlobs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnrichmentData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnrichmentData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnrichmentData.
     */
    public static EnrichmentData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnrichmentData deserializedEnrichmentData = new EnrichmentData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageBlobs".equals(fieldName)) {
                    List<StorageBlob> storageBlobs = reader.readArray(reader1 -> StorageBlob.fromJson(reader1));
                    deserializedEnrichmentData.storageBlobs = storageBlobs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnrichmentData;
        });
    }
}
