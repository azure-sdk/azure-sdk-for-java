// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ResourceProviders. */
public interface ResourceProviders {
    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results.
     */
    TestNotificationDetailsResponse createNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest);

    /**
     * Send test notifications to a set of provided receivers.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationRequest The notification request body which includes the contact details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the test notification results.
     */
    TestNotificationDetailsResponse createNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        TenantNotificationRequestBody notificationRequest,
        Context context);

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id along with {@link Response}.
     */
    Response<TestNotificationDetailsResponse> getTestNotificationsAtTenantActionGroupResourceLevelWithResponse(
        String managementGroupId,
        String tenantActionGroupName,
        String xMsClientTenantId,
        String notificationId,
        Context context);

    /**
     * Get the test notifications by the notification id.
     *
     * @param managementGroupId The management group id.
     * @param tenantActionGroupName The name of the action group.
     * @param xMsClientTenantId The tenant ID of the client making the request.
     * @param notificationId The notification id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the test notifications by the notification id.
     */
    TestNotificationDetailsResponse getTestNotificationsAtTenantActionGroupResourceLevel(
        String managementGroupId, String tenantActionGroupName, String xMsClientTenantId, String notificationId);
}
