// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This defines all the ingestion endpoints that can be used by this rule.
 */
@Immutable
public class EndpointsSpec implements JsonSerializable<EndpointsSpec> {
    /*
     * The ingestion endpoint for logs
     */
    private String logsIngestion;

    /*
     * The ingestion endpoint for metrics
     */
    private String metricsIngestion;

    /**
     * Creates an instance of EndpointsSpec class.
     */
    public EndpointsSpec() {
    }

    /**
     * Get the logsIngestion property: The ingestion endpoint for logs.
     * 
     * @return the logsIngestion value.
     */
    public String logsIngestion() {
        return this.logsIngestion;
    }

    /**
     * Set the logsIngestion property: The ingestion endpoint for logs.
     * 
     * @param logsIngestion the logsIngestion value to set.
     * @return the EndpointsSpec object itself.
     */
    EndpointsSpec withLogsIngestion(String logsIngestion) {
        this.logsIngestion = logsIngestion;
        return this;
    }

    /**
     * Get the metricsIngestion property: The ingestion endpoint for metrics.
     * 
     * @return the metricsIngestion value.
     */
    public String metricsIngestion() {
        return this.metricsIngestion;
    }

    /**
     * Set the metricsIngestion property: The ingestion endpoint for metrics.
     * 
     * @param metricsIngestion the metricsIngestion value to set.
     * @return the EndpointsSpec object itself.
     */
    EndpointsSpec withMetricsIngestion(String metricsIngestion) {
        this.metricsIngestion = metricsIngestion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointsSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointsSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointsSpec.
     */
    public static EndpointsSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointsSpec deserializedEndpointsSpec = new EndpointsSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logsIngestion".equals(fieldName)) {
                    deserializedEndpointsSpec.logsIngestion = reader.getString();
                } else if ("metricsIngestion".equals(fieldName)) {
                    deserializedEndpointsSpec.metricsIngestion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointsSpec;
        });
    }
}
