// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An agent setting.
 */
@Fluent
public class AgentSettingsSpec implements JsonSerializable<AgentSettingsSpec> {
    /*
     * All the settings that are applicable to the logs agent (AMA)
     */
    private List<AgentSetting> logs;

    /**
     * Creates an instance of AgentSettingsSpec class.
     */
    public AgentSettingsSpec() {
    }

    /**
     * Get the logs property: All the settings that are applicable to the logs agent (AMA).
     * 
     * @return the logs value.
     */
    public List<AgentSetting> logs() {
        return this.logs;
    }

    /**
     * Set the logs property: All the settings that are applicable to the logs agent (AMA).
     * 
     * @param logs the logs value to set.
     * @return the AgentSettingsSpec object itself.
     */
    public AgentSettingsSpec withLogs(List<AgentSetting> logs) {
        this.logs = logs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logs() != null) {
            logs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("logs", this.logs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentSettingsSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentSettingsSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentSettingsSpec.
     */
    public static AgentSettingsSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentSettingsSpec deserializedAgentSettingsSpec = new AgentSettingsSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logs".equals(fieldName)) {
                    List<AgentSetting> logs = reader.readArray(reader1 -> AgentSetting.fromJson(reader1));
                    deserializedAgentSettingsSpec.logs = logs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentSettingsSpec;
        });
    }
}
