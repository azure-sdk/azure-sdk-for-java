// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpoint;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointConfigurationAccess;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointFailoverConfiguration;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointLogsIngestion;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointMetadata;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointMetricsIngestion;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionEndpointNetworkAcls;
import com.azure.resourcemanager.monitor.generated.models.KnownDataCollectionEndpointProvisioningState;
import com.azure.resourcemanager.monitor.generated.models.PrivateLinkScopedResource;
import java.io.IOException;
import java.util.List;

/**
 * Resource properties.
 */
@Fluent
public final class DataCollectionEndpointResourceProperties extends DataCollectionEndpoint {
    /*
     * Metadata for the resource. This property is READ-ONLY.
     */
    private DataCollectionEndpointMetadata metadata;

    /*
     * Failover configuration on this endpoint. This property is READ-ONLY.
     */
    private DataCollectionEndpointFailoverConfiguration failoverConfiguration;

    /*
     * List of Azure Monitor Private Link Scope Resources to which this data collection endpoint resource is associated.
     * This property is READ-ONLY.
     */
    private List<PrivateLinkScopedResource> privateLinkScopedResources;

    /*
     * The resource provisioning state. This property is READ-ONLY.
     */
    private KnownDataCollectionEndpointProvisioningState provisioningState;

    /**
     * Creates an instance of DataCollectionEndpointResourceProperties class.
     */
    public DataCollectionEndpointResourceProperties() {
    }

    /**
     * Get the metadata property: Metadata for the resource. This property is READ-ONLY.
     * 
     * @return the metadata value.
     */
    @Override
    public DataCollectionEndpointMetadata metadata() {
        return this.metadata;
    }

    /**
     * Get the failoverConfiguration property: Failover configuration on this endpoint. This property is READ-ONLY.
     * 
     * @return the failoverConfiguration value.
     */
    @Override
    public DataCollectionEndpointFailoverConfiguration failoverConfiguration() {
        return this.failoverConfiguration;
    }

    /**
     * Get the privateLinkScopedResources property: List of Azure Monitor Private Link Scope Resources to which this
     * data collection endpoint resource is associated. This property is READ-ONLY.
     * 
     * @return the privateLinkScopedResources value.
     */
    @Override
    public List<PrivateLinkScopedResource> privateLinkScopedResources() {
        return this.privateLinkScopedResources;
    }

    /**
     * Get the provisioningState property: The resource provisioning state. This property is READ-ONLY.
     * 
     * @return the provisioningState value.
     */
    @Override
    public KnownDataCollectionEndpointProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties withImmutableId(String immutableId) {
        super.withImmutableId(immutableId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties
        withConfigurationAccess(DataCollectionEndpointConfigurationAccess configurationAccess) {
        super.withConfigurationAccess(configurationAccess);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties
        withLogsIngestion(DataCollectionEndpointLogsIngestion logsIngestion) {
        super.withLogsIngestion(logsIngestion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties
        withMetricsIngestion(DataCollectionEndpointMetricsIngestion metricsIngestion) {
        super.withMetricsIngestion(metricsIngestion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionEndpointResourceProperties withNetworkAcls(DataCollectionEndpointNetworkAcls networkAcls) {
        super.withNetworkAcls(networkAcls);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (configurationAccess() != null) {
            configurationAccess().validate();
        }
        if (logsIngestion() != null) {
            logsIngestion().validate();
        }
        if (metricsIngestion() != null) {
            metricsIngestion().validate();
        }
        if (networkAcls() != null) {
            networkAcls().validate();
        }
        if (privateLinkScopedResources() != null) {
            privateLinkScopedResources().forEach(e -> e.validate());
        }
        if (failoverConfiguration() != null) {
            failoverConfiguration().validate();
        }
        if (metadata() != null) {
            metadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("immutableId", immutableId());
        jsonWriter.writeJsonField("configurationAccess", configurationAccess());
        jsonWriter.writeJsonField("logsIngestion", logsIngestion());
        jsonWriter.writeJsonField("metricsIngestion", metricsIngestion());
        jsonWriter.writeJsonField("networkAcls", networkAcls());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollectionEndpointResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollectionEndpointResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataCollectionEndpointResourceProperties.
     */
    public static DataCollectionEndpointResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollectionEndpointResourceProperties deserializedDataCollectionEndpointResourceProperties
                = new DataCollectionEndpointResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties.withDescription(reader.getString());
                } else if ("immutableId".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties.withImmutableId(reader.getString());
                } else if ("configurationAccess".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties
                        .withConfigurationAccess(DataCollectionEndpointConfigurationAccess.fromJson(reader));
                } else if ("logsIngestion".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties
                        .withLogsIngestion(DataCollectionEndpointLogsIngestion.fromJson(reader));
                } else if ("metricsIngestion".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties
                        .withMetricsIngestion(DataCollectionEndpointMetricsIngestion.fromJson(reader));
                } else if ("networkAcls".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties
                        .withNetworkAcls(DataCollectionEndpointNetworkAcls.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties.provisioningState
                        = KnownDataCollectionEndpointProvisioningState.fromString(reader.getString());
                } else if ("privateLinkScopedResources".equals(fieldName)) {
                    List<PrivateLinkScopedResource> privateLinkScopedResources
                        = reader.readArray(reader1 -> PrivateLinkScopedResource.fromJson(reader1));
                    deserializedDataCollectionEndpointResourceProperties.privateLinkScopedResources
                        = privateLinkScopedResources;
                } else if ("failoverConfiguration".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties.failoverConfiguration
                        = DataCollectionEndpointFailoverConfiguration.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    deserializedDataCollectionEndpointResourceProperties.metadata
                        = DataCollectionEndpointMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollectionEndpointResourceProperties;
        });
    }
}
