// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The FailoverConfigurationSpec model. */
@Fluent
public class FailoverConfigurationSpec {
    /*
     * Active location where data flow will occur.
     */
    @JsonProperty(value = "activeLocation")
    private String activeLocation;

    /*
     * Locations that are configured for failover.
     */
    @JsonProperty(value = "locations")
    private List<LocationSpec> locations;

    /** Creates an instance of FailoverConfigurationSpec class. */
    public FailoverConfigurationSpec() {
    }

    /**
     * Get the activeLocation property: Active location where data flow will occur.
     *
     * @return the activeLocation value.
     */
    public String activeLocation() {
        return this.activeLocation;
    }

    /**
     * Set the activeLocation property: Active location where data flow will occur.
     *
     * @param activeLocation the activeLocation value to set.
     * @return the FailoverConfigurationSpec object itself.
     */
    public FailoverConfigurationSpec withActiveLocation(String activeLocation) {
        this.activeLocation = activeLocation;
        return this;
    }

    /**
     * Get the locations property: Locations that are configured for failover.
     *
     * @return the locations value.
     */
    public List<LocationSpec> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: Locations that are configured for failover.
     *
     * @param locations the locations value to set.
     * @return the FailoverConfigurationSpec object itself.
     */
    public FailoverConfigurationSpec withLocations(List<LocationSpec> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
    }
}
