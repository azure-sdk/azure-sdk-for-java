// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FailoverConfigurationSpec model.
 */
@Fluent
public class FailoverConfigurationSpec implements JsonSerializable<FailoverConfigurationSpec> {
    /*
     * Active location where data flow will occur.
     */
    private String activeLocation;

    /*
     * Locations that are configured for failover.
     */
    private List<LocationSpec> locations;

    /**
     * Creates an instance of FailoverConfigurationSpec class.
     */
    public FailoverConfigurationSpec() {
    }

    /**
     * Get the activeLocation property: Active location where data flow will occur.
     * 
     * @return the activeLocation value.
     */
    public String activeLocation() {
        return this.activeLocation;
    }

    /**
     * Set the activeLocation property: Active location where data flow will occur.
     * 
     * @param activeLocation the activeLocation value to set.
     * @return the FailoverConfigurationSpec object itself.
     */
    public FailoverConfigurationSpec withActiveLocation(String activeLocation) {
        this.activeLocation = activeLocation;
        return this;
    }

    /**
     * Get the locations property: Locations that are configured for failover.
     * 
     * @return the locations value.
     */
    public List<LocationSpec> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: Locations that are configured for failover.
     * 
     * @param locations the locations value to set.
     * @return the FailoverConfigurationSpec object itself.
     */
    public FailoverConfigurationSpec withLocations(List<LocationSpec> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activeLocation", this.activeLocation);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverConfigurationSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverConfigurationSpec if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailoverConfigurationSpec.
     */
    public static FailoverConfigurationSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverConfigurationSpec deserializedFailoverConfigurationSpec = new FailoverConfigurationSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeLocation".equals(fieldName)) {
                    deserializedFailoverConfigurationSpec.activeLocation = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<LocationSpec> locations = reader.readArray(reader1 -> LocationSpec.fromJson(reader1));
                    deserializedFailoverConfigurationSpec.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverConfigurationSpec;
        });
    }
}
