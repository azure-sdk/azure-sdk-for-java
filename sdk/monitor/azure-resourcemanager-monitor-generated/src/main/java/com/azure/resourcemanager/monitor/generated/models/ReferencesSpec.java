// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This section defines all the references that may be used in other sections of the DCR.
 */
@Fluent
public class ReferencesSpec implements JsonSerializable<ReferencesSpec> {
    /*
     * All the enrichment data sources referenced in data flows
     */
    private ReferencesSpecEnrichmentData enrichmentData;

    /**
     * Creates an instance of ReferencesSpec class.
     */
    public ReferencesSpec() {
    }

    /**
     * Get the enrichmentData property: All the enrichment data sources referenced in data flows.
     * 
     * @return the enrichmentData value.
     */
    public ReferencesSpecEnrichmentData enrichmentData() {
        return this.enrichmentData;
    }

    /**
     * Set the enrichmentData property: All the enrichment data sources referenced in data flows.
     * 
     * @param enrichmentData the enrichmentData value to set.
     * @return the ReferencesSpec object itself.
     */
    public ReferencesSpec withEnrichmentData(ReferencesSpecEnrichmentData enrichmentData) {
        this.enrichmentData = enrichmentData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (enrichmentData() != null) {
            enrichmentData().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("enrichmentData", this.enrichmentData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferencesSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferencesSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReferencesSpec.
     */
    public static ReferencesSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReferencesSpec deserializedReferencesSpec = new ReferencesSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enrichmentData".equals(fieldName)) {
                    deserializedReferencesSpec.enrichmentData = ReferencesSpecEnrichmentData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReferencesSpec;
        });
    }
}
