// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EventHubDestination model.
 */
@Fluent
public final class EventHubDestination implements JsonSerializable<EventHubDestination> {
    /*
     * The resource ID of the event hub.
     */
    private String eventHubResourceId;

    /*
     * A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    private String name;

    /**
     * Creates an instance of EventHubDestination class.
     */
    public EventHubDestination() {
    }

    /**
     * Get the eventHubResourceId property: The resource ID of the event hub.
     * 
     * @return the eventHubResourceId value.
     */
    public String eventHubResourceId() {
        return this.eventHubResourceId;
    }

    /**
     * Set the eventHubResourceId property: The resource ID of the event hub.
     * 
     * @param eventHubResourceId the eventHubResourceId value to set.
     * @return the EventHubDestination object itself.
     */
    public EventHubDestination withEventHubResourceId(String eventHubResourceId) {
        this.eventHubResourceId = eventHubResourceId;
        return this;
    }

    /**
     * Get the name property: A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     * 
     * @param name the name value to set.
     * @return the EventHubDestination object itself.
     */
    public EventHubDestination withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventHubResourceId", this.eventHubResourceId);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHubDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHubDestination if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventHubDestination.
     */
    public static EventHubDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventHubDestination deserializedEventHubDestination = new EventHubDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventHubResourceId".equals(fieldName)) {
                    deserializedEventHubDestination.eventHubResourceId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEventHubDestination.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventHubDestination;
        });
    }
}
