// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.monitor.generated.fluent.AzureMonitorWorkspacesClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.AzureMonitorWorkspaceResourceInner;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceResource;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaces;

public final class AzureMonitorWorkspacesImpl implements AzureMonitorWorkspaces {
    private static final ClientLogger LOGGER = new ClientLogger(AzureMonitorWorkspacesImpl.class);

    private final AzureMonitorWorkspacesClient innerClient;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public AzureMonitorWorkspacesImpl(AzureMonitorWorkspacesClient innerClient,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureMonitorWorkspaceResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AzureMonitorWorkspaceResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new AzureMonitorWorkspaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureMonitorWorkspaceResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AzureMonitorWorkspaceResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new AzureMonitorWorkspaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureMonitorWorkspaceResource> list() {
        PagedIterable<AzureMonitorWorkspaceResourceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new AzureMonitorWorkspaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureMonitorWorkspaceResource> list(Context context) {
        PagedIterable<AzureMonitorWorkspaceResourceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new AzureMonitorWorkspaceResourceImpl(inner1, this.manager()));
    }

    public Response<AzureMonitorWorkspaceResource> getByResourceGroupWithResponse(String resourceGroupName,
        String azureMonitorWorkspaceName, Context context) {
        Response<AzureMonitorWorkspaceResourceInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, azureMonitorWorkspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureMonitorWorkspaceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureMonitorWorkspaceResource getByResourceGroup(String resourceGroupName,
        String azureMonitorWorkspaceName) {
        AzureMonitorWorkspaceResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, azureMonitorWorkspaceName);
        if (inner != null) {
            return new AzureMonitorWorkspaceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String azureMonitorWorkspaceName) {
        this.serviceClient().delete(resourceGroupName, azureMonitorWorkspaceName);
    }

    public void delete(String resourceGroupName, String azureMonitorWorkspaceName, Context context) {
        this.serviceClient().delete(resourceGroupName, azureMonitorWorkspaceName, context);
    }

    public AzureMonitorWorkspaceResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureMonitorWorkspaceName = Utils.getValueFromIdByName(id, "accounts");
        if (azureMonitorWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, azureMonitorWorkspaceName, Context.NONE)
            .getValue();
    }

    public Response<AzureMonitorWorkspaceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureMonitorWorkspaceName = Utils.getValueFromIdByName(id, "accounts");
        if (azureMonitorWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, azureMonitorWorkspaceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureMonitorWorkspaceName = Utils.getValueFromIdByName(id, "accounts");
        if (azureMonitorWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        this.delete(resourceGroupName, azureMonitorWorkspaceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureMonitorWorkspaceName = Utils.getValueFromIdByName(id, "accounts");
        if (azureMonitorWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        this.delete(resourceGroupName, azureMonitorWorkspaceName, context);
    }

    private AzureMonitorWorkspacesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    public AzureMonitorWorkspaceResourceImpl define(String name) {
        return new AzureMonitorWorkspaceResourceImpl(name, this.manager());
    }
}
