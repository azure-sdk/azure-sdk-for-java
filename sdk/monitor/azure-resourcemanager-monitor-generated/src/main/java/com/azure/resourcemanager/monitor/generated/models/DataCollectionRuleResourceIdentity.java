// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

/**
 * Managed service identity of the resource.
 */
@Fluent
public final class DataCollectionRuleResourceIdentity extends ManagedServiceIdentity {
    /*
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned
     * identity.
     */
    private UUID tenantId;

    /*
     * The service principal ID of the system assigned identity. This property will only be provided for a system
     * assigned identity.
     */
    private UUID principalId;

    /**
     * Creates an instance of DataCollectionRuleResourceIdentity class.
     */
    public DataCollectionRuleResourceIdentity() {
    }

    /**
     * Get the tenantId property: The tenant ID of the system assigned identity. This property will only be provided for
     * a system assigned identity.
     * 
     * @return the tenantId value.
     */
    @Override
    public UUID tenantId() {
        return this.tenantId;
    }

    /**
     * Get the principalId property: The service principal ID of the system assigned identity. This property will only
     * be provided for a system assigned identity.
     * 
     * @return the principalId value.
     */
    @Override
    public UUID principalId() {
        return this.principalId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleResourceIdentity withType(ManagedServiceIdentityType type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleResourceIdentity
        withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities) {
        super.withUserAssignedIdentities(userAssignedIdentities);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model DataCollectionRuleResourceIdentity"));
        }
        if (userAssignedIdentities() != null) {
            userAssignedIdentities().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataCollectionRuleResourceIdentity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", type() == null ? null : type().toString());
        jsonWriter.writeMapField("userAssignedIdentities", userAssignedIdentities(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollectionRuleResourceIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollectionRuleResourceIdentity if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataCollectionRuleResourceIdentity.
     */
    public static DataCollectionRuleResourceIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollectionRuleResourceIdentity deserializedDataCollectionRuleResourceIdentity
                = new DataCollectionRuleResourceIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDataCollectionRuleResourceIdentity
                        .withType(ManagedServiceIdentityType.fromString(reader.getString()));
                } else if ("principalId".equals(fieldName)) {
                    deserializedDataCollectionRuleResourceIdentity.principalId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedDataCollectionRuleResourceIdentity.tenantId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("userAssignedIdentities".equals(fieldName)) {
                    Map<String, UserAssignedIdentity> userAssignedIdentities
                        = reader.readMap(reader1 -> UserAssignedIdentity.fromJson(reader1));
                    deserializedDataCollectionRuleResourceIdentity.withUserAssignedIdentities(userAssignedIdentities);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollectionRuleResourceIdentity;
        });
    }
}
