// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The StorageTableDestination model.
 */
@Fluent
public final class StorageTableDestination implements JsonSerializable<StorageTableDestination> {
    /*
     * The name of the Storage Table.
     */
    private String tableName;

    /*
     * The resource ID of the storage account.
     */
    private String storageAccountResourceId;

    /*
     * A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    private String name;

    /**
     * Creates an instance of StorageTableDestination class.
     */
    public StorageTableDestination() {
    }

    /**
     * Get the tableName property: The name of the Storage Table.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: The name of the Storage Table.
     * 
     * @param tableName the tableName value to set.
     * @return the StorageTableDestination object itself.
     */
    public StorageTableDestination withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the storageAccountResourceId property: The resource ID of the storage account.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * Set the storageAccountResourceId property: The resource ID of the storage account.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the StorageTableDestination object itself.
     */
    public StorageTableDestination withStorageAccountResourceId(String storageAccountResourceId) {
        this.storageAccountResourceId = storageAccountResourceId;
        return this;
    }

    /**
     * Get the name property: A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: A friendly name for the destination.
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     * 
     * @param name the name value to set.
     * @return the StorageTableDestination object itself.
     */
    public StorageTableDestination withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("storageAccountResourceId", this.storageAccountResourceId);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTableDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTableDestination if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageTableDestination.
     */
    public static StorageTableDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTableDestination deserializedStorageTableDestination = new StorageTableDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tableName".equals(fieldName)) {
                    deserializedStorageTableDestination.tableName = reader.getString();
                } else if ("storageAccountResourceId".equals(fieldName)) {
                    deserializedStorageTableDestination.storageAccountResourceId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStorageTableDestination.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTableDestination;
        });
    }
}
