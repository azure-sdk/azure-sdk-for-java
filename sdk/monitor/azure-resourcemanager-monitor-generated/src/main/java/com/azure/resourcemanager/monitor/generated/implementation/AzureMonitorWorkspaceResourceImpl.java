// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.generated.fluent.models.AzureMonitorWorkspaceResourceInner;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceDefaultIngestionSettings;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceMetrics;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceResource;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceResourceForUpdate;
import com.azure.resourcemanager.monitor.generated.models.PrivateEndpointConnection;
import com.azure.resourcemanager.monitor.generated.models.ProvisioningState;
import com.azure.resourcemanager.monitor.generated.models.PublicNetworkAccess;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class AzureMonitorWorkspaceResourceImpl implements AzureMonitorWorkspaceResource,
    AzureMonitorWorkspaceResource.Definition, AzureMonitorWorkspaceResource.Update {
    private AzureMonitorWorkspaceResourceInner innerObject;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String accountId() {
        return this.innerModel().accountId();
    }

    public AzureMonitorWorkspaceMetrics metrics() {
        return this.innerModel().metrics();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings() {
        return this.innerModel().defaultIngestionSettings();
    }

    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnection> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AzureMonitorWorkspaceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String azureMonitorWorkspaceName;

    private AzureMonitorWorkspaceResourceForUpdate updateAzureMonitorWorkspaceProperties;

    public AzureMonitorWorkspaceResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public AzureMonitorWorkspaceResource create() {
        this.innerObject = serviceManager.serviceClient().getAzureMonitorWorkspaces()
            .createWithResponse(resourceGroupName, azureMonitorWorkspaceName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public AzureMonitorWorkspaceResource create(Context context) {
        this.innerObject = serviceManager.serviceClient().getAzureMonitorWorkspaces()
            .createWithResponse(resourceGroupName, azureMonitorWorkspaceName, this.innerModel(), context).getValue();
        return this;
    }

    AzureMonitorWorkspaceResourceImpl(String name,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = new AzureMonitorWorkspaceResourceInner();
        this.serviceManager = serviceManager;
        this.azureMonitorWorkspaceName = name;
    }

    public AzureMonitorWorkspaceResourceImpl update() {
        this.updateAzureMonitorWorkspaceProperties = new AzureMonitorWorkspaceResourceForUpdate();
        return this;
    }

    public AzureMonitorWorkspaceResource apply() {
        this.innerObject
            = serviceManager.serviceClient().getAzureMonitorWorkspaces().updateWithResponse(resourceGroupName,
                azureMonitorWorkspaceName, updateAzureMonitorWorkspaceProperties, Context.NONE).getValue();
        return this;
    }

    public AzureMonitorWorkspaceResource apply(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getAzureMonitorWorkspaces().updateWithResponse(resourceGroupName,
                azureMonitorWorkspaceName, updateAzureMonitorWorkspaceProperties, context).getValue();
        return this;
    }

    AzureMonitorWorkspaceResourceImpl(AzureMonitorWorkspaceResourceInner innerObject,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.azureMonitorWorkspaceName = Utils.getValueFromIdByName(innerObject.id(), "accounts");
    }

    public AzureMonitorWorkspaceResource refresh() {
        this.innerObject = serviceManager.serviceClient().getAzureMonitorWorkspaces()
            .getByResourceGroupWithResponse(resourceGroupName, azureMonitorWorkspaceName, Context.NONE).getValue();
        return this;
    }

    public AzureMonitorWorkspaceResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getAzureMonitorWorkspaces()
            .getByResourceGroupWithResponse(resourceGroupName, azureMonitorWorkspaceName, context).getValue();
        return this;
    }

    public AzureMonitorWorkspaceResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AzureMonitorWorkspaceResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AzureMonitorWorkspaceResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateAzureMonitorWorkspaceProperties.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
