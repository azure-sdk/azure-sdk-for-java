// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * An Incident receiver.
 */
@Fluent
public final class IncidentReceiver implements JsonSerializable<IncidentReceiver> {
    /*
     * The name of the Incident receiver. Names must be unique across all receivers within an action group.
     */
    private String name;

    /*
     * The incident service connection
     */
    private IncidentServiceConnection connection;

    /*
     * The incident management service type
     */
    private IncidentManagementService incidentManagementService;

    /*
     * Field mappings for the incident service
     */
    private Map<String, String> mappings;

    /**
     * Creates an instance of IncidentReceiver class.
     */
    public IncidentReceiver() {
    }

    /**
     * Get the name property: The name of the Incident receiver. Names must be unique across all receivers within an
     * action group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Incident receiver. Names must be unique across all receivers within an
     * action group.
     * 
     * @param name the name value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the connection property: The incident service connection.
     * 
     * @return the connection value.
     */
    public IncidentServiceConnection connection() {
        return this.connection;
    }

    /**
     * Set the connection property: The incident service connection.
     * 
     * @param connection the connection value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withConnection(IncidentServiceConnection connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Get the incidentManagementService property: The incident management service type.
     * 
     * @return the incidentManagementService value.
     */
    public IncidentManagementService incidentManagementService() {
        return this.incidentManagementService;
    }

    /**
     * Set the incidentManagementService property: The incident management service type.
     * 
     * @param incidentManagementService the incidentManagementService value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withIncidentManagementService(IncidentManagementService incidentManagementService) {
        this.incidentManagementService = incidentManagementService;
        return this;
    }

    /**
     * Get the mappings property: Field mappings for the incident service.
     * 
     * @return the mappings value.
     */
    public Map<String, String> mappings() {
        return this.mappings;
    }

    /**
     * Set the mappings property: Field mappings for the incident service.
     * 
     * @param mappings the mappings value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withMappings(Map<String, String> mappings) {
        this.mappings = mappings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model IncidentReceiver"));
        }
        if (connection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property connection in model IncidentReceiver"));
        } else {
            connection().validate();
        }
        if (incidentManagementService() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property incidentManagementService in model IncidentReceiver"));
        }
        if (mappings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mappings in model IncidentReceiver"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentReceiver.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("connection", this.connection);
        jsonWriter.writeStringField("incidentManagementService",
            this.incidentManagementService == null ? null : this.incidentManagementService.toString());
        jsonWriter.writeMapField("mappings", this.mappings, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IncidentReceiver from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IncidentReceiver if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IncidentReceiver.
     */
    public static IncidentReceiver fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IncidentReceiver deserializedIncidentReceiver = new IncidentReceiver();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIncidentReceiver.name = reader.getString();
                } else if ("connection".equals(fieldName)) {
                    deserializedIncidentReceiver.connection = IncidentServiceConnection.fromJson(reader);
                } else if ("incidentManagementService".equals(fieldName)) {
                    deserializedIncidentReceiver.incidentManagementService
                        = IncidentManagementService.fromString(reader.getString());
                } else if ("mappings".equals(fieldName)) {
                    Map<String, String> mappings = reader.readMap(reader1 -> reader1.getString());
                    deserializedIncidentReceiver.mappings = mappings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIncidentReceiver;
        });
    }
}
