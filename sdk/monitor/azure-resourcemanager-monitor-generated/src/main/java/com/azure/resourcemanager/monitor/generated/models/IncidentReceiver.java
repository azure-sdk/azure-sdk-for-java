// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * An Incident receiver.
 */
@Fluent
public final class IncidentReceiver {
    /*
     * The name of the Incident receiver. Names must be unique across all receivers within an action group.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The incident service connection
     */
    @JsonProperty(value = "connection", required = true)
    private IncidentServiceConnection connection;

    /*
     * The incident management service type
     */
    @JsonProperty(value = "incidentManagementService", required = true)
    private IncidentManagementService incidentManagementService;

    /*
     * Field mappings for the incident service
     */
    @JsonProperty(value = "mappings", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> mappings;

    /**
     * Creates an instance of IncidentReceiver class.
     */
    public IncidentReceiver() {
    }

    /**
     * Get the name property: The name of the Incident receiver. Names must be unique across all receivers within an
     * action group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Incident receiver. Names must be unique across all receivers within an
     * action group.
     * 
     * @param name the name value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the connection property: The incident service connection.
     * 
     * @return the connection value.
     */
    public IncidentServiceConnection connection() {
        return this.connection;
    }

    /**
     * Set the connection property: The incident service connection.
     * 
     * @param connection the connection value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withConnection(IncidentServiceConnection connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Get the incidentManagementService property: The incident management service type.
     * 
     * @return the incidentManagementService value.
     */
    public IncidentManagementService incidentManagementService() {
        return this.incidentManagementService;
    }

    /**
     * Set the incidentManagementService property: The incident management service type.
     * 
     * @param incidentManagementService the incidentManagementService value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withIncidentManagementService(IncidentManagementService incidentManagementService) {
        this.incidentManagementService = incidentManagementService;
        return this;
    }

    /**
     * Get the mappings property: Field mappings for the incident service.
     * 
     * @return the mappings value.
     */
    public Map<String, String> mappings() {
        return this.mappings;
    }

    /**
     * Set the mappings property: Field mappings for the incident service.
     * 
     * @param mappings the mappings value to set.
     * @return the IncidentReceiver object itself.
     */
    public IncidentReceiver withMappings(Map<String, String> mappings) {
        this.mappings = mappings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model IncidentReceiver"));
        }
        if (connection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property connection in model IncidentReceiver"));
        } else {
            connection().validate();
        }
        if (incidentManagementService() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property incidentManagementService in model IncidentReceiver"));
        }
        if (mappings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mappings in model IncidentReceiver"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentReceiver.class);
}
