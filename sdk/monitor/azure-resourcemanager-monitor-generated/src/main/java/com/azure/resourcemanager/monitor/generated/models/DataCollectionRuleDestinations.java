// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The specification of destinations.
 */
@Fluent
public final class DataCollectionRuleDestinations extends DestinationsSpec {
    /**
     * Creates an instance of DataCollectionRuleDestinations class.
     */
    public DataCollectionRuleDestinations() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withLogAnalytics(List<LogAnalyticsDestination> logAnalytics) {
        super.withLogAnalytics(logAnalytics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations
        withMonitoringAccounts(List<MonitoringAccountDestination> monitoringAccounts) {
        super.withMonitoringAccounts(monitoringAccounts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations
        withAzureMonitorMetrics(DestinationsSpecAzureMonitorMetrics azureMonitorMetrics) {
        super.withAzureMonitorMetrics(azureMonitorMetrics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withEventHubs(List<EventHubDestination> eventHubs) {
        super.withEventHubs(eventHubs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withEventHubsDirect(List<EventHubDirectDestination> eventHubsDirect) {
        super.withEventHubsDirect(eventHubsDirect);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withStorageBlobsDirect(List<StorageBlobDestination> storageBlobsDirect) {
        super.withStorageBlobsDirect(storageBlobsDirect);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withStorageTablesDirect(List<StorageTableDestination> storageTablesDirect) {
        super.withStorageTablesDirect(storageTablesDirect);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withStorageAccounts(List<StorageBlobDestination> storageAccounts) {
        super.withStorageAccounts(storageAccounts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withMicrosoftFabric(List<MicrosoftFabricDestination> microsoftFabric) {
        super.withMicrosoftFabric(microsoftFabric);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataCollectionRuleDestinations withAzureDataExplorer(List<AdxDestination> azureDataExplorer) {
        super.withAzureDataExplorer(azureDataExplorer);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (logAnalytics() != null) {
            logAnalytics().forEach(e -> e.validate());
        }
        if (monitoringAccounts() != null) {
            monitoringAccounts().forEach(e -> e.validate());
        }
        if (azureMonitorMetrics() != null) {
            azureMonitorMetrics().validate();
        }
        if (eventHubs() != null) {
            eventHubs().forEach(e -> e.validate());
        }
        if (eventHubsDirect() != null) {
            eventHubsDirect().forEach(e -> e.validate());
        }
        if (storageBlobsDirect() != null) {
            storageBlobsDirect().forEach(e -> e.validate());
        }
        if (storageTablesDirect() != null) {
            storageTablesDirect().forEach(e -> e.validate());
        }
        if (storageAccounts() != null) {
            storageAccounts().forEach(e -> e.validate());
        }
        if (microsoftFabric() != null) {
            microsoftFabric().forEach(e -> e.validate());
        }
        if (azureDataExplorer() != null) {
            azureDataExplorer().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("logAnalytics", logAnalytics(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("monitoringAccounts", monitoringAccounts(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("azureMonitorMetrics", azureMonitorMetrics());
        jsonWriter.writeArrayField("eventHubs", eventHubs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("eventHubsDirect", eventHubsDirect(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageBlobsDirect", storageBlobsDirect(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageTablesDirect", storageTablesDirect(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageAccounts", storageAccounts(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("microsoftFabric", microsoftFabric(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("azureDataExplorer", azureDataExplorer(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollectionRuleDestinations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollectionRuleDestinations if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataCollectionRuleDestinations.
     */
    public static DataCollectionRuleDestinations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollectionRuleDestinations deserializedDataCollectionRuleDestinations
                = new DataCollectionRuleDestinations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logAnalytics".equals(fieldName)) {
                    List<LogAnalyticsDestination> logAnalytics
                        = reader.readArray(reader1 -> LogAnalyticsDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withLogAnalytics(logAnalytics);
                } else if ("monitoringAccounts".equals(fieldName)) {
                    List<MonitoringAccountDestination> monitoringAccounts
                        = reader.readArray(reader1 -> MonitoringAccountDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withMonitoringAccounts(monitoringAccounts);
                } else if ("azureMonitorMetrics".equals(fieldName)) {
                    deserializedDataCollectionRuleDestinations
                        .withAzureMonitorMetrics(DestinationsSpecAzureMonitorMetrics.fromJson(reader));
                } else if ("eventHubs".equals(fieldName)) {
                    List<EventHubDestination> eventHubs
                        = reader.readArray(reader1 -> EventHubDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withEventHubs(eventHubs);
                } else if ("eventHubsDirect".equals(fieldName)) {
                    List<EventHubDirectDestination> eventHubsDirect
                        = reader.readArray(reader1 -> EventHubDirectDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withEventHubsDirect(eventHubsDirect);
                } else if ("storageBlobsDirect".equals(fieldName)) {
                    List<StorageBlobDestination> storageBlobsDirect
                        = reader.readArray(reader1 -> StorageBlobDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withStorageBlobsDirect(storageBlobsDirect);
                } else if ("storageTablesDirect".equals(fieldName)) {
                    List<StorageTableDestination> storageTablesDirect
                        = reader.readArray(reader1 -> StorageTableDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withStorageTablesDirect(storageTablesDirect);
                } else if ("storageAccounts".equals(fieldName)) {
                    List<StorageBlobDestination> storageAccounts
                        = reader.readArray(reader1 -> StorageBlobDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withStorageAccounts(storageAccounts);
                } else if ("microsoftFabric".equals(fieldName)) {
                    List<MicrosoftFabricDestination> microsoftFabric
                        = reader.readArray(reader1 -> MicrosoftFabricDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withMicrosoftFabric(microsoftFabric);
                } else if ("azureDataExplorer".equals(fieldName)) {
                    List<AdxDestination> azureDataExplorer
                        = reader.readArray(reader1 -> AdxDestination.fromJson(reader1));
                    deserializedDataCollectionRuleDestinations.withAzureDataExplorer(azureDataExplorer);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollectionRuleDestinations;
        });
    }
}
