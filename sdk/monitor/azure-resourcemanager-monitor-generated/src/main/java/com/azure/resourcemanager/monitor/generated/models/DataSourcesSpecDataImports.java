// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifications of pull based data sources.
 */
@Fluent
public final class DataSourcesSpecDataImports extends DataImportSources {
    /**
     * Creates an instance of DataSourcesSpecDataImports class.
     */
    public DataSourcesSpecDataImports() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataSourcesSpecDataImports withEventHub(DataImportSourcesEventHub eventHub) {
        super.withEventHub(eventHub);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (eventHub() != null) {
            eventHub().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("eventHub", eventHub());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataSourcesSpecDataImports from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataSourcesSpecDataImports if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataSourcesSpecDataImports.
     */
    public static DataSourcesSpecDataImports fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataSourcesSpecDataImports deserializedDataSourcesSpecDataImports = new DataSourcesSpecDataImports();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventHub".equals(fieldName)) {
                    deserializedDataSourcesSpecDataImports.withEventHub(DataImportSourcesEventHub.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataSourcesSpecDataImports;
        });
    }
}
