// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EventHubDataSource model.
 */
@Fluent
public class EventHubDataSource implements JsonSerializable<EventHubDataSource> {
    /*
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    private String name;

    /*
     * Event Hub consumer group name
     */
    private String consumerGroup;

    /*
     * The stream to collect from EventHub
     */
    private String stream;

    /**
     * Creates an instance of EventHubDataSource class.
     */
    public EventHubDataSource() {
    }

    /**
     * Get the name property: A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     * @param name the name value to set.
     * @return the EventHubDataSource object itself.
     */
    public EventHubDataSource withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the consumerGroup property: Event Hub consumer group name.
     * 
     * @return the consumerGroup value.
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }

    /**
     * Set the consumerGroup property: Event Hub consumer group name.
     * 
     * @param consumerGroup the consumerGroup value to set.
     * @return the EventHubDataSource object itself.
     */
    public EventHubDataSource withConsumerGroup(String consumerGroup) {
        this.consumerGroup = consumerGroup;
        return this;
    }

    /**
     * Get the stream property: The stream to collect from EventHub.
     * 
     * @return the stream value.
     */
    public String stream() {
        return this.stream;
    }

    /**
     * Set the stream property: The stream to collect from EventHub.
     * 
     * @param stream the stream value to set.
     * @return the EventHubDataSource object itself.
     */
    public EventHubDataSource withStream(String stream) {
        this.stream = stream;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("consumerGroup", this.consumerGroup);
        jsonWriter.writeStringField("stream", this.stream);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHubDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHubDataSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventHubDataSource.
     */
    public static EventHubDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventHubDataSource deserializedEventHubDataSource = new EventHubDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEventHubDataSource.name = reader.getString();
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedEventHubDataSource.consumerGroup = reader.getString();
                } else if ("stream".equals(fieldName)) {
                    deserializedEventHubDataSource.stream = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventHubDataSource;
        });
    }
}
