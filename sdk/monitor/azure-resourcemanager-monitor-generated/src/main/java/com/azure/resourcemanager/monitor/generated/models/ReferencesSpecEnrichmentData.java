// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * All the enrichment data sources referenced in data flows.
 */
@Fluent
public final class ReferencesSpecEnrichmentData extends EnrichmentData {
    /**
     * Creates an instance of ReferencesSpecEnrichmentData class.
     */
    public ReferencesSpecEnrichmentData() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReferencesSpecEnrichmentData withStorageBlobs(List<StorageBlob> storageBlobs) {
        super.withStorageBlobs(storageBlobs);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (storageBlobs() != null) {
            storageBlobs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("storageBlobs", storageBlobs(), (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferencesSpecEnrichmentData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferencesSpecEnrichmentData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReferencesSpecEnrichmentData.
     */
    public static ReferencesSpecEnrichmentData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReferencesSpecEnrichmentData deserializedReferencesSpecEnrichmentData = new ReferencesSpecEnrichmentData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageBlobs".equals(fieldName)) {
                    List<StorageBlob> storageBlobs = reader.readArray(reader1 -> StorageBlob.fromJson(reader1));
                    deserializedReferencesSpecEnrichmentData.withStorageBlobs(storageBlobs);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReferencesSpecEnrichmentData;
        });
    }
}
