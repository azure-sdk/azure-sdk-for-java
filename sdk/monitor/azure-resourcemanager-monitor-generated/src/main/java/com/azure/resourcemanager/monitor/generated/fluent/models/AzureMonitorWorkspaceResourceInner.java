// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceDefaultIngestionSettings;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceMetrics;
import com.azure.resourcemanager.monitor.generated.models.PrivateEndpointConnection;
import com.azure.resourcemanager.monitor.generated.models.ProvisioningState;
import com.azure.resourcemanager.monitor.generated.models.PublicNetworkAccess;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An Azure Monitor Workspace definition.
 */
@Fluent
public final class AzureMonitorWorkspaceResourceInner extends Resource {
    /*
     * Resource properties
     */
    private AzureMonitorWorkspaceResourceProperties innerProperties;

    /*
     * Resource entity tag (ETag)
     */
    private String etag;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AzureMonitorWorkspaceResourceInner class.
     */
    public AzureMonitorWorkspaceResourceInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private AzureMonitorWorkspaceResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: Resource entity tag (ETag).
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureMonitorWorkspaceResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureMonitorWorkspaceResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the accountId property: The immutable Id of the Azure Monitor Workspace. This property is read-only.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.innerProperties() == null ? null : this.innerProperties().accountId();
    }

    /**
     * Get the metrics property: Properties related to the metrics container in the Azure Monitor Workspace.
     * 
     * @return the metrics value.
     */
    public AzureMonitorWorkspaceMetrics metrics() {
        return this.innerProperties() == null ? null : this.innerProperties().metrics();
    }

    /**
     * Get the provisioningState property: The provisioning state of the Azure Monitor Workspace. Set to Succeeded if
     * everything is healthy.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the defaultIngestionSettings property: The Data Collection Rule and Endpoint used for ingestion by default.
     * 
     * @return the defaultIngestionSettings value.
     */
    public AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultIngestionSettings();
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Get the publicNetworkAccess property: Gets or sets allow or disallow public network access to Azure Monitor
     * Workspace.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Gets or sets allow or disallow public network access to Azure Monitor
     * Workspace.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AzureMonitorWorkspaceResourceInner object itself.
     */
    public AzureMonitorWorkspaceResourceInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureMonitorWorkspaceResourceProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureMonitorWorkspaceResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureMonitorWorkspaceResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureMonitorWorkspaceResourceInner.
     */
    public static AzureMonitorWorkspaceResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureMonitorWorkspaceResourceInner deserializedAzureMonitorWorkspaceResourceInner
                = new AzureMonitorWorkspaceResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAzureMonitorWorkspaceResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.innerProperties
                        = AzureMonitorWorkspaceResourceProperties.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureMonitorWorkspaceResourceInner;
        });
    }
}
