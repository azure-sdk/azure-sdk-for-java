// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of MetricsOperations.
 */
public interface MetricsOperations {
    /**
     * **Lists the metric data for a subscription**.
     * 
     * @param region The region where the metrics you want reside.
     * @param timespan The timespan of the query. It is a string with the following format
     * 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The **$filter** is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all time series of C
     * where A = a1 and B = b1 or b2&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;-
     * Invalid variant:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid
     * because the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series
     * where A = a1, B = b1 and C = c1:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all
     * time series where A = a1&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param resultType Reduces the set of data collected. The syntax allowed depends on the operation. See the
     * operation's description for details.
     * @param metricnamespace Metric namespace where the metrics you want reside.
     * @param autoAdjustTimegrain When set to true, if the timespan passed in is not supported by this metric, the API
     * will return the result using the closest supported timespan. When set to false, an error is returned for invalid
     * timespan parameters. Defaults to false.
     * @param validateDimensions When set to false, invalid filter parameter values will be ignored. When set to true,
     * an error is returned for invalid filter parameters. Defaults to true.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query along with {@link Response}.
     */
    Response<ResponseModel> listAtSubscriptionScopeWithResponse(String region, String timespan, String interval,
        String metricnames, String aggregation, Integer top, String orderBy, String filter, MetricResultType resultType,
        String metricnamespace, Boolean autoAdjustTimegrain, Boolean validateDimensions, String rollupby,
        Context context);

    /**
     * **Lists the metric data for a subscription**.
     * 
     * @param region The region where the metrics you want reside.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query.
     */
    ResponseModel listAtSubscriptionScope(String region);

    /**
     * **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
     * 
     * @param region The region where the metrics you want reside.
     * @param body Parameters serialized in the body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query along with {@link Response}.
     */
    Response<ResponseModel> listAtSubscriptionScopePostWithResponse(String region,
        SubscriptionScopeMetricsRequestBodyParameters body, Context context);

    /**
     * **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
     * 
     * @param region The region where the metrics you want reside.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query.
     */
    ResponseModel listAtSubscriptionScopePost(String region);

    /**
     * **Lists the metric values for a resource**.
     * 
     * @param resourceUri The identifier of the resource.
     * @param timespan The timespan of the query. It is a string with the following format
     * 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The **$filter** is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all time series of C
     * where A = a1 and B = b1 or b2&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;-
     * Invalid variant:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid
     * because the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series
     * where A = a1, B = b1 and C = c1:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all
     * time series where A = a1&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param resultType Reduces the set of data collected. The syntax allowed depends on the operation. See the
     * operation's description for details.
     * @param metricnamespace Metric namespace where the metrics you want reside.
     * @param autoAdjustTimegrain When set to true, if the timespan passed in is not supported by this metric, the API
     * will return the result using the closest supported timespan. When set to false, an error is returned for invalid
     * timespan parameters. Defaults to false.
     * @param validateDimensions When set to false, invalid filter parameter values will be ignored. When set to true,
     * an error is returned for invalid filter parameters. Defaults to true.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query along with {@link Response}.
     */
    Response<ResponseModel> listWithResponse(String resourceUri, String timespan, String interval, String metricnames,
        String aggregation, Integer top, String orderBy, String filter, ResultType resultType, String metricnamespace,
        Boolean autoAdjustTimegrain, Boolean validateDimensions, String rollupby, Context context);

    /**
     * **Lists the metric values for a resource**.
     * 
     * @param resourceUri The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a metrics query.
     */
    ResponseModel list(String resourceUri);
}
