// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspace;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceDefaultIngestionSettings;
import com.azure.resourcemanager.monitor.generated.models.AzureMonitorWorkspaceMetrics;
import com.azure.resourcemanager.monitor.generated.models.PrivateEndpointConnection;
import com.azure.resourcemanager.monitor.generated.models.ProvisioningState;
import com.azure.resourcemanager.monitor.generated.models.PublicNetworkAccess;
import java.io.IOException;
import java.util.List;

/**
 * Resource properties.
 */
@Fluent
public final class AzureMonitorWorkspaceResourceProperties extends AzureMonitorWorkspace {
    /*
     * List of private endpoint connections
     */
    private List<PrivateEndpointConnection> privateEndpointConnections;

    /*
     * The Data Collection Rule and Endpoint used for ingestion by default.
     */
    private AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings;

    /*
     * The provisioning state of the Azure Monitor Workspace. Set to Succeeded if everything is healthy.
     */
    private ProvisioningState provisioningState;

    /*
     * Properties related to the metrics container in the Azure Monitor Workspace
     */
    private AzureMonitorWorkspaceMetrics metrics;

    /*
     * The immutable Id of the Azure Monitor Workspace. This property is read-only.
     */
    private String accountId;

    /**
     * Creates an instance of AzureMonitorWorkspaceResourceProperties class.
     */
    public AzureMonitorWorkspaceResourceProperties() {
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections.
     * 
     * @return the privateEndpointConnections value.
     */
    @Override
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the defaultIngestionSettings property: The Data Collection Rule and Endpoint used for ingestion by default.
     * 
     * @return the defaultIngestionSettings value.
     */
    @Override
    public AzureMonitorWorkspaceDefaultIngestionSettings defaultIngestionSettings() {
        return this.defaultIngestionSettings;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Azure Monitor Workspace. Set to Succeeded if
     * everything is healthy.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the metrics property: Properties related to the metrics container in the Azure Monitor Workspace.
     * 
     * @return the metrics value.
     */
    @Override
    public AzureMonitorWorkspaceMetrics metrics() {
        return this.metrics;
    }

    /**
     * Get the accountId property: The immutable Id of the Azure Monitor Workspace. This property is read-only.
     * 
     * @return the accountId value.
     */
    @Override
    public String accountId() {
        return this.accountId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureMonitorWorkspaceResourceProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        super.withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (metrics() != null) {
            metrics().validate();
        }
        if (defaultIngestionSettings() != null) {
            defaultIngestionSettings().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicNetworkAccess",
            publicNetworkAccess() == null ? null : publicNetworkAccess().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureMonitorWorkspaceResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureMonitorWorkspaceResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureMonitorWorkspaceResourceProperties.
     */
    public static AzureMonitorWorkspaceResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureMonitorWorkspaceResourceProperties deserializedAzureMonitorWorkspaceResourceProperties
                = new AzureMonitorWorkspaceResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountId".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceProperties.accountId = reader.getString();
                } else if ("metrics".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceProperties.metrics
                        = AzureMonitorWorkspaceMetrics.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("defaultIngestionSettings".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceProperties.defaultIngestionSettings
                        = AzureMonitorWorkspaceDefaultIngestionSettings.fromJson(reader);
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnection> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnection.fromJson(reader1));
                    deserializedAzureMonitorWorkspaceResourceProperties.privateEndpointConnections
                        = privateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedAzureMonitorWorkspaceResourceProperties
                        .withPublicNetworkAccess(PublicNetworkAccess.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureMonitorWorkspaceResourceProperties;
        });
    }
}
