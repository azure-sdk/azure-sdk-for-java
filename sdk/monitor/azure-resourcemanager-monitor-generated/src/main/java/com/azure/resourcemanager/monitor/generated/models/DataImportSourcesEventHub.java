// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Event Hub configuration.
 */
@Fluent
public final class DataImportSourcesEventHub extends EventHubDataSource {
    /**
     * Creates an instance of DataImportSourcesEventHub class.
     */
    public DataImportSourcesEventHub() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImportSourcesEventHub withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImportSourcesEventHub withConsumerGroup(String consumerGroup) {
        super.withConsumerGroup(consumerGroup);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImportSourcesEventHub withStream(String stream) {
        super.withStream(stream);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("consumerGroup", consumerGroup());
        jsonWriter.writeStringField("stream", stream());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataImportSourcesEventHub from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataImportSourcesEventHub if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataImportSourcesEventHub.
     */
    public static DataImportSourcesEventHub fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataImportSourcesEventHub deserializedDataImportSourcesEventHub = new DataImportSourcesEventHub();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataImportSourcesEventHub.withName(reader.getString());
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedDataImportSourcesEventHub.withConsumerGroup(reader.getString());
                } else if ("stream".equals(fieldName)) {
                    deserializedDataImportSourcesEventHub.withStream(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataImportSourcesEventHub;
        });
    }
}
