// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specification of destinations that can be used in data flows. */
@Fluent
public class DestinationsSpec {
    /*
     * List of Log Analytics destinations.
     */
    @JsonProperty(value = "logAnalytics")
    private List<LogAnalyticsDestination> logAnalytics;

    /*
     * List of monitoring account destinations.
     */
    @JsonProperty(value = "monitoringAccounts")
    private List<MonitoringAccountDestination> monitoringAccounts;

    /*
     * Azure Monitor Metrics destination.
     */
    @JsonProperty(value = "azureMonitorMetrics")
    private DestinationsSpecAzureMonitorMetrics azureMonitorMetrics;

    /*
     * List of Event Hubs destinations.
     */
    @JsonProperty(value = "eventHubs")
    private List<EventHubDestination> eventHubs;

    /*
     * List of Event Hubs Direct destinations.
     */
    @JsonProperty(value = "eventHubsDirect")
    private List<EventHubDirectDestination> eventHubsDirect;

    /*
     * List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
     */
    @JsonProperty(value = "storageBlobsDirect")
    private List<StorageBlobDestination> storageBlobsDirect;

    /*
     * List of Storage Table Direct destinations.
     */
    @JsonProperty(value = "storageTablesDirect")
    private List<StorageTableDestination> storageTablesDirect;

    /*
     * List of storage accounts destinations.
     */
    @JsonProperty(value = "storageAccounts")
    private List<StorageBlobDestination> storageAccounts;

    /** Creates an instance of DestinationsSpec class. */
    public DestinationsSpec() {
    }

    /**
     * Get the logAnalytics property: List of Log Analytics destinations.
     *
     * @return the logAnalytics value.
     */
    public List<LogAnalyticsDestination> logAnalytics() {
        return this.logAnalytics;
    }

    /**
     * Set the logAnalytics property: List of Log Analytics destinations.
     *
     * @param logAnalytics the logAnalytics value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withLogAnalytics(List<LogAnalyticsDestination> logAnalytics) {
        this.logAnalytics = logAnalytics;
        return this;
    }

    /**
     * Get the monitoringAccounts property: List of monitoring account destinations.
     *
     * @return the monitoringAccounts value.
     */
    public List<MonitoringAccountDestination> monitoringAccounts() {
        return this.monitoringAccounts;
    }

    /**
     * Set the monitoringAccounts property: List of monitoring account destinations.
     *
     * @param monitoringAccounts the monitoringAccounts value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withMonitoringAccounts(List<MonitoringAccountDestination> monitoringAccounts) {
        this.monitoringAccounts = monitoringAccounts;
        return this;
    }

    /**
     * Get the azureMonitorMetrics property: Azure Monitor Metrics destination.
     *
     * @return the azureMonitorMetrics value.
     */
    public DestinationsSpecAzureMonitorMetrics azureMonitorMetrics() {
        return this.azureMonitorMetrics;
    }

    /**
     * Set the azureMonitorMetrics property: Azure Monitor Metrics destination.
     *
     * @param azureMonitorMetrics the azureMonitorMetrics value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withAzureMonitorMetrics(DestinationsSpecAzureMonitorMetrics azureMonitorMetrics) {
        this.azureMonitorMetrics = azureMonitorMetrics;
        return this;
    }

    /**
     * Get the eventHubs property: List of Event Hubs destinations.
     *
     * @return the eventHubs value.
     */
    public List<EventHubDestination> eventHubs() {
        return this.eventHubs;
    }

    /**
     * Set the eventHubs property: List of Event Hubs destinations.
     *
     * @param eventHubs the eventHubs value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withEventHubs(List<EventHubDestination> eventHubs) {
        this.eventHubs = eventHubs;
        return this;
    }

    /**
     * Get the eventHubsDirect property: List of Event Hubs Direct destinations.
     *
     * @return the eventHubsDirect value.
     */
    public List<EventHubDirectDestination> eventHubsDirect() {
        return this.eventHubsDirect;
    }

    /**
     * Set the eventHubsDirect property: List of Event Hubs Direct destinations.
     *
     * @param eventHubsDirect the eventHubsDirect value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withEventHubsDirect(List<EventHubDirectDestination> eventHubsDirect) {
        this.eventHubsDirect = eventHubsDirect;
        return this;
    }

    /**
     * Get the storageBlobsDirect property: List of Storage Blob Direct destinations. To be used only for sending data
     * directly to store from the agent.
     *
     * @return the storageBlobsDirect value.
     */
    public List<StorageBlobDestination> storageBlobsDirect() {
        return this.storageBlobsDirect;
    }

    /**
     * Set the storageBlobsDirect property: List of Storage Blob Direct destinations. To be used only for sending data
     * directly to store from the agent.
     *
     * @param storageBlobsDirect the storageBlobsDirect value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withStorageBlobsDirect(List<StorageBlobDestination> storageBlobsDirect) {
        this.storageBlobsDirect = storageBlobsDirect;
        return this;
    }

    /**
     * Get the storageTablesDirect property: List of Storage Table Direct destinations.
     *
     * @return the storageTablesDirect value.
     */
    public List<StorageTableDestination> storageTablesDirect() {
        return this.storageTablesDirect;
    }

    /**
     * Set the storageTablesDirect property: List of Storage Table Direct destinations.
     *
     * @param storageTablesDirect the storageTablesDirect value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withStorageTablesDirect(List<StorageTableDestination> storageTablesDirect) {
        this.storageTablesDirect = storageTablesDirect;
        return this;
    }

    /**
     * Get the storageAccounts property: List of storage accounts destinations.
     *
     * @return the storageAccounts value.
     */
    public List<StorageBlobDestination> storageAccounts() {
        return this.storageAccounts;
    }

    /**
     * Set the storageAccounts property: List of storage accounts destinations.
     *
     * @param storageAccounts the storageAccounts value to set.
     * @return the DestinationsSpec object itself.
     */
    public DestinationsSpec withStorageAccounts(List<StorageBlobDestination> storageAccounts) {
        this.storageAccounts = storageAccounts;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logAnalytics() != null) {
            logAnalytics().forEach(e -> e.validate());
        }
        if (monitoringAccounts() != null) {
            monitoringAccounts().forEach(e -> e.validate());
        }
        if (azureMonitorMetrics() != null) {
            azureMonitorMetrics().validate();
        }
        if (eventHubs() != null) {
            eventHubs().forEach(e -> e.validate());
        }
        if (eventHubsDirect() != null) {
            eventHubsDirect().forEach(e -> e.validate());
        }
        if (storageBlobsDirect() != null) {
            storageBlobsDirect().forEach(e -> e.validate());
        }
        if (storageTablesDirect() != null) {
            storageTablesDirect().forEach(e -> e.validate());
        }
        if (storageAccounts() != null) {
            storageAccounts().forEach(e -> e.validate());
        }
    }
}
