// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The PIM Only Mode settings.
 */
@Fluent
public final class PimOnlyModeSettings implements JsonSerializable<PimOnlyModeSettings> {
    /*
     * Determines whether the setting is enabled, disabled or report only.
     */
    private PimOnlyMode mode;

    /*
     * The list of excluded entities that the rule does not apply to.
     */
    private List<UsersOrServicePrincipalSet> excludes;

    /*
     * The list of excluded assignment types allowed.
     */
    private List<ExcludedPrincipalTypes> excludedAssignmentTypes;

    /**
     * Creates an instance of PimOnlyModeSettings class.
     */
    public PimOnlyModeSettings() {
    }

    /**
     * Get the mode property: Determines whether the setting is enabled, disabled or report only.
     * 
     * @return the mode value.
     */
    public PimOnlyMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Determines whether the setting is enabled, disabled or report only.
     * 
     * @param mode the mode value to set.
     * @return the PimOnlyModeSettings object itself.
     */
    public PimOnlyModeSettings withMode(PimOnlyMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the excludes property: The list of excluded entities that the rule does not apply to.
     * 
     * @return the excludes value.
     */
    public List<UsersOrServicePrincipalSet> excludes() {
        return this.excludes;
    }

    /**
     * Set the excludes property: The list of excluded entities that the rule does not apply to.
     * 
     * @param excludes the excludes value to set.
     * @return the PimOnlyModeSettings object itself.
     */
    public PimOnlyModeSettings withExcludes(List<UsersOrServicePrincipalSet> excludes) {
        this.excludes = excludes;
        return this;
    }

    /**
     * Get the excludedAssignmentTypes property: The list of excluded assignment types allowed.
     * 
     * @return the excludedAssignmentTypes value.
     */
    public List<ExcludedPrincipalTypes> excludedAssignmentTypes() {
        return this.excludedAssignmentTypes;
    }

    /**
     * Set the excludedAssignmentTypes property: The list of excluded assignment types allowed.
     * 
     * @param excludedAssignmentTypes the excludedAssignmentTypes value to set.
     * @return the PimOnlyModeSettings object itself.
     */
    public PimOnlyModeSettings withExcludedAssignmentTypes(List<ExcludedPrincipalTypes> excludedAssignmentTypes) {
        this.excludedAssignmentTypes = excludedAssignmentTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (excludes() != null) {
            excludes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeArrayField("excludes", this.excludes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("excludedAssignmentTypes", this.excludedAssignmentTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PimOnlyModeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PimOnlyModeSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PimOnlyModeSettings.
     */
    public static PimOnlyModeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PimOnlyModeSettings deserializedPimOnlyModeSettings = new PimOnlyModeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedPimOnlyModeSettings.mode = PimOnlyMode.fromString(reader.getString());
                } else if ("excludes".equals(fieldName)) {
                    List<UsersOrServicePrincipalSet> excludes
                        = reader.readArray(reader1 -> UsersOrServicePrincipalSet.fromJson(reader1));
                    deserializedPimOnlyModeSettings.excludes = excludes;
                } else if ("excludedAssignmentTypes".equals(fieldName)) {
                    List<ExcludedPrincipalTypes> excludedAssignmentTypes
                        = reader.readArray(reader1 -> ExcludedPrincipalTypes.fromString(reader1.getString()));
                    deserializedPimOnlyModeSettings.excludedAssignmentTypes = excludedAssignmentTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPimOnlyModeSettings;
        });
    }
}
