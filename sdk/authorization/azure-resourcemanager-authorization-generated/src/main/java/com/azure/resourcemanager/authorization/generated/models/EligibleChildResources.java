// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;

/**
 * Resource collection API of EligibleChildResources.
 */
public interface EligibleChildResources {
    /**
     * Get the child resources of a resource on which user has eligible access.
     * 
     * @param scope The scope of the role management policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the child resources of a resource on which user has eligible access as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<EligibleChildResource> get(String scope);

    /**
     * Get the child resources of a resource on which user has eligible access.
     * 
     * @param scope The scope of the role management policy.
     * @param filter The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only
     * resource of type = 'Subscription'. Use $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup'
     * to filter on resource of type = 'Subscription' or 'ResourceGroup'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the child resources of a resource on which user has eligible access as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<EligibleChildResource> get(String scope, String filter, Context context);
}
