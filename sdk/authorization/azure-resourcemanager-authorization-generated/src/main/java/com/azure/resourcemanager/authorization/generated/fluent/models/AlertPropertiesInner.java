// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Alert properties.
 */
@Fluent
public final class AlertPropertiesInner implements JsonSerializable<AlertPropertiesInner> {
    /*
     * The alert scope.
     */
    private String scope;

    /*
     * False by default; true if the alert is active.
     */
    private Boolean isActive;

    /*
     * The number of generated incidents of the alert.
     */
    private Integer incidentCount;

    /*
     * The date time when the alert configuration was updated or new incidents were generated.
     */
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The date time when the alert was last scanned.
     */
    private OffsetDateTime lastScannedDateTime;

    /*
     * The alert definition.
     */
    private AlertDefinitionInner alertDefinition;

    /*
     * The alert incidents.
     */
    private List<AlertIncidentInner> alertIncidents;

    /*
     * The alert configuration.
     */
    private AlertConfigurationInner alertConfiguration;

    /**
     * Creates an instance of AlertPropertiesInner class.
     */
    public AlertPropertiesInner() {
    }

    /**
     * Get the scope property: The alert scope.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Get the isActive property: False by default; true if the alert is active.
     * 
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Set the isActive property: False by default; true if the alert is active.
     * 
     * @param isActive the isActive value to set.
     * @return the AlertPropertiesInner object itself.
     */
    public AlertPropertiesInner withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }

    /**
     * Get the incidentCount property: The number of generated incidents of the alert.
     * 
     * @return the incidentCount value.
     */
    public Integer incidentCount() {
        return this.incidentCount;
    }

    /**
     * Get the lastModifiedDateTime property: The date time when the alert configuration was updated or new incidents
     * were generated.
     * 
     * @return the lastModifiedDateTime value.
     */
    public OffsetDateTime lastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastScannedDateTime property: The date time when the alert was last scanned.
     * 
     * @return the lastScannedDateTime value.
     */
    public OffsetDateTime lastScannedDateTime() {
        return this.lastScannedDateTime;
    }

    /**
     * Get the alertDefinition property: The alert definition.
     * 
     * @return the alertDefinition value.
     */
    public AlertDefinitionInner alertDefinition() {
        return this.alertDefinition;
    }

    /**
     * Get the alertIncidents property: The alert incidents.
     * 
     * @return the alertIncidents value.
     */
    public List<AlertIncidentInner> alertIncidents() {
        return this.alertIncidents;
    }

    /**
     * Get the alertConfiguration property: The alert configuration.
     * 
     * @return the alertConfiguration value.
     */
    public AlertConfigurationInner alertConfiguration() {
        return this.alertConfiguration;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertDefinition() != null) {
            alertDefinition().validate();
        }
        if (alertIncidents() != null) {
            alertIncidents().forEach(e -> e.validate());
        }
        if (alertConfiguration() != null) {
            alertConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isActive", this.isActive);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertPropertiesInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertPropertiesInner.
     */
    public static AlertPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertPropertiesInner deserializedAlertPropertiesInner = new AlertPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedAlertPropertiesInner.scope = reader.getString();
                } else if ("isActive".equals(fieldName)) {
                    deserializedAlertPropertiesInner.isActive = reader.getNullable(JsonReader::getBoolean);
                } else if ("incidentCount".equals(fieldName)) {
                    deserializedAlertPropertiesInner.incidentCount = reader.getNullable(JsonReader::getInt);
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedAlertPropertiesInner.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastScannedDateTime".equals(fieldName)) {
                    deserializedAlertPropertiesInner.lastScannedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("alertDefinition".equals(fieldName)) {
                    deserializedAlertPropertiesInner.alertDefinition = AlertDefinitionInner.fromJson(reader);
                } else if ("alertIncidents".equals(fieldName)) {
                    List<AlertIncidentInner> alertIncidents
                        = reader.readArray(reader1 -> AlertIncidentInner.fromJson(reader1));
                    deserializedAlertPropertiesInner.alertIncidents = alertIncidents;
                } else if ("alertConfiguration".equals(fieldName)) {
                    deserializedAlertPropertiesInner.alertConfiguration = AlertConfigurationInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertPropertiesInner;
        });
    }
}
