// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Recurrence settings of an Access Review History Definition.
 */
@Fluent
public final class AccessReviewHistoryScheduleSettings
    implements JsonSerializable<AccessReviewHistoryScheduleSettings> {
    /*
     * Access Review History Definition recurrence settings.
     */
    private AccessReviewRecurrencePattern innerPattern;

    /*
     * Access Review History Definition recurrence settings.
     */
    private AccessReviewRecurrenceRange innerRange;

    /**
     * Creates an instance of AccessReviewHistoryScheduleSettings class.
     */
    public AccessReviewHistoryScheduleSettings() {
    }

    /**
     * Get the innerPattern property: Access Review History Definition recurrence settings.
     * 
     * @return the innerPattern value.
     */
    private AccessReviewRecurrencePattern innerPattern() {
        return this.innerPattern;
    }

    /**
     * Get the innerRange property: Access Review History Definition recurrence settings.
     * 
     * @return the innerRange value.
     */
    private AccessReviewRecurrenceRange innerRange() {
        return this.innerRange;
    }

    /**
     * Get the type property: The recurrence type : weekly, monthly, etc.
     * 
     * @return the type value.
     */
    public AccessReviewRecurrencePatternType type() {
        return this.innerPattern() == null ? null : this.innerPattern().type();
    }

    /**
     * Set the type property: The recurrence type : weekly, monthly, etc.
     * 
     * @param type the type value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withType(AccessReviewRecurrencePatternType type) {
        if (this.innerPattern() == null) {
            this.innerPattern = new AccessReviewRecurrencePattern();
        }
        this.innerPattern().withType(type);
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.innerPattern() == null ? null : this.innerPattern().interval();
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     * 
     * @param interval the interval value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withInterval(Integer interval) {
        if (this.innerPattern() == null) {
            this.innerPattern = new AccessReviewRecurrencePattern();
        }
        this.innerPattern().withInterval(interval);
        return this;
    }

    /**
     * Get the type property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     * @return the type value.
     */
    public AccessReviewRecurrenceRangeType typeRangeType() {
        return this.innerRange() == null ? null : this.innerRange().type();
    }

    /**
     * Set the type property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     * @param type the type value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withTypeRangeType(AccessReviewRecurrenceRangeType type) {
        if (this.innerRange() == null) {
            this.innerRange = new AccessReviewRecurrenceRange();
        }
        this.innerRange().withType(type);
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     * 
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.innerRange() == null ? null : this.innerRange().numberOfOccurrences();
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     * 
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withNumberOfOccurrences(Integer numberOfOccurrences) {
        if (this.innerRange() == null) {
            this.innerRange = new AccessReviewRecurrenceRange();
        }
        this.innerRange().withNumberOfOccurrences(numberOfOccurrences);
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     * 
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.innerRange() == null ? null : this.innerRange().startDate();
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     * 
     * @param startDate the startDate value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withStartDate(OffsetDateTime startDate) {
        if (this.innerRange() == null) {
            this.innerRange = new AccessReviewRecurrenceRange();
        }
        this.innerRange().withStartDate(startDate);
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     * 
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.innerRange() == null ? null : this.innerRange().endDate();
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     * 
     * @param endDate the endDate value to set.
     * @return the AccessReviewHistoryScheduleSettings object itself.
     */
    public AccessReviewHistoryScheduleSettings withEndDate(OffsetDateTime endDate) {
        if (this.innerRange() == null) {
            this.innerRange = new AccessReviewRecurrenceRange();
        }
        this.innerRange().withEndDate(endDate);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerPattern() != null) {
            innerPattern().validate();
        }
        if (innerRange() != null) {
            innerRange().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("pattern", this.innerPattern);
        jsonWriter.writeJsonField("range", this.innerRange);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewHistoryScheduleSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewHistoryScheduleSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewHistoryScheduleSettings.
     */
    public static AccessReviewHistoryScheduleSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewHistoryScheduleSettings deserializedAccessReviewHistoryScheduleSettings
                = new AccessReviewHistoryScheduleSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pattern".equals(fieldName)) {
                    deserializedAccessReviewHistoryScheduleSettings.innerPattern
                        = AccessReviewRecurrencePattern.fromJson(reader);
                } else if ("range".equals(fieldName)) {
                    deserializedAccessReviewHistoryScheduleSettings.innerRange
                        = AccessReviewRecurrenceRange.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewHistoryScheduleSettings;
        });
    }
}
