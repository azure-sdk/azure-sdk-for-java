// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Descriptor for what needs to be reviewed.
 */
@Fluent
public final class AccessReviewReviewer implements JsonSerializable<AccessReviewReviewer> {
    /*
     * The id of the reviewer(user/servicePrincipal)
     */
    private String principalId;

    /*
     * The identity type : user/servicePrincipal
     */
    private AccessReviewReviewerType principalType;

    /**
     * Creates an instance of AccessReviewReviewer class.
     */
    public AccessReviewReviewer() {
    }

    /**
     * Get the principalId property: The id of the reviewer(user/servicePrincipal).
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The id of the reviewer(user/servicePrincipal).
     * 
     * @param principalId the principalId value to set.
     * @return the AccessReviewReviewer object itself.
     */
    public AccessReviewReviewer withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the principalType property: The identity type : user/servicePrincipal.
     * 
     * @return the principalType value.
     */
    public AccessReviewReviewerType principalType() {
        return this.principalType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("principalId", this.principalId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewReviewer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewReviewer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewReviewer.
     */
    public static AccessReviewReviewer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewReviewer deserializedAccessReviewReviewer = new AccessReviewReviewer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedAccessReviewReviewer.principalId = reader.getString();
                } else if ("principalType".equals(fieldName)) {
                    deserializedAccessReviewReviewer.principalType
                        = AccessReviewReviewerType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewReviewer;
        });
    }
}
