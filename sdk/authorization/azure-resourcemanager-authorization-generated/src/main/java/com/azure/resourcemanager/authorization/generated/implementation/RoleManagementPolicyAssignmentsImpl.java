// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.RoleManagementPolicyAssignmentsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleManagementPolicyAssignmentInner;
import com.azure.resourcemanager.authorization.generated.models.RoleManagementPolicyAssignment;
import com.azure.resourcemanager.authorization.generated.models.RoleManagementPolicyAssignments;

public final class RoleManagementPolicyAssignmentsImpl implements RoleManagementPolicyAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(RoleManagementPolicyAssignmentsImpl.class);

    private final RoleManagementPolicyAssignmentsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public RoleManagementPolicyAssignmentsImpl(RoleManagementPolicyAssignmentsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RoleManagementPolicyAssignment> getWithResponse(String scope,
        String roleManagementPolicyAssignmentName, Context context) {
        Response<RoleManagementPolicyAssignmentInner> inner
            = this.serviceClient().getWithResponse(scope, roleManagementPolicyAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RoleManagementPolicyAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleManagementPolicyAssignment get(String scope, String roleManagementPolicyAssignmentName) {
        RoleManagementPolicyAssignmentInner inner = this.serviceClient().get(scope, roleManagementPolicyAssignmentName);
        if (inner != null) {
            return new RoleManagementPolicyAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String scope, String roleManagementPolicyAssignmentName,
        Context context) {
        return this.serviceClient().deleteWithResponse(scope, roleManagementPolicyAssignmentName, context);
    }

    public void deleteByResourceGroup(String scope, String roleManagementPolicyAssignmentName) {
        this.serviceClient().delete(scope, roleManagementPolicyAssignmentName);
    }

    public PagedIterable<RoleManagementPolicyAssignment> listForScope(String scope) {
        PagedIterable<RoleManagementPolicyAssignmentInner> inner = this.serviceClient().listForScope(scope);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RoleManagementPolicyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleManagementPolicyAssignment> listForScope(String scope, Context context) {
        PagedIterable<RoleManagementPolicyAssignmentInner> inner = this.serviceClient().listForScope(scope, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RoleManagementPolicyAssignmentImpl(inner1, this.manager()));
    }

    public RoleManagementPolicyAssignment getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String roleManagementPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "roleManagementPolicyAssignmentName");
        if (roleManagementPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'roleManagementPolicyAssignments'.", id)));
        }
        return this.getWithResponse(scope, roleManagementPolicyAssignmentName, Context.NONE).getValue();
    }

    public Response<RoleManagementPolicyAssignment> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String roleManagementPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "roleManagementPolicyAssignmentName");
        if (roleManagementPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'roleManagementPolicyAssignments'.", id)));
        }
        return this.getWithResponse(scope, roleManagementPolicyAssignmentName, context);
    }

    public void deleteById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String roleManagementPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "roleManagementPolicyAssignmentName");
        if (roleManagementPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'roleManagementPolicyAssignments'.", id)));
        }
        this.deleteByResourceGroupWithResponse(scope, roleManagementPolicyAssignmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String roleManagementPolicyAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}",
            "roleManagementPolicyAssignmentName");
        if (roleManagementPolicyAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'roleManagementPolicyAssignments'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(scope, roleManagementPolicyAssignmentName, context);
    }

    private RoleManagementPolicyAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }

    public RoleManagementPolicyAssignmentImpl define(String name) {
        return new RoleManagementPolicyAssignmentImpl(name, this.manager());
    }
}
