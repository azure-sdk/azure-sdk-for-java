// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import java.io.IOException;

/**
 * Recurrence Pattern of an Access Review Schedule Definition.
 */
@Fluent
public final class AccessReviewRecurrencePattern implements JsonSerializable<AccessReviewRecurrencePattern> {
    /*
     * The recurrence type : weekly, monthly, etc.
     */
    private AccessReviewRecurrencePatternType type;

    /*
     * The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
     */
    private Integer interval;

    /**
     * Creates an instance of AccessReviewRecurrencePattern class.
     */
    public AccessReviewRecurrencePattern() {
    }

    /**
     * Get the type property: The recurrence type : weekly, monthly, etc.
     * 
     * @return the type value.
     */
    public AccessReviewRecurrencePatternType type() {
        return this.type;
    }

    /**
     * Set the type property: The recurrence type : weekly, monthly, etc.
     * 
     * @param type the type value to set.
     * @return the AccessReviewRecurrencePattern object itself.
     */
    public AccessReviewRecurrencePattern withType(AccessReviewRecurrencePatternType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     * 
     * @param interval the interval value to set.
     * @return the AccessReviewRecurrencePattern object itself.
     */
    public AccessReviewRecurrencePattern withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("interval", this.interval);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewRecurrencePattern from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewRecurrencePattern if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewRecurrencePattern.
     */
    public static AccessReviewRecurrencePattern fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewRecurrencePattern deserializedAccessReviewRecurrencePattern
                = new AccessReviewRecurrencePattern();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAccessReviewRecurrencePattern.type
                        = AccessReviewRecurrencePatternType.fromString(reader.getString());
                } else if ("interval".equals(fieldName)) {
                    deserializedAccessReviewRecurrencePattern.interval = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewRecurrencePattern;
        });
    }
}
