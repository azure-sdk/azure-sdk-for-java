// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.AlertConfigurationInner;

/** An instance of this class provides access to all the operations defined in AlertConfigurationsClient. */
public interface AlertConfigurationsClient {
    /**
     * Get the specified alert configuration.
     *
     * @param scope The scope of the alert configuration. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert configuration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AlertConfigurationInner get(String scope, String alertId);

    /**
     * Get the specified alert configuration.
     *
     * @param scope The scope of the alert configuration. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert configuration to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AlertConfigurationInner> getWithResponse(String scope, String alertId, Context context);

    /**
     * Update an alert configuration.
     *
     * @param scope The scope of the alert configuration.
     * @param alertId The name of the alert configuration to update.
     * @param parameters Parameters for the alert configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AlertConfigurationInner update(String scope, String alertId, AlertConfigurationInner parameters);

    /**
     * Update an alert configuration.
     *
     * @param scope The scope of the alert configuration.
     * @param alertId The name of the alert configuration to update.
     * @param parameters Parameters for the alert configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AlertConfigurationInner> updateWithResponse(
        String scope, String alertId, AlertConfigurationInner parameters, Context context);

    /**
     * Gets alert configurations for a resource scope.
     *
     * @param scope The scope of the alert configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert configurations for a resource scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertConfigurationInner> listForScope(String scope);

    /**
     * Gets alert configurations for a resource scope.
     *
     * @param scope The scope of the alert configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert configurations for a resource scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertConfigurationInner> listForScope(String scope, Context context);
}
