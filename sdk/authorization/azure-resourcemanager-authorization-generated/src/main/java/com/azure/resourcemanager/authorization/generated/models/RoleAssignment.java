// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleAssignmentInner;
import java.time.OffsetDateTime;

/**
 * An immutable client-side representation of RoleAssignment.
 */
public interface RoleAssignment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the scope property: The role assignment scope.
     * 
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the roleDefinitionId property: The role definition ID.
     * 
     * @return the roleDefinitionId value.
     */
    String roleDefinitionId();

    /**
     * Gets the principalId property: The principal ID.
     * 
     * @return the principalId value.
     */
    String principalId();

    /**
     * Gets the principalType property: The principal type of the assigned principal ID.
     * 
     * @return the principalType value.
     */
    PrincipalType principalType();

    /**
     * Gets the description property: Description of role assignment.
     * 
     * @return the description value.
     */
    String description();

    /**
     * Gets the condition property: The conditions on the role assignment. This limits the resources it can be assigned
     * to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
     * StringEqualsIgnoreCase 'foo_storage_container'.
     * 
     * @return the condition value.
     */
    String condition();

    /**
     * Gets the conditionVersion property: Version of the condition. Currently the only accepted value is '2.0'.
     * 
     * @return the conditionVersion value.
     */
    String conditionVersion();

    /**
     * Gets the createdOn property: Time it was created.
     * 
     * @return the createdOn value.
     */
    OffsetDateTime createdOn();

    /**
     * Gets the updatedOn property: Time it was updated.
     * 
     * @return the updatedOn value.
     */
    OffsetDateTime updatedOn();

    /**
     * Gets the createdBy property: Id of the user who created the assignment.
     * 
     * @return the createdBy value.
     */
    String createdBy();

    /**
     * Gets the updatedBy property: Id of the user who updated the assignment.
     * 
     * @return the updatedBy value.
     */
    String updatedBy();

    /**
     * Gets the delegatedManagedIdentityResourceId property: Id of the delegated managed identity resource.
     * 
     * @return the delegatedManagedIdentityResourceId value.
     */
    String delegatedManagedIdentityResourceId();

    /**
     * Gets the inner com.azure.resourcemanager.authorization.generated.fluent.models.RoleAssignmentInner object.
     * 
     * @return the inner object.
     */
    RoleAssignmentInner innerModel();

    /**
     * The entirety of the RoleAssignment definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope,
        DefinitionStages.WithRoleDefinitionId, DefinitionStages.WithPrincipalId, DefinitionStages.WithCreate {
    }

    /**
     * The RoleAssignment definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the RoleAssignment definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies scope.
             * 
             * @param scope The scope of the operation or resource. Valid scopes are: subscription (format:
             * '/subscriptions/{subscriptionId}'), resource group (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
             * @return the next definition stage.
             */
            WithRoleDefinitionId withExistingScope(String scope);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify roleDefinitionId.
         */
        interface WithRoleDefinitionId {
            /**
             * Specifies the roleDefinitionId property: The role definition ID..
             * 
             * @param roleDefinitionId The role definition ID.
             * @return the next definition stage.
             */
            WithPrincipalId withRoleDefinitionId(String roleDefinitionId);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify principalId.
         */
        interface WithPrincipalId {
            /**
             * Specifies the principalId property: The principal ID..
             * 
             * @param principalId The principal ID.
             * @return the next definition stage.
             */
            WithCreate withPrincipalId(String principalId);
        }

        /**
         * The stage of the RoleAssignment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithPrincipalType, DefinitionStages.WithDescription,
            DefinitionStages.WithCondition, DefinitionStages.WithConditionVersion,
            DefinitionStages.WithDelegatedManagedIdentityResourceId {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            RoleAssignment create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            RoleAssignment create(Context context);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify principalType.
         */
        interface WithPrincipalType {
            /**
             * Specifies the principalType property: The principal type of the assigned principal ID..
             * 
             * @param principalType The principal type of the assigned principal ID.
             * @return the next definition stage.
             */
            WithCreate withPrincipalType(PrincipalType principalType);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify description.
         */
        interface WithDescription {
            /**
             * Specifies the description property: Description of role assignment.
             * 
             * @param description Description of role assignment.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify condition.
         */
        interface WithCondition {
            /**
             * Specifies the condition property: The conditions on the role assignment. This limits the resources it can
             * be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
             * StringEqualsIgnoreCase 'foo_storage_container'.
             * 
             * @param condition The conditions on the role assignment. This limits the resources it can be assigned to.
             * e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
             * StringEqualsIgnoreCase 'foo_storage_container'.
             * @return the next definition stage.
             */
            WithCreate withCondition(String condition);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify conditionVersion.
         */
        interface WithConditionVersion {
            /**
             * Specifies the conditionVersion property: Version of the condition. Currently the only accepted value is
             * '2.0'.
             * 
             * @param conditionVersion Version of the condition. Currently the only accepted value is '2.0'.
             * @return the next definition stage.
             */
            WithCreate withConditionVersion(String conditionVersion);
        }

        /**
         * The stage of the RoleAssignment definition allowing to specify delegatedManagedIdentityResourceId.
         */
        interface WithDelegatedManagedIdentityResourceId {
            /**
             * Specifies the delegatedManagedIdentityResourceId property: Id of the delegated managed identity resource.
             * 
             * @param delegatedManagedIdentityResourceId Id of the delegated managed identity resource.
             * @return the next definition stage.
             */
            WithCreate withDelegatedManagedIdentityResourceId(String delegatedManagedIdentityResourceId);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    RoleAssignment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    RoleAssignment refresh(Context context);
}
