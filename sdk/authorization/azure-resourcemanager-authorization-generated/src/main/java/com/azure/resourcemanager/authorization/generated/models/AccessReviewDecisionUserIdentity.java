// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User Decision Target.
 */
@Immutable
public final class AccessReviewDecisionUserIdentity extends AccessReviewDecisionIdentity {
    /*
     * The type of decision target : User/ServicePrincipal
     */
    private DecisionTargetType type = DecisionTargetType.USER;

    /*
     * The user principal name of the user whose access was reviewed.
     */
    private String userPrincipalName;

    /**
     * Creates an instance of AccessReviewDecisionUserIdentity class.
     */
    public AccessReviewDecisionUserIdentity() {
    }

    /**
     * Get the type property: The type of decision target : User/ServicePrincipal.
     * 
     * @return the type value.
     */
    @Override
    public DecisionTargetType type() {
        return this.type;
    }

    /**
     * Get the userPrincipalName property: The user principal name of the user whose access was reviewed.
     * 
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewDecisionUserIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewDecisionUserIdentity if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewDecisionUserIdentity.
     */
    public static AccessReviewDecisionUserIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewDecisionUserIdentity deserializedAccessReviewDecisionUserIdentity
                = new AccessReviewDecisionUserIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAccessReviewDecisionUserIdentity.withId(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedAccessReviewDecisionUserIdentity.withDisplayName(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedAccessReviewDecisionUserIdentity.type
                        = DecisionTargetType.fromString(reader.getString());
                } else if ("userPrincipalName".equals(fieldName)) {
                    deserializedAccessReviewDecisionUserIdentity.userPrincipalName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewDecisionUserIdentity;
        });
    }
}
