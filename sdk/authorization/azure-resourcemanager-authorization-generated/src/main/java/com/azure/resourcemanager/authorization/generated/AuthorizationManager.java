// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.AuthorizationManagementClient;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewDefaultSettingsOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionInstancesOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceContactedReviewersImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceDecisionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceMyDecisionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstancesAssignedForMyApprovalsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewScheduleDefinitionsAssignedForMyApprovalsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewScheduleDefinitionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AuthorizationManagementClientBuilder;
import com.azure.resourcemanager.authorization.generated.implementation.DenyAssignmentsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.EligibleChildResourcesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.PermissionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.ProviderOperationsMetadatasImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleAssignmentMetricsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleAssignmentScheduleInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleAssignmentScheduleRequestsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleAssignmentSchedulesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleAssignmentsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleDefinitionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleEligibilityScheduleInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleEligibilityScheduleRequestsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleEligibilitySchedulesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleManagementPoliciesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.RoleManagementPolicyAssignmentsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.TenantLevelAccessReviewInstanceContactedReviewersImpl;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewDefaultSettingsOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionInstances;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionInstancesOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceContactedReviewers;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceDecisions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceMyDecisions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstances;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstancesAssignedForMyApprovals;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionsAssignedForMyApprovals;
import com.azure.resourcemanager.authorization.generated.models.DenyAssignments;
import com.azure.resourcemanager.authorization.generated.models.EligibleChildResources;
import com.azure.resourcemanager.authorization.generated.models.Operations;
import com.azure.resourcemanager.authorization.generated.models.Permissions;
import com.azure.resourcemanager.authorization.generated.models.ProviderOperationsMetadatas;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentMetrics;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentScheduleInstances;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentScheduleRequests;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentSchedules;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignments;
import com.azure.resourcemanager.authorization.generated.models.RoleDefinitions;
import com.azure.resourcemanager.authorization.generated.models.RoleEligibilityScheduleInstances;
import com.azure.resourcemanager.authorization.generated.models.RoleEligibilityScheduleRequests;
import com.azure.resourcemanager.authorization.generated.models.RoleEligibilitySchedules;
import com.azure.resourcemanager.authorization.generated.models.RoleManagementPolicies;
import com.azure.resourcemanager.authorization.generated.models.RoleManagementPolicyAssignments;
import com.azure.resourcemanager.authorization.generated.models.TenantLevelAccessReviewInstanceContactedReviewers;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to AuthorizationManager. Role based access control provides you a way to apply granular level policy
 * administration down to individual resources or resource groups. These operations enable you to get deny assignments.
 * A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 */
public final class AuthorizationManager {
    private DenyAssignments denyAssignments;

    private ProviderOperationsMetadatas providerOperationsMetadatas;

    private Permissions permissions;

    private RoleDefinitions roleDefinitions;

    private RoleAssignmentMetrics roleAssignmentMetrics;

    private EligibleChildResources eligibleChildResources;

    private RoleAssignmentSchedules roleAssignmentSchedules;

    private RoleAssignmentScheduleInstances roleAssignmentScheduleInstances;

    private RoleAssignmentScheduleRequests roleAssignmentScheduleRequests;

    private RoleEligibilitySchedules roleEligibilitySchedules;

    private RoleEligibilityScheduleInstances roleEligibilityScheduleInstances;

    private RoleEligibilityScheduleRequests roleEligibilityScheduleRequests;

    private RoleManagementPolicies roleManagementPolicies;

    private RoleManagementPolicyAssignments roleManagementPolicyAssignments;

    private Operations operations;

    private AccessReviewHistoryDefinitions accessReviewHistoryDefinitions;

    private AccessReviewHistoryDefinitionOperations accessReviewHistoryDefinitionOperations;

    private AccessReviewHistoryDefinitionInstances accessReviewHistoryDefinitionInstances;

    private AccessReviewHistoryDefinitionInstancesOperations accessReviewHistoryDefinitionInstancesOperations;

    private AccessReviewScheduleDefinitions accessReviewScheduleDefinitions;

    private AccessReviewInstances accessReviewInstances;

    private AccessReviewInstanceOperations accessReviewInstanceOperations;

    private AccessReviewInstanceDecisions accessReviewInstanceDecisions;

    private AccessReviewInstanceContactedReviewers accessReviewInstanceContactedReviewers;

    private AccessReviewDefaultSettingsOperations accessReviewDefaultSettingsOperations;

    private AccessReviewScheduleDefinitionsAssignedForMyApprovals accessReviewScheduleDefinitionsAssignedForMyApprovals;

    private AccessReviewInstancesAssignedForMyApprovals accessReviewInstancesAssignedForMyApprovals;

    private AccessReviewInstanceMyDecisions accessReviewInstanceMyDecisions;

    private TenantLevelAccessReviewInstanceContactedReviewers tenantLevelAccessReviewInstanceContactedReviewers;

    private RoleAssignments roleAssignments;

    private final AuthorizationManagementClient clientObject;

    private AuthorizationManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new AuthorizationManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Authorization service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Authorization service API instance.
     */
    public static AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Authorization service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Authorization service API instance.
     */
    public static AuthorizationManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AuthorizationManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AuthorizationManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AuthorizationManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Authorization service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Authorization service API instance.
         */
        public AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.authorization.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new AuthorizationManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of DenyAssignments.
     *
     * @return Resource collection API of DenyAssignments.
     */
    public DenyAssignments denyAssignments() {
        if (this.denyAssignments == null) {
            this.denyAssignments = new DenyAssignmentsImpl(clientObject.getDenyAssignments(), this);
        }
        return denyAssignments;
    }

    /**
     * Gets the resource collection API of ProviderOperationsMetadatas.
     *
     * @return Resource collection API of ProviderOperationsMetadatas.
     */
    public ProviderOperationsMetadatas providerOperationsMetadatas() {
        if (this.providerOperationsMetadatas == null) {
            this.providerOperationsMetadatas =
                new ProviderOperationsMetadatasImpl(clientObject.getProviderOperationsMetadatas(), this);
        }
        return providerOperationsMetadatas;
    }

    /**
     * Gets the resource collection API of Permissions.
     *
     * @return Resource collection API of Permissions.
     */
    public Permissions permissions() {
        if (this.permissions == null) {
            this.permissions = new PermissionsImpl(clientObject.getPermissions(), this);
        }
        return permissions;
    }

    /**
     * Gets the resource collection API of RoleDefinitions.
     *
     * @return Resource collection API of RoleDefinitions.
     */
    public RoleDefinitions roleDefinitions() {
        if (this.roleDefinitions == null) {
            this.roleDefinitions = new RoleDefinitionsImpl(clientObject.getRoleDefinitions(), this);
        }
        return roleDefinitions;
    }

    /**
     * Gets the resource collection API of RoleAssignmentMetrics.
     *
     * @return Resource collection API of RoleAssignmentMetrics.
     */
    public RoleAssignmentMetrics roleAssignmentMetrics() {
        if (this.roleAssignmentMetrics == null) {
            this.roleAssignmentMetrics = new RoleAssignmentMetricsImpl(clientObject.getRoleAssignmentMetrics(), this);
        }
        return roleAssignmentMetrics;
    }

    /**
     * Gets the resource collection API of EligibleChildResources.
     *
     * @return Resource collection API of EligibleChildResources.
     */
    public EligibleChildResources eligibleChildResources() {
        if (this.eligibleChildResources == null) {
            this.eligibleChildResources =
                new EligibleChildResourcesImpl(clientObject.getEligibleChildResources(), this);
        }
        return eligibleChildResources;
    }

    /**
     * Gets the resource collection API of RoleAssignmentSchedules.
     *
     * @return Resource collection API of RoleAssignmentSchedules.
     */
    public RoleAssignmentSchedules roleAssignmentSchedules() {
        if (this.roleAssignmentSchedules == null) {
            this.roleAssignmentSchedules =
                new RoleAssignmentSchedulesImpl(clientObject.getRoleAssignmentSchedules(), this);
        }
        return roleAssignmentSchedules;
    }

    /**
     * Gets the resource collection API of RoleAssignmentScheduleInstances.
     *
     * @return Resource collection API of RoleAssignmentScheduleInstances.
     */
    public RoleAssignmentScheduleInstances roleAssignmentScheduleInstances() {
        if (this.roleAssignmentScheduleInstances == null) {
            this.roleAssignmentScheduleInstances =
                new RoleAssignmentScheduleInstancesImpl(clientObject.getRoleAssignmentScheduleInstances(), this);
        }
        return roleAssignmentScheduleInstances;
    }

    /**
     * Gets the resource collection API of RoleAssignmentScheduleRequests.
     *
     * @return Resource collection API of RoleAssignmentScheduleRequests.
     */
    public RoleAssignmentScheduleRequests roleAssignmentScheduleRequests() {
        if (this.roleAssignmentScheduleRequests == null) {
            this.roleAssignmentScheduleRequests =
                new RoleAssignmentScheduleRequestsImpl(clientObject.getRoleAssignmentScheduleRequests(), this);
        }
        return roleAssignmentScheduleRequests;
    }

    /**
     * Gets the resource collection API of RoleEligibilitySchedules.
     *
     * @return Resource collection API of RoleEligibilitySchedules.
     */
    public RoleEligibilitySchedules roleEligibilitySchedules() {
        if (this.roleEligibilitySchedules == null) {
            this.roleEligibilitySchedules =
                new RoleEligibilitySchedulesImpl(clientObject.getRoleEligibilitySchedules(), this);
        }
        return roleEligibilitySchedules;
    }

    /**
     * Gets the resource collection API of RoleEligibilityScheduleInstances.
     *
     * @return Resource collection API of RoleEligibilityScheduleInstances.
     */
    public RoleEligibilityScheduleInstances roleEligibilityScheduleInstances() {
        if (this.roleEligibilityScheduleInstances == null) {
            this.roleEligibilityScheduleInstances =
                new RoleEligibilityScheduleInstancesImpl(clientObject.getRoleEligibilityScheduleInstances(), this);
        }
        return roleEligibilityScheduleInstances;
    }

    /**
     * Gets the resource collection API of RoleEligibilityScheduleRequests.
     *
     * @return Resource collection API of RoleEligibilityScheduleRequests.
     */
    public RoleEligibilityScheduleRequests roleEligibilityScheduleRequests() {
        if (this.roleEligibilityScheduleRequests == null) {
            this.roleEligibilityScheduleRequests =
                new RoleEligibilityScheduleRequestsImpl(clientObject.getRoleEligibilityScheduleRequests(), this);
        }
        return roleEligibilityScheduleRequests;
    }

    /**
     * Gets the resource collection API of RoleManagementPolicies.
     *
     * @return Resource collection API of RoleManagementPolicies.
     */
    public RoleManagementPolicies roleManagementPolicies() {
        if (this.roleManagementPolicies == null) {
            this.roleManagementPolicies =
                new RoleManagementPoliciesImpl(clientObject.getRoleManagementPolicies(), this);
        }
        return roleManagementPolicies;
    }

    /**
     * Gets the resource collection API of RoleManagementPolicyAssignments.
     *
     * @return Resource collection API of RoleManagementPolicyAssignments.
     */
    public RoleManagementPolicyAssignments roleManagementPolicyAssignments() {
        if (this.roleManagementPolicyAssignments == null) {
            this.roleManagementPolicyAssignments =
                new RoleManagementPolicyAssignmentsImpl(clientObject.getRoleManagementPolicyAssignments(), this);
        }
        return roleManagementPolicyAssignments;
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitions.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitions.
     */
    public AccessReviewHistoryDefinitions accessReviewHistoryDefinitions() {
        if (this.accessReviewHistoryDefinitions == null) {
            this.accessReviewHistoryDefinitions =
                new AccessReviewHistoryDefinitionsImpl(clientObject.getAccessReviewHistoryDefinitions(), this);
        }
        return accessReviewHistoryDefinitions;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionOperations.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionOperations.
     */
    public AccessReviewHistoryDefinitionOperations accessReviewHistoryDefinitionOperations() {
        if (this.accessReviewHistoryDefinitionOperations == null) {
            this.accessReviewHistoryDefinitionOperations =
                new AccessReviewHistoryDefinitionOperationsImpl(
                    clientObject.getAccessReviewHistoryDefinitionOperations(), this);
        }
        return accessReviewHistoryDefinitionOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionInstances.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionInstances.
     */
    public AccessReviewHistoryDefinitionInstances accessReviewHistoryDefinitionInstances() {
        if (this.accessReviewHistoryDefinitionInstances == null) {
            this.accessReviewHistoryDefinitionInstances =
                new AccessReviewHistoryDefinitionInstancesImpl(
                    clientObject.getAccessReviewHistoryDefinitionInstances(), this);
        }
        return accessReviewHistoryDefinitionInstances;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionInstancesOperations.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionInstancesOperations.
     */
    public AccessReviewHistoryDefinitionInstancesOperations accessReviewHistoryDefinitionInstancesOperations() {
        if (this.accessReviewHistoryDefinitionInstancesOperations == null) {
            this.accessReviewHistoryDefinitionInstancesOperations =
                new AccessReviewHistoryDefinitionInstancesOperationsImpl(
                    clientObject.getAccessReviewHistoryDefinitionInstancesOperations(), this);
        }
        return accessReviewHistoryDefinitionInstancesOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewScheduleDefinitions.
     *
     * @return Resource collection API of AccessReviewScheduleDefinitions.
     */
    public AccessReviewScheduleDefinitions accessReviewScheduleDefinitions() {
        if (this.accessReviewScheduleDefinitions == null) {
            this.accessReviewScheduleDefinitions =
                new AccessReviewScheduleDefinitionsImpl(clientObject.getAccessReviewScheduleDefinitions(), this);
        }
        return accessReviewScheduleDefinitions;
    }

    /**
     * Gets the resource collection API of AccessReviewInstances.
     *
     * @return Resource collection API of AccessReviewInstances.
     */
    public AccessReviewInstances accessReviewInstances() {
        if (this.accessReviewInstances == null) {
            this.accessReviewInstances = new AccessReviewInstancesImpl(clientObject.getAccessReviewInstances(), this);
        }
        return accessReviewInstances;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceOperations.
     *
     * @return Resource collection API of AccessReviewInstanceOperations.
     */
    public AccessReviewInstanceOperations accessReviewInstanceOperations() {
        if (this.accessReviewInstanceOperations == null) {
            this.accessReviewInstanceOperations =
                new AccessReviewInstanceOperationsImpl(clientObject.getAccessReviewInstanceOperations(), this);
        }
        return accessReviewInstanceOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceDecisions.
     *
     * @return Resource collection API of AccessReviewInstanceDecisions.
     */
    public AccessReviewInstanceDecisions accessReviewInstanceDecisions() {
        if (this.accessReviewInstanceDecisions == null) {
            this.accessReviewInstanceDecisions =
                new AccessReviewInstanceDecisionsImpl(clientObject.getAccessReviewInstanceDecisions(), this);
        }
        return accessReviewInstanceDecisions;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceContactedReviewers.
     *
     * @return Resource collection API of AccessReviewInstanceContactedReviewers.
     */
    public AccessReviewInstanceContactedReviewers accessReviewInstanceContactedReviewers() {
        if (this.accessReviewInstanceContactedReviewers == null) {
            this.accessReviewInstanceContactedReviewers =
                new AccessReviewInstanceContactedReviewersImpl(
                    clientObject.getAccessReviewInstanceContactedReviewers(), this);
        }
        return accessReviewInstanceContactedReviewers;
    }

    /**
     * Gets the resource collection API of AccessReviewDefaultSettingsOperations.
     *
     * @return Resource collection API of AccessReviewDefaultSettingsOperations.
     */
    public AccessReviewDefaultSettingsOperations accessReviewDefaultSettingsOperations() {
        if (this.accessReviewDefaultSettingsOperations == null) {
            this.accessReviewDefaultSettingsOperations =
                new AccessReviewDefaultSettingsOperationsImpl(
                    clientObject.getAccessReviewDefaultSettingsOperations(), this);
        }
        return accessReviewDefaultSettingsOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewScheduleDefinitionsAssignedForMyApprovals.
     *
     * @return Resource collection API of AccessReviewScheduleDefinitionsAssignedForMyApprovals.
     */
    public AccessReviewScheduleDefinitionsAssignedForMyApprovals
        accessReviewScheduleDefinitionsAssignedForMyApprovals() {
        if (this.accessReviewScheduleDefinitionsAssignedForMyApprovals == null) {
            this.accessReviewScheduleDefinitionsAssignedForMyApprovals =
                new AccessReviewScheduleDefinitionsAssignedForMyApprovalsImpl(
                    clientObject.getAccessReviewScheduleDefinitionsAssignedForMyApprovals(), this);
        }
        return accessReviewScheduleDefinitionsAssignedForMyApprovals;
    }

    /**
     * Gets the resource collection API of AccessReviewInstancesAssignedForMyApprovals.
     *
     * @return Resource collection API of AccessReviewInstancesAssignedForMyApprovals.
     */
    public AccessReviewInstancesAssignedForMyApprovals accessReviewInstancesAssignedForMyApprovals() {
        if (this.accessReviewInstancesAssignedForMyApprovals == null) {
            this.accessReviewInstancesAssignedForMyApprovals =
                new AccessReviewInstancesAssignedForMyApprovalsImpl(
                    clientObject.getAccessReviewInstancesAssignedForMyApprovals(), this);
        }
        return accessReviewInstancesAssignedForMyApprovals;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceMyDecisions.
     *
     * @return Resource collection API of AccessReviewInstanceMyDecisions.
     */
    public AccessReviewInstanceMyDecisions accessReviewInstanceMyDecisions() {
        if (this.accessReviewInstanceMyDecisions == null) {
            this.accessReviewInstanceMyDecisions =
                new AccessReviewInstanceMyDecisionsImpl(clientObject.getAccessReviewInstanceMyDecisions(), this);
        }
        return accessReviewInstanceMyDecisions;
    }

    /**
     * Gets the resource collection API of TenantLevelAccessReviewInstanceContactedReviewers.
     *
     * @return Resource collection API of TenantLevelAccessReviewInstanceContactedReviewers.
     */
    public TenantLevelAccessReviewInstanceContactedReviewers tenantLevelAccessReviewInstanceContactedReviewers() {
        if (this.tenantLevelAccessReviewInstanceContactedReviewers == null) {
            this.tenantLevelAccessReviewInstanceContactedReviewers =
                new TenantLevelAccessReviewInstanceContactedReviewersImpl(
                    clientObject.getTenantLevelAccessReviewInstanceContactedReviewers(), this);
        }
        return tenantLevelAccessReviewInstanceContactedReviewers;
    }

    /**
     * Gets the resource collection API of RoleAssignments.
     *
     * @return Resource collection API of RoleAssignments.
     */
    public RoleAssignments roleAssignments() {
        if (this.roleAssignments == null) {
            this.roleAssignments = new RoleAssignmentsImpl(clientObject.getRoleAssignments(), this);
        }
        return roleAssignments;
    }

    /**
     * @return Wrapped service client AuthorizationManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public AuthorizationManagementClient serviceClient() {
        return this.clientObject;
    }
}
