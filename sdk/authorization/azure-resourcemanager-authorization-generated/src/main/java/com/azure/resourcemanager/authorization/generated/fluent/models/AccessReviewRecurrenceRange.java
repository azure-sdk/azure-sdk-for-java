// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Recurrence Range of an Access Review Schedule Definition.
 */
@Fluent
public final class AccessReviewRecurrenceRange implements JsonSerializable<AccessReviewRecurrenceRange> {
    /*
     * The recurrence range type. The possible values are: endDate, noEnd, numbered.
     */
    private AccessReviewRecurrenceRangeType type;

    /*
     * The number of times to repeat the access review. Required and must be positive if type is numbered.
     */
    private Integer numberOfOccurrences;

    /*
     * The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
     */
    private OffsetDateTime startDate;

    /*
     * The DateTime when the review is scheduled to end. Required if type is endDate
     */
    private OffsetDateTime endDate;

    /**
     * Creates an instance of AccessReviewRecurrenceRange class.
     */
    public AccessReviewRecurrenceRange() {
    }

    /**
     * Get the type property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     * @return the type value.
     */
    public AccessReviewRecurrenceRangeType type() {
        return this.type;
    }

    /**
     * Set the type property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     * @param type the type value to set.
     * @return the AccessReviewRecurrenceRange object itself.
     */
    public AccessReviewRecurrenceRange withType(AccessReviewRecurrenceRangeType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     * 
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.numberOfOccurrences;
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     * 
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewRecurrenceRange object itself.
     */
    public AccessReviewRecurrenceRange withNumberOfOccurrences(Integer numberOfOccurrences) {
        this.numberOfOccurrences = numberOfOccurrences;
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     * 
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.startDate;
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     * 
     * @param startDate the startDate value to set.
     * @return the AccessReviewRecurrenceRange object itself.
     */
    public AccessReviewRecurrenceRange withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     * 
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     * 
     * @param endDate the endDate value to set.
     * @return the AccessReviewRecurrenceRange object itself.
     */
    public AccessReviewRecurrenceRange withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("numberOfOccurrences", this.numberOfOccurrences);
        jsonWriter.writeStringField("startDate",
            this.startDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDate));
        jsonWriter.writeStringField("endDate",
            this.endDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewRecurrenceRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewRecurrenceRange if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewRecurrenceRange.
     */
    public static AccessReviewRecurrenceRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewRecurrenceRange deserializedAccessReviewRecurrenceRange = new AccessReviewRecurrenceRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAccessReviewRecurrenceRange.type
                        = AccessReviewRecurrenceRangeType.fromString(reader.getString());
                } else if ("numberOfOccurrences".equals(fieldName)) {
                    deserializedAccessReviewRecurrenceRange.numberOfOccurrences
                        = reader.getNullable(JsonReader::getInt);
                } else if ("startDate".equals(fieldName)) {
                    deserializedAccessReviewRecurrenceRange.startDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDate".equals(fieldName)) {
                    deserializedAccessReviewRecurrenceRange.endDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewRecurrenceRange;
        });
    }
}
