// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceReviewersType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewReviewer;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Access Review Instance properties.
 */
@Fluent
public final class AccessReviewInstanceProperties implements JsonSerializable<AccessReviewInstanceProperties> {
    /*
     * This read-only field specifies the status of an access review instance.
     */
    private AccessReviewInstanceStatus status;

    /*
     * The DateTime when the review instance is scheduled to be start.
     */
    private OffsetDateTime startDateTime;

    /*
     * The DateTime when the review instance is scheduled to end.
     */
    private OffsetDateTime endDateTime;

    /*
     * This is the collection of reviewers.
     */
    private List<AccessReviewReviewer> reviewers;

    /*
     * This is the collection of backup reviewers.
     */
    private List<AccessReviewReviewer> backupReviewers;

    /*
     * This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned.
     * However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers
     * review or self review.
     */
    private AccessReviewInstanceReviewersType reviewersType;

    /**
     * Creates an instance of AccessReviewInstanceProperties class.
     */
    public AccessReviewInstanceProperties() {
    }

    /**
     * Get the status property: This read-only field specifies the status of an access review instance.
     * 
     * @return the status value.
     */
    public AccessReviewInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the startDateTime property: The DateTime when the review instance is scheduled to be start.
     * 
     * @return the startDateTime value.
     */
    public OffsetDateTime startDateTime() {
        return this.startDateTime;
    }

    /**
     * Set the startDateTime property: The DateTime when the review instance is scheduled to be start.
     * 
     * @param startDateTime the startDateTime value to set.
     * @return the AccessReviewInstanceProperties object itself.
     */
    public AccessReviewInstanceProperties withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }

    /**
     * Get the endDateTime property: The DateTime when the review instance is scheduled to end.
     * 
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: The DateTime when the review instance is scheduled to end.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the AccessReviewInstanceProperties object itself.
     */
    public AccessReviewInstanceProperties withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Get the reviewers property: This is the collection of reviewers.
     * 
     * @return the reviewers value.
     */
    public List<AccessReviewReviewer> reviewers() {
        return this.reviewers;
    }

    /**
     * Set the reviewers property: This is the collection of reviewers.
     * 
     * @param reviewers the reviewers value to set.
     * @return the AccessReviewInstanceProperties object itself.
     */
    public AccessReviewInstanceProperties withReviewers(List<AccessReviewReviewer> reviewers) {
        this.reviewers = reviewers;
        return this;
    }

    /**
     * Get the backupReviewers property: This is the collection of backup reviewers.
     * 
     * @return the backupReviewers value.
     */
    public List<AccessReviewReviewer> backupReviewers() {
        return this.backupReviewers;
    }

    /**
     * Set the backupReviewers property: This is the collection of backup reviewers.
     * 
     * @param backupReviewers the backupReviewers value to set.
     * @return the AccessReviewInstanceProperties object itself.
     */
    public AccessReviewInstanceProperties withBackupReviewers(List<AccessReviewReviewer> backupReviewers) {
        this.backupReviewers = backupReviewers;
        return this;
    }

    /**
     * Get the reviewersType property: This field specifies the type of reviewers for a review. Usually for a review,
     * reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
     * chosen dynamically. For example managers review or self review.
     * 
     * @return the reviewersType value.
     */
    public AccessReviewInstanceReviewersType reviewersType() {
        return this.reviewersType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reviewers() != null) {
            reviewers().forEach(e -> e.validate());
        }
        if (backupReviewers() != null) {
            backupReviewers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDateTime",
            this.startDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        jsonWriter.writeArrayField("reviewers", this.reviewers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("backupReviewers", this.backupReviewers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewInstanceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewInstanceProperties.
     */
    public static AccessReviewInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewInstanceProperties deserializedAccessReviewInstanceProperties
                = new AccessReviewInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedAccessReviewInstanceProperties.status
                        = AccessReviewInstanceStatus.fromString(reader.getString());
                } else if ("startDateTime".equals(fieldName)) {
                    deserializedAccessReviewInstanceProperties.startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedAccessReviewInstanceProperties.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reviewers".equals(fieldName)) {
                    List<AccessReviewReviewer> reviewers
                        = reader.readArray(reader1 -> AccessReviewReviewer.fromJson(reader1));
                    deserializedAccessReviewInstanceProperties.reviewers = reviewers;
                } else if ("backupReviewers".equals(fieldName)) {
                    List<AccessReviewReviewer> backupReviewers
                        = reader.readArray(reader1 -> AccessReviewReviewer.fromJson(reader1));
                    deserializedAccessReviewInstanceProperties.backupReviewers = backupReviewers;
                } else if ("reviewersType".equals(fieldName)) {
                    deserializedAccessReviewInstanceProperties.reviewersType
                        = AccessReviewInstanceReviewersType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewInstanceProperties;
        });
    }
}
