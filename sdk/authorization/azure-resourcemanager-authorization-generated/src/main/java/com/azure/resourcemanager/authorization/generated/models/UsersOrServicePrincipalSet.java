// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The detail of a subject.
 */
@Fluent
public final class UsersOrServicePrincipalSet implements JsonSerializable<UsersOrServicePrincipalSet> {
    /*
     * The type of user.
     */
    private UserType type;

    /*
     * The object id of the entity.
     */
    private String id;

    /*
     * The display Name of the entity.
     */
    private String displayName;

    /**
     * Creates an instance of UsersOrServicePrincipalSet class.
     */
    public UsersOrServicePrincipalSet() {
    }

    /**
     * Get the type property: The type of user.
     * 
     * @return the type value.
     */
    public UserType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of user.
     * 
     * @param type the type value to set.
     * @return the UsersOrServicePrincipalSet object itself.
     */
    public UsersOrServicePrincipalSet withType(UserType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the id property: The object id of the entity.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The object id of the entity.
     * 
     * @param id the id value to set.
     * @return the UsersOrServicePrincipalSet object itself.
     */
    public UsersOrServicePrincipalSet withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the displayName property: The display Name of the entity.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display Name of the entity.
     * 
     * @param displayName the displayName value to set.
     * @return the UsersOrServicePrincipalSet object itself.
     */
    public UsersOrServicePrincipalSet withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsersOrServicePrincipalSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsersOrServicePrincipalSet if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UsersOrServicePrincipalSet.
     */
    public static UsersOrServicePrincipalSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsersOrServicePrincipalSet deserializedUsersOrServicePrincipalSet = new UsersOrServicePrincipalSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedUsersOrServicePrincipalSet.type = UserType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedUsersOrServicePrincipalSet.id = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedUsersOrServicePrincipalSet.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsersOrServicePrincipalSet;
        });
    }
}
