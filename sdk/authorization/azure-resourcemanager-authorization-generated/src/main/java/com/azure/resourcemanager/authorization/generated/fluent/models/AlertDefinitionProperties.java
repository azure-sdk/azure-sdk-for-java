// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.SeverityLevel;
import java.io.IOException;

/**
 * Alert definition properties.
 */
@Immutable
public final class AlertDefinitionProperties implements JsonSerializable<AlertDefinitionProperties> {
    /*
     * The alert display name.
     */
    private String displayName;

    /*
     * The alert scope.
     */
    private String scope;

    /*
     * The alert description.
     */
    private String description;

    /*
     * Severity level of the alert.
     */
    private SeverityLevel severityLevel;

    /*
     * Security impact of the alert.
     */
    private String securityImpact;

    /*
     * The methods to mitigate the alert.
     */
    private String mitigationSteps;

    /*
     * The ways to prevent the alert.
     */
    private String howToPrevent;

    /*
     * True if the alert can be remediated; false, otherwise.
     */
    private Boolean isRemediatable;

    /*
     * True if the alert configuration can be configured; false, otherwise.
     */
    private Boolean isConfigurable;

    /**
     * Creates an instance of AlertDefinitionProperties class.
     */
    public AlertDefinitionProperties() {
    }

    /**
     * Get the displayName property: The alert display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the scope property: The alert scope.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Get the description property: The alert description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the severityLevel property: Severity level of the alert.
     * 
     * @return the severityLevel value.
     */
    public SeverityLevel severityLevel() {
        return this.severityLevel;
    }

    /**
     * Get the securityImpact property: Security impact of the alert.
     * 
     * @return the securityImpact value.
     */
    public String securityImpact() {
        return this.securityImpact;
    }

    /**
     * Get the mitigationSteps property: The methods to mitigate the alert.
     * 
     * @return the mitigationSteps value.
     */
    public String mitigationSteps() {
        return this.mitigationSteps;
    }

    /**
     * Get the howToPrevent property: The ways to prevent the alert.
     * 
     * @return the howToPrevent value.
     */
    public String howToPrevent() {
        return this.howToPrevent;
    }

    /**
     * Get the isRemediatable property: True if the alert can be remediated; false, otherwise.
     * 
     * @return the isRemediatable value.
     */
    public Boolean isRemediatable() {
        return this.isRemediatable;
    }

    /**
     * Get the isConfigurable property: True if the alert configuration can be configured; false, otherwise.
     * 
     * @return the isConfigurable value.
     */
    public Boolean isConfigurable() {
        return this.isConfigurable;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertDefinitionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertDefinitionProperties.
     */
    public static AlertDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertDefinitionProperties deserializedAlertDefinitionProperties = new AlertDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.displayName = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.scope = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.description = reader.getString();
                } else if ("severityLevel".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.severityLevel = SeverityLevel.fromString(reader.getString());
                } else if ("securityImpact".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.securityImpact = reader.getString();
                } else if ("mitigationSteps".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.mitigationSteps = reader.getString();
                } else if ("howToPrevent".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.howToPrevent = reader.getString();
                } else if ("isRemediatable".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.isRemediatable = reader.getNullable(JsonReader::getBoolean);
                } else if ("isConfigurable".equals(fieldName)) {
                    deserializedAlertDefinitionProperties.isConfigurable = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertDefinitionProperties;
        });
    }
}
