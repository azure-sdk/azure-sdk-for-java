// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.RoleAssignmentSchedulesClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleAssignmentScheduleInner;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentSchedule;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentSchedules;

public final class RoleAssignmentSchedulesImpl implements RoleAssignmentSchedules {
    private static final ClientLogger LOGGER = new ClientLogger(RoleAssignmentSchedulesImpl.class);

    private final RoleAssignmentSchedulesClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public RoleAssignmentSchedulesImpl(RoleAssignmentSchedulesClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RoleAssignmentSchedule> getWithResponse(String scope, String roleAssignmentScheduleName,
        Context context) {
        Response<RoleAssignmentScheduleInner> inner
            = this.serviceClient().getWithResponse(scope, roleAssignmentScheduleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RoleAssignmentScheduleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignmentSchedule get(String scope, String roleAssignmentScheduleName) {
        RoleAssignmentScheduleInner inner = this.serviceClient().get(scope, roleAssignmentScheduleName);
        if (inner != null) {
            return new RoleAssignmentScheduleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RoleAssignmentSchedule> listForScope(String scope) {
        PagedIterable<RoleAssignmentScheduleInner> inner = this.serviceClient().listForScope(scope);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentScheduleImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignmentSchedule> listForScope(String scope, String filter, Context context) {
        PagedIterable<RoleAssignmentScheduleInner> inner = this.serviceClient().listForScope(scope, filter, context);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentScheduleImpl(inner1, this.manager()));
    }

    private RoleAssignmentSchedulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
