// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Target of the decision.
 */
@Immutable
public class AccessReviewDecisionIdentity implements JsonSerializable<AccessReviewDecisionIdentity> {
    /*
     * The type of decision target : User/ServicePrincipal
     */
    private DecisionTargetType type = DecisionTargetType.fromString("AccessReviewDecisionIdentity");

    /*
     * The id of principal whose access was reviewed.
     */
    private String id;

    /*
     * The display name of the user whose access was reviewed.
     */
    private String displayName;

    /**
     * Creates an instance of AccessReviewDecisionIdentity class.
     */
    public AccessReviewDecisionIdentity() {
    }

    /**
     * Get the type property: The type of decision target : User/ServicePrincipal.
     * 
     * @return the type value.
     */
    public DecisionTargetType type() {
        return this.type;
    }

    /**
     * Get the id property: The id of principal whose access was reviewed.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The id of principal whose access was reviewed.
     * 
     * @param id the id value to set.
     * @return the AccessReviewDecisionIdentity object itself.
     */
    AccessReviewDecisionIdentity withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the displayName property: The display name of the user whose access was reviewed.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the user whose access was reviewed.
     * 
     * @param displayName the displayName value to set.
     * @return the AccessReviewDecisionIdentity object itself.
     */
    AccessReviewDecisionIdentity withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewDecisionIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewDecisionIdentity if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewDecisionIdentity.
     */
    public static AccessReviewDecisionIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("user".equals(discriminatorValue)) {
                    return AccessReviewDecisionUserIdentity.fromJson(readerToUse.reset());
                } else if ("servicePrincipal".equals(discriminatorValue)) {
                    return AccessReviewDecisionServicePrincipalIdentity.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AccessReviewDecisionIdentity fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewDecisionIdentity deserializedAccessReviewDecisionIdentity = new AccessReviewDecisionIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAccessReviewDecisionIdentity.type = DecisionTargetType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedAccessReviewDecisionIdentity.id = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAccessReviewDecisionIdentity.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewDecisionIdentity;
        });
    }
}
