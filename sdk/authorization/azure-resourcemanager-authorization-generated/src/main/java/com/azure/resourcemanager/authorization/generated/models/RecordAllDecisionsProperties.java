// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Record All Decisions payload.
 */
@Fluent
public final class RecordAllDecisionsProperties implements JsonSerializable<RecordAllDecisionsProperties> {
    /*
     * The id of principal which needs to be approved/denied.
     */
    private String principalId;

    /*
     * The id of resource which needs to be approved/denied.
     */
    private String resourceId;

    /*
     * The decision to make. Approvers can take action of Approve/Deny
     */
    private RecordAllDecisionsResult decision;

    /*
     * Justification provided by approvers for their action
     */
    private String justification;

    /**
     * Creates an instance of RecordAllDecisionsProperties class.
     */
    public RecordAllDecisionsProperties() {
    }

    /**
     * Get the principalId property: The id of principal which needs to be approved/denied.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the resourceId property: The id of resource which needs to be approved/denied.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the decision property: The decision to make. Approvers can take action of Approve/Deny.
     * 
     * @return the decision value.
     */
    public RecordAllDecisionsResult decision() {
        return this.decision;
    }

    /**
     * Set the decision property: The decision to make. Approvers can take action of Approve/Deny.
     * 
     * @param decision the decision value to set.
     * @return the RecordAllDecisionsProperties object itself.
     */
    public RecordAllDecisionsProperties withDecision(RecordAllDecisionsResult decision) {
        this.decision = decision;
        return this;
    }

    /**
     * Get the justification property: Justification provided by approvers for their action.
     * 
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification provided by approvers for their action.
     * 
     * @param justification the justification value to set.
     * @return the RecordAllDecisionsProperties object itself.
     */
    public RecordAllDecisionsProperties withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("decision", this.decision == null ? null : this.decision.toString());
        jsonWriter.writeStringField("justification", this.justification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecordAllDecisionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecordAllDecisionsProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecordAllDecisionsProperties.
     */
    public static RecordAllDecisionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecordAllDecisionsProperties deserializedRecordAllDecisionsProperties = new RecordAllDecisionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedRecordAllDecisionsProperties.principalId = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedRecordAllDecisionsProperties.resourceId = reader.getString();
                } else if ("decision".equals(fieldName)) {
                    deserializedRecordAllDecisionsProperties.decision
                        = RecordAllDecisionsResult.fromString(reader.getString());
                } else if ("justification".equals(fieldName)) {
                    deserializedRecordAllDecisionsProperties.justification = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecordAllDecisionsProperties;
        });
    }
}
