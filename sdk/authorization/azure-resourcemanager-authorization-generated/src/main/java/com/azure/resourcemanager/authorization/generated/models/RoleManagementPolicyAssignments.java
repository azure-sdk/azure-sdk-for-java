// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of RoleManagementPolicyAssignments. */
public interface RoleManagementPolicyAssignments {
    /**
     * Get the specified role management policy assignment for a resource scope.
     *
     * @param scope The scope of the role management policy.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to
     *     get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role management policy assignment for a resource scope along with {@link Response}.
     */
    Response<RoleManagementPolicyAssignment> getWithResponse(
        String scope, String roleManagementPolicyAssignmentName, Context context);

    /**
     * Get the specified role management policy assignment for a resource scope.
     *
     * @param scope The scope of the role management policy.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to
     *     get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role management policy assignment for a resource scope.
     */
    RoleManagementPolicyAssignment get(String scope, String roleManagementPolicyAssignmentName);

    /**
     * Delete a role management policy assignment.
     *
     * @param scope The scope of the role management policy assignment to delete.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to
     *     delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(
        String scope, String roleManagementPolicyAssignmentName, Context context);

    /**
     * Delete a role management policy assignment.
     *
     * @param scope The scope of the role management policy assignment to delete.
     * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to
     *     delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String scope, String roleManagementPolicyAssignmentName);

    /**
     * Gets role management assignment policies for a resource scope.
     *
     * @param scope The scope of the role management policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role management assignment policies for a resource scope as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<RoleManagementPolicyAssignment> listForScope(String scope);

    /**
     * Gets role management assignment policies for a resource scope.
     *
     * @param scope The scope of the role management policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role management assignment policies for a resource scope as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<RoleManagementPolicyAssignment> listForScope(String scope, Context context);

    /**
     * Get the specified role management policy assignment for a resource scope.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role management policy assignment for a resource scope along with {@link Response}.
     */
    RoleManagementPolicyAssignment getById(String id);

    /**
     * Get the specified role management policy assignment for a resource scope.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role management policy assignment for a resource scope along with {@link Response}.
     */
    Response<RoleManagementPolicyAssignment> getByIdWithResponse(String id, Context context);

    /**
     * Delete a role management policy assignment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a role management policy assignment.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new RoleManagementPolicyAssignment resource.
     *
     * @param name resource name.
     * @return the first stage of the new RoleManagementPolicyAssignment definition.
     */
    RoleManagementPolicyAssignment.DefinitionStages.Blank define(String name);
}
