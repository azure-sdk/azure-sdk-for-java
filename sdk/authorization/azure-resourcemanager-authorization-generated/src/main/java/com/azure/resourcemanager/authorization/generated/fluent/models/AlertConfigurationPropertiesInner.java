// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AzureRolesAssignedOutsidePimAlertConfigurationProperties;
import com.azure.resourcemanager.authorization.generated.models.DuplicateRoleCreatedAlertConfigurationProperties;
import com.azure.resourcemanager.authorization.generated.models.TooManyOwnersAssignedToResourceAlertConfigurationProperties;
import com.azure.resourcemanager.authorization.generated.models.TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties;
import java.io.IOException;

/**
 * Alert configuration properties.
 */
@Fluent
public class AlertConfigurationPropertiesInner implements JsonSerializable<AlertConfigurationPropertiesInner> {
    /*
     * The alert configuration type.
     */
    private String alertConfigurationType = "AlertConfigurationProperties";

    /*
     * The alert definition ID.
     */
    private String alertDefinitionId;

    /*
     * The alert scope.
     */
    private String scope;

    /*
     * True if the alert is enabled, false will disable the scanning for the specific alert.
     */
    private Boolean isEnabled;

    /*
     * The alert definition.
     */
    private AlertDefinitionInner alertDefinition;

    /**
     * Creates an instance of AlertConfigurationPropertiesInner class.
     */
    public AlertConfigurationPropertiesInner() {
    }

    /**
     * Get the alertConfigurationType property: The alert configuration type.
     * 
     * @return the alertConfigurationType value.
     */
    public String alertConfigurationType() {
        return this.alertConfigurationType;
    }

    /**
     * Get the alertDefinitionId property: The alert definition ID.
     * 
     * @return the alertDefinitionId value.
     */
    public String alertDefinitionId() {
        return this.alertDefinitionId;
    }

    /**
     * Set the alertDefinitionId property: The alert definition ID.
     * 
     * @param alertDefinitionId the alertDefinitionId value to set.
     * @return the AlertConfigurationPropertiesInner object itself.
     */
    AlertConfigurationPropertiesInner withAlertDefinitionId(String alertDefinitionId) {
        this.alertDefinitionId = alertDefinitionId;
        return this;
    }

    /**
     * Get the scope property: The alert scope.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The alert scope.
     * 
     * @param scope the scope value to set.
     * @return the AlertConfigurationPropertiesInner object itself.
     */
    AlertConfigurationPropertiesInner withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the isEnabled property: True if the alert is enabled, false will disable the scanning for the specific alert.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: True if the alert is enabled, false will disable the scanning for the specific alert.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the AlertConfigurationPropertiesInner object itself.
     */
    public AlertConfigurationPropertiesInner withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the alertDefinition property: The alert definition.
     * 
     * @return the alertDefinition value.
     */
    public AlertDefinitionInner alertDefinition() {
        return this.alertDefinition;
    }

    /**
     * Set the alertDefinition property: The alert definition.
     * 
     * @param alertDefinition the alertDefinition value to set.
     * @return the AlertConfigurationPropertiesInner object itself.
     */
    AlertConfigurationPropertiesInner withAlertDefinition(AlertDefinitionInner alertDefinition) {
        this.alertDefinition = alertDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertDefinition() != null) {
            alertDefinition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("alertConfigurationType", this.alertConfigurationType);
        jsonWriter.writeBooleanField("isEnabled", this.isEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertConfigurationPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertConfigurationPropertiesInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertConfigurationPropertiesInner.
     */
    public static AlertConfigurationPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("alertConfigurationType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureRolesAssignedOutsidePimAlertConfiguration".equals(discriminatorValue)) {
                    return AzureRolesAssignedOutsidePimAlertConfigurationProperties.fromJson(readerToUse.reset());
                } else if ("DuplicateRoleCreatedAlertConfiguration".equals(discriminatorValue)) {
                    return DuplicateRoleCreatedAlertConfigurationProperties.fromJson(readerToUse.reset());
                } else if ("TooManyOwnersAssignedToResourceAlertConfiguration".equals(discriminatorValue)) {
                    return TooManyOwnersAssignedToResourceAlertConfigurationProperties.fromJson(readerToUse.reset());
                } else if ("TooManyPermanentOwnersAssignedToResourceAlertConfiguration".equals(discriminatorValue)) {
                    return TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties
                        .fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AlertConfigurationPropertiesInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertConfigurationPropertiesInner deserializedAlertConfigurationPropertiesInner
                = new AlertConfigurationPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alertConfigurationType".equals(fieldName)) {
                    deserializedAlertConfigurationPropertiesInner.alertConfigurationType = reader.getString();
                } else if ("alertDefinitionId".equals(fieldName)) {
                    deserializedAlertConfigurationPropertiesInner.alertDefinitionId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedAlertConfigurationPropertiesInner.scope = reader.getString();
                } else if ("isEnabled".equals(fieldName)) {
                    deserializedAlertConfigurationPropertiesInner.isEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("alertDefinition".equals(fieldName)) {
                    deserializedAlertConfigurationPropertiesInner.alertDefinition
                        = AlertDefinitionInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertConfigurationPropertiesInner;
        });
    }
}
