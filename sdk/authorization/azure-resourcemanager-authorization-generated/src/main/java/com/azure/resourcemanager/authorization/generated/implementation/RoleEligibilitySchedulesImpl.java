// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.RoleEligibilitySchedulesClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleEligibilityScheduleInner;
import com.azure.resourcemanager.authorization.generated.models.RoleEligibilitySchedule;
import com.azure.resourcemanager.authorization.generated.models.RoleEligibilitySchedules;

public final class RoleEligibilitySchedulesImpl implements RoleEligibilitySchedules {
    private static final ClientLogger LOGGER = new ClientLogger(RoleEligibilitySchedulesImpl.class);

    private final RoleEligibilitySchedulesClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public RoleEligibilitySchedulesImpl(
        RoleEligibilitySchedulesClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RoleEligibilitySchedule> getWithResponse(
        String scope, String roleEligibilityScheduleName, Context context) {
        Response<RoleEligibilityScheduleInner> inner =
            this.serviceClient().getWithResponse(scope, roleEligibilityScheduleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleEligibilityScheduleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleEligibilitySchedule get(String scope, String roleEligibilityScheduleName) {
        RoleEligibilityScheduleInner inner = this.serviceClient().get(scope, roleEligibilityScheduleName);
        if (inner != null) {
            return new RoleEligibilityScheduleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RoleEligibilitySchedule> listForScope(String scope) {
        PagedIterable<RoleEligibilityScheduleInner> inner = this.serviceClient().listForScope(scope);
        return Utils.mapPage(inner, inner1 -> new RoleEligibilityScheduleImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleEligibilitySchedule> listForScope(String scope, String filter, Context context) {
        PagedIterable<RoleEligibilityScheduleInner> inner = this.serviceClient().listForScope(scope, filter, context);
        return Utils.mapPage(inner, inner1 -> new RoleEligibilityScheduleImpl(inner1, this.manager()));
    }

    private RoleEligibilitySchedulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
