// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.AlertIncidentsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.AlertIncidentInner;
import com.azure.resourcemanager.authorization.generated.models.AlertIncident;
import com.azure.resourcemanager.authorization.generated.models.AlertIncidents;

public final class AlertIncidentsImpl implements AlertIncidents {
    private static final ClientLogger LOGGER = new ClientLogger(AlertIncidentsImpl.class);

    private final AlertIncidentsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public AlertIncidentsImpl(AlertIncidentsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AlertIncident> getWithResponse(String scope, String alertId, String alertIncidentId,
        Context context) {
        Response<AlertIncidentInner> inner
            = this.serviceClient().getWithResponse(scope, alertId, alertIncidentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AlertIncidentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AlertIncident get(String scope, String alertId, String alertIncidentId) {
        AlertIncidentInner inner = this.serviceClient().get(scope, alertId, alertIncidentId);
        if (inner != null) {
            return new AlertIncidentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<AlertIncident> listForScope(String scope, String alertId) {
        PagedIterable<AlertIncidentInner> inner = this.serviceClient().listForScope(scope, alertId);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertIncidentImpl(inner1, this.manager()));
    }

    public PagedIterable<AlertIncident> listForScope(String scope, String alertId, Context context) {
        PagedIterable<AlertIncidentInner> inner = this.serviceClient().listForScope(scope, alertId, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertIncidentImpl(inner1, this.manager()));
    }

    public Response<Void> remediateWithResponse(String scope, String alertId, String alertIncidentId, Context context) {
        return this.serviceClient().remediateWithResponse(scope, alertId, alertIncidentId, context);
    }

    public void remediate(String scope, String alertId, String alertIncidentId) {
        this.serviceClient().remediate(scope, alertId, alertIncidentId);
    }

    private AlertIncidentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
