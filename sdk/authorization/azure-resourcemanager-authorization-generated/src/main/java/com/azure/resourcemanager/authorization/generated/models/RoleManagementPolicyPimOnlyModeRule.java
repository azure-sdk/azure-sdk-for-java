// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The role management policy PIM only mode rule.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ruleType")
@JsonTypeName("RoleManagementPolicyPimOnlyModeRule")
@Fluent
public final class RoleManagementPolicyPimOnlyModeRule extends RoleManagementPolicyRule {
    /*
     * The PIM Only Mode settings
     */
    @JsonProperty(value = "pimOnlyModeSettings")
    private PimOnlyModeSettings pimOnlyModeSettings;

    /**
     * Creates an instance of RoleManagementPolicyPimOnlyModeRule class.
     */
    public RoleManagementPolicyPimOnlyModeRule() {
    }

    /**
     * Get the pimOnlyModeSettings property: The PIM Only Mode settings.
     * 
     * @return the pimOnlyModeSettings value.
     */
    public PimOnlyModeSettings pimOnlyModeSettings() {
        return this.pimOnlyModeSettings;
    }

    /**
     * Set the pimOnlyModeSettings property: The PIM Only Mode settings.
     * 
     * @param pimOnlyModeSettings the pimOnlyModeSettings value to set.
     * @return the RoleManagementPolicyPimOnlyModeRule object itself.
     */
    public RoleManagementPolicyPimOnlyModeRule withPimOnlyModeSettings(PimOnlyModeSettings pimOnlyModeSettings) {
        this.pimOnlyModeSettings = pimOnlyModeSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleManagementPolicyPimOnlyModeRule withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleManagementPolicyPimOnlyModeRule withTarget(RoleManagementPolicyRuleTarget target) {
        super.withTarget(target);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (pimOnlyModeSettings() != null) {
            pimOnlyModeSettings().validate();
        }
    }
}
