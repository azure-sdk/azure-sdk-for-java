// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The role management policy PIM only mode rule.
 */
@Fluent
public final class RoleManagementPolicyPimOnlyModeRule extends RoleManagementPolicyRule {
    /*
     * The type of rule
     */
    private RoleManagementPolicyRuleType ruleType
        = RoleManagementPolicyRuleType.ROLE_MANAGEMENT_POLICY_PIM_ONLY_MODE_RULE;

    /*
     * The PIM Only Mode settings
     */
    private PimOnlyModeSettings pimOnlyModeSettings;

    /**
     * Creates an instance of RoleManagementPolicyPimOnlyModeRule class.
     */
    public RoleManagementPolicyPimOnlyModeRule() {
    }

    /**
     * Get the ruleType property: The type of rule.
     * 
     * @return the ruleType value.
     */
    @Override
    public RoleManagementPolicyRuleType ruleType() {
        return this.ruleType;
    }

    /**
     * Get the pimOnlyModeSettings property: The PIM Only Mode settings.
     * 
     * @return the pimOnlyModeSettings value.
     */
    public PimOnlyModeSettings pimOnlyModeSettings() {
        return this.pimOnlyModeSettings;
    }

    /**
     * Set the pimOnlyModeSettings property: The PIM Only Mode settings.
     * 
     * @param pimOnlyModeSettings the pimOnlyModeSettings value to set.
     * @return the RoleManagementPolicyPimOnlyModeRule object itself.
     */
    public RoleManagementPolicyPimOnlyModeRule withPimOnlyModeSettings(PimOnlyModeSettings pimOnlyModeSettings) {
        this.pimOnlyModeSettings = pimOnlyModeSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleManagementPolicyPimOnlyModeRule withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleManagementPolicyPimOnlyModeRule withTarget(RoleManagementPolicyRuleTarget target) {
        super.withTarget(target);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (pimOnlyModeSettings() != null) {
            pimOnlyModeSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeJsonField("target", target());
        jsonWriter.writeStringField("ruleType", this.ruleType == null ? null : this.ruleType.toString());
        jsonWriter.writeJsonField("pimOnlyModeSettings", this.pimOnlyModeSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleManagementPolicyPimOnlyModeRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleManagementPolicyPimOnlyModeRule if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleManagementPolicyPimOnlyModeRule.
     */
    public static RoleManagementPolicyPimOnlyModeRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleManagementPolicyPimOnlyModeRule deserializedRoleManagementPolicyPimOnlyModeRule
                = new RoleManagementPolicyPimOnlyModeRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRoleManagementPolicyPimOnlyModeRule.withId(reader.getString());
                } else if ("target".equals(fieldName)) {
                    deserializedRoleManagementPolicyPimOnlyModeRule
                        .withTarget(RoleManagementPolicyRuleTarget.fromJson(reader));
                } else if ("ruleType".equals(fieldName)) {
                    deserializedRoleManagementPolicyPimOnlyModeRule.ruleType
                        = RoleManagementPolicyRuleType.fromString(reader.getString());
                } else if ("pimOnlyModeSettings".equals(fieldName)) {
                    deserializedRoleManagementPolicyPimOnlyModeRule.pimOnlyModeSettings
                        = PimOnlyModeSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoleManagementPolicyPimOnlyModeRule;
        });
    }
}
