// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.RoleAssignmentsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleAssignmentInner;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignment;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignmentCreateParameters;
import com.azure.resourcemanager.authorization.generated.models.RoleAssignments;

public final class RoleAssignmentsImpl implements RoleAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(RoleAssignmentsImpl.class);

    private final RoleAssignmentsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public RoleAssignmentsImpl(
        RoleAssignmentsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RoleAssignment> list() {
        PagedIterable<RoleAssignmentInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> list(String filter, String tenantId, Context context) {
        PagedIterable<RoleAssignmentInner> inner = this.serviceClient().list(filter, tenantId, context);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<RoleAssignmentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> listByResourceGroup(
        String resourceGroupName, String filter, String tenantId, Context context) {
        PagedIterable<RoleAssignmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, filter, tenantId, context);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> listForResource(
        String resourceGroupName, String resourceProviderNamespace, String resourceType, String resourceName) {
        PagedIterable<RoleAssignmentInner> inner =
            this
                .serviceClient()
                .listForResource(resourceGroupName, resourceProviderNamespace, resourceType, resourceName);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String resourceType,
        String resourceName,
        String filter,
        String tenantId,
        Context context) {
        PagedIterable<RoleAssignmentInner> inner =
            this
                .serviceClient()
                .listForResource(
                    resourceGroupName,
                    resourceProviderNamespace,
                    resourceType,
                    resourceName,
                    filter,
                    tenantId,
                    context);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public Response<RoleAssignment> getWithResponse(
        String scope, String roleAssignmentName, String tenantId, Context context) {
        Response<RoleAssignmentInner> inner =
            this.serviceClient().getWithResponse(scope, roleAssignmentName, tenantId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignment get(String scope, String roleAssignmentName) {
        RoleAssignmentInner inner = this.serviceClient().get(scope, roleAssignmentName);
        if (inner != null) {
            return new RoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RoleAssignment> deleteWithResponse(
        String scope, String roleAssignmentName, String tenantId, Context context) {
        Response<RoleAssignmentInner> inner =
            this.serviceClient().deleteWithResponse(scope, roleAssignmentName, tenantId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignment delete(String scope, String roleAssignmentName) {
        RoleAssignmentInner inner = this.serviceClient().delete(scope, roleAssignmentName);
        if (inner != null) {
            return new RoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RoleAssignment> listForScope(String scope) {
        PagedIterable<RoleAssignmentInner> inner = this.serviceClient().listForScope(scope);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleAssignment> listForScope(
        String scope, String filter, String tenantId, String skipToken, Context context) {
        PagedIterable<RoleAssignmentInner> inner =
            this.serviceClient().listForScope(scope, filter, tenantId, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new RoleAssignmentImpl(inner1, this.manager()));
    }

    public Response<RoleAssignment> getByIdWithResponse(String roleAssignmentId, String tenantId, Context context) {
        Response<RoleAssignmentInner> inner =
            this.serviceClient().getByIdWithResponse(roleAssignmentId, tenantId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignment getById(String roleAssignmentId) {
        RoleAssignmentInner inner = this.serviceClient().getById(roleAssignmentId);
        if (inner != null) {
            return new RoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RoleAssignment> createByIdWithResponse(
        String roleAssignmentId, RoleAssignmentCreateParameters parameters, Context context) {
        Response<RoleAssignmentInner> inner =
            this.serviceClient().createByIdWithResponse(roleAssignmentId, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignment createById(String roleAssignmentId, RoleAssignmentCreateParameters parameters) {
        RoleAssignmentInner inner = this.serviceClient().createById(roleAssignmentId, parameters);
        if (inner != null) {
            return new RoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RoleAssignment> deleteByIdWithResponse(String roleAssignmentId, String tenantId, Context context) {
        Response<RoleAssignmentInner> inner =
            this.serviceClient().deleteByIdWithResponse(roleAssignmentId, tenantId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleAssignment deleteById(String roleAssignmentId) {
        RoleAssignmentInner inner = this.serviceClient().deleteById(roleAssignmentId);
        if (inner != null) {
            return new RoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private RoleAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }

    public RoleAssignmentImpl define(String name) {
        return new RoleAssignmentImpl(name, this.manager());
    }
}
