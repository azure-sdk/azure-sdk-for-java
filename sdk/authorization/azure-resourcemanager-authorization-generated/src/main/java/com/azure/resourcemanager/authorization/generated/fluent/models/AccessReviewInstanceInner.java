// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceReviewersType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewReviewer;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Access Review Instance.
 */
@Fluent
public final class AccessReviewInstanceInner extends ProxyResource {
    /*
     * Access Review properties.
     */
    private AccessReviewInstanceProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AccessReviewInstanceInner class.
     */
    public AccessReviewInstanceInner() {
    }

    /**
     * Get the innerProperties property: Access Review properties.
     * 
     * @return the innerProperties value.
     */
    private AccessReviewInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the status property: This read-only field specifies the status of an access review instance.
     * 
     * @return the status value.
     */
    public AccessReviewInstanceStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the startDateTime property: The DateTime when the review instance is scheduled to be start.
     * 
     * @return the startDateTime value.
     */
    public OffsetDateTime startDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startDateTime();
    }

    /**
     * Set the startDateTime property: The DateTime when the review instance is scheduled to be start.
     * 
     * @param startDateTime the startDateTime value to set.
     * @return the AccessReviewInstanceInner object itself.
     */
    public AccessReviewInstanceInner withStartDateTime(OffsetDateTime startDateTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewInstanceProperties();
        }
        this.innerProperties().withStartDateTime(startDateTime);
        return this;
    }

    /**
     * Get the endDateTime property: The DateTime when the review instance is scheduled to end.
     * 
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endDateTime();
    }

    /**
     * Set the endDateTime property: The DateTime when the review instance is scheduled to end.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the AccessReviewInstanceInner object itself.
     */
    public AccessReviewInstanceInner withEndDateTime(OffsetDateTime endDateTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewInstanceProperties();
        }
        this.innerProperties().withEndDateTime(endDateTime);
        return this;
    }

    /**
     * Get the reviewers property: This is the collection of reviewers.
     * 
     * @return the reviewers value.
     */
    public List<AccessReviewReviewer> reviewers() {
        return this.innerProperties() == null ? null : this.innerProperties().reviewers();
    }

    /**
     * Set the reviewers property: This is the collection of reviewers.
     * 
     * @param reviewers the reviewers value to set.
     * @return the AccessReviewInstanceInner object itself.
     */
    public AccessReviewInstanceInner withReviewers(List<AccessReviewReviewer> reviewers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewInstanceProperties();
        }
        this.innerProperties().withReviewers(reviewers);
        return this;
    }

    /**
     * Get the backupReviewers property: This is the collection of backup reviewers.
     * 
     * @return the backupReviewers value.
     */
    public List<AccessReviewReviewer> backupReviewers() {
        return this.innerProperties() == null ? null : this.innerProperties().backupReviewers();
    }

    /**
     * Set the backupReviewers property: This is the collection of backup reviewers.
     * 
     * @param backupReviewers the backupReviewers value to set.
     * @return the AccessReviewInstanceInner object itself.
     */
    public AccessReviewInstanceInner withBackupReviewers(List<AccessReviewReviewer> backupReviewers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewInstanceProperties();
        }
        this.innerProperties().withBackupReviewers(backupReviewers);
        return this;
    }

    /**
     * Get the reviewersType property: This field specifies the type of reviewers for a review. Usually for a review,
     * reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
     * chosen dynamically. For example managers review or self review.
     * 
     * @return the reviewersType value.
     */
    public AccessReviewInstanceReviewersType reviewersType() {
        return this.innerProperties() == null ? null : this.innerProperties().reviewersType();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewInstanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewInstanceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccessReviewInstanceInner.
     */
    public static AccessReviewInstanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewInstanceInner deserializedAccessReviewInstanceInner = new AccessReviewInstanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAccessReviewInstanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAccessReviewInstanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAccessReviewInstanceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAccessReviewInstanceInner.innerProperties
                        = AccessReviewInstanceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewInstanceInner;
        });
    }
}
