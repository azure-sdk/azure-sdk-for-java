// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Access Review History Definition Instance properties.
 */
@Fluent
public final class AccessReviewHistoryInstanceProperties
    implements JsonSerializable<AccessReviewHistoryInstanceProperties> {
    /*
     * Date time used when selecting review data, all reviews included in data start on or after this date. For use only
     * with one-time/non-recurring reports.
     */
    private OffsetDateTime reviewHistoryPeriodStartDateTime;

    /*
     * Date time used when selecting review data, all reviews included in data end on or before this date. For use only
     * with one-time/non-recurring reports.
     */
    private OffsetDateTime reviewHistoryPeriodEndDateTime;

    /*
     * The display name for the parent history definition.
     */
    private String displayName;

    /*
     * Status of the requested review history instance data. This is either requested, in-progress, done or error. The
     * state transitions are as follows - Requested -> InProgress -> Done -> Expired
     */
    private AccessReviewHistoryDefinitionStatus status;

    /*
     * Date time when the history data report is scheduled to be generated.
     */
    private OffsetDateTime runDateTime;

    /*
     * Date time when the history data report is scheduled to be generated.
     */
    private OffsetDateTime fulfilledDateTime;

    /*
     * Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called
     * for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see
     * the expiration date time by looking at the 'se' parameter in the generated uri.
     */
    private String downloadUri;

    /*
     * Date time when history data report expires and the associated data is deleted.
     */
    private OffsetDateTime expiration;

    /**
     * Creates an instance of AccessReviewHistoryInstanceProperties class.
     */
    public AccessReviewHistoryInstanceProperties() {
    }

    /**
     * Get the reviewHistoryPeriodStartDateTime property: Date time used when selecting review data, all reviews
     * included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     * @return the reviewHistoryPeriodStartDateTime value.
     */
    public OffsetDateTime reviewHistoryPeriodStartDateTime() {
        return this.reviewHistoryPeriodStartDateTime;
    }

    /**
     * Set the reviewHistoryPeriodStartDateTime property: Date time used when selecting review data, all reviews
     * included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     * @param reviewHistoryPeriodStartDateTime the reviewHistoryPeriodStartDateTime value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties
        withReviewHistoryPeriodStartDateTime(OffsetDateTime reviewHistoryPeriodStartDateTime) {
        this.reviewHistoryPeriodStartDateTime = reviewHistoryPeriodStartDateTime;
        return this;
    }

    /**
     * Get the reviewHistoryPeriodEndDateTime property: Date time used when selecting review data, all reviews included
     * in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     * @return the reviewHistoryPeriodEndDateTime value.
     */
    public OffsetDateTime reviewHistoryPeriodEndDateTime() {
        return this.reviewHistoryPeriodEndDateTime;
    }

    /**
     * Set the reviewHistoryPeriodEndDateTime property: Date time used when selecting review data, all reviews included
     * in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     * @param reviewHistoryPeriodEndDateTime the reviewHistoryPeriodEndDateTime value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties
        withReviewHistoryPeriodEndDateTime(OffsetDateTime reviewHistoryPeriodEndDateTime) {
        this.reviewHistoryPeriodEndDateTime = reviewHistoryPeriodEndDateTime;
        return this;
    }

    /**
     * Get the displayName property: The display name for the parent history definition.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the parent history definition.
     * 
     * @param displayName the displayName value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the status property: Status of the requested review history instance data. This is either requested,
     * in-progress, done or error. The state transitions are as follows - Requested -&gt; InProgress -&gt; Done -&gt;
     * Expired.
     * 
     * @return the status value.
     */
    public AccessReviewHistoryDefinitionStatus status() {
        return this.status;
    }

    /**
     * Get the runDateTime property: Date time when the history data report is scheduled to be generated.
     * 
     * @return the runDateTime value.
     */
    public OffsetDateTime runDateTime() {
        return this.runDateTime;
    }

    /**
     * Set the runDateTime property: Date time when the history data report is scheduled to be generated.
     * 
     * @param runDateTime the runDateTime value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties withRunDateTime(OffsetDateTime runDateTime) {
        this.runDateTime = runDateTime;
        return this;
    }

    /**
     * Get the fulfilledDateTime property: Date time when the history data report is scheduled to be generated.
     * 
     * @return the fulfilledDateTime value.
     */
    public OffsetDateTime fulfilledDateTime() {
        return this.fulfilledDateTime;
    }

    /**
     * Set the fulfilledDateTime property: Date time when the history data report is scheduled to be generated.
     * 
     * @param fulfilledDateTime the fulfilledDateTime value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties withFulfilledDateTime(OffsetDateTime fulfilledDateTime) {
        this.fulfilledDateTime = fulfilledDateTime;
        return this;
    }

    /**
     * Get the downloadUri property: Uri which can be used to retrieve review history data. To generate this Uri,
     * generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after
     * a 24 hour period. Callers can see the expiration date time by looking at the 'se' parameter in the generated uri.
     * 
     * @return the downloadUri value.
     */
    public String downloadUri() {
        return this.downloadUri;
    }

    /**
     * Get the expiration property: Date time when history data report expires and the associated data is deleted.
     * 
     * @return the expiration value.
     */
    public OffsetDateTime expiration() {
        return this.expiration;
    }

    /**
     * Set the expiration property: Date time when history data report expires and the associated data is deleted.
     * 
     * @param expiration the expiration value to set.
     * @return the AccessReviewHistoryInstanceProperties object itself.
     */
    public AccessReviewHistoryInstanceProperties withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reviewHistoryPeriodStartDateTime",
            this.reviewHistoryPeriodStartDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.reviewHistoryPeriodStartDateTime));
        jsonWriter.writeStringField("reviewHistoryPeriodEndDateTime",
            this.reviewHistoryPeriodEndDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.reviewHistoryPeriodEndDateTime));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("runDateTime",
            this.runDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.runDateTime));
        jsonWriter.writeStringField("fulfilledDateTime",
            this.fulfilledDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.fulfilledDateTime));
        jsonWriter.writeStringField("expiration",
            this.expiration == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiration));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessReviewHistoryInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessReviewHistoryInstanceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessReviewHistoryInstanceProperties.
     */
    public static AccessReviewHistoryInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessReviewHistoryInstanceProperties deserializedAccessReviewHistoryInstanceProperties
                = new AccessReviewHistoryInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reviewHistoryPeriodStartDateTime".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.reviewHistoryPeriodStartDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reviewHistoryPeriodEndDateTime".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.reviewHistoryPeriodEndDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.displayName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.status
                        = AccessReviewHistoryDefinitionStatus.fromString(reader.getString());
                } else if ("runDateTime".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.runDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("fulfilledDateTime".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.fulfilledDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("downloadUri".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.downloadUri = reader.getString();
                } else if ("expiration".equals(fieldName)) {
                    deserializedAccessReviewHistoryInstanceProperties.expiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessReviewHistoryInstanceProperties;
        });
    }
}
