// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * HCI Edge device job properties.
 */
@Fluent
public class HciEdgeDeviceJobProperties implements JsonSerializable<HciEdgeDeviceJobProperties> {
    /*
     * Job Type to support polymorphic resource.
     */
    private HciEdgeDeviceJobType jobType = HciEdgeDeviceJobType.fromString("HciEdgeDeviceJobProperties");

    /*
     * Deployment mode to trigger job.
     */
    private DeploymentMode deploymentMode;

    /*
     * Job provisioning state
     */
    private ProvisioningState provisioningState;

    /*
     * Unique, immutable job id.
     */
    private String jobId;

    /*
     * The UTC date and time at which the job started.
     */
    private OffsetDateTime startTimeUtc;

    /*
     * The UTC date and time at which the job completed.
     */
    private OffsetDateTime endTimeUtc;

    /*
     * Status of Edge device job.
     */
    private JobStatus status;

    /**
     * Creates an instance of HciEdgeDeviceJobProperties class.
     */
    public HciEdgeDeviceJobProperties() {
    }

    /**
     * Get the jobType property: Job Type to support polymorphic resource.
     * 
     * @return the jobType value.
     */
    public HciEdgeDeviceJobType jobType() {
        return this.jobType;
    }

    /**
     * Get the deploymentMode property: Deployment mode to trigger job.
     * 
     * @return the deploymentMode value.
     */
    public DeploymentMode deploymentMode() {
        return this.deploymentMode;
    }

    /**
     * Set the deploymentMode property: Deployment mode to trigger job.
     * 
     * @param deploymentMode the deploymentMode value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    public HciEdgeDeviceJobProperties withDeploymentMode(DeploymentMode deploymentMode) {
        this.deploymentMode = deploymentMode;
        return this;
    }

    /**
     * Get the provisioningState property: Job provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Job provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    HciEdgeDeviceJobProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the jobId property: Unique, immutable job id.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: Unique, immutable job id.
     * 
     * @param jobId the jobId value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    HciEdgeDeviceJobProperties withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the startTimeUtc property: The UTC date and time at which the job started.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Set the startTimeUtc property: The UTC date and time at which the job started.
     * 
     * @param startTimeUtc the startTimeUtc value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    HciEdgeDeviceJobProperties withStartTimeUtc(OffsetDateTime startTimeUtc) {
        this.startTimeUtc = startTimeUtc;
        return this;
    }

    /**
     * Get the endTimeUtc property: The UTC date and time at which the job completed.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Set the endTimeUtc property: The UTC date and time at which the job completed.
     * 
     * @param endTimeUtc the endTimeUtc value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    HciEdgeDeviceJobProperties withEndTimeUtc(OffsetDateTime endTimeUtc) {
        this.endTimeUtc = endTimeUtc;
        return this;
    }

    /**
     * Get the status property: Status of Edge device job.
     * 
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of Edge device job.
     * 
     * @param status the status value to set.
     * @return the HciEdgeDeviceJobProperties object itself.
     */
    HciEdgeDeviceJobProperties withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeStringField("deploymentMode",
            this.deploymentMode == null ? null : this.deploymentMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciEdgeDeviceJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciEdgeDeviceJobProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HciEdgeDeviceJobProperties.
     */
    public static HciEdgeDeviceJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("jobType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("CollectLog".equals(discriminatorValue)) {
                    return HciCollectLogJobProperties.fromJson(readerToUse.reset());
                } else if ("RemoteSupport".equals(discriminatorValue)) {
                    return HciRemoteSupportJobProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static HciEdgeDeviceJobProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciEdgeDeviceJobProperties deserializedHciEdgeDeviceJobProperties = new HciEdgeDeviceJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobType".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.jobType
                        = HciEdgeDeviceJobType.fromString(reader.getString());
                } else if ("deploymentMode".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.deploymentMode
                        = DeploymentMode.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("jobId".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.jobId = reader.getString();
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.startTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.endTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedHciEdgeDeviceJobProperties.status = JobStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciEdgeDeviceJobProperties;
        });
    }
}
