// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Secrets location details.
 */
@Fluent
public final class SecretsLocationDetails implements JsonSerializable<SecretsLocationDetails> {
    /*
     * Type of secrets to store
     */
    private SecretsType secretsType;

    /*
     * secrets location
     */
    private String secretsLocation;

    /**
     * Creates an instance of SecretsLocationDetails class.
     */
    public SecretsLocationDetails() {
    }

    /**
     * Get the secretsType property: Type of secrets to store.
     * 
     * @return the secretsType value.
     */
    public SecretsType secretsType() {
        return this.secretsType;
    }

    /**
     * Set the secretsType property: Type of secrets to store.
     * 
     * @param secretsType the secretsType value to set.
     * @return the SecretsLocationDetails object itself.
     */
    public SecretsLocationDetails withSecretsType(SecretsType secretsType) {
        this.secretsType = secretsType;
        return this;
    }

    /**
     * Get the secretsLocation property: secrets location.
     * 
     * @return the secretsLocation value.
     */
    public String secretsLocation() {
        return this.secretsLocation;
    }

    /**
     * Set the secretsLocation property: secrets location.
     * 
     * @param secretsLocation the secretsLocation value to set.
     * @return the SecretsLocationDetails object itself.
     */
    public SecretsLocationDetails withSecretsLocation(String secretsLocation) {
        this.secretsLocation = secretsLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretsType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretsType in model SecretsLocationDetails"));
        }
        if (secretsLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretsLocation in model SecretsLocationDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretsLocationDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretsType", this.secretsType == null ? null : this.secretsType.toString());
        jsonWriter.writeStringField("secretsLocation", this.secretsLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretsLocationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretsLocationDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretsLocationDetails.
     */
    public static SecretsLocationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretsLocationDetails deserializedSecretsLocationDetails = new SecretsLocationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretsType".equals(fieldName)) {
                    deserializedSecretsLocationDetails.secretsType = SecretsType.fromString(reader.getString());
                } else if ("secretsLocation".equals(fieldName)) {
                    deserializedSecretsLocationDetails.secretsLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretsLocationDetails;
        });
    }
}
