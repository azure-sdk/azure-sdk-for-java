// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents payloads associated with a component available in a validated solution recipe.
 */
@Fluent
public final class ValidatedSolutionRecipeComponentPayload
    implements JsonSerializable<ValidatedSolutionRecipeComponentPayload> {
    /*
     * Represents the unique identifier of the payload used to query the URL.
     */
    private String identifier;

    /*
     * Represents the cryptographic hash of the payload, ensuring data integrity.
     */
    private String hash;

    /*
     * Represents the name of the file associated with the payload.
     */
    private String fileName;

    /*
     * Represents the URL from which the payload can be downloaded.
     */
    private String url;

    /**
     * Creates an instance of ValidatedSolutionRecipeComponentPayload class.
     */
    public ValidatedSolutionRecipeComponentPayload() {
    }

    /**
     * Get the identifier property: Represents the unique identifier of the payload used to query the URL.
     * 
     * @return the identifier value.
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: Represents the unique identifier of the payload used to query the URL.
     * 
     * @param identifier the identifier value to set.
     * @return the ValidatedSolutionRecipeComponentPayload object itself.
     */
    public ValidatedSolutionRecipeComponentPayload withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the hash property: Represents the cryptographic hash of the payload, ensuring data integrity.
     * 
     * @return the hash value.
     */
    public String hash() {
        return this.hash;
    }

    /**
     * Set the hash property: Represents the cryptographic hash of the payload, ensuring data integrity.
     * 
     * @param hash the hash value to set.
     * @return the ValidatedSolutionRecipeComponentPayload object itself.
     */
    public ValidatedSolutionRecipeComponentPayload withHash(String hash) {
        this.hash = hash;
        return this;
    }

    /**
     * Get the fileName property: Represents the name of the file associated with the payload.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: Represents the name of the file associated with the payload.
     * 
     * @param fileName the fileName value to set.
     * @return the ValidatedSolutionRecipeComponentPayload object itself.
     */
    public ValidatedSolutionRecipeComponentPayload withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the url property: Represents the URL from which the payload can be downloaded.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: Represents the URL from which the payload can be downloaded.
     * 
     * @param url the url value to set.
     * @return the ValidatedSolutionRecipeComponentPayload object itself.
     */
    public ValidatedSolutionRecipeComponentPayload withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property identifier in model ValidatedSolutionRecipeComponentPayload"));
        }
        if (hash() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hash in model ValidatedSolutionRecipeComponentPayload"));
        }
        if (fileName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fileName in model ValidatedSolutionRecipeComponentPayload"));
        }
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property url in model ValidatedSolutionRecipeComponentPayload"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeComponentPayload.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identifier", this.identifier);
        jsonWriter.writeStringField("hash", this.hash);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeComponentPayload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeComponentPayload if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeComponentPayload.
     */
    public static ValidatedSolutionRecipeComponentPayload fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeComponentPayload deserializedValidatedSolutionRecipeComponentPayload
                = new ValidatedSolutionRecipeComponentPayload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identifier".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentPayload.identifier = reader.getString();
                } else if ("hash".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentPayload.hash = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentPayload.fileName = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentPayload.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeComponentPayload;
        });
    }
}
