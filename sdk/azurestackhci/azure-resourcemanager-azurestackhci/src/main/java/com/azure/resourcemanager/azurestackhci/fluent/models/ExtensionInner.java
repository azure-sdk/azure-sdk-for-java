// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhci.models.ExtensionAggregateState;
import com.azure.resourcemanager.azurestackhci.models.ExtensionManagedBy;
import com.azure.resourcemanager.azurestackhci.models.ExtensionParameters;
import com.azure.resourcemanager.azurestackhci.models.PerNodeExtensionState;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Details of a particular extension in HCI Cluster. */
@Fluent
public final class ExtensionInner extends ProxyResource {
    /*
     * Describes Machine Extension Properties.
     */
    @JsonProperty(value = "properties")
    private ExtensionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ExtensionInner class. */
    public ExtensionInner() {
    }

    /**
     * Get the innerProperties property: Describes Machine Extension Properties.
     *
     * @return the innerProperties value.
     */
    private ExtensionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Extension proxy resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the extensionParameters property: Parameters specific to this extension type.
     *
     * @return the extensionParameters value.
     */
    public ExtensionParameters extensionParameters() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionParameters();
    }

    /**
     * Set the extensionParameters property: Parameters specific to this extension type.
     *
     * @param extensionParameters the extensionParameters value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withExtensionParameters(ExtensionParameters extensionParameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExtensionProperties();
        }
        this.innerProperties().withExtensionParameters(extensionParameters);
        return this;
    }

    /**
     * Get the aggregateState property: Aggregate state of Arc Extensions across the nodes in this HCI cluster.
     *
     * @return the aggregateState value.
     */
    public ExtensionAggregateState aggregateState() {
        return this.innerProperties() == null ? null : this.innerProperties().aggregateState();
    }

    /**
     * Get the perNodeExtensionDetails property: State of Arc Extension in each of the nodes.
     *
     * @return the perNodeExtensionDetails value.
     */
    public List<PerNodeExtensionState> perNodeExtensionDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().perNodeExtensionDetails();
    }

    /**
     * Get the managedBy property: Indicates if the extension is managed by azure or the user.
     *
     * @return the managedBy value.
     */
    public ExtensionManagedBy managedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().managedBy();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
