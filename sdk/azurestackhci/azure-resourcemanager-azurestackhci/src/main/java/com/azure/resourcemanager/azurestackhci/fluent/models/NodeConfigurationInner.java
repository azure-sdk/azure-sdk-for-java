// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** NodeConfiguration details. */
@Fluent
public final class NodeConfigurationInner extends ProxyResource {
    /*
     * NodeConfiguration properties.
     */
    @JsonProperty(value = "properties")
    private NodeConfigurationProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of NodeConfigurationInner class. */
    public NodeConfigurationInner() {
    }

    /**
     * Get the innerProperties property: NodeConfiguration properties.
     *
     * @return the innerProperties value.
     */
    private NodeConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the nodeConfiguration property: The base 64 encoded string for the node configuration with all the ips and
     * nics.
     *
     * @return the nodeConfiguration value.
     */
    public String nodeConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeConfiguration();
    }

    /**
     * Set the nodeConfiguration property: The base 64 encoded string for the node configuration with all the ips and
     * nics.
     *
     * @param nodeConfiguration the nodeConfiguration value to set.
     * @return the NodeConfigurationInner object itself.
     */
    public NodeConfigurationInner withNodeConfiguration(String nodeConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NodeConfigurationProperties();
        }
        this.innerProperties().withNodeConfiguration(nodeConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
