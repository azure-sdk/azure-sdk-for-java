// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurestackhci.fluent.NodeConfigurationsClient;
import com.azure.resourcemanager.azurestackhci.models.NodeConfigurationResources;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in NodeConfigurationsClient. */
public final class NodeConfigurationsClientImpl implements NodeConfigurationsClient {
    /** The proxy service used to perform REST calls. */
    private final NodeConfigurationsService service;

    /** The service client containing this operation class. */
    private final AzureStackHciClientImpl client;

    /**
     * Initializes an instance of NodeConfigurationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    NodeConfigurationsClientImpl(AzureStackHciClientImpl client) {
        this.service =
            RestProxy.create(NodeConfigurationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureStackHciClientNodeConfigurations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureStackHciClientN")
    public interface NodeConfigurationsService {
        @Headers({"Content-Type: application/json"})
        @Post("/{resourceUri}/providers/Microsoft.AzureStackHCI/nodeConfigurations/{nodeConfigurationName}/validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> validate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("nodeConfigurationName") String nodeConfigurationName,
            @BodyParam("application/json") NodeConfigurationResources nodeConfigurationResources,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Validate the Node Configuration Resources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be connected.
     * @param nodeConfigurationName The name of the node configuration resource.
     * @param nodeConfigurationResources The list of node Configuration Resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> validateWithResponseAsync(
        String resourceUri, String nodeConfigurationName, NodeConfigurationResources nodeConfigurationResources) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (nodeConfigurationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter nodeConfigurationName is required and cannot be null."));
        }
        if (nodeConfigurationResources == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter nodeConfigurationResources is required and cannot be null."));
        } else {
            nodeConfigurationResources.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .validate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceUri,
                            nodeConfigurationName,
                            nodeConfigurationResources,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validate the Node Configuration Resources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be connected.
     * @param nodeConfigurationName The name of the node configuration resource.
     * @param nodeConfigurationResources The list of node Configuration Resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> validateWithResponseAsync(
        String resourceUri,
        String nodeConfigurationName,
        NodeConfigurationResources nodeConfigurationResources,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (nodeConfigurationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter nodeConfigurationName is required and cannot be null."));
        }
        if (nodeConfigurationResources == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter nodeConfigurationResources is required and cannot be null."));
        } else {
            nodeConfigurationResources.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .validate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceUri,
                nodeConfigurationName,
                nodeConfigurationResources,
                accept,
                context);
    }

    /**
     * Validate the Node Configuration Resources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be connected.
     * @param nodeConfigurationName The name of the node configuration resource.
     * @param nodeConfigurationResources The list of node Configuration Resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> validateAsync(
        String resourceUri, String nodeConfigurationName, NodeConfigurationResources nodeConfigurationResources) {
        return validateWithResponseAsync(resourceUri, nodeConfigurationName, nodeConfigurationResources)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Validate the Node Configuration Resources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be connected.
     * @param nodeConfigurationName The name of the node configuration resource.
     * @param nodeConfigurationResources The list of node Configuration Resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> validateWithResponse(
        String resourceUri,
        String nodeConfigurationName,
        NodeConfigurationResources nodeConfigurationResources,
        Context context) {
        return validateWithResponseAsync(resourceUri, nodeConfigurationName, nodeConfigurationResources, context)
            .block();
    }

    /**
     * Validate the Node Configuration Resources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be connected.
     * @param nodeConfigurationName The name of the node configuration resource.
     * @param nodeConfigurationResources The list of node Configuration Resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void validate(
        String resourceUri, String nodeConfigurationName, NodeConfigurationResources nodeConfigurationResources) {
        validateWithResponse(resourceUri, nodeConfigurationName, nodeConfigurationResources, Context.NONE);
    }
}
