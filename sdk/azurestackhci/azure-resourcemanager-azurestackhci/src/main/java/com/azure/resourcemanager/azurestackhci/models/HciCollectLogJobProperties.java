// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the properties of an HCI Collect Log job.
 */
@Fluent
public final class HciCollectLogJobProperties extends HciEdgeDeviceJobProperties {
    /*
     * Job Type to support polymorphic resource.
     */
    private HciEdgeDeviceJobType jobType = HciEdgeDeviceJobType.COLLECT_LOG;

    /*
     * From date for log collection.
     */
    private OffsetDateTime fromDate;

    /*
     * To date for log collection.
     */
    private OffsetDateTime toDate;

    /*
     * To date for log collection.
     */
    private OffsetDateTime lastLogGenerated;

    /*
     * log collection job reported properties.
     */
    private LogCollectionReportedProperties reportedProperties;

    /**
     * Creates an instance of HciCollectLogJobProperties class.
     */
    public HciCollectLogJobProperties() {
    }

    /**
     * Get the jobType property: Job Type to support polymorphic resource.
     * 
     * @return the jobType value.
     */
    @Override
    public HciEdgeDeviceJobType jobType() {
        return this.jobType;
    }

    /**
     * Get the fromDate property: From date for log collection.
     * 
     * @return the fromDate value.
     */
    public OffsetDateTime fromDate() {
        return this.fromDate;
    }

    /**
     * Set the fromDate property: From date for log collection.
     * 
     * @param fromDate the fromDate value to set.
     * @return the HciCollectLogJobProperties object itself.
     */
    public HciCollectLogJobProperties withFromDate(OffsetDateTime fromDate) {
        this.fromDate = fromDate;
        return this;
    }

    /**
     * Get the toDate property: To date for log collection.
     * 
     * @return the toDate value.
     */
    public OffsetDateTime toDate() {
        return this.toDate;
    }

    /**
     * Set the toDate property: To date for log collection.
     * 
     * @param toDate the toDate value to set.
     * @return the HciCollectLogJobProperties object itself.
     */
    public HciCollectLogJobProperties withToDate(OffsetDateTime toDate) {
        this.toDate = toDate;
        return this;
    }

    /**
     * Get the lastLogGenerated property: To date for log collection.
     * 
     * @return the lastLogGenerated value.
     */
    public OffsetDateTime lastLogGenerated() {
        return this.lastLogGenerated;
    }

    /**
     * Get the reportedProperties property: log collection job reported properties.
     * 
     * @return the reportedProperties value.
     */
    public LogCollectionReportedProperties reportedProperties() {
        return this.reportedProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HciCollectLogJobProperties withDeploymentMode(DeploymentMode deploymentMode) {
        super.withDeploymentMode(deploymentMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (fromDate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fromDate in model HciCollectLogJobProperties"));
        }
        if (toDate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property toDate in model HciCollectLogJobProperties"));
        }
        if (reportedProperties() != null) {
            reportedProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HciCollectLogJobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentMode", deploymentMode() == null ? null : deploymentMode().toString());
        jsonWriter.writeStringField("fromDate",
            this.fromDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.fromDate));
        jsonWriter.writeStringField("toDate",
            this.toDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.toDate));
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciCollectLogJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciCollectLogJobProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HciCollectLogJobProperties.
     */
    public static HciCollectLogJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciCollectLogJobProperties deserializedHciCollectLogJobProperties = new HciCollectLogJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentMode".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties
                        .withDeploymentMode(DeploymentMode.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.withJobId(reader.getString());
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.withStartTimeUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.withEndTimeUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("status".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.withStatus(JobStatus.fromString(reader.getString()));
                } else if ("fromDate".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.fromDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("toDate".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.toDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobType".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.jobType
                        = HciEdgeDeviceJobType.fromString(reader.getString());
                } else if ("lastLogGenerated".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.lastLogGenerated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reportedProperties".equals(fieldName)) {
                    deserializedHciCollectLogJobProperties.reportedProperties
                        = LogCollectionReportedProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciCollectLogJobProperties;
        });
    }
}
