// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents information about a validated solution recipe.
 */
@Fluent
public final class ValidatedSolutionRecipeInfo implements JsonSerializable<ValidatedSolutionRecipeInfo> {
    /*
     * Represents the solution type for which this validated solution recipe is applicable.
     */
    private String solutionType;

    /*
     * Represents the version for which this validated solution recipe is applicable.
     */
    private String version;

    /**
     * Creates an instance of ValidatedSolutionRecipeInfo class.
     */
    public ValidatedSolutionRecipeInfo() {
    }

    /**
     * Get the solutionType property: Represents the solution type for which this validated solution recipe is
     * applicable.
     * 
     * @return the solutionType value.
     */
    public String solutionType() {
        return this.solutionType;
    }

    /**
     * Set the solutionType property: Represents the solution type for which this validated solution recipe is
     * applicable.
     * 
     * @param solutionType the solutionType value to set.
     * @return the ValidatedSolutionRecipeInfo object itself.
     */
    public ValidatedSolutionRecipeInfo withSolutionType(String solutionType) {
        this.solutionType = solutionType;
        return this;
    }

    /**
     * Get the version property: Represents the version for which this validated solution recipe is applicable.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Represents the version for which this validated solution recipe is applicable.
     * 
     * @param version the version value to set.
     * @return the ValidatedSolutionRecipeInfo object itself.
     */
    public ValidatedSolutionRecipeInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionType in model ValidatedSolutionRecipeInfo"));
        }
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property version in model ValidatedSolutionRecipeInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionType", this.solutionType);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeInfo.
     */
    public static ValidatedSolutionRecipeInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeInfo deserializedValidatedSolutionRecipeInfo = new ValidatedSolutionRecipeInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionType".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeInfo.solutionType = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeInfo.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeInfo;
        });
    }
}
