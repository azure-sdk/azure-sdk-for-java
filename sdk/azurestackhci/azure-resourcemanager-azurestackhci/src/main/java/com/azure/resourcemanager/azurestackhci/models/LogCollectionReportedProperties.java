// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the reported properties of a log collection job.
 */
@Immutable
public final class LogCollectionReportedProperties implements JsonSerializable<LogCollectionReportedProperties> {
    /*
     * The percentage of the job that is complete.
     */
    private Integer percentComplete;

    /*
     * Validation status of job.
     */
    private EceActionStatus validationStatus;

    /*
     * Deployment status of job.
     */
    private EceActionStatus deploymentStatus;

    /*
     * Details of the log collection session.
     */
    private List<LogCollectionJobSession> logCollectionSessionDetails;

    /**
     * Creates an instance of LogCollectionReportedProperties class.
     */
    public LogCollectionReportedProperties() {
    }

    /**
     * Get the percentComplete property: The percentage of the job that is complete.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the validationStatus property: Validation status of job.
     * 
     * @return the validationStatus value.
     */
    public EceActionStatus validationStatus() {
        return this.validationStatus;
    }

    /**
     * Get the deploymentStatus property: Deployment status of job.
     * 
     * @return the deploymentStatus value.
     */
    public EceActionStatus deploymentStatus() {
        return this.deploymentStatus;
    }

    /**
     * Get the logCollectionSessionDetails property: Details of the log collection session.
     * 
     * @return the logCollectionSessionDetails value.
     */
    public List<LogCollectionJobSession> logCollectionSessionDetails() {
        return this.logCollectionSessionDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationStatus() != null) {
            validationStatus().validate();
        }
        if (deploymentStatus() != null) {
            deploymentStatus().validate();
        }
        if (logCollectionSessionDetails() != null) {
            logCollectionSessionDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogCollectionReportedProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogCollectionReportedProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogCollectionReportedProperties.
     */
    public static LogCollectionReportedProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogCollectionReportedProperties deserializedLogCollectionReportedProperties
                = new LogCollectionReportedProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("percentComplete".equals(fieldName)) {
                    deserializedLogCollectionReportedProperties.percentComplete
                        = reader.getNullable(JsonReader::getInt);
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedLogCollectionReportedProperties.validationStatus = EceActionStatus.fromJson(reader);
                } else if ("deploymentStatus".equals(fieldName)) {
                    deserializedLogCollectionReportedProperties.deploymentStatus = EceActionStatus.fromJson(reader);
                } else if ("logCollectionSessionDetails".equals(fieldName)) {
                    List<LogCollectionJobSession> logCollectionSessionDetails
                        = reader.readArray(reader1 -> LogCollectionJobSession.fromJson(reader1));
                    deserializedLogCollectionReportedProperties.logCollectionSessionDetails
                        = logCollectionSessionDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogCollectionReportedProperties;
        });
    }
}
