// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a session for collecting logs from an edge device.
 */
@Immutable
public final class LogCollectionJobSession implements JsonSerializable<LogCollectionJobSession> {
    /*
     * The timestamp when log collection started, in ISO 8601 format.
     */
    private String startTime;

    /*
     * The timestamp when log collection ended, in ISO 8601 format.
     */
    private String endTime;

    /*
     * The total time logs were collected for, in ISO 8601 duration format.
     */
    private String timeCollected;

    /*
     * The size of the collected logs in bytes.
     */
    private Integer logSize;

    /*
     * The status of the log collection session.
     */
    private DeviceLogCollectionStatus status;

    /*
     * A unique identifier for correlating this log collection session with other operations or sessions.
     */
    private String correlationId;

    /**
     * Creates an instance of LogCollectionJobSession class.
     */
    public LogCollectionJobSession() {
    }

    /**
     * Get the startTime property: The timestamp when log collection started, in ISO 8601 format.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The timestamp when log collection ended, in ISO 8601 format.
     * 
     * @return the endTime value.
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Get the timeCollected property: The total time logs were collected for, in ISO 8601 duration format.
     * 
     * @return the timeCollected value.
     */
    public String timeCollected() {
        return this.timeCollected;
    }

    /**
     * Get the logSize property: The size of the collected logs in bytes.
     * 
     * @return the logSize value.
     */
    public Integer logSize() {
        return this.logSize;
    }

    /**
     * Get the status property: The status of the log collection session.
     * 
     * @return the status value.
     */
    public DeviceLogCollectionStatus status() {
        return this.status;
    }

    /**
     * Get the correlationId property: A unique identifier for correlating this log collection session with other
     * operations or sessions.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogCollectionJobSession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogCollectionJobSession if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogCollectionJobSession.
     */
    public static LogCollectionJobSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogCollectionJobSession deserializedLogCollectionJobSession = new LogCollectionJobSession();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedLogCollectionJobSession.startTime = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedLogCollectionJobSession.endTime = reader.getString();
                } else if ("timeCollected".equals(fieldName)) {
                    deserializedLogCollectionJobSession.timeCollected = reader.getString();
                } else if ("logSize".equals(fieldName)) {
                    deserializedLogCollectionJobSession.logSize = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedLogCollectionJobSession.status
                        = DeviceLogCollectionStatus.fromString(reader.getString());
                } else if ("correlationId".equals(fieldName)) {
                    deserializedLogCollectionJobSession.correlationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogCollectionJobSession;
        });
    }
}
