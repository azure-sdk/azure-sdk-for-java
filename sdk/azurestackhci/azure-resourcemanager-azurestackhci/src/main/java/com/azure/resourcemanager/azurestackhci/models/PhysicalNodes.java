// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The PhysicalNodes of a cluster.
 */
@Fluent
public final class PhysicalNodes {
    /*
     * NETBIOS name of each physical server on your Azure Stack HCI cluster.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
     */
    @JsonProperty(value = "ipv4Address")
    private String ipv4Address;

    /**
     * Creates an instance of PhysicalNodes class.
     */
    public PhysicalNodes() {
    }

    /**
     * Get the name property: NETBIOS name of each physical server on your Azure Stack HCI cluster.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: NETBIOS name of each physical server on your Azure Stack HCI cluster.
     * 
     * @param name the name value to set.
     * @return the PhysicalNodes object itself.
     */
    public PhysicalNodes withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ipv4Address property: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
     * 
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * Set the ipv4Address property: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
     * 
     * @param ipv4Address the ipv4Address value to set.
     * @return the PhysicalNodes object itself.
     */
    public PhysicalNodes withIpv4Address(String ipv4Address) {
        this.ipv4Address = ipv4Address;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
