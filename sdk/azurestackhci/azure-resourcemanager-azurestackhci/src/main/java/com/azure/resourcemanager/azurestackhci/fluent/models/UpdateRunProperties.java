// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.Step;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Details of an Update run. */
@Fluent
public final class UpdateRunProperties {
    /*
     * Provisioning state of the UpdateRuns proxy resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Timestamp of the update run was started.
     */
    @JsonProperty(value = "timeStarted")
    private OffsetDateTime timeStarted;

    /*
     * Timestamp of the most recently completed step in the update run.
     */
    @JsonProperty(value = "lastUpdatedTime")
    private OffsetDateTime lastUpdatedTime;

    /*
     * Duration of the update run.
     */
    @JsonProperty(value = "duration")
    private String duration;

    /*
     * State of the update run.
     */
    @JsonProperty(value = "state")
    private UpdateRunPropertiesState state;

    /*
     * Progress representation of the update run steps.
     */
    @JsonProperty(value = "progress")
    private Step progress;

    /** Creates an instance of UpdateRunProperties class. */
    public UpdateRunProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the UpdateRuns proxy resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the timeStarted property: Timestamp of the update run was started.
     *
     * @return the timeStarted value.
     */
    public OffsetDateTime timeStarted() {
        return this.timeStarted;
    }

    /**
     * Set the timeStarted property: Timestamp of the update run was started.
     *
     * @param timeStarted the timeStarted value to set.
     * @return the UpdateRunProperties object itself.
     */
    public UpdateRunProperties withTimeStarted(OffsetDateTime timeStarted) {
        this.timeStarted = timeStarted;
        return this;
    }

    /**
     * Get the lastUpdatedTime property: Timestamp of the most recently completed step in the update run.
     *
     * @return the lastUpdatedTime value.
     */
    public OffsetDateTime lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Set the lastUpdatedTime property: Timestamp of the most recently completed step in the update run.
     *
     * @param lastUpdatedTime the lastUpdatedTime value to set.
     * @return the UpdateRunProperties object itself.
     */
    public UpdateRunProperties withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }

    /**
     * Get the duration property: Duration of the update run.
     *
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Duration of the update run.
     *
     * @param duration the duration value to set.
     * @return the UpdateRunProperties object itself.
     */
    public UpdateRunProperties withDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the state property: State of the update run.
     *
     * @return the state value.
     */
    public UpdateRunPropertiesState state() {
        return this.state;
    }

    /**
     * Set the state property: State of the update run.
     *
     * @param state the state value to set.
     * @return the UpdateRunProperties object itself.
     */
    public UpdateRunProperties withState(UpdateRunPropertiesState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the progress property: Progress representation of the update run steps.
     *
     * @return the progress value.
     */
    public Step progress() {
        return this.progress;
    }

    /**
     * Set the progress property: Progress representation of the update run steps.
     *
     * @param progress the progress value to set.
     * @return the UpdateRunProperties object itself.
     */
    public UpdateRunProperties withProgress(Step progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (progress() != null) {
            progress().validate();
        }
    }
}
