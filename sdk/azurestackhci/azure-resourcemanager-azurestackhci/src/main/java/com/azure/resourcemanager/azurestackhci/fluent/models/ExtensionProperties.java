// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.ExtensionAggregateState;
import com.azure.resourcemanager.azurestackhci.models.ExtensionManagedBy;
import com.azure.resourcemanager.azurestackhci.models.ExtensionParameters;
import com.azure.resourcemanager.azurestackhci.models.PerNodeExtensionState;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Status of Arc Extension for a particular node in HCI Cluster. */
@Fluent
public final class ExtensionProperties {
    /*
     * Provisioning state of the Extension proxy resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Parameters specific to this extension type.
     */
    @JsonProperty(value = "extensionParameters")
    private ExtensionParameters extensionParameters;

    /*
     * Aggregate state of Arc Extensions across the nodes in this HCI cluster.
     */
    @JsonProperty(value = "aggregateState", access = JsonProperty.Access.WRITE_ONLY)
    private ExtensionAggregateState aggregateState;

    /*
     * State of Arc Extension in each of the nodes.
     */
    @JsonProperty(value = "perNodeExtensionDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<PerNodeExtensionState> perNodeExtensionDetails;

    /*
     * Indicates if the extension is managed by azure or the user.
     */
    @JsonProperty(value = "managedBy", access = JsonProperty.Access.WRITE_ONLY)
    private ExtensionManagedBy managedBy;

    /** Creates an instance of ExtensionProperties class. */
    public ExtensionProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the Extension proxy resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the extensionParameters property: Parameters specific to this extension type.
     *
     * @return the extensionParameters value.
     */
    public ExtensionParameters extensionParameters() {
        return this.extensionParameters;
    }

    /**
     * Set the extensionParameters property: Parameters specific to this extension type.
     *
     * @param extensionParameters the extensionParameters value to set.
     * @return the ExtensionProperties object itself.
     */
    public ExtensionProperties withExtensionParameters(ExtensionParameters extensionParameters) {
        this.extensionParameters = extensionParameters;
        return this;
    }

    /**
     * Get the aggregateState property: Aggregate state of Arc Extensions across the nodes in this HCI cluster.
     *
     * @return the aggregateState value.
     */
    public ExtensionAggregateState aggregateState() {
        return this.aggregateState;
    }

    /**
     * Get the perNodeExtensionDetails property: State of Arc Extension in each of the nodes.
     *
     * @return the perNodeExtensionDetails value.
     */
    public List<PerNodeExtensionState> perNodeExtensionDetails() {
        return this.perNodeExtensionDetails;
    }

    /**
     * Get the managedBy property: Indicates if the extension is managed by azure or the user.
     *
     * @return the managedBy value.
     */
    public ExtensionManagedBy managedBy() {
        return this.managedBy;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extensionParameters() != null) {
            extensionParameters().validate();
        }
        if (perNodeExtensionDetails() != null) {
            perNodeExtensionDetails().forEach(e -> e.validate());
        }
    }
}
