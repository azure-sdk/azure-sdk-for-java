// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Represents a remote support session.
 */
@Immutable
public final class RemoteSupportSession implements JsonSerializable<RemoteSupportSession> {
    /*
     * Unique session Id.
     */
    private String sessionId;

    /*
     * The start time of the remote support session, in UTC.
     */
    private OffsetDateTime sessionStartTime;

    /*
     * The end time of the remote support session, in UTC.
     */
    private OffsetDateTime sessionEndTime;

    /*
     * The level of access granted during the remote support session.
     */
    private RemoteSupportAccessLevel accessLevel;

    /*
     * The location where the session transcript is stored.
     */
    private String transcriptLocation;

    /**
     * Creates an instance of RemoteSupportSession class.
     */
    public RemoteSupportSession() {
    }

    /**
     * Get the sessionId property: Unique session Id.
     * 
     * @return the sessionId value.
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Get the sessionStartTime property: The start time of the remote support session, in UTC.
     * 
     * @return the sessionStartTime value.
     */
    public OffsetDateTime sessionStartTime() {
        return this.sessionStartTime;
    }

    /**
     * Get the sessionEndTime property: The end time of the remote support session, in UTC.
     * 
     * @return the sessionEndTime value.
     */
    public OffsetDateTime sessionEndTime() {
        return this.sessionEndTime;
    }

    /**
     * Get the accessLevel property: The level of access granted during the remote support session.
     * 
     * @return the accessLevel value.
     */
    public RemoteSupportAccessLevel accessLevel() {
        return this.accessLevel;
    }

    /**
     * Get the transcriptLocation property: The location where the session transcript is stored.
     * 
     * @return the transcriptLocation value.
     */
    public String transcriptLocation() {
        return this.transcriptLocation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteSupportSession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteSupportSession if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoteSupportSession.
     */
    public static RemoteSupportSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoteSupportSession deserializedRemoteSupportSession = new RemoteSupportSession();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    deserializedRemoteSupportSession.sessionId = reader.getString();
                } else if ("sessionStartTime".equals(fieldName)) {
                    deserializedRemoteSupportSession.sessionStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sessionEndTime".equals(fieldName)) {
                    deserializedRemoteSupportSession.sessionEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("accessLevel".equals(fieldName)) {
                    deserializedRemoteSupportSession.accessLevel
                        = RemoteSupportAccessLevel.fromString(reader.getString());
                } else if ("transcriptLocation".equals(fieldName)) {
                    deserializedRemoteSupportSession.transcriptLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoteSupportSession;
        });
    }
}
