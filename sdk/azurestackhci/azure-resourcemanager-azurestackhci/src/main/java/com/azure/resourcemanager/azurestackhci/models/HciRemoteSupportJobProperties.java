// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the properties of a remote support job for HCI.
 */
@Fluent
public final class HciRemoteSupportJobProperties extends HciEdgeDeviceJobProperties {
    /*
     * Job Type to support polymorphic resource.
     */
    private HciEdgeDeviceJobType jobType = HciEdgeDeviceJobType.REMOTE_SUPPORT;

    /*
     * Remote support access level.
     */
    private RemoteSupportAccessLevel accessLevel;

    /*
     * Remote support expiration timestamp.
     */
    private OffsetDateTime expirationTimestamp;

    /*
     * Remote support type.
     */
    private RemoteSupportType type;

    /*
     * log collection job reported properties.
     */
    private RemoteSupportJobReportedProperties reportedProperties;

    /**
     * Creates an instance of HciRemoteSupportJobProperties class.
     */
    public HciRemoteSupportJobProperties() {
    }

    /**
     * Get the jobType property: Job Type to support polymorphic resource.
     * 
     * @return the jobType value.
     */
    @Override
    public HciEdgeDeviceJobType jobType() {
        return this.jobType;
    }

    /**
     * Get the accessLevel property: Remote support access level.
     * 
     * @return the accessLevel value.
     */
    public RemoteSupportAccessLevel accessLevel() {
        return this.accessLevel;
    }

    /**
     * Set the accessLevel property: Remote support access level.
     * 
     * @param accessLevel the accessLevel value to set.
     * @return the HciRemoteSupportJobProperties object itself.
     */
    public HciRemoteSupportJobProperties withAccessLevel(RemoteSupportAccessLevel accessLevel) {
        this.accessLevel = accessLevel;
        return this;
    }

    /**
     * Get the expirationTimestamp property: Remote support expiration timestamp.
     * 
     * @return the expirationTimestamp value.
     */
    public OffsetDateTime expirationTimestamp() {
        return this.expirationTimestamp;
    }

    /**
     * Set the expirationTimestamp property: Remote support expiration timestamp.
     * 
     * @param expirationTimestamp the expirationTimestamp value to set.
     * @return the HciRemoteSupportJobProperties object itself.
     */
    public HciRemoteSupportJobProperties withExpirationTimestamp(OffsetDateTime expirationTimestamp) {
        this.expirationTimestamp = expirationTimestamp;
        return this;
    }

    /**
     * Get the type property: Remote support type.
     * 
     * @return the type value.
     */
    public RemoteSupportType type() {
        return this.type;
    }

    /**
     * Set the type property: Remote support type.
     * 
     * @param type the type value to set.
     * @return the HciRemoteSupportJobProperties object itself.
     */
    public HciRemoteSupportJobProperties withType(RemoteSupportType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the reportedProperties property: log collection job reported properties.
     * 
     * @return the reportedProperties value.
     */
    public RemoteSupportJobReportedProperties reportedProperties() {
        return this.reportedProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HciRemoteSupportJobProperties withDeploymentMode(DeploymentMode deploymentMode) {
        super.withDeploymentMode(deploymentMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (accessLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accessLevel in model HciRemoteSupportJobProperties"));
        }
        if (expirationTimestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property expirationTimestamp in model HciRemoteSupportJobProperties"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model HciRemoteSupportJobProperties"));
        }
        if (reportedProperties() != null) {
            reportedProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HciRemoteSupportJobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentMode", deploymentMode() == null ? null : deploymentMode().toString());
        jsonWriter.writeStringField("accessLevel", this.accessLevel == null ? null : this.accessLevel.toString());
        jsonWriter.writeStringField("expirationTimestamp",
            this.expirationTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationTimestamp));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciRemoteSupportJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciRemoteSupportJobProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HciRemoteSupportJobProperties.
     */
    public static HciRemoteSupportJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciRemoteSupportJobProperties deserializedHciRemoteSupportJobProperties
                = new HciRemoteSupportJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentMode".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties
                        .withDeploymentMode(DeploymentMode.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.withJobId(reader.getString());
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.withStartTimeUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.withEndTimeUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("status".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.withStatus(JobStatus.fromString(reader.getString()));
                } else if ("accessLevel".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.accessLevel
                        = RemoteSupportAccessLevel.fromString(reader.getString());
                } else if ("expirationTimestamp".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.expirationTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.type = RemoteSupportType.fromString(reader.getString());
                } else if ("jobType".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.jobType
                        = HciEdgeDeviceJobType.fromString(reader.getString());
                } else if ("reportedProperties".equals(fieldName)) {
                    deserializedHciRemoteSupportJobProperties.reportedProperties
                        = RemoteSupportJobReportedProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciRemoteSupportJobProperties;
        });
    }
}
