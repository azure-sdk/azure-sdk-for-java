// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.Step;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.time.OffsetDateTime;

public final class UpdateRunImpl implements UpdateRun, UpdateRun.Definition, UpdateRun.Update {
    private UpdateRunInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public OffsetDateTime timeStarted() {
        return this.innerModel().timeStarted();
    }

    public OffsetDateTime lastUpdatedTime() {
        return this.innerModel().lastUpdatedTime();
    }

    public String duration() {
        return this.innerModel().duration();
    }

    public UpdateRunPropertiesState state() {
        return this.innerModel().state();
    }

    public Step progress() {
        return this.innerModel().progress();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public UpdateRunInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String updateName;

    private String updateRunName;

    public UpdateRunImpl withExistingUpdate(String resourceGroupName, String clusterName, String updateName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        this.updateName = updateName;
        return this;
    }

    public UpdateRun create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .putWithResponse(
                    resourceGroupName, clusterName, updateName, updateRunName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public UpdateRun create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .putWithResponse(resourceGroupName, clusterName, updateName, updateRunName, this.innerModel(), context)
                .getValue();
        return this;
    }

    UpdateRunImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new UpdateRunInner();
        this.serviceManager = serviceManager;
        this.updateRunName = name;
    }

    public UpdateRunImpl update() {
        return this;
    }

    public UpdateRun apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .putWithResponse(
                    resourceGroupName, clusterName, updateName, updateRunName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public UpdateRun apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .putWithResponse(resourceGroupName, clusterName, updateName, updateRunName, this.innerModel(), context)
                .getValue();
        return this;
    }

    UpdateRunImpl(
        UpdateRunInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "clusters");
        this.updateName = Utils.getValueFromIdByName(innerObject.id(), "updates");
        this.updateRunName = Utils.getValueFromIdByName(innerObject.id(), "updateRuns");
    }

    public UpdateRun refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .getWithResponse(resourceGroupName, clusterName, updateName, updateRunName, Context.NONE)
                .getValue();
        return this;
    }

    public UpdateRun refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUpdateRuns()
                .getWithResponse(resourceGroupName, clusterName, updateName, updateRunName, context)
                .getValue();
        return this;
    }

    public UpdateRunImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public UpdateRunImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public UpdateRunImpl withTimeStarted(OffsetDateTime timeStarted) {
        this.innerModel().withTimeStarted(timeStarted);
        return this;
    }

    public UpdateRunImpl withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.innerModel().withLastUpdatedTime(lastUpdatedTime);
        return this;
    }

    public UpdateRunImpl withDuration(String duration) {
        this.innerModel().withDuration(duration);
        return this;
    }

    public UpdateRunImpl withState(UpdateRunPropertiesState state) {
        this.innerModel().withState(state);
        return this;
    }

    public UpdateRunImpl withProgress(Step progress) {
        this.innerModel().withProgress(progress);
        return this;
    }
}
