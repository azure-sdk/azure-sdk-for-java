// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assembly Package details for Validated Solution Recipe for AzureStackHCI Cluster.
 */
@Immutable
public final class AssemblyInfo implements JsonSerializable<AssemblyInfo> {
    /*
     * Assembly Package version for Validated Solution Recipe for AzureStackHCI Cluster
     */
    private String packageVersion;

    /*
     * Payload properties for Validated Solution Recipe for AzureStackHCI Cluster
     */
    private List<AssemblyInfoPayload> payload;

    /**
     * Creates an instance of AssemblyInfo class.
     */
    public AssemblyInfo() {
    }

    /**
     * Get the packageVersion property: Assembly Package version for Validated Solution Recipe for AzureStackHCI
     * Cluster.
     * 
     * @return the packageVersion value.
     */
    public String packageVersion() {
        return this.packageVersion;
    }

    /**
     * Get the payload property: Payload properties for Validated Solution Recipe for AzureStackHCI Cluster.
     * 
     * @return the payload value.
     */
    public List<AssemblyInfoPayload> payload() {
        return this.payload;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (payload() != null) {
            payload().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssemblyInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssemblyInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssemblyInfo.
     */
    public static AssemblyInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssemblyInfo deserializedAssemblyInfo = new AssemblyInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packageVersion".equals(fieldName)) {
                    deserializedAssemblyInfo.packageVersion = reader.getString();
                } else if ("payload".equals(fieldName)) {
                    List<AssemblyInfoPayload> payload
                        = reader.readArray(reader1 -> AssemblyInfoPayload.fromJson(reader1));
                    deserializedAssemblyInfo.payload = payload;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssemblyInfo;
        });
    }
}
