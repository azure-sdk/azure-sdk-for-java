// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents component available in a validated solution recipe.
 */
@Fluent
public final class ValidatedSolutionRecipeComponent implements JsonSerializable<ValidatedSolutionRecipeComponent> {
    /*
     * Represents the component's name.
     */
    private String name;

    /*
     * Represents the component's type.
     */
    private String type;

    /*
     * Represents the component's required version.
     */
    private String requiredVersion;

    /*
     * Represents the component's install order.
     */
    private Long installOrder;

    /*
     * Represents the component's tags.
     */
    private List<String> tags;

    /*
     * Represents the component's payloads.
     */
    private List<ValidatedSolutionRecipeComponentPayload> payloads;

    /*
     * Represents the component's metadata.
     */
    private ValidatedSolutionRecipeComponentMetadata metadata;

    /**
     * Creates an instance of ValidatedSolutionRecipeComponent class.
     */
    public ValidatedSolutionRecipeComponent() {
    }

    /**
     * Get the name property: Represents the component's name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Represents the component's name.
     * 
     * @param name the name value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Represents the component's type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Represents the component's type.
     * 
     * @param type the type value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the requiredVersion property: Represents the component's required version.
     * 
     * @return the requiredVersion value.
     */
    public String requiredVersion() {
        return this.requiredVersion;
    }

    /**
     * Set the requiredVersion property: Represents the component's required version.
     * 
     * @param requiredVersion the requiredVersion value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withRequiredVersion(String requiredVersion) {
        this.requiredVersion = requiredVersion;
        return this;
    }

    /**
     * Get the installOrder property: Represents the component's install order.
     * 
     * @return the installOrder value.
     */
    public Long installOrder() {
        return this.installOrder;
    }

    /**
     * Set the installOrder property: Represents the component's install order.
     * 
     * @param installOrder the installOrder value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withInstallOrder(Long installOrder) {
        this.installOrder = installOrder;
        return this;
    }

    /**
     * Get the tags property: Represents the component's tags.
     * 
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Represents the component's tags.
     * 
     * @param tags the tags value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the payloads property: Represents the component's payloads.
     * 
     * @return the payloads value.
     */
    public List<ValidatedSolutionRecipeComponentPayload> payloads() {
        return this.payloads;
    }

    /**
     * Set the payloads property: Represents the component's payloads.
     * 
     * @param payloads the payloads value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withPayloads(List<ValidatedSolutionRecipeComponentPayload> payloads) {
        this.payloads = payloads;
        return this;
    }

    /**
     * Get the metadata property: Represents the component's metadata.
     * 
     * @return the metadata value.
     */
    public ValidatedSolutionRecipeComponentMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Represents the component's metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the ValidatedSolutionRecipeComponent object itself.
     */
    public ValidatedSolutionRecipeComponent withMetadata(ValidatedSolutionRecipeComponentMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model ValidatedSolutionRecipeComponent"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model ValidatedSolutionRecipeComponent"));
        }
        if (tags() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tags in model ValidatedSolutionRecipeComponent"));
        }
        if (payloads() != null) {
            payloads().forEach(e -> e.validate());
        }
        if (metadata() != null) {
            metadata().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeComponent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("requiredVersion", this.requiredVersion);
        jsonWriter.writeNumberField("installOrder", this.installOrder);
        jsonWriter.writeArrayField("payloads", this.payloads, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeComponent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeComponent.
     */
    public static ValidatedSolutionRecipeComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeComponent deserializedValidatedSolutionRecipeComponent
                = new ValidatedSolutionRecipeComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponent.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponent.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<String> tags = reader.readArray(reader1 -> reader1.getString());
                    deserializedValidatedSolutionRecipeComponent.tags = tags;
                } else if ("requiredVersion".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponent.requiredVersion = reader.getString();
                } else if ("installOrder".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponent.installOrder = reader.getNullable(JsonReader::getLong);
                } else if ("payloads".equals(fieldName)) {
                    List<ValidatedSolutionRecipeComponentPayload> payloads
                        = reader.readArray(reader1 -> ValidatedSolutionRecipeComponentPayload.fromJson(reader1));
                    deserializedValidatedSolutionRecipeComponent.payloads = payloads;
                } else if ("metadata".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponent.metadata
                        = ValidatedSolutionRecipeComponentMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeComponent;
        });
    }
}
