// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents contents of a validated solution recipe resource.
 */
@Fluent
public final class ValidatedSolutionRecipeContent implements JsonSerializable<ValidatedSolutionRecipeContent> {
    /*
     * Represents information about a validated solution recipe.
     */
    private ValidatedSolutionRecipeInfo info;

    /*
     * Represents capabilities available in a validated solution recipe.
     */
    private ValidatedSolutionRecipeCapabilities capabilities;

    /*
     * Represents components available in a validated solution recipe.
     */
    private List<ValidatedSolutionRecipeComponent> components;

    /**
     * Creates an instance of ValidatedSolutionRecipeContent class.
     */
    public ValidatedSolutionRecipeContent() {
    }

    /**
     * Get the info property: Represents information about a validated solution recipe.
     * 
     * @return the info value.
     */
    public ValidatedSolutionRecipeInfo info() {
        return this.info;
    }

    /**
     * Set the info property: Represents information about a validated solution recipe.
     * 
     * @param info the info value to set.
     * @return the ValidatedSolutionRecipeContent object itself.
     */
    public ValidatedSolutionRecipeContent withInfo(ValidatedSolutionRecipeInfo info) {
        this.info = info;
        return this;
    }

    /**
     * Get the capabilities property: Represents capabilities available in a validated solution recipe.
     * 
     * @return the capabilities value.
     */
    public ValidatedSolutionRecipeCapabilities capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: Represents capabilities available in a validated solution recipe.
     * 
     * @param capabilities the capabilities value to set.
     * @return the ValidatedSolutionRecipeContent object itself.
     */
    public ValidatedSolutionRecipeContent withCapabilities(ValidatedSolutionRecipeCapabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the components property: Represents components available in a validated solution recipe.
     * 
     * @return the components value.
     */
    public List<ValidatedSolutionRecipeComponent> components() {
        return this.components;
    }

    /**
     * Set the components property: Represents components available in a validated solution recipe.
     * 
     * @param components the components value to set.
     * @return the ValidatedSolutionRecipeContent object itself.
     */
    public ValidatedSolutionRecipeContent withComponents(List<ValidatedSolutionRecipeComponent> components) {
        this.components = components;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (info() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property info in model ValidatedSolutionRecipeContent"));
        } else {
            info().validate();
        }
        if (capabilities() != null) {
            capabilities().validate();
        }
        if (components() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property components in model ValidatedSolutionRecipeContent"));
        } else {
            components().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeContent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("info", this.info);
        jsonWriter.writeArrayField("components", this.components, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("capabilities", this.capabilities);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeContent.
     */
    public static ValidatedSolutionRecipeContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeContent deserializedValidatedSolutionRecipeContent
                = new ValidatedSolutionRecipeContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("info".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeContent.info = ValidatedSolutionRecipeInfo.fromJson(reader);
                } else if ("components".equals(fieldName)) {
                    List<ValidatedSolutionRecipeComponent> components
                        = reader.readArray(reader1 -> ValidatedSolutionRecipeComponent.fromJson(reader1));
                    deserializedValidatedSolutionRecipeContent.components = components;
                } else if ("capabilities".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeContent.capabilities
                        = ValidatedSolutionRecipeCapabilities.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeContent;
        });
    }
}
