// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.ValidatedSolutionRecipesClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.ValidatedSolutionRecipeInner;
import com.azure.resourcemanager.azurestackhci.models.ValidatedSolutionRecipe;
import com.azure.resourcemanager.azurestackhci.models.ValidatedSolutionRecipes;

public final class ValidatedSolutionRecipesImpl implements ValidatedSolutionRecipes {
    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipesImpl.class);

    private final ValidatedSolutionRecipesClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public ValidatedSolutionRecipesImpl(ValidatedSolutionRecipesClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ValidatedSolutionRecipe> listBySubscriptionLocationResource(String location) {
        PagedIterable<ValidatedSolutionRecipeInner> inner
            = this.serviceClient().listBySubscriptionLocationResource(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ValidatedSolutionRecipeImpl(inner1, this.manager()));
    }

    public PagedIterable<ValidatedSolutionRecipe> listBySubscriptionLocationResource(String location, Context context) {
        PagedIterable<ValidatedSolutionRecipeInner> inner
            = this.serviceClient().listBySubscriptionLocationResource(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ValidatedSolutionRecipeImpl(inner1, this.manager()));
    }

    public Response<ValidatedSolutionRecipe> getWithResponse(String location, String validatedSolutionRecipeName,
        Context context) {
        Response<ValidatedSolutionRecipeInner> inner
            = this.serviceClient().getWithResponse(location, validatedSolutionRecipeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ValidatedSolutionRecipeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ValidatedSolutionRecipe get(String location, String validatedSolutionRecipeName) {
        ValidatedSolutionRecipeInner inner = this.serviceClient().get(location, validatedSolutionRecipeName);
        if (inner != null) {
            return new ValidatedSolutionRecipeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ValidatedSolutionRecipesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }
}
