// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents capabilities available in a validated solution recipe.
 */
@Fluent
public final class ValidatedSolutionRecipeCapabilities
    implements JsonSerializable<ValidatedSolutionRecipeCapabilities> {
    /*
     * Represents the cluster capabilities.
     */
    private List<ValidatedSolutionRecipeCapability> clusterCapabilities;

    /*
     * Represents the node capabilities.
     */
    private List<ValidatedSolutionRecipeCapability> nodeCapabilities;

    /**
     * Creates an instance of ValidatedSolutionRecipeCapabilities class.
     */
    public ValidatedSolutionRecipeCapabilities() {
    }

    /**
     * Get the clusterCapabilities property: Represents the cluster capabilities.
     * 
     * @return the clusterCapabilities value.
     */
    public List<ValidatedSolutionRecipeCapability> clusterCapabilities() {
        return this.clusterCapabilities;
    }

    /**
     * Set the clusterCapabilities property: Represents the cluster capabilities.
     * 
     * @param clusterCapabilities the clusterCapabilities value to set.
     * @return the ValidatedSolutionRecipeCapabilities object itself.
     */
    public ValidatedSolutionRecipeCapabilities
        withClusterCapabilities(List<ValidatedSolutionRecipeCapability> clusterCapabilities) {
        this.clusterCapabilities = clusterCapabilities;
        return this;
    }

    /**
     * Get the nodeCapabilities property: Represents the node capabilities.
     * 
     * @return the nodeCapabilities value.
     */
    public List<ValidatedSolutionRecipeCapability> nodeCapabilities() {
        return this.nodeCapabilities;
    }

    /**
     * Set the nodeCapabilities property: Represents the node capabilities.
     * 
     * @param nodeCapabilities the nodeCapabilities value to set.
     * @return the ValidatedSolutionRecipeCapabilities object itself.
     */
    public ValidatedSolutionRecipeCapabilities
        withNodeCapabilities(List<ValidatedSolutionRecipeCapability> nodeCapabilities) {
        this.nodeCapabilities = nodeCapabilities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterCapabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterCapabilities in model ValidatedSolutionRecipeCapabilities"));
        } else {
            clusterCapabilities().forEach(e -> e.validate());
        }
        if (nodeCapabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property nodeCapabilities in model ValidatedSolutionRecipeCapabilities"));
        } else {
            nodeCapabilities().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeCapabilities.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("clusterCapabilities", this.clusterCapabilities,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nodeCapabilities", this.nodeCapabilities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeCapabilities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeCapabilities if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeCapabilities.
     */
    public static ValidatedSolutionRecipeCapabilities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeCapabilities deserializedValidatedSolutionRecipeCapabilities
                = new ValidatedSolutionRecipeCapabilities();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterCapabilities".equals(fieldName)) {
                    List<ValidatedSolutionRecipeCapability> clusterCapabilities
                        = reader.readArray(reader1 -> ValidatedSolutionRecipeCapability.fromJson(reader1));
                    deserializedValidatedSolutionRecipeCapabilities.clusterCapabilities = clusterCapabilities;
                } else if ("nodeCapabilities".equals(fieldName)) {
                    List<ValidatedSolutionRecipeCapability> nodeCapabilities
                        = reader.readArray(reader1 -> ValidatedSolutionRecipeCapability.fromJson(reader1));
                    deserializedValidatedSolutionRecipeCapabilities.nodeCapabilities = nodeCapabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeCapabilities;
        });
    }
}
