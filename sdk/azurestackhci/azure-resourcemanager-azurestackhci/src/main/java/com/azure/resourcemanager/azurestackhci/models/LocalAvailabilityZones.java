// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Local Availability Zone information for HCI cluster.
 */
@Fluent
public final class LocalAvailabilityZones implements JsonSerializable<LocalAvailabilityZones> {
    /*
     * Local Availability Zone name for HCI cluster
     */
    private String localAvailabilityZoneName;

    /*
     * Nodes belonging to a particular zone
     */
    private List<String> nodes;

    /**
     * Creates an instance of LocalAvailabilityZones class.
     */
    public LocalAvailabilityZones() {
    }

    /**
     * Get the localAvailabilityZoneName property: Local Availability Zone name for HCI cluster.
     * 
     * @return the localAvailabilityZoneName value.
     */
    public String localAvailabilityZoneName() {
        return this.localAvailabilityZoneName;
    }

    /**
     * Set the localAvailabilityZoneName property: Local Availability Zone name for HCI cluster.
     * 
     * @param localAvailabilityZoneName the localAvailabilityZoneName value to set.
     * @return the LocalAvailabilityZones object itself.
     */
    public LocalAvailabilityZones withLocalAvailabilityZoneName(String localAvailabilityZoneName) {
        this.localAvailabilityZoneName = localAvailabilityZoneName;
        return this;
    }

    /**
     * Get the nodes property: Nodes belonging to a particular zone.
     * 
     * @return the nodes value.
     */
    public List<String> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: Nodes belonging to a particular zone.
     * 
     * @param nodes the nodes value to set.
     * @return the LocalAvailabilityZones object itself.
     */
    public LocalAvailabilityZones withNodes(List<String> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("localAvailabilityZoneName", this.localAvailabilityZoneName);
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalAvailabilityZones from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalAvailabilityZones if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LocalAvailabilityZones.
     */
    public static LocalAvailabilityZones fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalAvailabilityZones deserializedLocalAvailabilityZones = new LocalAvailabilityZones();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("localAvailabilityZoneName".equals(fieldName)) {
                    deserializedLocalAvailabilityZones.localAvailabilityZoneName = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<String> nodes = reader.readArray(reader1 -> reader1.getString());
                    deserializedLocalAvailabilityZones.nodes = nodes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalAvailabilityZones;
        });
    }
}
