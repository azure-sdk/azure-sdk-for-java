// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents properties of a validated solution recipe resource.
 */
@Fluent
public final class ValidatedSolutionRecipeProperties implements JsonSerializable<ValidatedSolutionRecipeProperties> {
    /*
     * Represents contents of a validated solution recipe.
     */
    private ValidatedSolutionRecipeContent recipeContent;

    /*
     * Represents the signature of the recipe, to be used for ensuring its integrity.
     */
    private String signature;

    /**
     * Creates an instance of ValidatedSolutionRecipeProperties class.
     */
    public ValidatedSolutionRecipeProperties() {
    }

    /**
     * Get the recipeContent property: Represents contents of a validated solution recipe.
     * 
     * @return the recipeContent value.
     */
    public ValidatedSolutionRecipeContent recipeContent() {
        return this.recipeContent;
    }

    /**
     * Set the recipeContent property: Represents contents of a validated solution recipe.
     * 
     * @param recipeContent the recipeContent value to set.
     * @return the ValidatedSolutionRecipeProperties object itself.
     */
    public ValidatedSolutionRecipeProperties withRecipeContent(ValidatedSolutionRecipeContent recipeContent) {
        this.recipeContent = recipeContent;
        return this;
    }

    /**
     * Get the signature property: Represents the signature of the recipe, to be used for ensuring its integrity.
     * 
     * @return the signature value.
     */
    public String signature() {
        return this.signature;
    }

    /**
     * Set the signature property: Represents the signature of the recipe, to be used for ensuring its integrity.
     * 
     * @param signature the signature value to set.
     * @return the ValidatedSolutionRecipeProperties object itself.
     */
    public ValidatedSolutionRecipeProperties withSignature(String signature) {
        this.signature = signature;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recipeContent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recipeContent in model ValidatedSolutionRecipeProperties"));
        } else {
            recipeContent().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidatedSolutionRecipeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recipeContent", this.recipeContent);
        jsonWriter.writeStringField("signature", this.signature);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeProperties.
     */
    public static ValidatedSolutionRecipeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeProperties deserializedValidatedSolutionRecipeProperties
                = new ValidatedSolutionRecipeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recipeContent".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeProperties.recipeContent
                        = ValidatedSolutionRecipeContent.fromJson(reader);
                } else if ("signature".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeProperties.signature = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeProperties;
        });
    }
}
