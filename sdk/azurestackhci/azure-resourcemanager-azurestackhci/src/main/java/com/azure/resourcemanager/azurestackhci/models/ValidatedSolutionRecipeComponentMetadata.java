// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents metadata associated with a component available in a validated solution recipe.
 */
@Fluent
public final class ValidatedSolutionRecipeComponentMetadata
    implements JsonSerializable<ValidatedSolutionRecipeComponentMetadata> {
    /*
     * Represents the type of extension.
     */
    private String extensionType;

    /*
     * Represents the publisher of the extension.
     */
    private String publisher;

    /*
     * Indicates whether automatic upgrades of the extension are enabled.
     */
    private Boolean enableAutomaticUpgrade;

    /*
     * Indicates whether the LCM (Lifecycle Management) update of the extension is enabled.
     */
    private Boolean lcmUpdate;

    /*
     * Specifies the catalog to which the extension belongs.
     */
    private String catalog;

    /*
     * Specifies the ring to which the extension belongs, internally used by component.
     */
    private String ring;

    /*
     * Specifies the release train to which given component belongs.
     */
    private String releaseTrain;

    /*
     * Specifies the link associated with the extension.
     */
    private String link;

    /*
     * Specifies the name of the extension.
     */
    private String name;

    /*
     * Specifies the expected hash of the extension.
     */
    private String expectedHash;

    /*
     * Specifies the preview source of the extension.
     */
    private String previewSource;

    /**
     * Creates an instance of ValidatedSolutionRecipeComponentMetadata class.
     */
    public ValidatedSolutionRecipeComponentMetadata() {
    }

    /**
     * Get the extensionType property: Represents the type of extension.
     * 
     * @return the extensionType value.
     */
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Set the extensionType property: Represents the type of extension.
     * 
     * @param extensionType the extensionType value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withExtensionType(String extensionType) {
        this.extensionType = extensionType;
        return this;
    }

    /**
     * Get the publisher property: Represents the publisher of the extension.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Represents the publisher of the extension.
     * 
     * @param publisher the publisher value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the enableAutomaticUpgrade property: Indicates whether automatic upgrades of the extension are enabled.
     * 
     * @return the enableAutomaticUpgrade value.
     */
    public Boolean enableAutomaticUpgrade() {
        return this.enableAutomaticUpgrade;
    }

    /**
     * Set the enableAutomaticUpgrade property: Indicates whether automatic upgrades of the extension are enabled.
     * 
     * @param enableAutomaticUpgrade the enableAutomaticUpgrade value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withEnableAutomaticUpgrade(Boolean enableAutomaticUpgrade) {
        this.enableAutomaticUpgrade = enableAutomaticUpgrade;
        return this;
    }

    /**
     * Get the lcmUpdate property: Indicates whether the LCM (Lifecycle Management) update of the extension is enabled.
     * 
     * @return the lcmUpdate value.
     */
    public Boolean lcmUpdate() {
        return this.lcmUpdate;
    }

    /**
     * Set the lcmUpdate property: Indicates whether the LCM (Lifecycle Management) update of the extension is enabled.
     * 
     * @param lcmUpdate the lcmUpdate value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withLcmUpdate(Boolean lcmUpdate) {
        this.lcmUpdate = lcmUpdate;
        return this;
    }

    /**
     * Get the catalog property: Specifies the catalog to which the extension belongs.
     * 
     * @return the catalog value.
     */
    public String catalog() {
        return this.catalog;
    }

    /**
     * Set the catalog property: Specifies the catalog to which the extension belongs.
     * 
     * @param catalog the catalog value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withCatalog(String catalog) {
        this.catalog = catalog;
        return this;
    }

    /**
     * Get the ring property: Specifies the ring to which the extension belongs, internally used by component.
     * 
     * @return the ring value.
     */
    public String ring() {
        return this.ring;
    }

    /**
     * Set the ring property: Specifies the ring to which the extension belongs, internally used by component.
     * 
     * @param ring the ring value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withRing(String ring) {
        this.ring = ring;
        return this;
    }

    /**
     * Get the releaseTrain property: Specifies the release train to which given component belongs.
     * 
     * @return the releaseTrain value.
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set the releaseTrain property: Specifies the release train to which given component belongs.
     * 
     * @param releaseTrain the releaseTrain value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get the link property: Specifies the link associated with the extension.
     * 
     * @return the link value.
     */
    public String link() {
        return this.link;
    }

    /**
     * Set the link property: Specifies the link associated with the extension.
     * 
     * @param link the link value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withLink(String link) {
        this.link = link;
        return this;
    }

    /**
     * Get the name property: Specifies the name of the extension.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Specifies the name of the extension.
     * 
     * @param name the name value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the expectedHash property: Specifies the expected hash of the extension.
     * 
     * @return the expectedHash value.
     */
    public String expectedHash() {
        return this.expectedHash;
    }

    /**
     * Set the expectedHash property: Specifies the expected hash of the extension.
     * 
     * @param expectedHash the expectedHash value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withExpectedHash(String expectedHash) {
        this.expectedHash = expectedHash;
        return this;
    }

    /**
     * Get the previewSource property: Specifies the preview source of the extension.
     * 
     * @return the previewSource value.
     */
    public String previewSource() {
        return this.previewSource;
    }

    /**
     * Set the previewSource property: Specifies the preview source of the extension.
     * 
     * @param previewSource the previewSource value to set.
     * @return the ValidatedSolutionRecipeComponentMetadata object itself.
     */
    public ValidatedSolutionRecipeComponentMetadata withPreviewSource(String previewSource) {
        this.previewSource = previewSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("extensionType", this.extensionType);
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeBooleanField("enableAutomaticUpgrade", this.enableAutomaticUpgrade);
        jsonWriter.writeBooleanField("lcmUpdate", this.lcmUpdate);
        jsonWriter.writeStringField("catalog", this.catalog);
        jsonWriter.writeStringField("ring", this.ring);
        jsonWriter.writeStringField("releaseTrain", this.releaseTrain);
        jsonWriter.writeStringField("link", this.link);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("expectedHash", this.expectedHash);
        jsonWriter.writeStringField("previewSource", this.previewSource);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidatedSolutionRecipeComponentMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidatedSolutionRecipeComponentMetadata if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidatedSolutionRecipeComponentMetadata.
     */
    public static ValidatedSolutionRecipeComponentMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidatedSolutionRecipeComponentMetadata deserializedValidatedSolutionRecipeComponentMetadata
                = new ValidatedSolutionRecipeComponentMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("extensionType".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.extensionType = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.publisher = reader.getString();
                } else if ("enableAutomaticUpgrade".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.enableAutomaticUpgrade
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lcmUpdate".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.lcmUpdate
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("catalog".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.catalog = reader.getString();
                } else if ("ring".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.ring = reader.getString();
                } else if ("releaseTrain".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.releaseTrain = reader.getString();
                } else if ("link".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.link = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.name = reader.getString();
                } else if ("expectedHash".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.expectedHash = reader.getString();
                } else if ("previewSource".equals(fieldName)) {
                    deserializedValidatedSolutionRecipeComponentMetadata.previewSource = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidatedSolutionRecipeComponentMetadata;
        });
    }
}
