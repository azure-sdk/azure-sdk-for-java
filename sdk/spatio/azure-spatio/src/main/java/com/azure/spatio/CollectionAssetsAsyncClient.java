// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.CollectionAssetsImpl;
import com.azure.spatio.implementation.MultipartFormDataHelper;
import com.azure.spatio.implementation.models.CreateOrReplaceRequest;
import com.azure.spatio.implementation.models.CreateRequest;
import com.azure.spatio.models.FileDetails;
import com.azure.spatio.models.GeoCatalogCollection;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class CollectionAssetsAsyncClient {
    @Generated
    private final CollectionAssetsImpl serviceClient;

    /**
     * Initializes an instance of CollectionAssetsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CollectionAssetsAsyncClient(CollectionAssetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createWithResponse(String collectionId, BinaryData createRequest,
        RequestOptions requestOptions) {
        // Operation 'create' is of content-type 'multipart/form-data'. Protocol API is not usable and hence not
        // generated.
        return this.serviceClient.createWithResponseAsync(collectionId, createRequest, requestOptions);
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param createOrReplaceRequest The createOrReplaceRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createOrReplaceWithResponse(String collectionId, String assetId,
        BinaryData createOrReplaceRequest, RequestOptions requestOptions) {
        // Operation 'createOrReplace' is of content-type 'multipart/form-data'. Protocol API is not usable and hence
        // not generated.
        return this.serviceClient.createOrReplaceWithResponseAsync(collectionId, assetId, createOrReplaceRequest,
            requestOptions);
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String collectionId, String assetId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(collectionId, assetId, requestOptions);
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * 
     * @param collectionId STAC Collection ID.
     * @param file TODO: add description for file.
     * @param data TODO: add description for data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> create(String collectionId, FileDetails file, String data) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest createRequestObj = new CreateRequest(file, data);
        BinaryData createRequest = new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", createRequestObj.getFile().getContent(),
                createRequestObj.getFile().getContentType(), createRequestObj.getFile().getFilename())
            .serializeTextField("data", createRequestObj.getData())
            .end()
            .getRequestBody();
        return createWithResponse(collectionId, createRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param data TODO: add description for data.
     * @param file TODO: add description for file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> createOrReplace(String collectionId, String assetId, String data,
        FileDetails file) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateOrReplaceRequest createOrReplaceRequestObj = new CreateOrReplaceRequest(data).setFile(file);
        BinaryData createOrReplaceRequest = new MultipartFormDataHelper(requestOptions).serializeFileField("file",
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getContent(),
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getContentType(),
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getFilename())
            .serializeTextField("data", createOrReplaceRequestObj.getData())
            .end()
            .getRequestBody();
        return createOrReplaceWithResponse(collectionId, assetId, createOrReplaceRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param data TODO: add description for data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> createOrReplace(String collectionId, String assetId, String data) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateOrReplaceRequest createOrReplaceRequestObj = new CreateOrReplaceRequest(data);
        BinaryData createOrReplaceRequest = new MultipartFormDataHelper(requestOptions).serializeFileField("file",
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getContent(),
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getContentType(),
            createOrReplaceRequestObj.getFile() == null ? null : createOrReplaceRequestObj.getFile().getFilename())
            .serializeTextField("data", createOrReplaceRequestObj.getData())
            .end()
            .getRequestBody();
        return createOrReplaceWithResponse(collectionId, assetId, createOrReplaceRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> delete(String collectionId, String assetId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(collectionId, assetId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }
}
