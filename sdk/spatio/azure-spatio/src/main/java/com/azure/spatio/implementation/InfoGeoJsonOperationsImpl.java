// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in InfoGeoJsonOperations.
 */
public final class InfoGeoJsonOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InfoGeoJsonOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of InfoGeoJsonOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    InfoGeoJsonOperationsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service = RestProxy.create(InfoGeoJsonOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientInfoGeoJsonOperations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface InfoGeoJsonOperationsService {
        @Get("/api/collections/{collectionId}/items/{itemId}/info.geojson")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/api/collections/{collectionId}/items/{itemId}/info.geojson")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Info Geojson.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature) (Required)
     *     geometry (Required): {
     *         coordinates (Required): [
     *              (Required)[
     *                 String (Required)
     *             ]
     *         ]
     *         type: String(Polygon) (Required)
     *         bbox: String (Optional)
     *     }
     *     properties (Required): {
     *         String (Required): {
     *             bounds (Required): [
     *                 String (Required)
     *             ]
     *             minzoom: int (Required)
     *             maxzoom: int (Required)
     *             band_metadata (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             band_descriptions (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             dtype: String (Required)
     *             nodata_type: String(Alpha/Mask/Internal/Nodata/None) (Required)
     *             colorinterp (Optional): [
     *                 String (Optional)
     *             ]
     *             scale: Double (Optional)
     *             offset: Double (Optional)
     *             colormap (Optional): {
     *                 String (Required): [
     *                     int (Required)
     *                 ]
     *             }
     *         }
     *     }
     *     id: String (Optional)
     *     bbox: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Info Geojson.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature) (Required)
     *     geometry (Required): {
     *         coordinates (Required): [
     *              (Required)[
     *                 String (Required)
     *             ]
     *         ]
     *         type: String(Polygon) (Required)
     *         bbox: String (Optional)
     *     }
     *     properties (Required): {
     *         String (Required): {
     *             bounds (Required): [
     *                 String (Required)
     *             ]
     *             minzoom: int (Required)
     *             maxzoom: int (Required)
     *             band_metadata (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             band_descriptions (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             dtype: String (Required)
     *             nodata_type: String(Alpha/Mask/Internal/Nodata/None) (Required)
     *             colorinterp (Optional): [
     *                 String (Optional)
     *             ]
     *             scale: Double (Optional)
     *             offset: Double (Optional)
     *             colormap (Optional): {
     *                 String (Required): [
     *                     int (Required)
     *                 ]
     *             }
     *         }
     *     }
     *     id: String (Optional)
     *     bbox: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, accept, requestOptions, Context.NONE);
    }
}
