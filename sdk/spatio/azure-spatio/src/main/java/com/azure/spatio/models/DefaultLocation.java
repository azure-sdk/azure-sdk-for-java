// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a default location for showcasing a collection.TODO: add description for DefaultLocation.
 */
@Immutable
public final class DefaultLocation implements JsonSerializable<DefaultLocation> {
    /*
     * Zoom level at which to center the map.TODO: add description for zoom
     */
    @Generated
    private final int zoom;

    /*
     * Coordinates at which to center the map, [latitude, longitude]TODO: add description for coordinates
     */
    @Generated
    private final List<Double> coordinates;

    /**
     * Creates an instance of DefaultLocation class.
     * 
     * @param zoom the zoom value to set.
     * @param coordinates the coordinates value to set.
     */
    @Generated
    public DefaultLocation(int zoom, List<Double> coordinates) {
        this.zoom = zoom;
        this.coordinates = coordinates;
    }

    /**
     * Get the zoom property: Zoom level at which to center the map.TODO: add description for zoom.
     * 
     * @return the zoom value.
     */
    @Generated
    public int getZoom() {
        return this.zoom;
    }

    /**
     * Get the coordinates property: Coordinates at which to center the map, [latitude, longitude]TODO: add description
     * for coordinates.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<Double> getCoordinates() {
        return this.coordinates;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("zoom", this.zoom);
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DefaultLocation.
     */
    @Generated
    public static DefaultLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int zoom = 0;
            List<Double> coordinates = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("zoom".equals(fieldName)) {
                    zoom = reader.getInt();
                } else if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(reader1 -> reader1.getDouble());
                } else {
                    reader.skipChildren();
                }
            }
            return new DefaultLocation(zoom, coordinates);
        });
    }
}
