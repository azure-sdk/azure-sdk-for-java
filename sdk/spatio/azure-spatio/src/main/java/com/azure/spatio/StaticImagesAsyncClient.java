// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.StaticImagesImpl;
import com.azure.spatio.models.ImageRequest;
import com.azure.spatio.models.ImageResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class StaticImagesAsyncClient {
    @Generated
    private final StaticImagesImpl serviceClient;

    /**
     * Initializes an instance of StaticImagesAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    StaticImagesAsyncClient(StaticImagesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Static Image
     * 
     * Create a new image export.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     cql (Required): {
     *         String: String (Required)
     *     }
     *     geometry (Optional): {
     *         String: String (Required)
     *     }
     *     render_params: String (Required)
     *     cols: int (Required)
     *     rows: int (Required)
     *     format: String(png/cog) (Optional)
     *     showBranding: Boolean (Optional)
     *     mask: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     url: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return imageResponseTODO: add description for ImageResponse along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Get Static Image
     * 
     * Fetch an existing image export by ID.
     * 
     * @param id Image export ID.
     * @param collectionId STAC Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return static Image
     * 
     * Fetch an existing image export by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getWithResponse(String id, String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(id, collectionId, requestOptions);
    }

    /**
     * Create Static Image
     * 
     * Create a new image export.
     * 
     * @param collectionId STAC Collection ID.
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return imageResponseTODO: add description for ImageResponse on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageResponse> create(String collectionId, ImageRequest body) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(collectionId, BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ImageResponse.class));
    }

    /**
     * Get Static Image
     * 
     * Fetch an existing image export by ID.
     * 
     * @param id Image export ID.
     * @param collectionId STAC Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return static Image
     * 
     * Fetch an existing image export by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get(String id, String collectionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(id, collectionId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
