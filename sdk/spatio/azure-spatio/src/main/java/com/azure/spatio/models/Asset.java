// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#asset-objectTODO: add description for
 * Asset.
 */
@Immutable
public final class Asset implements JsonSerializable<Asset> {
    /*
     * TitleTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * DescriptionTODO: add description for description
     */
    @Generated
    private String description;

    /*
     * Start DatetimeTODO: add description for startDatetime
     */
    @Generated
    private OffsetDateTime startDatetime;

    /*
     * End DatetimeTODO: add description for endDatetime
     */
    @Generated
    private OffsetDateTime endDatetime;

    /*
     * CreatedTODO: add description for created
     */
    @Generated
    private OffsetDateTime created;

    /*
     * UpdatedTODO: add description for updated
     */
    @Generated
    private OffsetDateTime updated;

    /*
     * PlatformTODO: add description for platform
     */
    @Generated
    private String platform;

    /*
     * InstrumentsTODO: add description for instruments
     */
    @Generated
    private List<String> instruments;

    /*
     * ConstellationTODO: add description for constellation
     */
    @Generated
    private String constellation;

    /*
     * MissionTODO: add description for mission
     */
    @Generated
    private String mission;

    /*
     * ProvidersTODO: add description for providers
     */
    @Generated
    private List<Provider> providers;

    /*
     * GsdTODO: add description for gsd
     */
    @Generated
    private Double gsd;

    /*
     * HrefTODO: add description for href
     */
    @Generated
    private final String href;

    /*
     * TypeTODO: add description for type
     */
    @Generated
    private String type;

    /*
     * RolesTODO: add description for roles
     */
    @Generated
    private List<String> roles;

    /**
     * Creates an instance of Asset class.
     * 
     * @param href the href value to set.
     */
    @Generated
    private Asset(String href) {
        this.href = href;
    }

    /**
     * Get the title property: TitleTODO: add description for title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: DescriptionTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the startDatetime property: Start DatetimeTODO: add description for startDatetime.
     * 
     * @return the startDatetime value.
     */
    @Generated
    public OffsetDateTime getStartDatetime() {
        return this.startDatetime;
    }

    /**
     * Get the endDatetime property: End DatetimeTODO: add description for endDatetime.
     * 
     * @return the endDatetime value.
     */
    @Generated
    public OffsetDateTime getEndDatetime() {
        return this.endDatetime;
    }

    /**
     * Get the created property: CreatedTODO: add description for created.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the updated property: UpdatedTODO: add description for updated.
     * 
     * @return the updated value.
     */
    @Generated
    public OffsetDateTime getUpdated() {
        return this.updated;
    }

    /**
     * Get the platform property: PlatformTODO: add description for platform.
     * 
     * @return the platform value.
     */
    @Generated
    public String getPlatform() {
        return this.platform;
    }

    /**
     * Get the instruments property: InstrumentsTODO: add description for instruments.
     * 
     * @return the instruments value.
     */
    @Generated
    public List<String> getInstruments() {
        return this.instruments;
    }

    /**
     * Get the constellation property: ConstellationTODO: add description for constellation.
     * 
     * @return the constellation value.
     */
    @Generated
    public String getConstellation() {
        return this.constellation;
    }

    /**
     * Get the mission property: MissionTODO: add description for mission.
     * 
     * @return the mission value.
     */
    @Generated
    public String getMission() {
        return this.mission;
    }

    /**
     * Get the providers property: ProvidersTODO: add description for providers.
     * 
     * @return the providers value.
     */
    @Generated
    public List<Provider> getProviders() {
        return this.providers;
    }

    /**
     * Get the gsd property: GsdTODO: add description for gsd.
     * 
     * @return the gsd value.
     */
    @Generated
    public Double getGsd() {
        return this.gsd;
    }

    /**
     * Get the href property: HrefTODO: add description for href.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Get the type property: TypeTODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the roles property: RolesTODO: add description for roles.
     * 
     * @return the roles value.
     */
    @Generated
    public List<String> getRoles() {
        return this.roles;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("href", this.href);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("start_datetime",
            this.startDatetime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDatetime));
        jsonWriter.writeStringField("end_datetime",
            this.endDatetime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDatetime));
        jsonWriter.writeStringField("created",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        jsonWriter.writeStringField("updated",
            this.updated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updated));
        jsonWriter.writeStringField("platform", this.platform);
        jsonWriter.writeArrayField("instruments", this.instruments, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("constellation", this.constellation);
        jsonWriter.writeStringField("mission", this.mission);
        jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("gsd", this.gsd);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Asset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Asset if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Asset.
     */
    @Generated
    public static Asset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String href = null;
            String title = null;
            String description = null;
            OffsetDateTime startDatetime = null;
            OffsetDateTime endDatetime = null;
            OffsetDateTime created = null;
            OffsetDateTime updated = null;
            String platform = null;
            List<String> instruments = null;
            String constellation = null;
            String mission = null;
            List<Provider> providers = null;
            Double gsd = null;
            String type = null;
            List<String> roles = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("href".equals(fieldName)) {
                    href = reader.getString();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("start_datetime".equals(fieldName)) {
                    startDatetime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("end_datetime".equals(fieldName)) {
                    endDatetime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("created".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updated".equals(fieldName)) {
                    updated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("platform".equals(fieldName)) {
                    platform = reader.getString();
                } else if ("instruments".equals(fieldName)) {
                    instruments = reader.readArray(reader1 -> reader1.getString());
                } else if ("constellation".equals(fieldName)) {
                    constellation = reader.getString();
                } else if ("mission".equals(fieldName)) {
                    mission = reader.getString();
                } else if ("providers".equals(fieldName)) {
                    providers = reader.readArray(reader1 -> Provider.fromJson(reader1));
                } else if ("gsd".equals(fieldName)) {
                    gsd = reader.getNullable(JsonReader::getDouble);
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    roles = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Asset deserializedAsset = new Asset(href);
            deserializedAsset.title = title;
            deserializedAsset.description = description;
            deserializedAsset.startDatetime = startDatetime;
            deserializedAsset.endDatetime = endDatetime;
            deserializedAsset.created = created;
            deserializedAsset.updated = updated;
            deserializedAsset.platform = platform;
            deserializedAsset.instruments = instruments;
            deserializedAsset.constellation = constellation;
            deserializedAsset.mission = mission;
            deserializedAsset.providers = providers;
            deserializedAsset.gsd = gsd;
            deserializedAsset.type = type;
            deserializedAsset.roles = roles;

            return deserializedAsset;
        });
    }
}
