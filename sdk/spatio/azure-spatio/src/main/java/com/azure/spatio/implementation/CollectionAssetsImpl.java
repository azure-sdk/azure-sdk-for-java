// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CollectionAssets.
 */
public final class CollectionAssetsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CollectionAssetsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of CollectionAssetsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CollectionAssetsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(CollectionAssetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientCollectionAssets to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface CollectionAssetsService {
        // @Multipart not supported by RestProxy
        @Post("/api/collections/{collectionId}/assets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData createRequest, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/api/collections/{collectionId}/assets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData createRequest, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Put("/api/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData createOrReplaceRequest,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Put("/api/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData createOrReplaceRequest,
            RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/api/collections/{collectionId}/assets/{assetId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("assetId") String assetId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(String collectionId, BinaryData createRequest,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.create(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, contentType, accept, createRequest, requestOptions, context));
    }

    /**
     * Create Collection Asset
     * 
     * Create a new asset in the Collection metadata and write the associated
     * file to managed storage.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to write, without a valid href to the asset.
     * file: The file to write.
     * collection_id: The ID of the collection to write the asset to.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the newly created asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String collectionId, BinaryData createRequest,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            contentType, accept, createRequest, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param createOrReplaceRequest The createOrReplaceRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponseAsync(String collectionId, String assetId,
        BinaryData createOrReplaceRequest, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, assetId, contentType, accept, createOrReplaceRequest, requestOptions, context));
    }

    /**
     * Update Collection Asset
     * 
     * Update an existing asset in a given collection.
     * 
     * Args:
     * request: The incoming request.
     * asset: The Asset object to update.
     * file: The file to update (optional).
     * collection_id: The ID of the collection to update the asset in.
     * asset_id: The ID of the asset to update.
     * content_type: The content type of the request.
     * 
     * Returns:
     * A Response object containing the updated asset.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param createOrReplaceRequest The createOrReplaceRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String collectionId, String assetId,
        BinaryData createOrReplaceRequest, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createOrReplaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, assetId, contentType, accept, createOrReplaceRequest, requestOptions, Context.NONE);
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponseAsync(String collectionId, String assetId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, assetId, accept, requestOptions, context));
    }

    /**
     * Delete Collection Asset
     * 
     * Delete an asset from a given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to delete the asset from.
     * asset_id: The ID of the asset to delete.
     * 
     * Returns:
     * A Response object indicating the success of the deletion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection ID.
     * @param assetId STAC Asset ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String collectionId, String assetId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            assetId, accept, requestOptions, Context.NONE);
    }
}
