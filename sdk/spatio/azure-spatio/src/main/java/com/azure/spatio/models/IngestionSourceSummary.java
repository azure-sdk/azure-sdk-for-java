// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * TODO: add description for IngestionSourceSummary.
 */
@Immutable
public final class IngestionSourceSummary implements JsonSerializable<IngestionSourceSummary> {
    /*
     * Ingestion source id
     */
    @Generated
    private final String id;

    /*
     * Ingestion source type
     */
    @Generated
    private final IngestionSourceType sourceType;

    /*
     * Created time in UTC format
     */
    @Generated
    private final OffsetDateTime created;

    /*
     * Managed identity connection information
     */
    @Generated
    private ConnectionInfo connectionInfo;

    /**
     * Creates an instance of IngestionSourceSummary class.
     * 
     * @param id the id value to set.
     * @param sourceType the sourceType value to set.
     * @param created the created value to set.
     */
    @Generated
    private IngestionSourceSummary(String id, IngestionSourceType sourceType, OffsetDateTime created) {
        this.id = id;
        this.sourceType = sourceType;
        this.created = created;
    }

    /**
     * Get the id property: Ingestion source id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the sourceType property: Ingestion source type.
     * 
     * @return the sourceType value.
     */
    @Generated
    public IngestionSourceType getSourceType() {
        return this.sourceType;
    }

    /**
     * Get the created property: Created time in UTC format.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the connectionInfo property: Managed identity connection information.
     * 
     * @return the connectionInfo value.
     */
    @Generated
    public ConnectionInfo getConnectionInfo() {
        return this.connectionInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeStringField("created",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionSourceSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionSourceSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionSourceSummary.
     */
    @Generated
    public static IngestionSourceSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            IngestionSourceType sourceType = null;
            OffsetDateTime created = null;
            ConnectionInfo connectionInfo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("sourceType".equals(fieldName)) {
                    sourceType = IngestionSourceType.fromString(reader.getString());
                } else if ("created".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("connectionInfo".equals(fieldName)) {
                    connectionInfo = ConnectionInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            IngestionSourceSummary deserializedIngestionSourceSummary
                = new IngestionSourceSummary(id, sourceType, created);
            deserializedIngestionSourceSummary.connectionInfo = connectionInfo;

            return deserializedIngestionSourceSummary;
        });
    }
}
