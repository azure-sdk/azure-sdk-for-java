// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in IngestionsRuns.
 */
public final class IngestionsRunsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IngestionsRunsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of IngestionsRunsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    IngestionsRunsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(IngestionsRunsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientIngestionsRuns to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface IngestionsRunsService {
        @Get("/api/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/ingestions/{ingestionId}/runs/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/ingestions/{ingestionId}/runs/{runId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @PathParam("runId") String runId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/api/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/api/collections/{collectionId}/ingestions/{ingestionId}/runs")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("ingestionId") String ingestionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         runId: String (Required)
     *         creationTime: OffsetDateTime (Required)
     *         sourceCatalogUrl: String (Required)
     *         skipExistingItems: boolean (Required)
     *         keepOriginalAssets: boolean (Required)
     *         operation (Required): {
     *             operationId: String (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             creationTime: OffsetDateTime (Required)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             totalItems: long (Required)
     *             totalPendingItems: long (Required)
     *             totalSuccessfulItems: long (Required)
     *             totalFailedItems: long (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAll(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         runId: String (Required)
     *         creationTime: OffsetDateTime (Required)
     *         sourceCatalogUrl: String (Required)
     *         skipExistingItems: boolean (Required)
     *         keepOriginalAssets: boolean (Required)
     *         operation (Required): {
     *             operationId: String (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             creationTime: OffsetDateTime (Required)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             totalItems: long (Required)
     *             totalPendingItems: long (Required)
     *             totalSuccessfulItems: long (Required)
     *             totalFailedItems: long (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, ingestionId, runId, accept, requestOptions, context));
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            ingestionId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog ingestion run along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, ingestionId, accept, requestOptions, context));
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog ingestion run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            ingestionId, accept, requestOptions, Context.NONE);
    }
}
