// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import com.azure.spatio.implementation.OperationsImpl;
import com.azure.spatio.models.Operation;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class OperationsClient {
    @Generated
    private final OperationsImpl serviceClient;

    /**
     * Initializes an instance of OperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    OperationsClient(OperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(collectionId, operationId, requestOptions);
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>Number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>Number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponse(collectionId, requestOptions);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String collectionId, String operationId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(collectionId, operationId, requestOptions);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAllWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteAllWithResponse(collectionId, requestOptions);
    }

    /**
     * Get operation logs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation logs along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogsWithResponse(String collectionId, String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLogsWithResponse(collectionId, operationId, requestOptions);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation of a geo-catalog collection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Operation get(String collectionId, String operationId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, operationId, requestOptions).getValue().toObject(Operation.class);
    }

    /**
     * Get operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @param topParam Number of items to return.
     * @param skipParam Number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operations of a geo-catalog collection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Operation> getAll(String collectionId, Long top, Long skip, Long topParam, Long skipParam) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        if (topParam != null) {
            requestOptions.addQueryParam("$top", String.valueOf(topParam), false);
        }
        if (skipParam != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skipParam), false);
        }
        return getAllWithResponse(collectionId, requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_OPERATION);
    }

    /**
     * Get operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operations of a geo-catalog collection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Operation> getAll(String collectionId) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllWithResponse(collectionId, requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_OPERATION);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String collectionId, String operationId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(collectionId, operationId, requestOptions).getValue();
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAll(String collectionId) {
        // Generated convenience method for deleteAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteAllWithResponse(collectionId, requestOptions).getValue();
    }

    /**
     * Get operation logs.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation logs.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getLogs(String collectionId, String operationId) {
        // Generated convenience method for getLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLogsWithResponse(collectionId, operationId, requestOptions).getValue().toObject(byte[].class);
    }

    @Generated
    private static final TypeReference<List<Operation>> TYPE_REFERENCE_LIST_OPERATION
        = new TypeReference<List<Operation>>() {
        };
}
