// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.spatio.implementation.GeoJsonStatisticsImpl;
import com.azure.spatio.models.Geojson;
import com.azure.spatio.models.Resampling;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class GeoJsonStatisticsClient {
    @Generated
    private final GeoJsonStatisticsImpl serviceClient;

    /**
     * Initializes an instance of GeoJsonStatisticsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    GeoJsonStatisticsClient(GeoJsonStatisticsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>maxSize</td><td>Integer</td><td>No</td><td>TODO: add description for "maxSize"?</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>TODO: add description for "height"?</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>TODO: add description for "width"?</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogramBins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given range
     * (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogramRange</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAllWithResponse(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponse(collectionId, itemId, body, requestOptions);
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body TODO: add description for "body".
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param maxSize TODO: add description for "maxSize"?.
     * @param height TODO: add description for "height"?.
     * @param width TODO: add description for "width"?.
     * @param categorical Return statistics for categorical dataset.
     * @param c List of values for which to report counts.
     * @param p List of percentile values (default to [2, 98]).
     * @param histogramBins Defines the number of equal-width bins in the given range (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @param histogramRange Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAll(String collectionId, String itemId, Geojson body, String coordCrs, List<String> assets,
        String expression, List<String> assetBidx, Boolean assetAsBand, String nodata, Boolean unscale,
        Resampling resampling, Integer maxSize, Integer height, Integer width, Boolean categorical, List<String> c,
        List<Integer> p, String histogramBins, String histogramRange) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (maxSize != null) {
            requestOptions.addQueryParam("maxSize", String.valueOf(maxSize), false);
        }
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (categorical != null) {
            requestOptions.addQueryParam("categorical", String.valueOf(categorical), false);
        }
        if (c != null) {
            for (String paramItemValue : c) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("c", paramItemValue, false);
                }
            }
        }
        if (p != null) {
            for (int paramItemValue : p) {
                requestOptions.addQueryParam("p", String.valueOf(paramItemValue), false);
            }
        }
        if (histogramBins != null) {
            requestOptions.addQueryParam("histogramBins", histogramBins, false);
        }
        if (histogramRange != null) {
            requestOptions.addQueryParam("histogramRange", histogramRange, false);
        }
        getAllWithResponse(collectionId, itemId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAll(String collectionId, String itemId, Geojson body) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getAllWithResponse(collectionId, itemId, BinaryData.fromObject(body), requestOptions).getValue();
    }
}
