// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.CollectionThumbnailsImpl;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class CollectionThumbnailsAsyncClient {
    @Generated
    private final CollectionThumbnailsImpl serviceClient;

    /**
     * Initializes an instance of CollectionThumbnailsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CollectionThumbnailsAsyncClient(CollectionThumbnailsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * 
     * @param collectionId STAC Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get Collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image.
     * 
     * @param collectionId STAC Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Thumbnail
     * 
     * Get thumbnail for given collection.
     * 
     * Args:
     * request: The incoming request.
     * collection_id: The ID of the collection to retrieve assets for.
     * 
     * Returns:
     * thumbnail image on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get(String collectionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
