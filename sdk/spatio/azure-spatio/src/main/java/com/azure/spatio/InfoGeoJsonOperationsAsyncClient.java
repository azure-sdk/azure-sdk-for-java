// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.InfoGeoJsonOperationsImpl;
import com.azure.spatio.models.FeaturePolygonDictStrRioTilerModelsInfo;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class InfoGeoJsonOperationsAsyncClient {
    @Generated
    private final InfoGeoJsonOperationsImpl serviceClient;

    /**
     * Initializes an instance of InfoGeoJsonOperationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    InfoGeoJsonOperationsAsyncClient(InfoGeoJsonOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Info Geojson.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Feature) (Required)
     *     geometry (Required): {
     *         coordinates (Required): [
     *              (Required)[
     *                 String (Required)
     *             ]
     *         ]
     *         type: String(Polygon) (Required)
     *         bbox: String (Optional)
     *     }
     *     properties (Required): {
     *         String (Required): {
     *             bounds (Required): [
     *                 String (Required)
     *             ]
     *             minzoom: int (Required)
     *             maxzoom: int (Required)
     *             band_metadata (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             band_descriptions (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *             dtype: String (Required)
     *             nodata_type: String(Alpha/Mask/Internal/Nodata/None) (Required)
     *             colorinterp (Optional): [
     *                 String (Optional)
     *             ]
     *             scale: Double (Optional)
     *             offset: Double (Optional)
     *             colormap (Optional): {
     *                 String (Required): [
     *                     int (Required)
     *                 ]
     *             }
     *         }
     *     }
     *     id: String (Optional)
     *     bbox: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionId, itemId, requestOptions);
    }

    /**
     * Info Geojson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param assets Asset's names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FeaturePolygonDictStrRioTilerModelsInfo> get(String collectionId, String itemId, List<String> assets) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        return getWithResponse(collectionId, itemId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FeaturePolygonDictStrRioTilerModelsInfo.class));
    }

    /**
     * Info Geojson.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FeaturePolygonDictStrRioTilerModelsInfo> get(String collectionId, String itemId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, itemId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FeaturePolygonDictStrRioTilerModelsInfo.class));
    }
}
