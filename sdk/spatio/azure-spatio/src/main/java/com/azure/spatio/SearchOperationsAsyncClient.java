// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.SearchOperationsImpl;
import com.azure.spatio.models.SearchPostRequest;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class SearchOperationsAsyncClient {
    @Generated
    private final SearchOperationsImpl serviceClient;

    /**
     * Initializes an instance of SearchOperationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SearchOperationsAsyncClient(SearchOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collections</td><td>String</td><td>No</td><td>TODO: add description for "collections"?</td></tr>
     * <tr><td>ids</td><td>String</td><td>No</td><td>TODO: add description for "ids"?</td></tr>
     * <tr><td>bbox</td><td>String</td><td>No</td><td>TODO: add description for "bbox"?</td></tr>
     * <tr><td>intersects</td><td>String</td><td>No</td><td>TODO: add description for "intersects"?</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>TODO: add description for "datetime"?</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>TODO: add description for "limit"?</td></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * <tr><td>query</td><td>String</td><td>No</td><td>TODO: add description for "query"?</td></tr>
     * <tr><td>sortby</td><td>String</td><td>No</td><td>TODO: add description for "sortby"?</td></tr>
     * <tr><td>fields</td><td>String</td><td>No</td><td>TODO: add description for "fields"?</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>TODO: add description for "filter"?</td></tr>
     * <tr><td>token</td><td>String</td><td>No</td><td>TODO: add description for "token"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(requestOptions);
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     datetime: String (Optional)
     *     limit: Integer (Optional)
     *     conf (Optional): {
     *         String: String (Required)
     *     }
     *     sign: Boolean (Optional)
     *     duration: Integer (Optional)
     *     query (Optional): {
     *         String (Required): {
     *              (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     fields (Optional): [
     *          (Optional){
     *             include (Optional): [
     *                 String (Optional)
     *             ]
     *             exclude (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     filter-crs: String (Optional)
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     token: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(body, requestOptions);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @param collections TODO: add description for "collections"?.
     * @param ids TODO: add description for "ids"?.
     * @param bbox TODO: add description for "bbox"?.
     * @param intersects TODO: add description for "intersects"?.
     * @param datetime TODO: add description for "datetime"?.
     * @param limit TODO: add description for "limit"?.
     * @param sign TODO: add description for "sign"?.
     * @param duration TODO: add description for "duration"?.
     * @param query TODO: add description for "query"?.
     * @param sortby TODO: add description for "sortby"?.
     * @param fields TODO: add description for "fields"?.
     * @param filter TODO: add description for "filter"?.
     * @param token TODO: add description for "token"?.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get(String collections, String ids, String bbox, String intersects, String datetime,
        Integer limit, Boolean sign, Integer duration, String query, String sortby, String fields, String filter,
        String token) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (collections != null) {
            requestOptions.addQueryParam("collections", collections, false);
        }
        if (ids != null) {
            requestOptions.addQueryParam("ids", ids, false);
        }
        if (bbox != null) {
            requestOptions.addQueryParam("bbox", bbox, false);
        }
        if (intersects != null) {
            requestOptions.addQueryParam("intersects", intersects, false);
        }
        if (datetime != null) {
            requestOptions.addQueryParam("datetime", datetime, false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (sign != null) {
            requestOptions.addQueryParam("sign", String.valueOf(sign), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        if (query != null) {
            requestOptions.addQueryParam("query", query, false);
        }
        if (sortby != null) {
            requestOptions.addQueryParam("sortby", sortby, false);
        }
        if (fields != null) {
            requestOptions.addQueryParam("fields", fields, false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (token != null) {
            requestOptions.addQueryParam("token", token, false);
        }
        return getWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get() {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Search
     * 
     * Endpoint.
     * 
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(SearchPostRequest body) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono);
    }
}
