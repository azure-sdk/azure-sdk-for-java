// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * TODO: add description for PatchRequest.
 */
@Fluent
public final class PatchRequest implements JsonSerializable<PatchRequest> {
    /*
     * Ingestion name
     */
    @Generated
    private String displayName;

    /*
     * Source catalog URL
     */
    @Generated
    private String sourceCatalogUrl;

    /*
     * Parquet catalog URL. *Required for StacGeoparquet ingestion type
     */
    @Generated
    private String stacGeoparquetUrl;

    /*
     * Skip processing existing items in the catalog
     */
    @Generated
    private Boolean skipExistingItems;

    /*
     * Keep original source assets
     */
    @Generated
    private Boolean keepOriginalAssets;

    /**
     * Creates an instance of PatchRequest class.
     */
    @Generated
    public PatchRequest() {
    }

    /**
     * Get the displayName property: Ingestion name.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Ingestion name.
     * 
     * @param displayName the displayName value to set.
     * @return the PatchRequest object itself.
     */
    @Generated
    public PatchRequest setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the sourceCatalogUrl property: Source catalog URL.
     * 
     * @return the sourceCatalogUrl value.
     */
    @Generated
    public String getSourceCatalogUrl() {
        return this.sourceCatalogUrl;
    }

    /**
     * Set the sourceCatalogUrl property: Source catalog URL.
     * 
     * @param sourceCatalogUrl the sourceCatalogUrl value to set.
     * @return the PatchRequest object itself.
     */
    @Generated
    public PatchRequest setSourceCatalogUrl(String sourceCatalogUrl) {
        this.sourceCatalogUrl = sourceCatalogUrl;
        return this;
    }

    /**
     * Get the stacGeoparquetUrl property: Parquet catalog URL. *Required for StacGeoparquet ingestion type.
     * 
     * @return the stacGeoparquetUrl value.
     */
    @Generated
    public String getStacGeoparquetUrl() {
        return this.stacGeoparquetUrl;
    }

    /**
     * Set the stacGeoparquetUrl property: Parquet catalog URL. *Required for StacGeoparquet ingestion type.
     * 
     * @param stacGeoparquetUrl the stacGeoparquetUrl value to set.
     * @return the PatchRequest object itself.
     */
    @Generated
    public PatchRequest setStacGeoparquetUrl(String stacGeoparquetUrl) {
        this.stacGeoparquetUrl = stacGeoparquetUrl;
        return this;
    }

    /**
     * Get the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @return the skipExistingItems value.
     */
    @Generated
    public Boolean isSkipExistingItems() {
        return this.skipExistingItems;
    }

    /**
     * Set the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @param skipExistingItems the skipExistingItems value to set.
     * @return the PatchRequest object itself.
     */
    @Generated
    public PatchRequest setSkipExistingItems(Boolean skipExistingItems) {
        this.skipExistingItems = skipExistingItems;
        return this;
    }

    /**
     * Get the keepOriginalAssets property: Keep original source assets.
     * 
     * @return the keepOriginalAssets value.
     */
    @Generated
    public Boolean isKeepOriginalAssets() {
        return this.keepOriginalAssets;
    }

    /**
     * Set the keepOriginalAssets property: Keep original source assets.
     * 
     * @param keepOriginalAssets the keepOriginalAssets value to set.
     * @return the PatchRequest object itself.
     */
    @Generated
    public PatchRequest setKeepOriginalAssets(Boolean keepOriginalAssets) {
        this.keepOriginalAssets = keepOriginalAssets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
        jsonWriter.writeStringField("stacGeoparquetUrl", this.stacGeoparquetUrl);
        jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
        jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PatchRequest.
     */
    @Generated
    public static PatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatchRequest deserializedPatchRequest = new PatchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedPatchRequest.displayName = reader.getString();
                } else if ("sourceCatalogUrl".equals(fieldName)) {
                    deserializedPatchRequest.sourceCatalogUrl = reader.getString();
                } else if ("stacGeoparquetUrl".equals(fieldName)) {
                    deserializedPatchRequest.stacGeoparquetUrl = reader.getString();
                } else if ("skipExistingItems".equals(fieldName)) {
                    deserializedPatchRequest.skipExistingItems = reader.getNullable(JsonReader::getBoolean);
                } else if ("keepOriginalAssets".equals(fieldName)) {
                    deserializedPatchRequest.keepOriginalAssets = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPatchRequest;
        });
    }
}
