// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CollectionTileSettings.
 */
public final class CollectionTileSettingsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CollectionTileSettingsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of CollectionTileSettingsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CollectionTileSettingsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service = RestProxy.create(CollectionTileSettingsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientCollectionTileSettings to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface CollectionTileSettingsService {
        @Get("/api/collections/{collectionId}/config/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/config/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}/config/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}/config/tile-settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAll(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection Tile Settings
     * 
     * Get the tile settings for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Tile Settings
     * 
     * Get the tile settings for a given collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileSettingsTODO: add description for TileSettings along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection Tile Settings
     * 
     * Update the tile settings for a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     minZoom: int (Required)
     *     maxItemsPerTile: int (Required)
     *     defaultLocation (Optional): {
     *         zoom: int (Required)
     *         coordinates (Required): [
     *             double (Required)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tileSettingsTODO: add description for TileSettings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, contentType, accept, body, requestOptions, Context.NONE);
    }
}
