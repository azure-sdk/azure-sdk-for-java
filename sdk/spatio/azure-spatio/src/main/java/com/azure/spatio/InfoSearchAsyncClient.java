// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.InfoSearchesImpl;
import com.azure.spatio.models.TitilerPgstacModelInfo;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class InfoSearchAsyncClient {
    @Generated
    private final InfoSearchesImpl serviceClient;

    /**
     * Initializes an instance of InfoSearchAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    InfoSearchAsyncClient(InfoSearchesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Info Search
     * 
     * Get Search query metadata.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     search (Required): {
     *         hash: String (Required)
     *         search (Required): {
     *             String: String (Required)
     *         }
     *         _where: String (Required)
     *         orderby: String (Required)
     *         lastused: OffsetDateTime (Required)
     *         usecount: int (Required)
     *         metadata (Required): {
     *             type: String(mosaic/search) (Optional)
     *             bounds: String (Optional)
     *             minzoom: Integer (Optional)
     *             maxzoom: Integer (Optional)
     *             name: String (Optional)
     *             assets (Optional): [
     *                 String (Optional)
     *             ]
     *             defaults (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response model for /info endpoint.TODO: add description for TitilerPgstacModelInfo along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String searchid, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(searchid, requestOptions);
    }

    /**
     * Info Search
     * 
     * Get Search query metadata.
     * 
     * @param searchid Search Id (pgSTAC Search Hash).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for /info endpoint.TODO: add description for TitilerPgstacModelInfo on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TitilerPgstacModelInfo> get(String searchid) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(searchid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TitilerPgstacModelInfo.class));
    }
}
