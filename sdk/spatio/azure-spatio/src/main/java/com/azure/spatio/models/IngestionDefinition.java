// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Spatio geo-catalog ingestion definition.
 */
@Immutable
public final class IngestionDefinition implements JsonSerializable<IngestionDefinition> {
    /*
     * Ingestion type
     */
    @Generated
    private final IngestionType importType;

    /*
     * Ingestion name
     */
    @Generated
    private String displayName;

    /*
     * Source catalog URL. *Required for StaticCatalog ingestion type
     */
    @Generated
    private String sourceCatalogUrl;

    /*
     * Parquet catalog URL. *Required for StacGeoparquet ingestion type
     */
    @Generated
    private String geoparquetUrl;

    /*
     * Skip processing existing items in the catalog
     */
    @Generated
    private Boolean skipExistingItems;

    /*
     * Keep original source assets
     */
    @Generated
    private Boolean keepOriginalAssets;

    /*
     * Ingestion id
     */
    @Generated
    private final String ingestionId;

    /*
     * Ingestion creation time
     */
    @Generated
    private final OffsetDateTime creationTime;

    /*
     * Ingestion status
     */
    @Generated
    private final IngestionStatus status;

    /**
     * Creates an instance of IngestionDefinition class.
     * 
     * @param importType the importType value to set.
     * @param ingestionId the ingestionId value to set.
     * @param creationTime the creationTime value to set.
     * @param status the status value to set.
     */
    @Generated
    private IngestionDefinition(IngestionType importType, String ingestionId, OffsetDateTime creationTime,
        IngestionStatus status) {
        this.importType = importType;
        this.ingestionId = ingestionId;
        this.creationTime = creationTime;
        this.status = status;
    }

    /**
     * Get the importType property: Ingestion type.
     * 
     * @return the importType value.
     */
    @Generated
    public IngestionType getImportType() {
        return this.importType;
    }

    /**
     * Get the displayName property: Ingestion name.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the sourceCatalogUrl property: Source catalog URL. *Required for StaticCatalog ingestion type.
     * 
     * @return the sourceCatalogUrl value.
     */
    @Generated
    public String getSourceCatalogUrl() {
        return this.sourceCatalogUrl;
    }

    /**
     * Get the geoparquetUrl property: Parquet catalog URL. *Required for StacGeoparquet ingestion type.
     * 
     * @return the geoparquetUrl value.
     */
    @Generated
    public String getGeoparquetUrl() {
        return this.geoparquetUrl;
    }

    /**
     * Get the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @return the skipExistingItems value.
     */
    @Generated
    public Boolean isSkipExistingItems() {
        return this.skipExistingItems;
    }

    /**
     * Get the keepOriginalAssets property: Keep original source assets.
     * 
     * @return the keepOriginalAssets value.
     */
    @Generated
    public Boolean isKeepOriginalAssets() {
        return this.keepOriginalAssets;
    }

    /**
     * Get the ingestionId property: Ingestion id.
     * 
     * @return the ingestionId value.
     */
    @Generated
    public String getIngestionId() {
        return this.ingestionId;
    }

    /**
     * Get the creationTime property: Ingestion creation time.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the status property: Ingestion status.
     * 
     * @return the status value.
     */
    @Generated
    public IngestionStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("importType", this.importType == null ? null : this.importType.toString());
        jsonWriter.writeStringField("ingestionId", this.ingestionId);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
        jsonWriter.writeStringField("geoparquetUrl", this.geoparquetUrl);
        jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
        jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionDefinition.
     */
    @Generated
    public static IngestionDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngestionType importType = null;
            String ingestionId = null;
            OffsetDateTime creationTime = null;
            IngestionStatus status = null;
            String displayName = null;
            String sourceCatalogUrl = null;
            String geoparquetUrl = null;
            Boolean skipExistingItems = null;
            Boolean keepOriginalAssets = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("importType".equals(fieldName)) {
                    importType = IngestionType.fromString(reader.getString());
                } else if ("ingestionId".equals(fieldName)) {
                    ingestionId = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    status = IngestionStatus.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("sourceCatalogUrl".equals(fieldName)) {
                    sourceCatalogUrl = reader.getString();
                } else if ("geoparquetUrl".equals(fieldName)) {
                    geoparquetUrl = reader.getString();
                } else if ("skipExistingItems".equals(fieldName)) {
                    skipExistingItems = reader.getNullable(JsonReader::getBoolean);
                } else if ("keepOriginalAssets".equals(fieldName)) {
                    keepOriginalAssets = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            IngestionDefinition deserializedIngestionDefinition
                = new IngestionDefinition(importType, ingestionId, creationTime, status);
            deserializedIngestionDefinition.displayName = displayName;
            deserializedIngestionDefinition.sourceCatalogUrl = sourceCatalogUrl;
            deserializedIngestionDefinition.geoparquetUrl = geoparquetUrl;
            deserializedIngestionDefinition.skipExistingItems = skipExistingItems;
            deserializedIngestionDefinition.keepOriginalAssets = keepOriginalAssets;

            return deserializedIngestionDefinition;
        });
    }
}
