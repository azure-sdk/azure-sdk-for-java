// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * http://docs.opengeospatial.org/is/17-069r3/17-069r3.html#_feature_collections_rootcollectionsTODO: add description
 * for Collections.
 */
@Immutable
public final class Collections implements JsonSerializable<Collections> {
    /*
     * LinksTODO: add description for links
     */
    @Generated
    private final List<Link1> links;

    /*
     * CollectionsTODO: add description for collections
     */
    @Generated
    private final List<Collection> collections;

    /**
     * Creates an instance of Collections class.
     * 
     * @param links the links value to set.
     * @param collections the collections value to set.
     */
    @Generated
    private Collections(List<Link1> links, List<Collection> collections) {
        this.links = links;
        this.collections = collections;
    }

    /**
     * Get the links property: LinksTODO: add description for links.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link1> getLinks() {
        return this.links;
    }

    /**
     * Get the collections property: CollectionsTODO: add description for collections.
     * 
     * @return the collections value.
     */
    @Generated
    public List<Collection> getCollections() {
        return this.collections;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Collections from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Collections if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Collections.
     */
    @Generated
    public static Collections fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Link1> links = null;
            List<Collection> collections = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link1.fromJson(reader1));
                } else if ("collections".equals(fieldName)) {
                    collections = reader.readArray(reader1 -> Collection.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new Collections(links, collections);
        });
    }
}
