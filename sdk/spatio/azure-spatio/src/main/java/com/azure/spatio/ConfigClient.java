// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.spatio.implementation.ConfigsImpl;
import com.azure.spatio.models.UserCollectionSettings;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class ConfigClient {
    @Generated
    private final ConfigsImpl serviceClient;

    /**
     * Initializes an instance of ConfigClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ConfigClient(ConfigsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tileSettings (Required): {
     *         minZoom: int (Required)
     *         maxItemsPerTile: int (Required)
     *         defaultLocation (Optional): {
     *             zoom: int (Required)
     *             coordinates (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     }
     *     mosaicInfo (Required): {
     *         mosaics (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 cql (Required): [
     *                      (Required){
     *                         String: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         renderOptions (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 name: String (Required)
     *                 description: String (Optional)
     *                 type: String(raster-tile/vt-polygon/vt-line) (Optional)
     *                 options: String (Optional)
     *                 vectorOptions (Optional): {
     *                     tilejsonKey: String (Required)
     *                     sourceLayer: String (Required)
     *                     fillColor: String (Optional)
     *                     strokeColor: String (Optional)
     *                     strokeWidth: Integer (Optional)
     *                     filter (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *                 minZoom: Integer (Optional)
     *                 legend (Optional): {
     *                     type: String(continuous/classmap/interval/none) (Optional)
     *                     labels (Optional): [
     *                         String (Optional)
     *                     ]
     *                     trimStart: Integer (Optional)
     *                     trimEnd: Integer (Optional)
     *                     scaleFactor: Double (Optional)
     *                 }
     *                 conditions (Optional): [
     *                      (Optional){
     *                         property: String (Required)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         defaultLocation (Optional): (recursive schema, see defaultLocation above)
     *         defaultCustomQuery (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return config
     * 
     * Get the complete user configuration for a given collection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(collectionId, requestOptions);
    }

    /**
     * Get Config
     * 
     * Get the complete user configuration for a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config
     * 
     * Get the complete user configuration for a given collection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserCollectionSettings get(String collectionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, requestOptions).getValue().toObject(UserCollectionSettings.class);
    }
}
