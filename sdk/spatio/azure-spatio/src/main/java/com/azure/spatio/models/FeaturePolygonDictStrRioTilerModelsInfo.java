// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Feature ModelTODO: add description for FeaturePolygonDictStrRioTilerModelsInfo.
 */
@Immutable
public final class FeaturePolygonDictStrRioTilerModelsInfo
    implements JsonSerializable<FeaturePolygonDictStrRioTilerModelsInfo> {
    /*
     * TypeTODO: add description for type
     */
    @Generated
    private final FeaturePolygonDictStrRioTilerModelsInfoType type;

    /*
     * Polygon ModelTODO: add description for geometry
     */
    @Generated
    private final Polygon geometry;

    /*
     * Properties
     */
    @Generated
    private final Map<String, RioTilerModelsInfo> properties;

    /*
     * IdTODO: add description for id
     */
    @Generated
    private String id;

    /*
     * BboxTODO: add description for bbox
     */
    @Generated
    private String bbox;

    /**
     * Creates an instance of FeaturePolygonDictStrRioTilerModelsInfo class.
     * 
     * @param type the type value to set.
     * @param geometry the geometry value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private FeaturePolygonDictStrRioTilerModelsInfo(FeaturePolygonDictStrRioTilerModelsInfoType type, Polygon geometry,
        Map<String, RioTilerModelsInfo> properties) {
        this.type = type;
        this.geometry = geometry;
        this.properties = properties;
    }

    /**
     * Get the type property: TypeTODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public FeaturePolygonDictStrRioTilerModelsInfoType getType() {
        return this.type;
    }

    /**
     * Get the geometry property: Polygon ModelTODO: add description for geometry.
     * 
     * @return the geometry value.
     */
    @Generated
    public Polygon getGeometry() {
        return this.geometry;
    }

    /**
     * Get the properties property: Properties.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, RioTilerModelsInfo> getProperties() {
        return this.properties;
    }

    /**
     * Get the id property: IdTODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the bbox property: BboxTODO: add description for bbox.
     * 
     * @return the bbox value.
     */
    @Generated
    public String getBbox() {
        return this.bbox;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("bbox", this.bbox);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeaturePolygonDictStrRioTilerModelsInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeaturePolygonDictStrRioTilerModelsInfo if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FeaturePolygonDictStrRioTilerModelsInfo.
     */
    @Generated
    public static FeaturePolygonDictStrRioTilerModelsInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeaturePolygonDictStrRioTilerModelsInfoType type = null;
            Polygon geometry = null;
            Map<String, RioTilerModelsInfo> properties = null;
            String id = null;
            String bbox = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = FeaturePolygonDictStrRioTilerModelsInfoType.fromString(reader.getString());
                } else if ("geometry".equals(fieldName)) {
                    geometry = Polygon.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> RioTilerModelsInfo.fromJson(reader1));
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FeaturePolygonDictStrRioTilerModelsInfo deserializedFeaturePolygonDictStrRioTilerModelsInfo
                = new FeaturePolygonDictStrRioTilerModelsInfo(type, geometry, properties);
            deserializedFeaturePolygonDictStrRioTilerModelsInfo.id = id;
            deserializedFeaturePolygonDictStrRioTilerModelsInfo.bbox = bbox;

            return deserializedFeaturePolygonDictStrRioTilerModelsInfo;
        });
    }
}
