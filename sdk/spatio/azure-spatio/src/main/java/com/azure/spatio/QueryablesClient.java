// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.spatio.implementation.QueryablesImpl;
import com.azure.spatio.models.QueryableDefinition;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class QueryablesClient {
    @Generated
    private final QueryablesImpl serviceClient;

    /**
     * Initializes an instance of QueryablesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    QueryablesClient(QueryablesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Queryables
     * 
     * Endpoint.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAllWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponse(requestOptions);
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param queryableName TODO: add description for "queryableName".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String collectionId, String queryableName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(collectionId, queryableName, requestOptions);
    }

    /**
     * Collection Queryables
     * 
     * Endpoint.
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAllByCollectionWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getAllByCollectionWithResponse(collectionId, requestOptions);
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         definition (Required): {
     *             String: String (Required)
     *         }
     *         create_index: Boolean (Optional)
     *         data_type: String(number/float/text/array) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(String collectionId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(collectionId, body, requestOptions);
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *         String: String (Required)
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(number/float/text/array) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     definition (Required): {
     *         String: String (Required)
     *     }
     *     create_index: Boolean (Optional)
     *     data_type: String(number/float/text/array) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param queryableName TODO: add description for "queryableName".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return queryableDefinitionTODO: add description for QueryableDefinition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String collectionId, String queryableName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponse(collectionId, queryableName, body, requestOptions);
    }

    /**
     * Queryables
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAll() {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getAllWithResponse(requestOptions).getValue();
    }

    /**
     * Delete Queryables
     * 
     * Delete queryables by name for specified collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param queryableName TODO: add description for "queryableName".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String collectionId, String queryableName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(collectionId, queryableName, requestOptions).getValue();
    }

    /**
     * Collection Queryables
     * 
     * Endpoint.
     * 
     * @param collectionId Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAllByCollection(String collectionId) {
        // Generated convenience method for getAllByCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getAllByCollectionWithResponse(collectionId, requestOptions).getValue();
    }

    /**
     * Set Collection Queryables
     * 
     * Set queryables for a collection given a list of queryable definitions.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String collectionId, List<QueryableDefinition> body) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createWithResponse(collectionId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Update Collection Queryables
     * 
     * Updates a queryable given a queryable definition and
     * corresponding collection id.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param queryableName TODO: add description for "queryableName".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return queryableDefinitionTODO: add description for QueryableDefinition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryableDefinition createOrReplace(String collectionId, String queryableName, QueryableDefinition body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(collectionId, queryableName, BinaryData.fromObject(body), requestOptions)
            .getValue()
            .toObject(QueryableDefinition.class);
    }
}
