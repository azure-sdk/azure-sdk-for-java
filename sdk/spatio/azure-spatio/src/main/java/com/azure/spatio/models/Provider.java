// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#provider-objectTODO: add
 * description for Provider.
 */
@Immutable
public final class Provider implements JsonSerializable<Provider> {
    /*
     * NameTODO: add description for name
     */
    @Generated
    private final String name;

    /*
     * DescriptionTODO: add description for description
     */
    @Generated
    private String description;

    /*
     * RolesTODO: add description for roles
     */
    @Generated
    private List<String> roles;

    /*
     * UrlTODO: add description for url
     */
    @Generated
    private String url;

    /**
     * Creates an instance of Provider class.
     * 
     * @param name the name value to set.
     */
    @Generated
    private Provider(String name) {
        this.name = name;
    }

    /**
     * Get the name property: NameTODO: add description for name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: DescriptionTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the roles property: RolesTODO: add description for roles.
     * 
     * @return the roles value.
     */
    @Generated
    public List<String> getRoles() {
        return this.roles;
    }

    /**
     * Get the url property: UrlTODO: add description for url.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Provider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Provider if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Provider.
     */
    @Generated
    public static Provider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String description = null;
            List<String> roles = null;
            String url = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    roles = reader.readArray(reader1 -> reader1.getString());
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            Provider deserializedProvider = new Provider(name);
            deserializedProvider.description = description;
            deserializedProvider.roles = roles;
            deserializedProvider.url = url;

            return deserializedProvider;
        });
    }
}
