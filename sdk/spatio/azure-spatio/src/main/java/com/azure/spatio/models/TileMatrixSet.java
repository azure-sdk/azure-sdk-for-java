// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Tile Matrix Set Definition
 * 
 * A definition of a tile matrix set following the Tile Matrix Set standard.
 * For tileset metadata, such a description (in `tileMatrixSet` property) is only
 * required for offline use,
 * as an alternative to a link with a
 * `http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme` relation type.
 * 
 * ref:
 * https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrixSet.jsonTODO: add
 * description for TileMatrixSet.
 */
@Immutable
public final class TileMatrixSet implements JsonSerializable<TileMatrixSet> {
    /*
     * Title of this tile matrix set, normally used for display to a humanTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * Brief narrative description of this tile matrix set, normally available for
     * display to a humanTODO: add description for description
     */
    @Generated
    private String description;

    /*
     * Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     * used to describe this tile matrix setTODO: add description for keywords
     */
    @Generated
    private List<String> keywords;

    /*
     * Tile matrix set identifier. Implementation of 'identifier'TODO: add description for id
     */
    @Generated
    private String id;

    /*
     * Reference to an official source for this tileMatrixSetTODO: add description for uri
     */
    @Generated
    private String uri;

    /*
     * OrderedaxesTODO: add description for orderedAxes
     */
    @Generated
    private List<String> orderedAxes;

    /*
     * Coordinate Reference System (CRS)TODO: add description for crs
     */
    @Generated
    private final TileMatrixSetCrs crs;

    /*
     * Reference to a well-known scale setTODO: add description for wellKnownScaleSet
     */
    @Generated
    private String wellKnownScaleSet;

    /*
     * Minimum bounding rectangle surrounding the tile matrix set, in the supported CRSTODO: add description for
     * boundingBox
     */
    @Generated
    private TileMatrixSetBoundingBox boundingBox;

    /*
     * Describes scale levels and its tile matricesTODO: add description for tileMatrices
     */
    @Generated
    private final List<TileMatrix> tileMatrices;

    /**
     * Creates an instance of TileMatrixSet class.
     * 
     * @param crs the crs value to set.
     * @param tileMatrices the tileMatrices value to set.
     */
    @Generated
    private TileMatrixSet(TileMatrixSetCrs crs, List<TileMatrix> tileMatrices) {
        this.crs = crs;
        this.tileMatrices = tileMatrices;
    }

    /**
     * Get the title property: Title of this tile matrix set, normally used for display to a humanTODO: add description
     * for title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: Brief narrative description of this tile matrix set, normally available for
     * display to a humanTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the keywords property: Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     * used to describe this tile matrix setTODO: add description for keywords.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Get the id property: Tile matrix set identifier. Implementation of 'identifier'TODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the uri property: Reference to an official source for this tileMatrixSetTODO: add description for uri.
     * 
     * @return the uri value.
     */
    @Generated
    public String getUri() {
        return this.uri;
    }

    /**
     * Get the orderedAxes property: OrderedaxesTODO: add description for orderedAxes.
     * 
     * @return the orderedAxes value.
     */
    @Generated
    public List<String> getOrderedAxes() {
        return this.orderedAxes;
    }

    /**
     * Get the crs property: Coordinate Reference System (CRS)TODO: add description for crs.
     * 
     * @return the crs value.
     */
    @Generated
    public TileMatrixSetCrs getCrs() {
        return this.crs;
    }

    /**
     * Get the wellKnownScaleSet property: Reference to a well-known scale setTODO: add description for
     * wellKnownScaleSet.
     * 
     * @return the wellKnownScaleSet value.
     */
    @Generated
    public String getWellKnownScaleSet() {
        return this.wellKnownScaleSet;
    }

    /**
     * Get the boundingBox property: Minimum bounding rectangle surrounding the tile matrix set, in the supported
     * CRSTODO: add description for boundingBox.
     * 
     * @return the boundingBox value.
     */
    @Generated
    public TileMatrixSetBoundingBox getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * Get the tileMatrices property: Describes scale levels and its tile matricesTODO: add description for
     * tileMatrices.
     * 
     * @return the tileMatrices value.
     */
    @Generated
    public List<TileMatrix> getTileMatrices() {
        return this.tileMatrices;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("crs", this.crs);
        jsonWriter.writeArrayField("tileMatrices", this.tileMatrices, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("uri", this.uri);
        jsonWriter.writeArrayField("orderedAxes", this.orderedAxes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("wellKnownScaleSet", this.wellKnownScaleSet);
        jsonWriter.writeJsonField("boundingBox", this.boundingBox);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TileMatrixSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TileMatrixSet if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TileMatrixSet.
     */
    @Generated
    public static TileMatrixSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TileMatrixSetCrs crs = null;
            List<TileMatrix> tileMatrices = null;
            String title = null;
            String description = null;
            List<String> keywords = null;
            String id = null;
            String uri = null;
            List<String> orderedAxes = null;
            String wellKnownScaleSet = null;
            TileMatrixSetBoundingBox boundingBox = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("crs".equals(fieldName)) {
                    crs = TileMatrixSetCrs.fromJson(reader);
                } else if ("tileMatrices".equals(fieldName)) {
                    tileMatrices = reader.readArray(reader1 -> TileMatrix.fromJson(reader1));
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("uri".equals(fieldName)) {
                    uri = reader.getString();
                } else if ("orderedAxes".equals(fieldName)) {
                    orderedAxes = reader.readArray(reader1 -> reader1.getString());
                } else if ("wellKnownScaleSet".equals(fieldName)) {
                    wellKnownScaleSet = reader.getString();
                } else if ("boundingBox".equals(fieldName)) {
                    boundingBox = TileMatrixSetBoundingBox.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            TileMatrixSet deserializedTileMatrixSet = new TileMatrixSet(crs, tileMatrices);
            deserializedTileMatrixSet.title = title;
            deserializedTileMatrixSet.description = description;
            deserializedTileMatrixSet.keywords = keywords;
            deserializedTileMatrixSet.id = id;
            deserializedTileMatrixSet.uri = uri;
            deserializedTileMatrixSet.orderedAxes = orderedAxes;
            deserializedTileMatrixSet.wellKnownScaleSet = wellKnownScaleSet;
            deserializedTileMatrixSet.boundingBox = boundingBox;

            return deserializedTileMatrixSet;
        });
    }
}
