// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.RegisterSearchesImpl;
import com.azure.spatio.implementation.models.RegisterRequest;
import com.azure.spatio.models.RegisterOptions;
import com.azure.spatio.models.RegisterResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class RegisterSearchAsyncClient {
    @Generated
    private final RegisterSearchesImpl serviceClient;

    /**
     * Initializes an instance of RegisterSearchAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RegisterSearchAsyncClient(RegisterSearchesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     query (Optional): {
     *         String (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     datetime: String (Optional)
     *     sortby: String (Optional)
     *     filter-lang: String(cql-json/cql-text/cql2-json) (Optional)
     *     metadata (Optional): {
     *         type: String(mosaic/search) (Optional)
     *         bounds: String (Optional)
     *         minzoom: Integer (Optional)
     *         maxzoom: Integer (Optional)
     *         name: String (Optional)
     *         assets (Optional): [
     *             String (Optional)
     *         ]
     *         defaults (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     searchid: String (Required)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param registerRequest The registerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response model for /register endpoint.TODO: add description for RegisterResponse along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> registerWithResponse(BinaryData registerRequest, RequestOptions requestOptions) {
        return this.serviceClient.registerWithResponseAsync(registerRequest, requestOptions);
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * 
     * @param options Options for register API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for /register endpoint.TODO: add description for RegisterResponse on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RegisterResponse> register(RegisterOptions options) {
        // Generated convenience method for registerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        RegisterRequest registerRequestObj = new RegisterRequest().setCollections(options.getCollections())
            .setIds(options.getIds())
            .setBbox(options.getBbox())
            .setIntersects(options.getIntersects())
            .setQuery(options.getQuery())
            .setFilter(options.getFilter())
            .setDatetime(options.getDatetime())
            .setSortby(options.getSortby())
            .setFilterLang(options.getFilterLang())
            .setMetadata(options.getMetadata());
        BinaryData registerRequest = BinaryData.fromObject(registerRequestObj);
        return registerWithResponse(registerRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RegisterResponse.class));
    }
}
