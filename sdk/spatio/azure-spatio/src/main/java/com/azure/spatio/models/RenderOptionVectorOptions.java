// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Options for rendering vector tiles. Valid only for `vt-polygon` and `vt-line`
 * types.TODO: add description for RenderOptionVectorOptions.
 */
@Fluent
public final class RenderOptionVectorOptions implements JsonSerializable<RenderOptionVectorOptions> {
    /*
     * The key in the collection-level assets which contains the tilejson URL.TODO: add description for tilejsonKey
     */
    @Generated
    private final String tilejsonKey;

    /*
     * The source layer name to render from the associated vector tiles.TODO: add description for sourceLayer
     */
    @Generated
    private final String sourceLayer;

    /*
     * The css-style fill color for polygons. Can be hex or rgba()TODO: add description for fillColor
     */
    @Generated
    private String fillColor;

    /*
     * The css-style stroke color for lines. Can be hex or rgba()TODO: add description for strokeColor
     */
    @Generated
    private String strokeColor;

    /*
     * The stroke width for lines.TODO: add description for strokeWidth
     */
    @Generated
    private Integer strokeWidth;

    /*
     * MapBox Filter Expression to filter vector features by.TODO: add description for filter
     */
    @Generated
    private List<String> filter;

    /**
     * Creates an instance of RenderOptionVectorOptions class.
     * 
     * @param tilejsonKey the tilejsonKey value to set.
     * @param sourceLayer the sourceLayer value to set.
     */
    @Generated
    public RenderOptionVectorOptions(String tilejsonKey, String sourceLayer) {
        this.tilejsonKey = tilejsonKey;
        this.sourceLayer = sourceLayer;
    }

    /**
     * Get the tilejsonKey property: The key in the collection-level assets which contains the tilejson URL.TODO: add
     * description for tilejsonKey.
     * 
     * @return the tilejsonKey value.
     */
    @Generated
    public String getTilejsonKey() {
        return this.tilejsonKey;
    }

    /**
     * Get the sourceLayer property: The source layer name to render from the associated vector tiles.TODO: add
     * description for sourceLayer.
     * 
     * @return the sourceLayer value.
     */
    @Generated
    public String getSourceLayer() {
        return this.sourceLayer;
    }

    /**
     * Get the fillColor property: The css-style fill color for polygons. Can be hex or rgba()TODO: add description for
     * fillColor.
     * 
     * @return the fillColor value.
     */
    @Generated
    public String getFillColor() {
        return this.fillColor;
    }

    /**
     * Set the fillColor property: The css-style fill color for polygons. Can be hex or rgba()TODO: add description for
     * fillColor.
     * 
     * @param fillColor the fillColor value to set.
     * @return the RenderOptionVectorOptions object itself.
     */
    @Generated
    public RenderOptionVectorOptions setFillColor(String fillColor) {
        this.fillColor = fillColor;
        return this;
    }

    /**
     * Get the strokeColor property: The css-style stroke color for lines. Can be hex or rgba()TODO: add description for
     * strokeColor.
     * 
     * @return the strokeColor value.
     */
    @Generated
    public String getStrokeColor() {
        return this.strokeColor;
    }

    /**
     * Set the strokeColor property: The css-style stroke color for lines. Can be hex or rgba()TODO: add description for
     * strokeColor.
     * 
     * @param strokeColor the strokeColor value to set.
     * @return the RenderOptionVectorOptions object itself.
     */
    @Generated
    public RenderOptionVectorOptions setStrokeColor(String strokeColor) {
        this.strokeColor = strokeColor;
        return this;
    }

    /**
     * Get the strokeWidth property: The stroke width for lines.TODO: add description for strokeWidth.
     * 
     * @return the strokeWidth value.
     */
    @Generated
    public Integer getStrokeWidth() {
        return this.strokeWidth;
    }

    /**
     * Set the strokeWidth property: The stroke width for lines.TODO: add description for strokeWidth.
     * 
     * @param strokeWidth the strokeWidth value to set.
     * @return the RenderOptionVectorOptions object itself.
     */
    @Generated
    public RenderOptionVectorOptions setStrokeWidth(Integer strokeWidth) {
        this.strokeWidth = strokeWidth;
        return this;
    }

    /**
     * Get the filter property: MapBox Filter Expression to filter vector features by.TODO: add description for filter.
     * 
     * @return the filter value.
     */
    @Generated
    public List<String> getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: MapBox Filter Expression to filter vector features by.TODO: add description for filter.
     * 
     * @param filter the filter value to set.
     * @return the RenderOptionVectorOptions object itself.
     */
    @Generated
    public RenderOptionVectorOptions setFilter(List<String> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tilejsonKey", this.tilejsonKey);
        jsonWriter.writeStringField("sourceLayer", this.sourceLayer);
        jsonWriter.writeStringField("fillColor", this.fillColor);
        jsonWriter.writeStringField("strokeColor", this.strokeColor);
        jsonWriter.writeNumberField("strokeWidth", this.strokeWidth);
        jsonWriter.writeArrayField("filter", this.filter, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RenderOptionVectorOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RenderOptionVectorOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RenderOptionVectorOptions.
     */
    @Generated
    public static RenderOptionVectorOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String tilejsonKey = null;
            String sourceLayer = null;
            String fillColor = null;
            String strokeColor = null;
            Integer strokeWidth = null;
            List<String> filter = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tilejsonKey".equals(fieldName)) {
                    tilejsonKey = reader.getString();
                } else if ("sourceLayer".equals(fieldName)) {
                    sourceLayer = reader.getString();
                } else if ("fillColor".equals(fieldName)) {
                    fillColor = reader.getString();
                } else if ("strokeColor".equals(fieldName)) {
                    strokeColor = reader.getString();
                } else if ("strokeWidth".equals(fieldName)) {
                    strokeWidth = reader.getNullable(JsonReader::getInt);
                } else if ("filter".equals(fieldName)) {
                    filter = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RenderOptionVectorOptions deserializedRenderOptionVectorOptions
                = new RenderOptionVectorOptions(tilejsonKey, sourceLayer);
            deserializedRenderOptionVectorOptions.fillColor = fillColor;
            deserializedRenderOptionVectorOptions.strokeColor = strokeColor;
            deserializedRenderOptionVectorOptions.strokeWidth = strokeWidth;
            deserializedRenderOptionVectorOptions.filter = filter;

            return deserializedRenderOptionVectorOptions;
        });
    }
}
