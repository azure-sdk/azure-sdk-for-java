// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import com.azure.spatio.implementation.IngestionsImpl;
import com.azure.spatio.models.IngestionDefinition;
import com.azure.spatio.models.IngestionDefinitionCreation;
import com.azure.spatio.models.Operation;
import com.azure.spatio.models.PatchRequest;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class IngestionsAsyncClient {
    @Generated
    private final IngestionsImpl serviceClient;

    /**
     * Initializes an instance of IngestionsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IngestionsAsyncClient(IngestionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get ingestions of a catalog.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         importType: String(StaticCatalog/StacGeoparquet) (Required)
     *         displayName: String (Optional)
     *         sourceCatalogUrl: String (Optional)
     *         geoparquetUrl: String (Optional)
     *         skipExistingItems: Boolean (Optional)
     *         keepOriginalAssets: Boolean (Optional)
     *         ingestionId: String (Required)
     *         creationTime: OffsetDateTime (Required)
     *         status: String(Ready/Deleting) (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return ingestions of a catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get the definition of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     importType: String(StaticCatalog/StacGeoparquet) (Required)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     geoparquetUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     ingestionId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definition of an ingestion along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Create a new ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     importType: String(StaticCatalog/StacGeoparquet) (Required)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     geoparquetUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     importType: String(StaticCatalog/StacGeoparquet) (Required)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     geoparquetUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     ingestionId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog ingestion definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(String collectionId, BinaryData definition,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(collectionId, definition, requestOptions);
    }

    /**
     * Update an existing ingestion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     stacGeoparquetUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     importType: String(StaticCatalog/StacGeoparquet) (Required)
     *     displayName: String (Optional)
     *     sourceCatalogUrl: String (Optional)
     *     geoparquetUrl: String (Optional)
     *     skipExistingItems: Boolean (Optional)
     *     keepOriginalAssets: Boolean (Optional)
     *     ingestionId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     status: String(Ready/Deleting) (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param request Ingestion properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog ingestion definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateWithResponse(String collectionId, String ingestionId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponseAsync(collectionId, ingestionId, request, requestOptions);
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get ingestions of a catalog.
     * 
     * @param collectionId Catalog collection id.
     * @param top The number of items to return.
     * @param skip The number of items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestions of a catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<IngestionDefinition>> getAll(String collectionId, Long top, Long skip) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("$top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("$skip", String.valueOf(skip), false);
        }
        return getAllWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_INGESTION_DEFINITION));
    }

    /**
     * Get ingestions of a catalog.
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ingestions of a catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<IngestionDefinition>> getAll(String collectionId) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_INGESTION_DEFINITION));
    }

    /**
     * Get the definition of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definition of an ingestion on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionDefinition> get(String collectionId, String ingestionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionDefinition.class));
    }

    /**
     * Create a new ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param definition Definition of the ingestion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spatio geo-catalog ingestion definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionDefinition> create(String collectionId, IngestionDefinitionCreation definition) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(collectionId, BinaryData.fromObject(definition), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionDefinition.class));
    }

    /**
     * Update an existing ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param request Ingestion properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spatio geo-catalog ingestion definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IngestionDefinition> update(String collectionId, String ingestionId, PatchRequest request) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateWithResponse(collectionId, ingestionId, BinaryData.fromObject(request), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IngestionDefinition.class));
    }

    /**
     * Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs
     * in progress or queued.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spatio geo-catalog operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> delete(String collectionId, String ingestionId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(collectionId, ingestionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Operation.class));
    }

    @Generated
    private static final TypeReference<List<IngestionDefinition>> TYPE_REFERENCE_LIST_INGESTION_DEFINITION
        = new TypeReference<List<IngestionDefinition>>() {
        };
}
