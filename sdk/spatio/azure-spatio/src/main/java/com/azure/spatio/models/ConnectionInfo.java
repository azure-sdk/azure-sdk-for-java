// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * TODO: add description for ConnectionInfo.
 */
@Immutable
public final class ConnectionInfo implements JsonSerializable<ConnectionInfo> {
    /*
     * Azure Blob Storage container URL
     */
    @Generated
    private final String containerUrl;

    /*
     * Azure Managed Identity configured in the Geo-Catalog with access to the container
     */
    @Generated
    private String objectId;

    /*
     * Azure Blob Storage SAS token expiration in UTC format
     */
    @Generated
    private OffsetDateTime expiration;

    /**
     * Creates an instance of ConnectionInfo class.
     * 
     * @param containerUrl the containerUrl value to set.
     */
    @Generated
    private ConnectionInfo(String containerUrl) {
        this.containerUrl = containerUrl;
    }

    /**
     * Get the containerUrl property: Azure Blob Storage container URL.
     * 
     * @return the containerUrl value.
     */
    @Generated
    public String getContainerUrl() {
        return this.containerUrl;
    }

    /**
     * Get the objectId property: Azure Managed Identity configured in the Geo-Catalog with access to the container.
     * 
     * @return the objectId value.
     */
    @Generated
    public String getObjectId() {
        return this.objectId;
    }

    /**
     * Get the expiration property: Azure Blob Storage SAS token expiration in UTC format.
     * 
     * @return the expiration value.
     */
    @Generated
    public OffsetDateTime getExpiration() {
        return this.expiration;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerUrl", this.containerUrl);
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("expiration",
            this.expiration == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiration));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectionInfo.
     */
    @Generated
    public static ConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String containerUrl = null;
            String objectId = null;
            OffsetDateTime expiration = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerUrl".equals(fieldName)) {
                    containerUrl = reader.getString();
                } else if ("objectId".equals(fieldName)) {
                    objectId = reader.getString();
                } else if ("expiration".equals(fieldName)) {
                    expiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            ConnectionInfo deserializedConnectionInfo = new ConnectionInfo(containerUrl);
            deserializedConnectionInfo.objectId = objectId;
            deserializedConnectionInfo.expiration = expiration;

            return deserializedConnectionInfo;
        });
    }
}
