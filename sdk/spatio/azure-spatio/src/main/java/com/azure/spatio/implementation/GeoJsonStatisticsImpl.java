// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GeoJsonStatistics.
 */
public final class GeoJsonStatisticsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GeoJsonStatisticsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of GeoJsonStatisticsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GeoJsonStatisticsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(GeoJsonStatisticsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientGeoJsonStatistics to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface GeoJsonStatisticsService {
        @Post("/api/collections/{collectionId}/items/{itemId}/statistics")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("accept") String accept,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/api/collections/{collectionId}/items/{itemId}/statistics")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getAllSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>maxSize</td><td>Integer</td><td>No</td><td>TODO: add description for "maxSize"?</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>TODO: add description for "height"?</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>TODO: add description for "width"?</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogramBins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given range
     * (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogramRange</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAllWithResponseAsync(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/geo+json, application/json";
        final String contentType = "application/json";
        return FluxUtil.withContext(
            context -> service.getAll(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, itemId, accept, contentType, body, requestOptions, context));
    }

    /**
     * Geojson Statistics
     * 
     * Get Statistics from a geojson feature or featureCollection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>maxSize</td><td>Integer</td><td>No</td><td>TODO: add description for "maxSize"?</td></tr>
     * <tr><td>height</td><td>Integer</td><td>No</td><td>TODO: add description for "height"?</td></tr>
     * <tr><td>width</td><td>Integer</td><td>No</td><td>TODO: add description for "width"?</td></tr>
     * <tr><td>categorical</td><td>Boolean</td><td>No</td><td>Return statistics for categorical dataset.</td></tr>
     * <tr><td>c</td><td>List&lt;String&gt;</td><td>No</td><td>List of values for which to report counts. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>p</td><td>List&lt;Integer&gt;</td><td>No</td><td>List of percentile values (default to [2, 98]). Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>histogramBins</td><td>String</td><td>No</td><td>Defines the number of equal-width bins in the given range
     * (10, by default).
     * 
     * If bins is a sequence (comma `,` delimited values), it defines a monotonically
     * increasing array of bin edges, including the rightmost edge, allowing for
     * non-uniform bin widths.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * <tr><td>histogramRange</td><td>String</td><td>No</td><td>Comma `,` delimited range of the bins.
     * 
     * The lower and upper range of the bins. If not provided, range is simply
     * (a.min(), a.max()).
     * 
     * Values outside the range are ignored. The first element of the range must be
     * less than or equal to the second.
     * range affects the automatic bin computation as well.
     * 
     * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAllWithResponse(String collectionId, String itemId, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/geo+json, application/json";
        final String contentType = "application/json";
        return service.getAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, accept, contentType, body, requestOptions, Context.NONE);
    }
}
