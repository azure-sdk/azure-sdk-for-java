// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.mdTODO: add description for
 * Collection.
 */
@Immutable
public final class Collection implements JsonSerializable<Collection> {
    /*
     * IdTODO: add description for id
     */
    @Generated
    private final String id;

    /*
     * DescriptionTODO: add description for description
     */
    @Generated
    private final String description;

    /*
     * Stac Version
     */
    @Generated
    private String stacVersion;

    /*
     * LinksTODO: add description for links
     */
    @Generated
    private final List<LinksItem> links;

    /*
     * Stac ExtensionsTODO: add description for stacExtensions
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * TitleTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * Type
     */
    @Generated
    private String type;

    /*
     * Assets
     */
    @Generated
    private Map<String, Asset> assets;

    /*
     * LicenseTODO: add description for license
     */
    @Generated
    private final String license;

    /*
     * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#extent-objectTODO: add
     * description for extent
     */
    @Generated
    private final Extent extent;

    /*
     * KeywordsTODO: add description for keywords
     */
    @Generated
    private List<String> keywords;

    /*
     * ProvidersTODO: add description for providers
     */
    @Generated
    private List<Provider> providers;

    /*
     * Summaries
     */
    @Generated
    private Map<String, String> summaries;

    /**
     * Creates an instance of Collection class.
     * 
     * @param id the id value to set.
     * @param description the description value to set.
     * @param links the links value to set.
     * @param license the license value to set.
     * @param extent the extent value to set.
     */
    @Generated
    private Collection(String id, String description, List<LinksItem> links, String license, Extent extent) {
        this.id = id;
        this.description = description;
        this.links = links;
        this.license = license;
        this.extent = extent;
    }

    /**
     * Get the id property: IdTODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the description property: DescriptionTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the stacVersion property: Stac Version.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the links property: LinksTODO: add description for links.
     * 
     * @return the links value.
     */
    @Generated
    public List<LinksItem> getLinks() {
        return this.links;
    }

    /**
     * Get the stacExtensions property: Stac ExtensionsTODO: add description for stacExtensions.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the title property: TitleTODO: add description for title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the type property: Type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, Asset> getAssets() {
        return this.assets;
    }

    /**
     * Get the license property: LicenseTODO: add description for license.
     * 
     * @return the license value.
     */
    @Generated
    public String getLicense() {
        return this.license;
    }

    /**
     * Get the extent property:
     * https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#extent-objectTODO: add
     * description for extent.
     * 
     * @return the extent value.
     */
    @Generated
    public Extent getExtent() {
        return this.extent;
    }

    /**
     * Get the keywords property: KeywordsTODO: add description for keywords.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Get the providers property: ProvidersTODO: add description for providers.
     * 
     * @return the providers value.
     */
    @Generated
    public List<Provider> getProviders() {
        return this.providers;
    }

    /**
     * Get the summaries property: Summaries.
     * 
     * @return the summaries value.
     */
    @Generated
    public Map<String, String> getSummaries() {
        return this.summaries;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("license", this.license);
        jsonWriter.writeJsonField("extent", this.extent);
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("summaries", this.summaries, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Collection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Collection if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Collection.
     */
    @Generated
    public static Collection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String description = null;
            List<LinksItem> links = null;
            String license = null;
            Extent extent = null;
            String stacVersion = null;
            List<String> stacExtensions = null;
            String title = null;
            String type = null;
            Map<String, Asset> assets = null;
            List<String> keywords = null;
            List<Provider> providers = null;
            Map<String, String> summaries = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> LinksItem.fromJson(reader1));
                } else if ("license".equals(fieldName)) {
                    license = reader.getString();
                } else if ("extent".equals(fieldName)) {
                    extent = Extent.fromJson(reader);
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readMap(reader1 -> Asset.fromJson(reader1));
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("providers".equals(fieldName)) {
                    providers = reader.readArray(reader1 -> Provider.fromJson(reader1));
                } else if ("summaries".equals(fieldName)) {
                    summaries = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Collection deserializedCollection = new Collection(id, description, links, license, extent);
            deserializedCollection.stacVersion = stacVersion;
            deserializedCollection.stacExtensions = stacExtensions;
            deserializedCollection.title = title;
            deserializedCollection.type = type;
            deserializedCollection.assets = assets;
            deserializedCollection.keywords = keywords;
            deserializedCollection.providers = providers;
            deserializedCollection.summaries = summaries;

            return deserializedCollection;
        });
    }
}
