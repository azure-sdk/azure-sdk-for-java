// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Link model.
 * 
 * Ref:
 * http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yamlTODO: add description for Link.
 */
@Immutable
public final class Link1 implements JsonSerializable<Link1> {
    /*
     * RelTODO: add description for rel
     */
    @Generated
    private String rel;

    /*
     * TitleTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * TODO: add description for type
     */
    @Generated
    private LinkType type;

    /*
     * HrefTODO: add description for href
     */
    @Generated
    private final String href;

    /*
     * HreflangTODO: add description for hreflang
     */
    @Generated
    private String hreflang;

    /*
     * LengthTODO: add description for length
     */
    @Generated
    private Integer length;

    /**
     * Creates an instance of Link1 class.
     * 
     * @param href the href value to set.
     */
    @Generated
    private Link1(String href) {
        this.href = href;
    }

    /**
     * Get the rel property: RelTODO: add description for rel.
     * 
     * @return the rel value.
     */
    @Generated
    public String getRel() {
        return this.rel;
    }

    /**
     * Get the title property: TitleTODO: add description for title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the type property: TODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public LinkType getType() {
        return this.type;
    }

    /**
     * Get the href property: HrefTODO: add description for href.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Get the hreflang property: HreflangTODO: add description for hreflang.
     * 
     * @return the hreflang value.
     */
    @Generated
    public String getHreflang() {
        return this.hreflang;
    }

    /**
     * Get the length property: LengthTODO: add description for length.
     * 
     * @return the length value.
     */
    @Generated
    public Integer getLength() {
        return this.length;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("href", this.href);
        jsonWriter.writeStringField("rel", this.rel);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("hreflang", this.hreflang);
        jsonWriter.writeNumberField("length", this.length);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Link1 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Link1 if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Link1.
     */
    @Generated
    public static Link1 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String href = null;
            String rel = null;
            String title = null;
            LinkType type = null;
            String hreflang = null;
            Integer length = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("href".equals(fieldName)) {
                    href = reader.getString();
                } else if ("rel".equals(fieldName)) {
                    rel = reader.getString();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = LinkType.fromString(reader.getString());
                } else if ("hreflang".equals(fieldName)) {
                    hreflang = reader.getString();
                } else if ("length".equals(fieldName)) {
                    length = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            Link1 deserializedLink1 = new Link1(href);
            deserializedLink1.rel = rel;
            deserializedLink1.title = title;
            deserializedLink1.type = type;
            deserializedLink1.hreflang = hreflang;
            deserializedLink1.length = length;

            return deserializedLink1;
        });
    }
}
