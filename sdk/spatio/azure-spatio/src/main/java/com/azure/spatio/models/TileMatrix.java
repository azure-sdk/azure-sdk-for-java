// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Tile Matrix Definition
 * 
 * A tile matrix, usually corresponding to a particular zoom level of a
 * TileMatrixSet.
 * 
 * ref:
 * https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrix.jsonTODO: add
 * description for TileMatrix.
 */
@Immutable
public final class TileMatrix implements JsonSerializable<TileMatrix> {
    /*
     * Title of this tile matrix, normally used for display to a humanTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * Brief narrative description of this tile matrix set, normally available for
     * display to a humanTODO: add description for description
     */
    @Generated
    private String description;

    /*
     * Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     * used to describe this datasetTODO: add description for keywords
     */
    @Generated
    private List<String> keywords;

    /*
     * Identifier selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile. Implementation of 'identifier'TODO: add description for id
     */
    @Generated
    private final String id;

    /*
     * Scale denominator of this tile matrixTODO: add description for scaleDenominator
     */
    @Generated
    private final double scaleDenominator;

    /*
     * Cell size of this tile matrixTODO: add description for cellSize
     */
    @Generated
    private final double cellSize;

    /*
     * The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin
     * for numbering tile rows and columns. This corner is also a corner of the (0, 0)
     * tile.TODO: add description for cornerOfOrigin
     */
    @Generated
    private TileMatrixCornerOfOrigin cornerOfOrigin;

    /*
     * Precise position in CRS coordinates of the corner of origin (e.g. the top-left
     * corner) for this tile matrix. This position is also a corner of the (0, 0)
     * tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
     * not exist.TODO: add description for pointOfOrigin
     */
    @Generated
    private final List<String> pointOfOrigin;

    /*
     * Width of each tile of this tile matrix in pixelsTODO: add description for tileWidth
     */
    @Generated
    private final int tileWidth;

    /*
     * Height of each tile of this tile matrix in pixelsTODO: add description for tileHeight
     */
    @Generated
    private final int tileHeight;

    /*
     * Width of the matrix (number of tiles in width)TODO: add description for matrixWidth
     */
    @Generated
    private final int matrixWidth;

    /*
     * Height of the matrix (number of tiles in height)TODO: add description for matrixHeight
     */
    @Generated
    private final int matrixHeight;

    /**
     * Creates an instance of TileMatrix class.
     * 
     * @param id the id value to set.
     * @param scaleDenominator the scaleDenominator value to set.
     * @param cellSize the cellSize value to set.
     * @param pointOfOrigin the pointOfOrigin value to set.
     * @param tileWidth the tileWidth value to set.
     * @param tileHeight the tileHeight value to set.
     * @param matrixWidth the matrixWidth value to set.
     * @param matrixHeight the matrixHeight value to set.
     */
    @Generated
    private TileMatrix(String id, double scaleDenominator, double cellSize, List<String> pointOfOrigin, int tileWidth,
        int tileHeight, int matrixWidth, int matrixHeight) {
        this.id = id;
        this.scaleDenominator = scaleDenominator;
        this.cellSize = cellSize;
        this.pointOfOrigin = pointOfOrigin;
        this.tileWidth = tileWidth;
        this.tileHeight = tileHeight;
        this.matrixWidth = matrixWidth;
        this.matrixHeight = matrixHeight;
    }

    /**
     * Get the title property: Title of this tile matrix, normally used for display to a humanTODO: add description for
     * title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: Brief narrative description of this tile matrix set, normally available for
     * display to a humanTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the keywords property: Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     * used to describe this datasetTODO: add description for keywords.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Get the id property: Identifier selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile. Implementation of 'identifier'TODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the scaleDenominator property: Scale denominator of this tile matrixTODO: add description for
     * scaleDenominator.
     * 
     * @return the scaleDenominator value.
     */
    @Generated
    public double getScaleDenominator() {
        return this.scaleDenominator;
    }

    /**
     * Get the cellSize property: Cell size of this tile matrixTODO: add description for cellSize.
     * 
     * @return the cellSize value.
     */
    @Generated
    public double getCellSize() {
        return this.cellSize;
    }

    /**
     * Get the cornerOfOrigin property: The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin
     * for numbering tile rows and columns. This corner is also a corner of the (0, 0)
     * tile.TODO: add description for cornerOfOrigin.
     * 
     * @return the cornerOfOrigin value.
     */
    @Generated
    public TileMatrixCornerOfOrigin getCornerOfOrigin() {
        return this.cornerOfOrigin;
    }

    /**
     * Get the pointOfOrigin property: Precise position in CRS coordinates of the corner of origin (e.g. the top-left
     * corner) for this tile matrix. This position is also a corner of the (0, 0)
     * tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
     * not exist.TODO: add description for pointOfOrigin.
     * 
     * @return the pointOfOrigin value.
     */
    @Generated
    public List<String> getPointOfOrigin() {
        return this.pointOfOrigin;
    }

    /**
     * Get the tileWidth property: Width of each tile of this tile matrix in pixelsTODO: add description for tileWidth.
     * 
     * @return the tileWidth value.
     */
    @Generated
    public int getTileWidth() {
        return this.tileWidth;
    }

    /**
     * Get the tileHeight property: Height of each tile of this tile matrix in pixelsTODO: add description for
     * tileHeight.
     * 
     * @return the tileHeight value.
     */
    @Generated
    public int getTileHeight() {
        return this.tileHeight;
    }

    /**
     * Get the matrixWidth property: Width of the matrix (number of tiles in width)TODO: add description for
     * matrixWidth.
     * 
     * @return the matrixWidth value.
     */
    @Generated
    public int getMatrixWidth() {
        return this.matrixWidth;
    }

    /**
     * Get the matrixHeight property: Height of the matrix (number of tiles in height)TODO: add description for
     * matrixHeight.
     * 
     * @return the matrixHeight value.
     */
    @Generated
    public int getMatrixHeight() {
        return this.matrixHeight;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeDoubleField("scaleDenominator", this.scaleDenominator);
        jsonWriter.writeDoubleField("cellSize", this.cellSize);
        jsonWriter.writeArrayField("pointOfOrigin", this.pointOfOrigin,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeIntField("tileWidth", this.tileWidth);
        jsonWriter.writeIntField("tileHeight", this.tileHeight);
        jsonWriter.writeIntField("matrixWidth", this.matrixWidth);
        jsonWriter.writeIntField("matrixHeight", this.matrixHeight);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("cornerOfOrigin",
            this.cornerOfOrigin == null ? null : this.cornerOfOrigin.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TileMatrix from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TileMatrix if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TileMatrix.
     */
    @Generated
    public static TileMatrix fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            double scaleDenominator = 0.0;
            double cellSize = 0.0;
            List<String> pointOfOrigin = null;
            int tileWidth = 0;
            int tileHeight = 0;
            int matrixWidth = 0;
            int matrixHeight = 0;
            String title = null;
            String description = null;
            List<String> keywords = null;
            TileMatrixCornerOfOrigin cornerOfOrigin = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("scaleDenominator".equals(fieldName)) {
                    scaleDenominator = reader.getDouble();
                } else if ("cellSize".equals(fieldName)) {
                    cellSize = reader.getDouble();
                } else if ("pointOfOrigin".equals(fieldName)) {
                    pointOfOrigin = reader.readArray(reader1 -> reader1.getString());
                } else if ("tileWidth".equals(fieldName)) {
                    tileWidth = reader.getInt();
                } else if ("tileHeight".equals(fieldName)) {
                    tileHeight = reader.getInt();
                } else if ("matrixWidth".equals(fieldName)) {
                    matrixWidth = reader.getInt();
                } else if ("matrixHeight".equals(fieldName)) {
                    matrixHeight = reader.getInt();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("cornerOfOrigin".equals(fieldName)) {
                    cornerOfOrigin = TileMatrixCornerOfOrigin.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TileMatrix deserializedTileMatrix = new TileMatrix(id, scaleDenominator, cellSize, pointOfOrigin, tileWidth,
                tileHeight, matrixWidth, matrixHeight);
            deserializedTileMatrix.title = title;
            deserializedTileMatrix.description = description;
            deserializedTileMatrix.keywords = keywords;
            deserializedTileMatrix.cornerOfOrigin = cornerOfOrigin;

            return deserializedTileMatrix;
        });
    }
}
