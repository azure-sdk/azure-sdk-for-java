// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.WmtsMosaicsImpl;
import com.azure.spatio.models.ImageType;
import com.azure.spatio.models.Tilematrixsetid;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class WmtsMosaicsAsyncClient {
    @Generated
    private final WmtsMosaicsImpl serviceClient;

    /**
     * Initializes an instance of WmtsMosaicsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    WmtsMosaicsAsyncClient(WmtsMosaicsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>tileMatrixSetId</td><td>String</td><td>No</td><td>Identifier selecting one of the TileMatrixSetId
     * supported (default:
     * 'WebMercatorQuad'). Allowed values: "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid",
     * "NZTM2000Quad", "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad",
     * "WebMercatorQuad", "WorldCRS84Quad", "WorldMercatorWGS84Quad".</td></tr>
     * <tr><td>tileFormat</td><td>String</td><td>No</td><td>Output image type. Default is png. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>tileScale</td><td>Integer</td><td>No</td><td>Tile size scale. 1=256x256, 2=512x512...TODO: add
     * description for "tileScale"?</td></tr>
     * <tr><td>minzoom</td><td>Integer</td><td>No</td><td>Overwrite default minzoom.</td></tr>
     * <tr><td>maxzoom</td><td>Integer</td><td>No</td><td>Overwrite default maxzoom.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a sequence of textual characters along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCapabilitiesXmlWithResponse(String searchid, RequestOptions requestOptions) {
        return this.serviceClient.getCapabilitiesXmlWithResponseAsync(searchid, requestOptions);
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * 
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported (default:
     * 'WebMercatorQuad').
     * @param tileFormat Output image type. Default is png.
     * @param tileScale Tile size scale. 1=256x256, 2=512x512...TODO: add description for "tileScale"?.
     * @param minzoom Overwrite default minzoom.
     * @param maxzoom Overwrite default maxzoom.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> getCapabilitiesXml(String searchid, Tilematrixsetid tileMatrixSetId, ImageType tileFormat,
        Integer tileScale, Integer minzoom, Integer maxzoom) {
        // Generated convenience method for getCapabilitiesXmlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (tileMatrixSetId != null) {
            requestOptions.addQueryParam("tileMatrixSetId", tileMatrixSetId.toString(), false);
        }
        if (tileFormat != null) {
            requestOptions.addQueryParam("tileFormat", tileFormat.toString(), false);
        }
        if (tileScale != null) {
            requestOptions.addQueryParam("tileScale", String.valueOf(tileScale), false);
        }
        if (minzoom != null) {
            requestOptions.addQueryParam("minzoom", String.valueOf(minzoom), false);
        }
        if (maxzoom != null) {
            requestOptions.addQueryParam("maxzoom", String.valueOf(maxzoom), false);
        }
        return getCapabilitiesXmlWithResponse(searchid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(String.class));
    }

    /**
     * Wmts
     * 
     * OGC WMTS endpoint.
     * 
     * @param searchid Search Id (pgSTAC Search Hash).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> getCapabilitiesXml(String searchid) {
        // Generated convenience method for getCapabilitiesXmlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCapabilitiesXmlWithResponse(searchid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(String.class));
    }
}
