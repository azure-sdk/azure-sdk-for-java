// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.spatio.implementation.LegendsImpl;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class LegendsClient {
    @Generated
    private final LegendsImpl serviceClient;

    /**
     * Initializes an instance of LegendsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    LegendsClient(LegendsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>height</td><td>Double</td><td>No</td><td>TODO: add description for "height"?</td></tr>
     * <tr><td>width</td><td>Double</td><td>No</td><td>TODO: add description for "width"?</td></tr>
     * <tr><td>trimStart</td><td>Integer</td><td>No</td><td>TODO: add description for "trimStart"?</td></tr>
     * <tr><td>trimEnd</td><td>Integer</td><td>No</td><td>TODO: add description for "trimEnd"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param cmapName TODO: add description for "cmapName".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getWithResponse(String cmapName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(cmapName, requestOptions);
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * 
     * @param cmapName TODO: add description for "cmapName".
     * @param height TODO: add description for "height"?.
     * @param width TODO: add description for "width"?.
     * @param trimStart TODO: add description for "trimStart"?.
     * @param trimEnd TODO: add description for "trimEnd"?.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get(String cmapName, Double height, Double width, Integer trimStart, Integer trimEnd) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (height != null) {
            requestOptions.addQueryParam("height", String.valueOf(height), false);
        }
        if (width != null) {
            requestOptions.addQueryParam("width", String.valueOf(width), false);
        }
        if (trimStart != null) {
            requestOptions.addQueryParam("trimStart", String.valueOf(trimStart), false);
        }
        if (trimEnd != null) {
            requestOptions.addQueryParam("trimEnd", String.valueOf(trimEnd), false);
        }
        getWithResponse(cmapName, requestOptions).getValue();
    }

    /**
     * Get Legend
     * 
     * Generate a legend image for a given colormap.
     * 
     * If the colormap has non-contiguous values at the beginning or end,
     * which aren't desired in the output image, they can be trimmed by specifying
     * the number of values to trim.
     * 
     * Args:
     * cmap_name (string): The name of the registered colormap to generate
     * a legend for
     * height (float, optional): The output height of the legend image
     * width (float, optional): The output width of the legend image
     * trim_start (int, optional): Number of items to trim from
     * the start of the cmap
     * trim_end (int, optional): Number of items to trim from the end of the cmap
     * 
     * Returns:
     * HTTP response with jpeg encoded image data.
     * 
     * @param cmapName TODO: add description for "cmapName".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get(String cmapName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getWithResponse(cmapName, requestOptions).getValue();
    }
}
