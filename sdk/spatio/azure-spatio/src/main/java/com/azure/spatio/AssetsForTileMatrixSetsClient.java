// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import com.azure.spatio.implementation.AssetsForTileMatrixSetsImpl;
import com.azure.spatio.models.GetLonLatAssetsResponse;
import com.azure.spatio.models.Tilematrixsetid;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class AssetsForTileMatrixSetsClient {
    @Generated
    private final AssetsForTileMatrixSetsImpl serviceClient;

    /**
     * Initializes an instance of AssetsForTileMatrixSetsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssetsForTileMatrixSetsClient(AssetsForTileMatrixSetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Assets For Tile Tilematrixsetid As Path
     * 
     * Return a list of assets which overlap a given tile.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scanLimit</td><td>Integer</td><td>No</td><td>Return as soon as we scan N items (defaults to 10000 in
     * PgSTAC).</td></tr>
     * <tr><td>itemsLimit</td><td>Integer</td><td>No</td><td>Return as soon as we have N items per geometry (defaults to
     * 100 in PgSTAC).</td></tr>
     * <tr><td>timeLimit</td><td>Integer</td><td>No</td><td>Return after N seconds to avoid long requests (defaults to 5
     * in PgSTAC).</td></tr>
     * <tr><td>exitwhenfull</td><td>Boolean</td><td>No</td><td>Return as soon as the geometry is fully covered (defaults
     * to True in PgSTAC).</td></tr>
     * <tr><td>skipcovered</td><td>Boolean</td><td>No</td><td>Skip any items that would show up completely under the
     * previous items (defaults
     * to True in PgSTAC).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported. Allowed values:
     * "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid", "NZTM2000Quad",
     * "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad", "WebMercatorQuad",
     * "WorldCRS84Quad", "WorldMercatorWGS84Quad".
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getZxyAssetsWithResponse(String tileMatrixSetId, String searchid, String z, String x,
        String y, RequestOptions requestOptions) {
        return this.serviceClient.getZxyAssetsWithResponse(tileMatrixSetId, searchid, z, x, y, requestOptions);
    }

    /**
     * Assets For Tile Tilematrixsetid As Path
     * 
     * Return a list of assets which overlap a given tile.
     * 
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scanLimit Return as soon as we scan N items (defaults to 10000 in PgSTAC).
     * @param itemsLimit Return as soon as we have N items per geometry (defaults to 100 in PgSTAC).
     * @param timeLimit Return after N seconds to avoid long requests (defaults to 5 in PgSTAC).
     * @param exitwhenfull Return as soon as the geometry is fully covered (defaults to True in PgSTAC).
     * @param skipcovered Skip any items that would show up completely under the previous items (defaults
     * to True in PgSTAC).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<GetLonLatAssetsResponse> getZxyAssets(Tilematrixsetid tileMatrixSetId, String searchid, String z,
        String x, String y, Integer scanLimit, Integer itemsLimit, Integer timeLimit, Boolean exitwhenfull,
        Boolean skipcovered) {
        // Generated convenience method for getZxyAssetsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (scanLimit != null) {
            requestOptions.addQueryParam("scanLimit", String.valueOf(scanLimit), false);
        }
        if (itemsLimit != null) {
            requestOptions.addQueryParam("itemsLimit", String.valueOf(itemsLimit), false);
        }
        if (timeLimit != null) {
            requestOptions.addQueryParam("timeLimit", String.valueOf(timeLimit), false);
        }
        if (exitwhenfull != null) {
            requestOptions.addQueryParam("exitwhenfull", String.valueOf(exitwhenfull), false);
        }
        if (skipcovered != null) {
            requestOptions.addQueryParam("skipcovered", String.valueOf(skipcovered), false);
        }
        return getZxyAssetsWithResponse(tileMatrixSetId.toString(), searchid, z, x, y, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_GET_LON_LAT_ASSETS_RESPONSE);
    }

    /**
     * Assets For Tile Tilematrixsetid As Path
     * 
     * Return a list of assets which overlap a given tile.
     * 
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param searchid Search Id (pgSTAC Search Hash).
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<GetLonLatAssetsResponse> getZxyAssets(Tilematrixsetid tileMatrixSetId, String searchid, String z,
        String x, String y) {
        // Generated convenience method for getZxyAssetsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getZxyAssetsWithResponse(tileMatrixSetId.toString(), searchid, z, x, y, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_GET_LON_LAT_ASSETS_RESPONSE);
    }

    @Generated
    private static final TypeReference<List<GetLonLatAssetsResponse>> TYPE_REFERENCE_LIST_GET_LON_LAT_ASSETS_RESPONSE
        = new TypeReference<List<GetLonLatAssetsResponse>>() {
        };
}
