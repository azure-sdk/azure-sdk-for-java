// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Spatio geo-catalog operation.
 */
@Immutable
public final class Operation implements JsonSerializable<Operation> {
    /*
     * Operation id
     */
    @Generated
    private final String operationId;

    /*
     * Operation status
     */
    @Generated
    private final OperationStatus status;

    /*
     * The UTC time at which the operation was created
     */
    @Generated
    private final OffsetDateTime creationTime;

    /*
     * The history of the operation status in time
     */
    @Generated
    private final List<OperationStatusHistoryItem> statusHistory;

    /*
     * The UTC time at which the operation was started
     */
    @Generated
    private OffsetDateTime startTime;

    /*
     * The UTC time at which the operation finished its execution
     */
    @Generated
    private OffsetDateTime finishTime;

    /*
     * The number of total items to be processed
     */
    @Generated
    private final long totalItems;

    /*
     * The number of items pending to be processed
     */
    @Generated
    private final long totalPendingItems;

    /*
     * The number of items successfully processed
     */
    @Generated
    private final long totalSuccessfulItems;

    /*
     * The number of items that have failed to be processed
     */
    @Generated
    private final long totalFailedItems;

    /**
     * Creates an instance of Operation class.
     * 
     * @param operationId the operationId value to set.
     * @param status the status value to set.
     * @param creationTime the creationTime value to set.
     * @param statusHistory the statusHistory value to set.
     * @param totalItems the totalItems value to set.
     * @param totalPendingItems the totalPendingItems value to set.
     * @param totalSuccessfulItems the totalSuccessfulItems value to set.
     * @param totalFailedItems the totalFailedItems value to set.
     */
    @Generated
    private Operation(String operationId, OperationStatus status, OffsetDateTime creationTime,
        List<OperationStatusHistoryItem> statusHistory, long totalItems, long totalPendingItems,
        long totalSuccessfulItems, long totalFailedItems) {
        this.operationId = operationId;
        this.status = status;
        this.creationTime = creationTime;
        this.statusHistory = statusHistory;
        this.totalItems = totalItems;
        this.totalPendingItems = totalPendingItems;
        this.totalSuccessfulItems = totalSuccessfulItems;
        this.totalFailedItems = totalFailedItems;
    }

    /**
     * Get the operationId property: Operation id.
     * 
     * @return the operationId value.
     */
    @Generated
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the status property: Operation status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the creationTime property: The UTC time at which the operation was created.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the statusHistory property: The history of the operation status in time.
     * 
     * @return the statusHistory value.
     */
    @Generated
    public List<OperationStatusHistoryItem> getStatusHistory() {
        return this.statusHistory;
    }

    /**
     * Get the startTime property: The UTC time at which the operation was started.
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the finishTime property: The UTC time at which the operation finished its execution.
     * 
     * @return the finishTime value.
     */
    @Generated
    public OffsetDateTime getFinishTime() {
        return this.finishTime;
    }

    /**
     * Get the totalItems property: The number of total items to be processed.
     * 
     * @return the totalItems value.
     */
    @Generated
    public long getTotalItems() {
        return this.totalItems;
    }

    /**
     * Get the totalPendingItems property: The number of items pending to be processed.
     * 
     * @return the totalPendingItems value.
     */
    @Generated
    public long getTotalPendingItems() {
        return this.totalPendingItems;
    }

    /**
     * Get the totalSuccessfulItems property: The number of items successfully processed.
     * 
     * @return the totalSuccessfulItems value.
     */
    @Generated
    public long getTotalSuccessfulItems() {
        return this.totalSuccessfulItems;
    }

    /**
     * Get the totalFailedItems property: The number of items that have failed to be processed.
     * 
     * @return the totalFailedItems value.
     */
    @Generated
    public long getTotalFailedItems() {
        return this.totalFailedItems;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeArrayField("statusHistory", this.statusHistory, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeLongField("totalItems", this.totalItems);
        jsonWriter.writeLongField("totalPendingItems", this.totalPendingItems);
        jsonWriter.writeLongField("totalSuccessfulItems", this.totalSuccessfulItems);
        jsonWriter.writeLongField("totalFailedItems", this.totalFailedItems);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("finishTime",
            this.finishTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.finishTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Operation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Operation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Operation.
     */
    @Generated
    public static Operation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String operationId = null;
            OperationStatus status = null;
            OffsetDateTime creationTime = null;
            List<OperationStatusHistoryItem> statusHistory = null;
            long totalItems = 0L;
            long totalPendingItems = 0L;
            long totalSuccessfulItems = 0L;
            long totalFailedItems = 0L;
            OffsetDateTime startTime = null;
            OffsetDateTime finishTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("statusHistory".equals(fieldName)) {
                    statusHistory = reader.readArray(reader1 -> OperationStatusHistoryItem.fromJson(reader1));
                } else if ("totalItems".equals(fieldName)) {
                    totalItems = reader.getLong();
                } else if ("totalPendingItems".equals(fieldName)) {
                    totalPendingItems = reader.getLong();
                } else if ("totalSuccessfulItems".equals(fieldName)) {
                    totalSuccessfulItems = reader.getLong();
                } else if ("totalFailedItems".equals(fieldName)) {
                    totalFailedItems = reader.getLong();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("finishTime".equals(fieldName)) {
                    finishTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            Operation deserializedOperation = new Operation(operationId, status, creationTime, statusHistory,
                totalItems, totalPendingItems, totalSuccessfulItems, totalFailedItems);
            deserializedOperation.startTime = startTime;
            deserializedOperation.finishTime = finishTime;

            return deserializedOperation;
        });
    }
}
