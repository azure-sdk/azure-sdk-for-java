// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.spatio.models.Metadata;
import com.azure.spatio.models.RegisterMosaicFilterLang;
import com.azure.spatio.models.RegisterMosaicIntersects;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The RegisterRequest model.
 */
@Fluent
public final class RegisterRequest implements JsonSerializable<RegisterRequest> {
    /*
     * CollectionsTODO: add description for collections
     */
    @Generated
    private List<String> collections;

    /*
     * IdsTODO: add description for ids
     */
    @Generated
    private List<String> ids;

    /*
     * BboxTODO: add description for bbox
     */
    @Generated
    private String bbox;

    /*
     * IntersectsTODO: add description for intersects
     */
    @Generated
    private RegisterMosaicIntersects intersects;

    /*
     * Query
     */
    @Generated
    private Map<String, Map<String, String>> query;

    /*
     * Filter
     */
    @Generated
    private Map<String, String> filter;

    /*
     * DatetimeTODO: add description for datetime
     */
    @Generated
    private String datetime;

    /*
     * SortbyTODO: add description for sortby
     */
    @Generated
    private String sortby;

    /*
     * Filter-LangTODO: add description for filterLang
     */
    @Generated
    private RegisterMosaicFilterLang filterLang;

    /*
     * Metadata Model.TODO: add description for metadata
     */
    @Generated
    private Metadata metadata;

    /**
     * Creates an instance of RegisterRequest class.
     */
    @Generated
    public RegisterRequest() {
    }

    /**
     * Get the collections property: CollectionsTODO: add description for collections.
     * 
     * @return the collections value.
     */
    @Generated
    public List<String> getCollections() {
        return this.collections;
    }

    /**
     * Set the collections property: CollectionsTODO: add description for collections.
     * 
     * @param collections the collections value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setCollections(List<String> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the ids property: IdsTODO: add description for ids.
     * 
     * @return the ids value.
     */
    @Generated
    public List<String> getIds() {
        return this.ids;
    }

    /**
     * Set the ids property: IdsTODO: add description for ids.
     * 
     * @param ids the ids value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setIds(List<String> ids) {
        this.ids = ids;
        return this;
    }

    /**
     * Get the bbox property: BboxTODO: add description for bbox.
     * 
     * @return the bbox value.
     */
    @Generated
    public String getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: BboxTODO: add description for bbox.
     * 
     * @param bbox the bbox value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setBbox(String bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * Get the intersects property: IntersectsTODO: add description for intersects.
     * 
     * @return the intersects value.
     */
    @Generated
    public RegisterMosaicIntersects getIntersects() {
        return this.intersects;
    }

    /**
     * Set the intersects property: IntersectsTODO: add description for intersects.
     * 
     * @param intersects the intersects value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setIntersects(RegisterMosaicIntersects intersects) {
        this.intersects = intersects;
        return this;
    }

    /**
     * Get the query property: Query.
     * 
     * @return the query value.
     */
    @Generated
    public Map<String, Map<String, String>> getQuery() {
        return this.query;
    }

    /**
     * Set the query property: Query.
     * 
     * @param query the query value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setQuery(Map<String, Map<String, String>> query) {
        this.query = query;
        return this;
    }

    /**
     * Get the filter property: Filter.
     * 
     * @return the filter value.
     */
    @Generated
    public Map<String, String> getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: Filter.
     * 
     * @param filter the filter value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setFilter(Map<String, String> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the datetime property: DatetimeTODO: add description for datetime.
     * 
     * @return the datetime value.
     */
    @Generated
    public String getDatetime() {
        return this.datetime;
    }

    /**
     * Set the datetime property: DatetimeTODO: add description for datetime.
     * 
     * @param datetime the datetime value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setDatetime(String datetime) {
        this.datetime = datetime;
        return this;
    }

    /**
     * Get the sortby property: SortbyTODO: add description for sortby.
     * 
     * @return the sortby value.
     */
    @Generated
    public String getSortby() {
        return this.sortby;
    }

    /**
     * Set the sortby property: SortbyTODO: add description for sortby.
     * 
     * @param sortby the sortby value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setSortby(String sortby) {
        this.sortby = sortby;
        return this;
    }

    /**
     * Get the filterLang property: Filter-LangTODO: add description for filterLang.
     * 
     * @return the filterLang value.
     */
    @Generated
    public RegisterMosaicFilterLang getFilterLang() {
        return this.filterLang;
    }

    /**
     * Set the filterLang property: Filter-LangTODO: add description for filterLang.
     * 
     * @param filterLang the filterLang value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setFilterLang(RegisterMosaicFilterLang filterLang) {
        this.filterLang = filterLang;
        return this;
    }

    /**
     * Get the metadata property: Metadata Model.TODO: add description for metadata.
     * 
     * @return the metadata value.
     */
    @Generated
    public Metadata getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata Model.TODO: add description for metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the RegisterRequest object itself.
     */
    @Generated
    public RegisterRequest setMetadata(Metadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ids", this.ids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("bbox", this.bbox);
        jsonWriter.writeJsonField("intersects", this.intersects);
        jsonWriter.writeMapField("query", this.query,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeMapField("filter", this.filter, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("datetime", this.datetime);
        jsonWriter.writeStringField("sortby", this.sortby);
        jsonWriter.writeStringField("filter-lang", this.filterLang == null ? null : this.filterLang.toString());
        jsonWriter.writeJsonField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisterRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisterRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisterRequest.
     */
    @Generated
    public static RegisterRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisterRequest deserializedRegisterRequest = new RegisterRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    List<String> collections = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegisterRequest.collections = collections;
                } else if ("ids".equals(fieldName)) {
                    List<String> ids = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegisterRequest.ids = ids;
                } else if ("bbox".equals(fieldName)) {
                    deserializedRegisterRequest.bbox = reader.getString();
                } else if ("intersects".equals(fieldName)) {
                    deserializedRegisterRequest.intersects = RegisterMosaicIntersects.fromJson(reader);
                } else if ("query".equals(fieldName)) {
                    Map<String, Map<String, String>> query
                        = reader.readMap(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                    deserializedRegisterRequest.query = query;
                } else if ("filter".equals(fieldName)) {
                    Map<String, String> filter = reader.readMap(reader1 -> reader1.getString());
                    deserializedRegisterRequest.filter = filter;
                } else if ("datetime".equals(fieldName)) {
                    deserializedRegisterRequest.datetime = reader.getString();
                } else if ("sortby".equals(fieldName)) {
                    deserializedRegisterRequest.sortby = reader.getString();
                } else if ("filter-lang".equals(fieldName)) {
                    deserializedRegisterRequest.filterLang = RegisterMosaicFilterLang.fromString(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    deserializedRegisterRequest.metadata = Metadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisterRequest;
        });
    }
}
