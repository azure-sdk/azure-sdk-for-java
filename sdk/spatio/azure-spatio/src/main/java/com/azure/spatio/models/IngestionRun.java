// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Spatio geo-catalog ingestion run.
 */
@Immutable
public final class IngestionRun implements JsonSerializable<IngestionRun> {
    /*
     * Run id
     */
    @Generated
    private final String runId;

    /*
     * Run creation time
     */
    @Generated
    private final OffsetDateTime creationTime;

    /*
     * Source catalog URL
     */
    @Generated
    private final String sourceCatalogUrl;

    /*
     * Skip existing items
     */
    @Generated
    private final boolean skipExistingItems;

    /*
     * Keep original assets
     */
    @Generated
    private final boolean keepOriginalAssets;

    /*
     * Operation
     */
    @Generated
    private final Operation operation;

    /**
     * Creates an instance of IngestionRun class.
     * 
     * @param runId the runId value to set.
     * @param creationTime the creationTime value to set.
     * @param sourceCatalogUrl the sourceCatalogUrl value to set.
     * @param skipExistingItems the skipExistingItems value to set.
     * @param keepOriginalAssets the keepOriginalAssets value to set.
     * @param operation the operation value to set.
     */
    @Generated
    private IngestionRun(String runId, OffsetDateTime creationTime, String sourceCatalogUrl, boolean skipExistingItems,
        boolean keepOriginalAssets, Operation operation) {
        this.runId = runId;
        this.creationTime = creationTime;
        this.sourceCatalogUrl = sourceCatalogUrl;
        this.skipExistingItems = skipExistingItems;
        this.keepOriginalAssets = keepOriginalAssets;
        this.operation = operation;
    }

    /**
     * Get the runId property: Run id.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the creationTime property: Run creation time.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the sourceCatalogUrl property: Source catalog URL.
     * 
     * @return the sourceCatalogUrl value.
     */
    @Generated
    public String getSourceCatalogUrl() {
        return this.sourceCatalogUrl;
    }

    /**
     * Get the skipExistingItems property: Skip existing items.
     * 
     * @return the skipExistingItems value.
     */
    @Generated
    public boolean isSkipExistingItems() {
        return this.skipExistingItems;
    }

    /**
     * Get the keepOriginalAssets property: Keep original assets.
     * 
     * @return the keepOriginalAssets value.
     */
    @Generated
    public boolean isKeepOriginalAssets() {
        return this.keepOriginalAssets;
    }

    /**
     * Get the operation property: Operation.
     * 
     * @return the operation value.
     */
    @Generated
    public Operation getOperation() {
        return this.operation;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
        jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
        jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
        jsonWriter.writeJsonField("operation", this.operation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionRun if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionRun.
     */
    @Generated
    public static IngestionRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String runId = null;
            OffsetDateTime creationTime = null;
            String sourceCatalogUrl = null;
            boolean skipExistingItems = false;
            boolean keepOriginalAssets = false;
            Operation operation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runId".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sourceCatalogUrl".equals(fieldName)) {
                    sourceCatalogUrl = reader.getString();
                } else if ("skipExistingItems".equals(fieldName)) {
                    skipExistingItems = reader.getBoolean();
                } else if ("keepOriginalAssets".equals(fieldName)) {
                    keepOriginalAssets = reader.getBoolean();
                } else if ("operation".equals(fieldName)) {
                    operation = Operation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new IngestionRun(runId, creationTime, sourceCatalogUrl, skipExistingItems, keepOriginalAssets,
                operation);
        });
    }
}
