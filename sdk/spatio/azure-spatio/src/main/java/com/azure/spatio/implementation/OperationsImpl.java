// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Operations.
 */
public final class OperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of OperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OperationsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(OperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface OperationsService {
        @Get("/api/collections/{collectionId}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("operationId") String operationId, RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @PathParam("operationId") String operationId,
            RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/operations/{operationId}/logs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLogs(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/operations/{operationId}/logs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLogsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String collectionId, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, operationId, accept, requestOptions, context));
    }

    /**
     * Get an operation of a geo-catalog collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>Number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>Number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAll(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get operations of a geo-catalog collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>The number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>The number of items to skip</td></tr>
     * <tr><td>$top</td><td>Long</td><td>No</td><td>Number of items to return</td></tr>
     * <tr><td>$skip</td><td>Long</td><td>No</td><td>Number of items to skip</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operations of a geo-catalog collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String collectionId, String operationId,
        RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, operationId, requestOptions, context));
    }

    /**
     * Cancel a running operation of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String collectionId, String operationId, RequestOptions requestOptions) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            operationId, requestOptions, Context.NONE);
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAllWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.deleteAll(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, requestOptions, context));
    }

    /**
     * Cancel all running operations of a geo-catalog collection.
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAllWithResponse(String collectionId, RequestOptions requestOptions) {
        return service.deleteAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, requestOptions, Context.NONE);
    }

    /**
     * Get operation logs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation logs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogsWithResponseAsync(String collectionId, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLogs(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, operationId, accept, requestOptions, context));
    }

    /**
     * Get operation logs.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param operationId Operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation logs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogsWithResponse(String collectionId, String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLogsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, operationId, accept, requestOptions, Context.NONE);
    }
}
