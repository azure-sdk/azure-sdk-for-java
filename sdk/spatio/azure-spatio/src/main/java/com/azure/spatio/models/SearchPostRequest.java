// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Search model.
 * 
 * Overrides the validation for datetime from the base request model.TODO: add description for SearchPostRequest.
 */
@Fluent
public final class SearchPostRequest implements JsonSerializable<SearchPostRequest> {
    /*
     * CollectionsTODO: add description for collections
     */
    @Generated
    private List<String> collections;

    /*
     * IdsTODO: add description for ids
     */
    @Generated
    private List<String> ids;

    /*
     * BboxTODO: add description for bbox
     */
    @Generated
    private String bbox;

    /*
     * IntersectsTODO: add description for intersects
     */
    @Generated
    private SearchPostRequestIntersects intersects;

    /*
     * DatetimeTODO: add description for datetime
     */
    @Generated
    private String datetime;

    /*
     * LimitTODO: add description for limit
     */
    @Generated
    private Integer limit;

    /*
     * Conf
     */
    @Generated
    private Map<String, String> conf;

    /*
     * SignTODO: add description for sign
     */
    @Generated
    private Boolean sign;

    /*
     * DurationTODO: add description for duration
     */
    @Generated
    private Integer duration;

    /*
     * Query
     */
    @Generated
    private Map<String, StringRecord> query;

    /*
     * SortbyTODO: add description for sortby
     */
    @Generated
    private List<SortExtension> sortby;

    /*
     * FieldsTODO: add description for fields
     */
    @Generated
    private List<SearchPostRequestFields> fields;

    /*
     * Filter
     */
    @Generated
    private Map<String, String> filter;

    /*
     * Filter-CrsTODO: add description for filterCrs
     */
    @Generated
    private String filterCrs;

    /*
     * TODO: add description for filterLang
     */
    @Generated
    private SearchPostRequestFilterLang filterLang;

    /*
     * TokenTODO: add description for token
     */
    @Generated
    private String token;

    /**
     * Creates an instance of SearchPostRequest class.
     */
    @Generated
    public SearchPostRequest() {
    }

    /**
     * Get the collections property: CollectionsTODO: add description for collections.
     * 
     * @return the collections value.
     */
    @Generated
    public List<String> getCollections() {
        return this.collections;
    }

    /**
     * Set the collections property: CollectionsTODO: add description for collections.
     * 
     * @param collections the collections value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setCollections(List<String> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the ids property: IdsTODO: add description for ids.
     * 
     * @return the ids value.
     */
    @Generated
    public List<String> getIds() {
        return this.ids;
    }

    /**
     * Set the ids property: IdsTODO: add description for ids.
     * 
     * @param ids the ids value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setIds(List<String> ids) {
        this.ids = ids;
        return this;
    }

    /**
     * Get the bbox property: BboxTODO: add description for bbox.
     * 
     * @return the bbox value.
     */
    @Generated
    public String getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: BboxTODO: add description for bbox.
     * 
     * @param bbox the bbox value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setBbox(String bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * Get the intersects property: IntersectsTODO: add description for intersects.
     * 
     * @return the intersects value.
     */
    @Generated
    public SearchPostRequestIntersects getIntersects() {
        return this.intersects;
    }

    /**
     * Set the intersects property: IntersectsTODO: add description for intersects.
     * 
     * @param intersects the intersects value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setIntersects(SearchPostRequestIntersects intersects) {
        this.intersects = intersects;
        return this;
    }

    /**
     * Get the datetime property: DatetimeTODO: add description for datetime.
     * 
     * @return the datetime value.
     */
    @Generated
    public String getDatetime() {
        return this.datetime;
    }

    /**
     * Set the datetime property: DatetimeTODO: add description for datetime.
     * 
     * @param datetime the datetime value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setDatetime(String datetime) {
        this.datetime = datetime;
        return this;
    }

    /**
     * Get the limit property: LimitTODO: add description for limit.
     * 
     * @return the limit value.
     */
    @Generated
    public Integer getLimit() {
        return this.limit;
    }

    /**
     * Set the limit property: LimitTODO: add description for limit.
     * 
     * @param limit the limit value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the conf property: Conf.
     * 
     * @return the conf value.
     */
    @Generated
    public Map<String, String> getConf() {
        return this.conf;
    }

    /**
     * Set the conf property: Conf.
     * 
     * @param conf the conf value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setConf(Map<String, String> conf) {
        this.conf = conf;
        return this;
    }

    /**
     * Get the sign property: SignTODO: add description for sign.
     * 
     * @return the sign value.
     */
    @Generated
    public Boolean isSign() {
        return this.sign;
    }

    /**
     * Set the sign property: SignTODO: add description for sign.
     * 
     * @param sign the sign value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setSign(Boolean sign) {
        this.sign = sign;
        return this;
    }

    /**
     * Get the duration property: DurationTODO: add description for duration.
     * 
     * @return the duration value.
     */
    @Generated
    public Integer getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: DurationTODO: add description for duration.
     * 
     * @param duration the duration value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setDuration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the query property: Query.
     * 
     * @return the query value.
     */
    @Generated
    public Map<String, StringRecord> getQuery() {
        return this.query;
    }

    /**
     * Set the query property: Query.
     * 
     * @param query the query value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setQuery(Map<String, StringRecord> query) {
        this.query = query;
        return this;
    }

    /**
     * Get the sortby property: SortbyTODO: add description for sortby.
     * 
     * @return the sortby value.
     */
    @Generated
    public List<SortExtension> getSortby() {
        return this.sortby;
    }

    /**
     * Set the sortby property: SortbyTODO: add description for sortby.
     * 
     * @param sortby the sortby value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setSortby(List<SortExtension> sortby) {
        this.sortby = sortby;
        return this;
    }

    /**
     * Get the fields property: FieldsTODO: add description for fields.
     * 
     * @return the fields value.
     */
    @Generated
    public List<SearchPostRequestFields> getFields() {
        return this.fields;
    }

    /**
     * Set the fields property: FieldsTODO: add description for fields.
     * 
     * @param fields the fields value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFields(List<SearchPostRequestFields> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the filter property: Filter.
     * 
     * @return the filter value.
     */
    @Generated
    public Map<String, String> getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: Filter.
     * 
     * @param filter the filter value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilter(Map<String, String> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the filterCrs property: Filter-CrsTODO: add description for filterCrs.
     * 
     * @return the filterCrs value.
     */
    @Generated
    public String getFilterCrs() {
        return this.filterCrs;
    }

    /**
     * Set the filterCrs property: Filter-CrsTODO: add description for filterCrs.
     * 
     * @param filterCrs the filterCrs value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilterCrs(String filterCrs) {
        this.filterCrs = filterCrs;
        return this;
    }

    /**
     * Get the filterLang property: TODO: add description for filterLang.
     * 
     * @return the filterLang value.
     */
    @Generated
    public SearchPostRequestFilterLang getFilterLang() {
        return this.filterLang;
    }

    /**
     * Set the filterLang property: TODO: add description for filterLang.
     * 
     * @param filterLang the filterLang value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setFilterLang(SearchPostRequestFilterLang filterLang) {
        this.filterLang = filterLang;
        return this;
    }

    /**
     * Get the token property: TokenTODO: add description for token.
     * 
     * @return the token value.
     */
    @Generated
    public String getToken() {
        return this.token;
    }

    /**
     * Set the token property: TokenTODO: add description for token.
     * 
     * @param token the token value to set.
     * @return the SearchPostRequest object itself.
     */
    @Generated
    public SearchPostRequest setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ids", this.ids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("bbox", this.bbox);
        jsonWriter.writeJsonField("intersects", this.intersects);
        jsonWriter.writeStringField("datetime", this.datetime);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeMapField("conf", this.conf, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("sign", this.sign);
        jsonWriter.writeNumberField("duration", this.duration);
        jsonWriter.writeMapField("query", this.query, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sortby", this.sortby, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("fields", this.fields, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("filter", this.filter, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("filter-crs", this.filterCrs);
        jsonWriter.writeStringField("filter-lang", this.filterLang == null ? null : this.filterLang.toString());
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchPostRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchPostRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchPostRequest.
     */
    @Generated
    public static SearchPostRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchPostRequest deserializedSearchPostRequest = new SearchPostRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    List<String> collections = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.collections = collections;
                } else if ("ids".equals(fieldName)) {
                    List<String> ids = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.ids = ids;
                } else if ("bbox".equals(fieldName)) {
                    deserializedSearchPostRequest.bbox = reader.getString();
                } else if ("intersects".equals(fieldName)) {
                    deserializedSearchPostRequest.intersects = SearchPostRequestIntersects.fromJson(reader);
                } else if ("datetime".equals(fieldName)) {
                    deserializedSearchPostRequest.datetime = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedSearchPostRequest.limit = reader.getNullable(JsonReader::getInt);
                } else if ("conf".equals(fieldName)) {
                    Map<String, String> conf = reader.readMap(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.conf = conf;
                } else if ("sign".equals(fieldName)) {
                    deserializedSearchPostRequest.sign = reader.getNullable(JsonReader::getBoolean);
                } else if ("duration".equals(fieldName)) {
                    deserializedSearchPostRequest.duration = reader.getNullable(JsonReader::getInt);
                } else if ("query".equals(fieldName)) {
                    Map<String, StringRecord> query = reader.readMap(reader1 -> StringRecord.fromJson(reader1));
                    deserializedSearchPostRequest.query = query;
                } else if ("sortby".equals(fieldName)) {
                    List<SortExtension> sortby = reader.readArray(reader1 -> SortExtension.fromJson(reader1));
                    deserializedSearchPostRequest.sortby = sortby;
                } else if ("fields".equals(fieldName)) {
                    List<SearchPostRequestFields> fields
                        = reader.readArray(reader1 -> SearchPostRequestFields.fromJson(reader1));
                    deserializedSearchPostRequest.fields = fields;
                } else if ("filter".equals(fieldName)) {
                    Map<String, String> filter = reader.readMap(reader1 -> reader1.getString());
                    deserializedSearchPostRequest.filter = filter;
                } else if ("filter-crs".equals(fieldName)) {
                    deserializedSearchPostRequest.filterCrs = reader.getString();
                } else if ("filter-lang".equals(fieldName)) {
                    deserializedSearchPostRequest.filterLang
                        = SearchPostRequestFilterLang.fromString(reader.getString());
                } else if ("token".equals(fieldName)) {
                    deserializedSearchPostRequest.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchPostRequest;
        });
    }
}
