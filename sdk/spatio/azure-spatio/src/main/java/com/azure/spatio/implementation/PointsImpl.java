// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Points.
 */
public final class PointsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PointsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of PointsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PointsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service = RestProxy.create(PointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientPoints to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface PointsService {
        @Get("/api/collections/{collectionId}/items/{itemId}/point/{lon},{lat}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLonLat(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("lon") String lon, @PathParam("lat") String lat,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/items/{itemId}/point/{lon},{lat}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLonLatSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("lon") String lon, @PathParam("lat") String lat,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     coordinates (Required): [
     *         double (Required)
     *     ]
     *     values (Required): [
     *         double (Required)
     *     ]
     *     band_names (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param lon Longitude.
     * @param lat Latitude.
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return point model.
     * 
     * response model for `/point` endpointsTODO: add description for TitilerCoreModelsResponsesPoint along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLonLatWithResponseAsync(String lon, String lat, String collectionId,
        String itemId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getLonLat(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), lon,
                lat, collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     coordinates (Required): [
     *         double (Required)
     *     ]
     *     values (Required): [
     *         double (Required)
     *     ]
     *     band_names (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param lon Longitude.
     * @param lat Latitude.
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return point model.
     * 
     * response model for `/point` endpointsTODO: add description for TitilerCoreModelsResponsesPoint along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLonLatWithResponse(String lon, String lat, String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLonLatSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), lon, lat,
            collectionId, itemId, accept, requestOptions, Context.NONE);
    }
}
