// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.CollectionOperationsImpl;
import com.azure.spatio.implementation.models.CreateRequest1;
import com.azure.spatio.models.Collection;
import com.azure.spatio.models.Collections;
import com.azure.spatio.models.CreateOptions;
import com.azure.spatio.models.GeoCatalogCollection;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class CollectionOperationsAsyncClient {
    @Generated
    private final CollectionOperationsImpl serviceClient;

    /**
     * Initializes an instance of CollectionOperationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CollectionOperationsAsyncClient(CollectionOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     *     collections (Required): [
     *          (Required){
     *             id: String (Required)
     *             description: String (Required)
     *             stac_version: String (Optional)
     *             links (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             title: String (Optional)
     *             type: String (Optional)
     *             assets (Optional): {
     *                 String (Required): {
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     start_datetime: OffsetDateTime (Optional)
     *                     end_datetime: OffsetDateTime (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             description: String (Optional)
     *                             roles (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             url: String (Optional)
     *                         }
     *                     ]
     *                     gsd: Double (Optional)
     *                     href: String (Required)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             license: String (Required)
     *             extent (Required): {
     *                 spatial (Required): {
     *                     bbox (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *                 temporal (Required): {
     *                     interval (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *             }
     *             keywords (Optional): [
     *                 String (Optional)
     *             ]
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             summaries (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collections
     * 
     * Endpoint along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponseAsync(requestOptions);
    }

    /**
     * Create Collection
     * 
     * Add a new collection to the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to create.
     * 
     * Returns:
     * The collection that was created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param createRequest1 The createRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(BinaryData createRequest1, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(createRequest1, requestOptions);
    }

    /**
     * Get Collection
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *         }
     *     ]
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             title: String (Optional)
     *             description: String (Optional)
     *             start_datetime: OffsetDateTime (Optional)
     *             end_datetime: OffsetDateTime (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             href: String (Required)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection
     * 
     * Endpoint along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Update Collection
     * 
     * Update a collection in the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to update.
     * 
     * Returns:
     * The collection that was updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection from the GeoCatalog instance
     * 
     * Args:
     * collection_id: the collection id to delete.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * 
     * @param sign TODO: add description for "sign"?.
     * @param duration TODO: add description for "duration"?.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * Endpoint on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Collections> getAll(Boolean sign, Integer duration) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", String.valueOf(sign), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        return getAllWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Collections.class));
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collections
     * 
     * Endpoint on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Collections> getAll() {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Collections.class));
    }

    /**
     * Create Collection
     * 
     * Add a new collection to the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to create.
     * 
     * Returns:
     * The collection that was created.
     * 
     * @param options Options for create API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> create(CreateOptions options) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest1 createRequest1Obj = new CreateRequest1(options.getType(), options.getStacVersion(),
            options.getId(), options.getDescription(), options.getLinks(), options.getLicense(), options.getExtent())
                .setStacExtensions(options.getStacExtensions())
                .setTitle(options.getTitle())
                .setKeywords(options.getKeywords())
                .setProviders(options.getProviders())
                .setAssets(options.getAssets())
                .setSummaries(options.getSummaries())
                .setMsftShortDescription(options.getMsftShortDescription());
        BinaryData createRequest1 = BinaryData.fromObject(createRequest1Obj);
        return createWithResponse(createRequest1, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }

    /**
     * Get Collection
     * 
     * Endpoint.
     * 
     * @param collectionId Collection ID.
     * @param sign TODO: add description for "sign"?.
     * @param duration TODO: add description for "duration"?.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Endpoint on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Collection> get(String collectionId, Boolean sign, Integer duration) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sign != null) {
            requestOptions.addQueryParam("sign", String.valueOf(sign), false);
        }
        if (duration != null) {
            requestOptions.addQueryParam("duration", String.valueOf(duration), false);
        }
        return getWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Collection.class));
    }

    /**
     * Get Collection
     * 
     * Endpoint.
     * 
     * @param collectionId Collection ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection
     * 
     * Endpoint on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Collection> get(String collectionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Collection.class));
    }

    /**
     * Update Collection
     * 
     * Update a collection in the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to update.
     * 
     * Returns:
     * The collection that was updated.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeoCatalogCollection> createOrReplace(String collectionId, GeoCatalogCollection body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(collectionId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GeoCatalogCollection.class));
    }

    /**
     * Delete Collection
     * 
     * Delete a collection from the GeoCatalog instance
     * 
     * Args:
     * collection_id: the collection id to delete.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String collectionId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
