// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.CollectionMosaicsImpl;
import com.azure.spatio.models.Mosaic;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class CollectionMosaicsAsyncClient {
    @Generated
    private final CollectionMosaicsImpl serviceClient;

    /**
     * Initializes an instance of CollectionMosaicsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CollectionMosaicsAsyncClient(CollectionMosaicsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAllWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single predefined CQL2-JSON query representing a named mosaic.TODO: add description for Mosaic along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addWithResponseAsync(collectionId, body, requestOptions);
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     cql (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single predefined CQL2-JSON query representing a named mosaic.TODO: add description for Mosaic along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponse(String collectionId, String mosaicId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponseAsync(collectionId, mosaicId, body, requestOptions);
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String collectionId, String mosaicId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(collectionId, mosaicId, requestOptions);
    }

    /**
     * Get Collection Mosaics
     * 
     * Get the mosaic definitions for a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaics
     * 
     * Get the mosaic definitions for a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getAll(String collectionId) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllWithResponse(collectionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add Collection Mosaic
     * 
     * Add a mosaic definition to a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single predefined CQL2-JSON query representing a named mosaic.TODO: add description for Mosaic on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> add(String collectionId, Mosaic body) {
        // Generated convenience method for addWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addWithResponse(collectionId, BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Get Collection Mosaic
     * 
     * Get a mosaic definition from a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection Mosaic
     * 
     * Get a mosaic definition from a given collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> get(String collectionId, String mosaicId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Update Collection Mosaic
     * 
     * Update a mosaic definition from a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single predefined CQL2-JSON query representing a named mosaic.TODO: add description for Mosaic on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Mosaic> createOrReplace(String collectionId, String mosaicId, Mosaic body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(collectionId, mosaicId, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Mosaic.class));
    }

    /**
     * Delete Collection Mosaic
     * 
     * Delete a mosaic definition from a given collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param mosaicId TODO: add description for "mosaicId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String collectionId, String mosaicId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(collectionId, mosaicId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
