// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * TODO: add description for STACItemCollection.
 */
@Immutable
public final class StacItemCollection implements JsonSerializable<StacItemCollection> {
    /*
     * TODO: add description for type
     */
    @Generated
    private final String type;

    /*
     * TODO: add description for features
     */
    @Generated
    private final List<StacItem> features;

    /*
     * TODO: add description for links
     */
    @Generated
    private final List<Link> links;

    /*
     * TODO: add description for stacVersion
     */
    @Generated
    private String stacVersion;

    /*
     * TODO: add description for numberMatched
     */
    @Generated
    private Long numberMatched;

    /*
     * TODO: add description for numberReturned
     */
    @Generated
    private Long numberReturned;

    /**
     * Creates an instance of StacItemCollection class.
     * 
     * @param type the type value to set.
     * @param features the features value to set.
     * @param links the links value to set.
     */
    @Generated
    private StacItemCollection(String type, List<StacItem> features, List<Link> links) {
        this.type = type;
        this.features = features;
        this.links = links;
    }

    /**
     * Get the type property: TODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the features property: TODO: add description for features.
     * 
     * @return the features value.
     */
    @Generated
    public List<StacItem> getFeatures() {
        return this.features;
    }

    /**
     * Get the links property: TODO: add description for links.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the stacVersion property: TODO: add description for stacVersion.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the numberMatched property: TODO: add description for numberMatched.
     * 
     * @return the numberMatched value.
     */
    @Generated
    public Long getNumberMatched() {
        return this.numberMatched;
    }

    /**
     * Get the numberReturned property: TODO: add description for numberReturned.
     * 
     * @return the numberReturned value.
     */
    @Generated
    public Long getNumberReturned() {
        return this.numberReturned;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("stacVersion", this.stacVersion);
        jsonWriter.writeNumberField("numberMatched", this.numberMatched);
        jsonWriter.writeNumberField("numberReturned", this.numberReturned);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItemCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItemCollection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItemCollection.
     */
    @Generated
    public static StacItemCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            List<StacItem> features = null;
            List<Link> links = null;
            String stacVersion = null;
            Long numberMatched = null;
            Long numberReturned = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("features".equals(fieldName)) {
                    features = reader.readArray(reader1 -> StacItem.fromJson(reader1));
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("stacVersion".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("numberMatched".equals(fieldName)) {
                    numberMatched = reader.getNullable(JsonReader::getLong);
                } else if ("numberReturned".equals(fieldName)) {
                    numberReturned = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            StacItemCollection deserializedStacItemCollection = new StacItemCollection(type, features, links);
            deserializedStacItemCollection.stacVersion = stacVersion;
            deserializedStacItemCollection.numberMatched = numberMatched;
            deserializedStacItemCollection.numberReturned = numberReturned;

            return deserializedStacItemCollection;
        });
    }
}
