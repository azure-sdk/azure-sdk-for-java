// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.TileMatrixSetsImpl;
import com.azure.spatio.models.Algorithm;
import com.azure.spatio.models.ColorMapNames;
import com.azure.spatio.models.ImageType;
import com.azure.spatio.models.Resampling;
import com.azure.spatio.models.Tilematrixsetid;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class TileMatrixSetsAsyncClient {
    @Generated
    private final TileMatrixSetsImpl serviceClient;

    /**
     * Initializes an instance of TileMatrixSetsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TileMatrixSetsAsyncClient(TileMatrixSetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>colorFormula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithmParams</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormapName</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>returnMask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdatasetName</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdatasetBands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported. Allowed values:
     * "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid", "NZTM2000Quad",
     * "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad", "WebMercatorQuad",
     * "WorldCRS84Quad", "WorldMercatorWGS84Quad".
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param format TODO: add description for "format". Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2",
     * "webp", "pngraw".
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getZxyScalexFormatWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, String z, String x, String y, String scale, String format, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getZxyScalexFormatWithResponseAsync(collectionId, itemId, tileMatrixSetId, z, x, y,
            scale, format, accept, requestOptions);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>TODO: add description for "format"?. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>colorFormula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithmParams</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormapName</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>returnMask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdatasetName</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdatasetBands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported. Allowed values:
     * "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid", "NZTM2000Quad",
     * "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad", "WebMercatorQuad",
     * "WorldCRS84Quad", "WorldMercatorWGS84Quad".
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getZxyScalexWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, String z, String x, String y, String scale, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getZxyScalexWithResponseAsync(collectionId, itemId, tileMatrixSetId, z, x, y, scale,
            accept, requestOptions);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scale</td><td>Integer</td><td>No</td><td>TODO: add description for "scale"?</td></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>colorFormula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithmParams</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormapName</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>returnMask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdatasetName</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdatasetBands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported. Allowed values:
     * "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid", "NZTM2000Quad",
     * "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad", "WebMercatorQuad",
     * "WorldCRS84Quad", "WorldMercatorWGS84Quad".
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param format TODO: add description for "format". Allowed values: "png", "npy", "tif", "jpeg", "jpg", "jp2",
     * "webp", "pngraw".
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getZxyFormatWithResponse(String collectionId, String itemId,
        String tileMatrixSetId, String z, String x, String y, String format, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getZxyFormatWithResponseAsync(collectionId, itemId, tileMatrixSetId, z, x, y, format,
            accept, requestOptions);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>scale</td><td>Integer</td><td>No</td><td>TODO: add description for "scale"?</td></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>TODO: add description for "format"?. Allowed values: "png",
     * "npy", "tif", "jpeg", "jpg", "jp2", "webp", "pngraw".</td></tr>
     * <tr><td>buffer</td><td>Double</td><td>No</td><td>Buffer on each side of the given tile. It must be a multiple of
     * `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).</td></tr>
     * <tr><td>colorFormula</td><td>String</td><td>No</td><td>rio-color formula (info:
     * https://github.com/mapbox/rio-color)</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * <tr><td>algorithm</td><td>String</td><td>No</td><td>Algorithm name. Allowed values: "hillshade", "contours",
     * "normalizedIndex", "terrarium", "terrainrgb".</td></tr>
     * <tr><td>algorithmParams</td><td>String</td><td>No</td><td>Algorithm parameter</td></tr>
     * <tr><td>rescale</td><td>List&lt;String&gt;</td><td>No</td><td>comma (',') delimited Min,Max range. Can set
     * multiple time for multiple bands. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>colormapName</td><td>String</td><td>No</td><td>Colormap name. Allowed values: "accent", "accent_r",
     * "afmhot", "afmhot_r", "ai4g-lulc", "alos-fnf", "alos-palsar-mask", "autumn", "autumn_r", "binary", "binary_r",
     * "blues", "blues_r", "bone", "bone_r", "brbg", "brbg_r", "brg", "brg_r", "bugn", "bugn_r", "bupu", "bupu_r",
     * "bwr", "bwr_r", "c-cap", "cfastie", "chesapeake-lc-13", "chesapeake-lc-7", "chesapeake-lu", "chloris-biomass",
     * "cividis", "cividis_r", "cmrmap", "cmrmap_r", "cool", "cool_r", "coolwarm", "coolwarm_r", "copper", "copper_r",
     * "cubehelix", "cubehelix_r", "dark2", "dark2_r", "drcog-lulc", "esa-cci-lc", "esa-worldcover", "flag", "flag_r",
     * "gap-lulc", "gist_earth", "gist_earth_r", "gist_gray", "gist_gray_r", "gist_heat", "gist_heat_r", "gist_ncar",
     * "gist_ncar_r", "gist_rainbow", "gist_rainbow_r", "gist_stern", "gist_stern_r", "gist_yarg", "gist_yarg_r",
     * "gnbu", "gnbu_r", "gnuplot", "gnuplot2", "gnuplot2_r", "gnuplot_r", "gray", "gray_r", "greens", "greens_r",
     * "greys", "greys_r", "hot", "hot_r", "hsv", "hsv_r", "inferno", "inferno_r", "io-bii", "io-lulc",
     * "io-lulc-9-class", "jet", "jet_r", "jrc-change", "jrc-extent", "jrc-occurrence", "jrc-recurrence",
     * "jrc-seasonality", "jrc-transitions", "lidar-classification", "lidar-hag", "lidar-hag-alternative",
     * "lidar-intensity", "lidar-returns", "magma", "magma_r", "modis-10A1", "modis-10A2", "modis-13A1|Q1",
     * "modis-14A1|A2", "modis-15A2H|A3H", "modis-16A3GF-ET", "modis-16A3GF-PET", "modis-17A2H|A2HGF", "modis-17A3HGF",
     * "modis-64A1", "mtbs-severity", "nipy_spectral", "nipy_spectral_r", "nrcan-lulc", "ocean", "ocean_r", "oranges",
     * "oranges_r", "orrd", "orrd_r", "paired", "paired_r", "pastel1", "pastel1_r", "pastel2", "pastel2_r", "pink",
     * "pink_r", "piyg", "piyg_r", "plasma", "plasma_r", "prgn", "prgn_r", "prism", "prism_r", "pubu", "pubu_r",
     * "pubugn", "pubugn_r", "puor", "puor_r", "purd", "purd_r", "purples", "purples_r", "qpe", "rainbow", "rainbow_r",
     * "rdbu", "rdbu_r", "rdgy", "rdgy_r", "rdpu", "rdpu_r", "rdylbu", "rdylbu_r", "rdylgn", "rdylgn_r", "reds",
     * "reds_r", "rplumbo", "schwarzwald", "seismic", "seismic_r", "set1", "set1_r", "set2", "set2_r", "set3", "set3_r",
     * "spectral", "spectral_r", "spring", "spring_r", "summer", "summer_r", "tab10", "tab10_r", "tab20", "tab20_r",
     * "tab20b", "tab20b_r", "tab20c", "tab20c_r", "terrain", "terrain_r", "twilight", "twilight_r", "twilight_shifted",
     * "twilight_shifted_r", "usda-cdl", "usda-cdl-corn", "usda-cdl-cotton", "usda-cdl-soybeans", "usda-cdl-wheat",
     * "usgs-lcmap", "viirs-10a1", "viirs-13a1", "viirs-14a1", "viirs-15a2H", "viridis", "viridis_r", "winter",
     * "winter_r", "wistia", "wistia_r", "ylgn", "ylgn_r", "ylgnbu", "ylgnbu_r", "ylorbr", "ylorbr_r", "ylorrd",
     * "ylorrd_r".</td></tr>
     * <tr><td>colormap</td><td>String</td><td>No</td><td>JSON encoded custom Colormap</td></tr>
     * <tr><td>returnMask</td><td>Boolean</td><td>No</td><td>Add mask to the output data.</td></tr>
     * <tr><td>subdatasetName</td><td>String</td><td>No</td><td>The name of a subdataset within the asset.</td></tr>
     * <tr><td>subdatasetBands</td><td>List&lt;String&gt;</td><td>No</td><td>The index of a subdataset band within the
     * asset. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported. Allowed values:
     * "CanadianNAD83_LCC", "EuropeanETRS89_LAEAQuad", "LINZAntarticaMapTilegrid", "NZTM2000Quad",
     * "UPSAntarcticWGS84Quad", "UPSArcticWGS84Quad", "UTM31WGS84Quad", "WGS1984Quad", "WebMercatorQuad",
     * "WorldCRS84Quad", "WorldMercatorWGS84Quad".
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getZxyWithResponse(String collectionId, String itemId, String tileMatrixSetId,
        String z, String x, String y, String accept, RequestOptions requestOptions) {
        return this.serviceClient.getZxyWithResponseAsync(collectionId, itemId, tileMatrixSetId, z, x, y, accept,
            requestOptions);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param format TODO: add description for "format".
     * @param accept The accept parameter.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyScalexFormat(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId,
        String z, String x, String y, String scale, ImageType format, String accept, Double buffer, String colorFormula,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, String nodata,
        Boolean unscale, Resampling resampling, Algorithm algorithm, String algorithmParams, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getZxyScalexFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", String.valueOf(buffer), false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("colorFormula", colorFormula, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithmParams", algorithmParams, false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormapName", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("returnMask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdatasetName", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdatasetBands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getZxyScalexFormatWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, scale,
            format.toString(), accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param format TODO: add description for "format".
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyScalexFormat(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId,
        String z, String x, String y, String scale, ImageType format, String accept) {
        // Generated convenience method for getZxyScalexFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getZxyScalexFormatWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, scale,
            format.toString(), accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param accept The accept parameter.
     * @param format TODO: add description for "format"?.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyScalex(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, String scale, String accept, ImageType format, Double buffer, String colorFormula,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, String nodata,
        Boolean unscale, Resampling resampling, Algorithm algorithm, String algorithmParams, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getZxyScalexWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (format != null) {
            requestOptions.addQueryParam("format", format.toString(), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", String.valueOf(buffer), false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("colorFormula", colorFormula, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithmParams", algorithmParams, false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormapName", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("returnMask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdatasetName", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdatasetBands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getZxyScalexWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, scale, accept,
            requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param scale TODO: add description for "scale".
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyScalex(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, String scale, String accept) {
        // Generated convenience method for getZxyScalexWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getZxyScalexWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, scale, accept,
            requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param format TODO: add description for "format".
     * @param accept The accept parameter.
     * @param scale TODO: add description for "scale"?.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyFormat(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, ImageType format, String accept, Integer scale, Double buffer, String colorFormula,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, String nodata,
        Boolean unscale, Resampling resampling, Algorithm algorithm, String algorithmParams, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getZxyFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (scale != null) {
            requestOptions.addQueryParam("scale", String.valueOf(scale), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", String.valueOf(buffer), false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("colorFormula", colorFormula, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithmParams", algorithmParams, false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormapName", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("returnMask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdatasetName", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdatasetBands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getZxyFormatWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, format.toString(),
            accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param format TODO: add description for "format".
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxyFormat(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, ImageType format, String accept) {
        // Generated convenience method for getZxyFormatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getZxyFormatWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, format.toString(),
            accept, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param accept The accept parameter.
     * @param scale TODO: add description for "scale"?.
     * @param format TODO: add description for "format"?.
     * @param buffer Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
     * **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
     * 1.0 = 258x258).
     * @param colorFormula rio-color formula (info: https://github.com/mapbox/rio-color).
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @param algorithm Algorithm name.
     * @param algorithmParams Algorithm parameter.
     * @param rescale comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
     * @param colormapName Colormap name.
     * @param colormap JSON encoded custom Colormap.
     * @param returnMask Add mask to the output data.
     * @param subdatasetName The name of a subdataset within the asset.
     * @param subdatasetBands The index of a subdataset band within the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxy(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, String accept, Integer scale, ImageType format, Double buffer, String colorFormula,
        List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand, String nodata,
        Boolean unscale, Resampling resampling, Algorithm algorithm, String algorithmParams, List<String> rescale,
        ColorMapNames colormapName, String colormap, Boolean returnMask, String subdatasetName,
        List<String> subdatasetBands) {
        // Generated convenience method for getZxyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (scale != null) {
            requestOptions.addQueryParam("scale", String.valueOf(scale), false);
        }
        if (format != null) {
            requestOptions.addQueryParam("format", format.toString(), false);
        }
        if (buffer != null) {
            requestOptions.addQueryParam("buffer", String.valueOf(buffer), false);
        }
        if (colorFormula != null) {
            requestOptions.addQueryParam("colorFormula", colorFormula, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        if (algorithm != null) {
            requestOptions.addQueryParam("algorithm", algorithm.toString(), false);
        }
        if (algorithmParams != null) {
            requestOptions.addQueryParam("algorithmParams", algorithmParams, false);
        }
        if (rescale != null) {
            for (String paramItemValue : rescale) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("rescale", paramItemValue, false);
                }
            }
        }
        if (colormapName != null) {
            requestOptions.addQueryParam("colormapName", colormapName.toString(), false);
        }
        if (colormap != null) {
            requestOptions.addQueryParam("colormap", colormap, false);
        }
        if (returnMask != null) {
            requestOptions.addQueryParam("returnMask", String.valueOf(returnMask), false);
        }
        if (subdatasetName != null) {
            requestOptions.addQueryParam("subdatasetName", subdatasetName, false);
        }
        if (subdatasetBands != null) {
            requestOptions.addQueryParam("subdatasetBands",
                subdatasetBands.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getZxyWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, accept, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Tile Tilematrixsetid As Path
     * 
     * Create map tile from a dataset.
     * 
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param tileMatrixSetId Identifier selecting one of the TileMatrixSetId supported.
     * @param z Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
     * representing the scaleDenominator the tile.
     * @param x Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixHeight-1 for the selected TileMatrix.
     * @param y Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
     * MatrixWidth-1 for the selected TileMatrix.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getZxy(String collectionId, String itemId, Tilematrixsetid tileMatrixSetId, String z,
        String x, String y, String accept) {
        // Generated convenience method for getZxyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getZxyWithResponse(collectionId, itemId, tileMatrixSetId.toString(), z, x, y, accept, requestOptions)
            .flatMap(FluxUtil::toMono);
    }
}
