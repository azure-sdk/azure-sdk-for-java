// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.spatio.implementation.PartitionTypesImpl;
import com.azure.spatio.models.PartitionType;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class PartitionTypesClient {
    @Generated
    private final PartitionTypesImpl serviceClient;

    /**
     * Initializes an instance of PartitionTypesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PartitionTypesClient(PartitionTypesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(collectionId, requestOptions);
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scheme: String(year/month/none) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createOrUpdateWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(collectionId, body, requestOptions);
    }

    /**
     * Get Partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return partitiontype
     * 
     * Get the partitiontype for a GeoCatalog Collection.
     * 
     * Args:
     * collection_id: the collection id to get the partitiontype for.
     * 
     * Returns:
     * The partitiontype for the collection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PartitionType get(String collectionId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, requestOptions).getValue().toObject(PartitionType.class);
    }

    /**
     * Create Partitiontype
     * 
     * Updates partition type for a GeoCatalog Collection. This will
     * determine the partitioning scheme for items within the database,
     * and can only be set before any items are loaded.
     * 
     * Ideal partitioning schemes result in partitions of roughly 100k items each.
     * 
     * The default partitioning scheme is "none" which does not partition items.
     * 
     * Args:
     * collection_id: the collection id to add the partitiontype to.
     * partitiontype: the partitiontype to add.
     * 
     * Returns:
     * None.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createOrUpdate(String collectionId, PartitionType body) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createOrUpdateWithResponse(collectionId, BinaryData.fromObject(body), requestOptions).getValue();
    }
}
