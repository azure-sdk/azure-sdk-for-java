// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AzMapsTokenTODO: add description for AzMapsToken.
 */
@Immutable
public final class AzMapsToken implements JsonSerializable<AzMapsToken> {
    /*
     * TokenTODO: add description for token
     */
    @Generated
    private final String token;

    /*
     * Expires OnTODO: add description for expiresOn
     */
    @Generated
    private final int expiresOn;

    /**
     * Creates an instance of AzMapsToken class.
     * 
     * @param token the token value to set.
     * @param expiresOn the expiresOn value to set.
     */
    @Generated
    private AzMapsToken(String token, int expiresOn) {
        this.token = token;
        this.expiresOn = expiresOn;
    }

    /**
     * Get the token property: TokenTODO: add description for token.
     * 
     * @return the token value.
     */
    @Generated
    public String getToken() {
        return this.token;
    }

    /**
     * Get the expiresOn property: Expires OnTODO: add description for expiresOn.
     * 
     * @return the expiresOn value.
     */
    @Generated
    public int getExpiresOn() {
        return this.expiresOn;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeIntField("expires_on", this.expiresOn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzMapsToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzMapsToken if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzMapsToken.
     */
    @Generated
    public static AzMapsToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String token = null;
            int expiresOn = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("token".equals(fieldName)) {
                    token = reader.getString();
                } else if ("expires_on".equals(fieldName)) {
                    expiresOn = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new AzMapsToken(token, expiresOn);
        });
    }
}
