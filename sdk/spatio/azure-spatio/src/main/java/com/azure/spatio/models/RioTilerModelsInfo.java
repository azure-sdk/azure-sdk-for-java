// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Dataset Info.TODO: add description for RioTilerModelsInfo.
 */
@Immutable
public final class RioTilerModelsInfo implements JsonSerializable<RioTilerModelsInfo> {
    /*
     * BoundsTODO: add description for bounds
     */
    @Generated
    private final List<String> bounds;

    /*
     * MinzoomTODO: add description for minzoom
     */
    @Generated
    private final int minzoom;

    /*
     * MaxzoomTODO: add description for maxzoom
     */
    @Generated
    private final int maxzoom;

    /*
     * Band MetadataTODO: add description for bandMetadata
     */
    @Generated
    private final List<List<String>> bandMetadata;

    /*
     * Band DescriptionsTODO: add description for bandDescriptions
     */
    @Generated
    private final List<List<String>> bandDescriptions;

    /*
     * DtypeTODO: add description for dtype
     */
    @Generated
    private final String dtype;

    /*
     * rio-tiler Nodata types.TODO: add description for nodataType
     */
    @Generated
    private final NodataTypes nodataType;

    /*
     * ColorinterpTODO: add description for colorinterp
     */
    @Generated
    private List<String> colorinterp;

    /*
     * ScaleTODO: add description for scale
     */
    @Generated
    private Double scale;

    /*
     * OffsetTODO: add description for offset
     */
    @Generated
    private Double offset;

    /*
     * Colormap
     */
    @Generated
    private Map<String, List<Integer>> colormap;

    /**
     * Creates an instance of RioTilerModelsInfo class.
     * 
     * @param bounds the bounds value to set.
     * @param minzoom the minzoom value to set.
     * @param maxzoom the maxzoom value to set.
     * @param bandMetadata the bandMetadata value to set.
     * @param bandDescriptions the bandDescriptions value to set.
     * @param dtype the dtype value to set.
     * @param nodataType the nodataType value to set.
     */
    @Generated
    private RioTilerModelsInfo(List<String> bounds, int minzoom, int maxzoom, List<List<String>> bandMetadata,
        List<List<String>> bandDescriptions, String dtype, NodataTypes nodataType) {
        this.bounds = bounds;
        this.minzoom = minzoom;
        this.maxzoom = maxzoom;
        this.bandMetadata = bandMetadata;
        this.bandDescriptions = bandDescriptions;
        this.dtype = dtype;
        this.nodataType = nodataType;
    }

    /**
     * Get the bounds property: BoundsTODO: add description for bounds.
     * 
     * @return the bounds value.
     */
    @Generated
    public List<String> getBounds() {
        return this.bounds;
    }

    /**
     * Get the minzoom property: MinzoomTODO: add description for minzoom.
     * 
     * @return the minzoom value.
     */
    @Generated
    public int getMinzoom() {
        return this.minzoom;
    }

    /**
     * Get the maxzoom property: MaxzoomTODO: add description for maxzoom.
     * 
     * @return the maxzoom value.
     */
    @Generated
    public int getMaxzoom() {
        return this.maxzoom;
    }

    /**
     * Get the bandMetadata property: Band MetadataTODO: add description for bandMetadata.
     * 
     * @return the bandMetadata value.
     */
    @Generated
    public List<List<String>> getBandMetadata() {
        return this.bandMetadata;
    }

    /**
     * Get the bandDescriptions property: Band DescriptionsTODO: add description for bandDescriptions.
     * 
     * @return the bandDescriptions value.
     */
    @Generated
    public List<List<String>> getBandDescriptions() {
        return this.bandDescriptions;
    }

    /**
     * Get the dtype property: DtypeTODO: add description for dtype.
     * 
     * @return the dtype value.
     */
    @Generated
    public String getDtype() {
        return this.dtype;
    }

    /**
     * Get the nodataType property: rio-tiler Nodata types.TODO: add description for nodataType.
     * 
     * @return the nodataType value.
     */
    @Generated
    public NodataTypes getNodataType() {
        return this.nodataType;
    }

    /**
     * Get the colorinterp property: ColorinterpTODO: add description for colorinterp.
     * 
     * @return the colorinterp value.
     */
    @Generated
    public List<String> getColorinterp() {
        return this.colorinterp;
    }

    /**
     * Get the scale property: ScaleTODO: add description for scale.
     * 
     * @return the scale value.
     */
    @Generated
    public Double getScale() {
        return this.scale;
    }

    /**
     * Get the offset property: OffsetTODO: add description for offset.
     * 
     * @return the offset value.
     */
    @Generated
    public Double getOffset() {
        return this.offset;
    }

    /**
     * Get the colormap property: Colormap.
     * 
     * @return the colormap value.
     */
    @Generated
    public Map<String, List<Integer>> getColormap() {
        return this.colormap;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("bounds", this.bounds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeIntField("minzoom", this.minzoom);
        jsonWriter.writeIntField("maxzoom", this.maxzoom);
        jsonWriter.writeArrayField("band_metadata", this.bandMetadata,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeArrayField("band_descriptions", this.bandDescriptions,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeStringField("dtype", this.dtype);
        jsonWriter.writeStringField("nodata_type", this.nodataType == null ? null : this.nodataType.toString());
        jsonWriter.writeArrayField("colorinterp", this.colorinterp, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("scale", this.scale);
        jsonWriter.writeNumberField("offset", this.offset);
        jsonWriter.writeMapField("colormap", this.colormap,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeInt(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RioTilerModelsInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RioTilerModelsInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RioTilerModelsInfo.
     */
    @Generated
    public static RioTilerModelsInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> bounds = null;
            int minzoom = 0;
            int maxzoom = 0;
            List<List<String>> bandMetadata = null;
            List<List<String>> bandDescriptions = null;
            String dtype = null;
            NodataTypes nodataType = null;
            List<String> colorinterp = null;
            Double scale = null;
            Double offset = null;
            Map<String, List<Integer>> colormap = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bounds".equals(fieldName)) {
                    bounds = reader.readArray(reader1 -> reader1.getString());
                } else if ("minzoom".equals(fieldName)) {
                    minzoom = reader.getInt();
                } else if ("maxzoom".equals(fieldName)) {
                    maxzoom = reader.getInt();
                } else if ("band_metadata".equals(fieldName)) {
                    bandMetadata = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                } else if ("band_descriptions".equals(fieldName)) {
                    bandDescriptions = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                } else if ("dtype".equals(fieldName)) {
                    dtype = reader.getString();
                } else if ("nodata_type".equals(fieldName)) {
                    nodataType = NodataTypes.fromString(reader.getString());
                } else if ("colorinterp".equals(fieldName)) {
                    colorinterp = reader.readArray(reader1 -> reader1.getString());
                } else if ("scale".equals(fieldName)) {
                    scale = reader.getNullable(JsonReader::getDouble);
                } else if ("offset".equals(fieldName)) {
                    offset = reader.getNullable(JsonReader::getDouble);
                } else if ("colormap".equals(fieldName)) {
                    colormap = reader.readMap(reader1 -> reader1.readArray(reader2 -> reader2.getInt()));
                } else {
                    reader.skipChildren();
                }
            }
            RioTilerModelsInfo deserializedRioTilerModelsInfo
                = new RioTilerModelsInfo(bounds, minzoom, maxzoom, bandMetadata, bandDescriptions, dtype, nodataType);
            deserializedRioTilerModelsInfo.colorinterp = colorinterp;
            deserializedRioTilerModelsInfo.scale = scale;
            deserializedRioTilerModelsInfo.offset = offset;
            deserializedRioTilerModelsInfo.colormap = colormap;

            return deserializedRioTilerModelsInfo;
        });
    }
}
