// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * GeoCatalogCollectionTODO: add description for GeoCatalogCollection.
 */
@Fluent
public final class GeoCatalogCollection implements JsonSerializable<GeoCatalogCollection> {
    /*
     * TypeTODO: add description for type
     */
    @Generated
    private final GeoCatalogCollectionType type;

    /*
     * Stac VersionTODO: add description for stacVersion
     */
    @Generated
    private final String stacVersion;

    /*
     * IdTODO: add description for id
     */
    @Generated
    private final String id;

    /*
     * DescriptionTODO: add description for description
     */
    @Generated
    private final String description;

    /*
     * Links
     */
    @Generated
    private final List<Map<String, String>> links;

    /*
     * LicenseTODO: add description for license
     */
    @Generated
    private final String license;

    /*
     * Extent
     */
    @Generated
    private final Map<String, String> extent;

    /*
     * Stac ExtensionsTODO: add description for stacExtensions
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * TitleTODO: add description for title
     */
    @Generated
    private String title;

    /*
     * KeywordsTODO: add description for keywords
     */
    @Generated
    private List<String> keywords;

    /*
     * Providers
     */
    @Generated
    private List<Map<String, String>> providers;

    /*
     * Assets
     */
    @Generated
    private Map<String, String> assets;

    /*
     * Summaries
     */
    @Generated
    private Map<String, String> summaries;

    /*
     * Msft:Short DescriptionTODO: add description for msftShortDescription
     */
    @Generated
    private String msftShortDescription;

    /**
     * Creates an instance of GeoCatalogCollection class.
     * 
     * @param type the type value to set.
     * @param stacVersion the stacVersion value to set.
     * @param id the id value to set.
     * @param description the description value to set.
     * @param links the links value to set.
     * @param license the license value to set.
     * @param extent the extent value to set.
     */
    @Generated
    public GeoCatalogCollection(GeoCatalogCollectionType type, String stacVersion, String id, String description,
        List<Map<String, String>> links, String license, Map<String, String> extent) {
        this.type = type;
        this.stacVersion = stacVersion;
        this.id = id;
        this.description = description;
        this.links = links;
        this.license = license;
        this.extent = extent;
    }

    /**
     * Get the type property: TypeTODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public GeoCatalogCollectionType getType() {
        return this.type;
    }

    /**
     * Get the stacVersion property: Stac VersionTODO: add description for stacVersion.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the id property: IdTODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the description property: DescriptionTODO: add description for description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the links property: Links.
     * 
     * @return the links value.
     */
    @Generated
    public List<Map<String, String>> getLinks() {
        return this.links;
    }

    /**
     * Get the license property: LicenseTODO: add description for license.
     * 
     * @return the license value.
     */
    @Generated
    public String getLicense() {
        return this.license;
    }

    /**
     * Get the extent property: Extent.
     * 
     * @return the extent value.
     */
    @Generated
    public Map<String, String> getExtent() {
        return this.extent;
    }

    /**
     * Get the stacExtensions property: Stac ExtensionsTODO: add description for stacExtensions.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Set the stacExtensions property: Stac ExtensionsTODO: add description for stacExtensions.
     * 
     * @param stacExtensions the stacExtensions value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setStacExtensions(List<String> stacExtensions) {
        this.stacExtensions = stacExtensions;
        return this;
    }

    /**
     * Get the title property: TitleTODO: add description for title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Set the title property: TitleTODO: add description for title.
     * 
     * @param title the title value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the keywords property: KeywordsTODO: add description for keywords.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Set the keywords property: KeywordsTODO: add description for keywords.
     * 
     * @param keywords the keywords value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setKeywords(List<String> keywords) {
        this.keywords = keywords;
        return this;
    }

    /**
     * Get the providers property: Providers.
     * 
     * @return the providers value.
     */
    @Generated
    public List<Map<String, String>> getProviders() {
        return this.providers;
    }

    /**
     * Set the providers property: Providers.
     * 
     * @param providers the providers value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setProviders(List<Map<String, String>> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, String> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * 
     * @param assets the assets value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setAssets(Map<String, String> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * Get the summaries property: Summaries.
     * 
     * @return the summaries value.
     */
    @Generated
    public Map<String, String> getSummaries() {
        return this.summaries;
    }

    /**
     * Set the summaries property: Summaries.
     * 
     * @param summaries the summaries value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setSummaries(Map<String, String> summaries) {
        this.summaries = summaries;
        return this;
    }

    /**
     * Get the msftShortDescription property: Msft:Short DescriptionTODO: add description for msftShortDescription.
     * 
     * @return the msftShortDescription value.
     */
    @Generated
    public String getMsftShortDescription() {
        return this.msftShortDescription;
    }

    /**
     * Set the msftShortDescription property: Msft:Short DescriptionTODO: add description for msftShortDescription.
     * 
     * @param msftShortDescription the msftShortDescription value to set.
     * @return the GeoCatalogCollection object itself.
     */
    @Generated
    public GeoCatalogCollection setMsftShortDescription(String msftShortDescription) {
        this.msftShortDescription = msftShortDescription;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("stac_version", this.stacVersion);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("links", this.links,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeStringField("license", this.license);
        jsonWriter.writeMapField("extent", this.extent, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("stac_extensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("providers", this.providers,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("summaries", this.summaries, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("msft:short_description", this.msftShortDescription);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoCatalogCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoCatalogCollection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeoCatalogCollection.
     */
    @Generated
    public static GeoCatalogCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoCatalogCollectionType type = null;
            String stacVersion = null;
            String id = null;
            String description = null;
            List<Map<String, String>> links = null;
            String license = null;
            Map<String, String> extent = null;
            List<String> stacExtensions = null;
            String title = null;
            List<String> keywords = null;
            List<Map<String, String>> providers = null;
            Map<String, String> assets = null;
            Map<String, String> summaries = null;
            String msftShortDescription = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = GeoCatalogCollectionType.fromString(reader.getString());
                } else if ("stac_version".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                } else if ("license".equals(fieldName)) {
                    license = reader.getString();
                } else if ("extent".equals(fieldName)) {
                    extent = reader.readMap(reader1 -> reader1.getString());
                } else if ("stac_extensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("providers".equals(fieldName)) {
                    providers = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readMap(reader1 -> reader1.getString());
                } else if ("summaries".equals(fieldName)) {
                    summaries = reader.readMap(reader1 -> reader1.getString());
                } else if ("msft:short_description".equals(fieldName)) {
                    msftShortDescription = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            GeoCatalogCollection deserializedGeoCatalogCollection
                = new GeoCatalogCollection(type, stacVersion, id, description, links, license, extent);
            deserializedGeoCatalogCollection.stacExtensions = stacExtensions;
            deserializedGeoCatalogCollection.title = title;
            deserializedGeoCatalogCollection.keywords = keywords;
            deserializedGeoCatalogCollection.providers = providers;
            deserializedGeoCatalogCollection.assets = assets;
            deserializedGeoCatalogCollection.summaries = summaries;
            deserializedGeoCatalogCollection.msftShortDescription = msftShortDescription;

            return deserializedGeoCatalogCollection;
        });
    }
}
