// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CollectionOperations.
 */
public final class CollectionOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CollectionOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of CollectionOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CollectionOperationsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service = RestProxy.create(CollectionOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientCollectionOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface CollectionOperationsService {
        @Get("/api/collections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/api/collections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createRequest1,
            RequestOptions requestOptions, Context context);

        @Post("/api/collections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createRequest1,
            RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("collectionId") String collectionId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     *     collections (Required): [
     *          (Required){
     *             id: String (Required)
     *             description: String (Required)
     *             stac_version: String (Optional)
     *             links (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             title: String (Optional)
     *             type: String (Optional)
     *             assets (Optional): {
     *                 String (Required): {
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     start_datetime: OffsetDateTime (Optional)
     *                     end_datetime: OffsetDateTime (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             description: String (Optional)
     *                             roles (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             url: String (Optional)
     *                         }
     *                     ]
     *                     gsd: Double (Optional)
     *                     href: String (Required)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             license: String (Required)
     *             extent (Required): {
     *                 spatial (Required): {
     *                     bbox (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *                 temporal (Required): {
     *                     interval (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *             }
     *             keywords (Optional): [
     *                 String (Optional)
     *             ]
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             summaries (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collections
     * 
     * Endpoint along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAll(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get Collections
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Required): [
     *          (Required){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     *     collections (Required): [
     *          (Required){
     *             id: String (Required)
     *             description: String (Required)
     *             stac_version: String (Optional)
     *             links (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             stac_extensions (Optional): [
     *                 String (Optional)
     *             ]
     *             title: String (Optional)
     *             type: String (Optional)
     *             assets (Optional): {
     *                 String (Required): {
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     start_datetime: OffsetDateTime (Optional)
     *                     end_datetime: OffsetDateTime (Optional)
     *                     created: OffsetDateTime (Optional)
     *                     updated: OffsetDateTime (Optional)
     *                     platform: String (Optional)
     *                     instruments (Optional): [
     *                         String (Optional)
     *                     ]
     *                     constellation: String (Optional)
     *                     mission: String (Optional)
     *                     providers (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             description: String (Optional)
     *                             roles (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             url: String (Optional)
     *                         }
     *                     ]
     *                     gsd: Double (Optional)
     *                     href: String (Required)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             license: String (Required)
     *             extent (Required): {
     *                 spatial (Required): {
     *                     bbox (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *                 temporal (Required): {
     *                     interval (Required): [
     *                          (Required)[
     *                             String (Required)
     *                         ]
     *                     ]
     *                 }
     *             }
     *             keywords (Optional): [
     *                 String (Optional)
     *             ]
     *             providers (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             summaries (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collections
     * 
     * Endpoint along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAllSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Create Collection
     * 
     * Add a new collection to the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to create.
     * 
     * Returns:
     * The collection that was created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param createRequest1 The createRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData createRequest1,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.create(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, createRequest1, requestOptions, context));
    }

    /**
     * Create Collection
     * 
     * Add a new collection to the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to create.
     * 
     * Returns:
     * The collection that was created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param createRequest1 The createRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData createRequest1, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, createRequest1, requestOptions, Context.NONE);
    }

    /**
     * Get Collection
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *         }
     *     ]
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             title: String (Optional)
     *             description: String (Optional)
     *             start_datetime: OffsetDateTime (Optional)
     *             end_datetime: OffsetDateTime (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             href: String (Required)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection
     * 
     * Endpoint along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Get Collection
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     description: String (Required)
     *     stac_version: String (Optional)
     *     links (Required): [
     *          (Required){
     *         }
     *     ]
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     type: String (Optional)
     *     assets (Optional): {
     *         String (Required): {
     *             title: String (Optional)
     *             description: String (Optional)
     *             start_datetime: OffsetDateTime (Optional)
     *             end_datetime: OffsetDateTime (Optional)
     *             created: OffsetDateTime (Optional)
     *             updated: OffsetDateTime (Optional)
     *             platform: String (Optional)
     *             instruments (Optional): [
     *                 String (Optional)
     *             ]
     *             constellation: String (Optional)
     *             mission: String (Optional)
     *             providers (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     description: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                     url: String (Optional)
     *                 }
     *             ]
     *             gsd: Double (Optional)
     *             href: String (Required)
     *             type: String (Optional)
     *             roles (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     license: String (Required)
     *     extent (Required): {
     *         spatial (Required): {
     *             bbox (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *         temporal (Required): {
     *             interval (Required): [
     *                  (Required)[
     *                     String (Required)
     *                 ]
     *             ]
     *         }
     *     }
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Collection ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return collection
     * 
     * Endpoint along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update Collection
     * 
     * Update a collection in the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to update.
     * 
     * Returns:
     * The collection that was updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrReplace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Update Collection
     * 
     * Update a collection in the GeoCatalog instance
     * 
     * Args:
     * collection: the collection to update.
     * 
     * Returns:
     * The collection that was updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(Collection) (Required)
     *     stac_version: String (Required)
     *     id: String (Required)
     *     description: String (Required)
     *     links (Required): [
     *          (Required){
     *             String: String (Required)
     *         }
     *     ]
     *     license: String (Required)
     *     extent (Required): {
     *         String: String (Required)
     *     }
     *     stac_extensions (Optional): [
     *         String (Optional)
     *     ]
     *     title: String (Optional)
     *     keywords (Optional): [
     *         String (Optional)
     *     ]
     *     providers (Optional): [
     *          (Optional){
     *             String: String (Required)
     *         }
     *     ]
     *     assets (Optional): {
     *         String: String (Required)
     *     }
     *     summaries (Optional): {
     *         String: String (Required)
     *     }
     *     msft:short_description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return geoCatalogCollectionTODO: add description for GeoCatalogCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrReplaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete Collection
     * 
     * Delete a collection from the GeoCatalog instance
     * 
     * Args:
     * collection_id: the collection id to delete.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Delete Collection
     * 
     * Delete a collection from the GeoCatalog instance
     * 
     * Args:
     * collection_id: the collection id to delete.
     * 
     * @param collectionId TODO: add description for "collectionId".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            accept, requestOptions, Context.NONE);
    }
}
