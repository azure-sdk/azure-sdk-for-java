// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RegisterSearches.
 */
public final class RegisterSearchesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegisterSearchesService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of RegisterSearchesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegisterSearchesImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(RegisterSearchesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientRegisterSearches to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface RegisterSearchesService {
        @Post("/api/mosaic/register")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> register(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData registerRequest,
            RequestOptions requestOptions, Context context);

        @Post("/api/mosaic/register")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> registerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData registerRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     query (Optional): {
     *         String (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     datetime: String (Optional)
     *     sortby: String (Optional)
     *     filter-lang: String(cql-json/cql-text/cql2-json) (Optional)
     *     metadata (Optional): {
     *         type: String(mosaic/search) (Optional)
     *         bounds: String (Optional)
     *         minzoom: Integer (Optional)
     *         maxzoom: Integer (Optional)
     *         name: String (Optional)
     *         assets (Optional): [
     *             String (Optional)
     *         ]
     *         defaults (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     searchid: String (Required)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param registerRequest The registerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response model for /register endpoint.TODO: add description for RegisterResponse along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> registerWithResponseAsync(BinaryData registerRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.register(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, registerRequest, requestOptions, context));
    }

    /**
     * Register Search
     * 
     * Register a Search query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     query (Optional): {
     *         String (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     datetime: String (Optional)
     *     sortby: String (Optional)
     *     filter-lang: String(cql-json/cql-text/cql2-json) (Optional)
     *     metadata (Optional): {
     *         type: String(mosaic/search) (Optional)
     *         bounds: String (Optional)
     *         minzoom: Integer (Optional)
     *         maxzoom: Integer (Optional)
     *         name: String (Optional)
     *         assets (Optional): [
     *             String (Optional)
     *         ]
     *         defaults (Optional): {
     *             String: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     searchid: String (Required)
     *     links (Optional): [
     *          (Optional){
     *             rel: String (Optional)
     *             title: String (Optional)
     *             type: String(image/tiff; application=geotiff/image/jp2/image/png/image/jpeg/image/jpg/image/webp/application/x-binary/application/xml/application/json/application/geo+json/text/html/text/plain/application/x-protobuf) (Optional)
     *             href: String (Required)
     *             hreflang: String (Optional)
     *             length: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param registerRequest The registerRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response model for /register endpoint.TODO: add description for RegisterResponse along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> registerWithResponse(BinaryData registerRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.registerSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, registerRequest, requestOptions, Context.NONE);
    }
}
