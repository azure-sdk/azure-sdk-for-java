// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import com.azure.spatio.implementation.IngestionsRunsImpl;
import com.azure.spatio.models.IngestionRun;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class IngestionsRunsClient {
    @Generated
    private final IngestionsRunsImpl serviceClient;

    /**
     * Initializes an instance of IngestionsRunsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IngestionsRunsClient(IngestionsRunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the runs of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         runId: String (Required)
     *         creationTime: OffsetDateTime (Required)
     *         sourceCatalogUrl: String (Required)
     *         skipExistingItems: boolean (Required)
     *         keepOriginalAssets: boolean (Required)
     *         operation (Required): {
     *             operationId: String (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             creationTime: OffsetDateTime (Required)
     *             statusHistory (Required): [
     *                  (Required){
     *                     timestamp: OffsetDateTime (Required)
     *                     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                 }
     *             ]
     *             startTime: OffsetDateTime (Optional)
     *             finishTime: OffsetDateTime (Optional)
     *             totalItems: long (Required)
     *             totalPendingItems: long (Required)
     *             totalSuccessfulItems: long (Required)
     *             totalFailedItems: long (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the runs of an ingestion along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAllWithResponse(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get a run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a run of an ingestion along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String ingestionId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(collectionId, ingestionId, runId, requestOptions);
    }

    /**
     * Create a new run of an ingestion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     runId: String (Required)
     *     creationTime: OffsetDateTime (Required)
     *     sourceCatalogUrl: String (Required)
     *     skipExistingItems: boolean (Required)
     *     keepOriginalAssets: boolean (Required)
     *     operation (Required): {
     *         operationId: String (Required)
     *         status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *         creationTime: OffsetDateTime (Required)
     *         statusHistory (Required): [
     *              (Required){
     *                 timestamp: OffsetDateTime (Required)
     *                 status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *                 errorCode: String (Optional)
     *                 errorMessage: String (Optional)
     *             }
     *         ]
     *         startTime: OffsetDateTime (Optional)
     *         finishTime: OffsetDateTime (Optional)
     *         totalItems: long (Required)
     *         totalPendingItems: long (Required)
     *         totalSuccessfulItems: long (Required)
     *         totalFailedItems: long (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog ingestion run along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String collectionId, String ingestionId,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(collectionId, ingestionId, requestOptions);
    }

    /**
     * Get the runs of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the runs of an ingestion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IngestionRun> getAll(String collectionId, String ingestionId) {
        // Generated convenience method for getAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAllWithResponse(collectionId, ingestionId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_INGESTION_RUN);
    }

    /**
     * Get a run of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @param runId Run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a run of an ingestion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IngestionRun get(String collectionId, String ingestionId, String runId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, ingestionId, runId, requestOptions).getValue()
            .toObject(IngestionRun.class);
    }

    /**
     * Create a new run of an ingestion.
     * 
     * @param collectionId Catalog collection id.
     * @param ingestionId Ingestion id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spatio geo-catalog ingestion run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IngestionRun create(String collectionId, String ingestionId) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(collectionId, ingestionId, requestOptions).getValue().toObject(IngestionRun.class);
    }

    @Generated
    private static final TypeReference<List<IngestionRun>> TYPE_REFERENCE_LIST_INGESTION_RUN
        = new TypeReference<List<IngestionRun>>() {
        };
}
