// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Polygon ModelTODO: add description for Polygon.
 */
@Immutable
public final class Polygon implements JsonSerializable<Polygon> {
    /*
     * CoordinatesTODO: add description for coordinates
     */
    @Generated
    private final List<List<String>> coordinates;

    /*
     * TypeTODO: add description for type
     */
    @Generated
    private final PolygonType type;

    /*
     * BboxTODO: add description for bbox
     */
    @Generated
    private String bbox;

    /**
     * Creates an instance of Polygon class.
     * 
     * @param coordinates the coordinates value to set.
     * @param type the type value to set.
     */
    @Generated
    private Polygon(List<List<String>> coordinates, PolygonType type) {
        this.coordinates = coordinates;
        this.type = type;
    }

    /**
     * Get the coordinates property: CoordinatesTODO: add description for coordinates.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<List<String>> getCoordinates() {
        return this.coordinates;
    }

    /**
     * Get the type property: TypeTODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public PolygonType getType() {
        return this.type;
    }

    /**
     * Get the bbox property: BboxTODO: add description for bbox.
     * 
     * @return the bbox value.
     */
    @Generated
    public String getBbox() {
        return this.bbox;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("coordinates", this.coordinates,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("bbox", this.bbox);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Polygon from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Polygon if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Polygon.
     */
    @Generated
    public static Polygon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<List<String>> coordinates = null;
            PolygonType type = null;
            String bbox = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                } else if ("type".equals(fieldName)) {
                    type = PolygonType.fromString(reader.getString());
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            Polygon deserializedPolygon = new Polygon(coordinates, type);
            deserializedPolygon.bbox = bbox;

            return deserializedPolygon;
        });
    }
}
