// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * TODO: add description for IngestionSource.
 */
@Fluent
public final class IngestionSource implements JsonSerializable<IngestionSource> {
    /*
     * Ingestion source type
     */
    @Generated
    private IngestionSourceType sourceType;

    /*
     * SAS token connection information
     */
    @Generated
    private SasTokenConnectionCreation connectionInfo;

    /*
     * Ingestion source id
     */
    @Generated
    private String id;

    /*
     * Created time in UTC format
     */
    @Generated
    private OffsetDateTime created;

    /**
     * Creates an instance of IngestionSource class.
     */
    @Generated
    public IngestionSource() {
    }

    /**
     * Get the sourceType property: Ingestion source type.
     * 
     * @return the sourceType value.
     */
    @Generated
    public IngestionSourceType getSourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: Ingestion source type.
     * 
     * @param sourceType the sourceType value to set.
     * @return the IngestionSource object itself.
     */
    @Generated
    public IngestionSource setSourceType(IngestionSourceType sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the connectionInfo property: SAS token connection information.
     * 
     * @return the connectionInfo value.
     */
    @Generated
    public SasTokenConnectionCreation getConnectionInfo() {
        return this.connectionInfo;
    }

    /**
     * Set the connectionInfo property: SAS token connection information.
     * 
     * @param connectionInfo the connectionInfo value to set.
     * @return the IngestionSource object itself.
     */
    @Generated
    public IngestionSource setConnectionInfo(SasTokenConnectionCreation connectionInfo) {
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Get the id property: Ingestion source id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Ingestion source id.
     * 
     * @param id the id value to set.
     * @return the IngestionSource object itself.
     */
    @Generated
    public IngestionSource setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the created property: Created time in UTC format.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Set the created property: Created time in UTC format.
     * 
     * @param created the created value to set.
     * @return the IngestionSource object itself.
     */
    @Generated
    public IngestionSource setCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("created",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IngestionSource.
     */
    @Generated
    public static IngestionSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngestionSource deserializedIngestionSource = new IngestionSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceType".equals(fieldName)) {
                    deserializedIngestionSource.sourceType = IngestionSourceType.fromString(reader.getString());
                } else if ("connectionInfo".equals(fieldName)) {
                    deserializedIngestionSource.connectionInfo = SasTokenConnectionCreation.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedIngestionSource.id = reader.getString();
                } else if ("created".equals(fieldName)) {
                    deserializedIngestionSource.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIngestionSource;
        });
    }
}
