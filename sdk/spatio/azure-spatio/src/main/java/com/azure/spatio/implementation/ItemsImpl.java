// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import com.azure.spatio.models.Operation;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Items.
 */
public final class ItemsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ItemsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of ItemsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ItemsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service = RestProxy.create(ItemsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientItems to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface ItemsService {
        @Get("/api/collections/{collectionId}/items")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFeatures(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/items")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getFeaturesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/api/collections/{collectionId}/items")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData item, RequestOptions requestOptions, Context context);

        @Post("/api/collections/{collectionId}/items")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData item, RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData item,
            RequestOptions requestOptions, Context context);

        @Put("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData item,
            RequestOptions requestOptions, Context context);

        @Patch("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> patch(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData item,
            RequestOptions requestOptions, Context context);

        @Patch("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> patchSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData item,
            RequestOptions requestOptions, Context context);

        @Delete("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/api/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Long</td><td>No</td><td>The optional limit parameter recommends the number of items that
     * should be present in the response document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.</td></tr>
     * <tr><td>bbox</td><td>List&lt;Double&gt;</td><td>No</td><td>Only features that have a geometry that intersects the
     * bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Either a date-time or an interval, open or closed. Date and
     * time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     features (Required): [
     *          (Required){
     *             type: String (Required)
     *             stacVersion: String (Required)
     *             stacExtensions (Required): [
     *                 String (Required)
     *             ]
     *             id: String (Required)
     *             geometry: String (Required)
     *             bbox (Required): [
     *                 int (Required)
     *             ]
     *             properties (Required): {
     *                 datetime: String (Required)
     *             }
     *             assets: String (Required)
     *             links (Required): [
     *                  (Required){
     *                     rel: String (Required)
     *                     href: String (Required)
     *                     type: String (Required)
     *                     title: String (Required)
     *                 }
     *             ]
     *             collection: String (Required)
     *         }
     *     ]
     *     links (Required): [
     *         (recursive schema, see above)
     *     ]
     *     stacVersion: String (Optional)
     *     numberMatched: Long (Optional)
     *     numberReturned: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItemCollection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFeaturesWithResponseAsync(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getFeatures(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, requestOptions, context));
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Long</td><td>No</td><td>The optional limit parameter recommends the number of items that
     * should be present in the response document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.</td></tr>
     * <tr><td>bbox</td><td>List&lt;Double&gt;</td><td>No</td><td>Only features that have a geometry that intersects the
     * bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Either a date-time or an interval, open or closed. Date and
     * time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     features (Required): [
     *          (Required){
     *             type: String (Required)
     *             stacVersion: String (Required)
     *             stacExtensions (Required): [
     *                 String (Required)
     *             ]
     *             id: String (Required)
     *             geometry: String (Required)
     *             bbox (Required): [
     *                 int (Required)
     *             ]
     *             properties (Required): {
     *                 datetime: String (Required)
     *             }
     *             assets: String (Required)
     *             links (Required): [
     *                  (Required){
     *                     rel: String (Required)
     *                     href: String (Required)
     *                     type: String (Required)
     *                     title: String (Required)
     *                 }
     *             ]
     *             collection: String (Required)
     *         }
     *     ]
     *     links (Required): [
     *         (recursive schema, see above)
     *     ]
     *     stacVersion: String (Optional)
     *     numberMatched: Long (Optional)
     *     numberReturned: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItemCollection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFeaturesWithResponse(String collectionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFeaturesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            collectionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Fetch a single STAC Item.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItem along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Fetch a single STAC Item.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItem along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> createWithResponseAsync(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.create(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, contentType, accept, item, requestOptions, context));
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            contentType, accept, item, requestOptions, Context.NONE);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateAsync(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.createWithResponseAsync(collectionId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreate(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.createWithResponse(collectionId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginCreateWithModelAsync(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.createWithResponseAsync(collectionId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreateWithModel(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.createWithResponse(collectionId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> updateWithResponseAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.update(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, itemId, contentType, accept, item, requestOptions, context));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, contentType, accept, item, requestOptions, Context.NONE);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.updateWithResponseAsync(collectionId, itemId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdate(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.updateWithResponse(collectionId, itemId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginUpdateWithModelAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.updateWithResponseAsync(collectionId, itemId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginUpdateWithModel(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.updateWithResponse(collectionId, itemId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> patchWithResponseAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.patch(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                collectionId, itemId, contentType, accept, item, requestOptions, context));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> patchWithResponse(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.patchSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, contentType, accept, item, requestOptions, Context.NONE);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPatchAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.patchWithResponseAsync(collectionId, itemId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginPatch(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.patchWithResponse(collectionId, itemId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginPatchWithModelAsync(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.patchWithResponseAsync(collectionId, itemId, item, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginPatchWithModel(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.patchWithResponse(collectionId, itemId, item, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> deleteWithResponseAsync(String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return spatio geo-catalog operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), collectionId,
            itemId, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteAsync(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteWithResponseAsync(collectionId, itemId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDelete(String collectionId, String itemId, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteWithResponse(collectionId, itemId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Operation, Void> beginDeleteWithModelAsync(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteWithResponseAsync(collectionId, itemId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDeleteWithModel(String collectionId, String itemId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteWithResponse(collectionId, itemId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(Operation.class), TypeReference.createInstance(Void.class));
    }
}
