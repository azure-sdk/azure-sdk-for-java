// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.implementation.PointsImpl;
import com.azure.spatio.models.Resampling;
import com.azure.spatio.models.TitilerCoreModelsResponsesPoint;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class, isAsync = true)
public final class PointsAsyncClient {
    @Generated
    private final PointsImpl serviceClient;

    /**
     * Initializes an instance of PointsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PointsAsyncClient(PointsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>coord-crs</td><td>String</td><td>No</td><td>Coordinate Reference System of the input coords. Default to
     * `epsg:4326`.</td></tr>
     * <tr><td>assets</td><td>List&lt;String&gt;</td><td>No</td><td>Asset's names. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expression</td><td>String</td><td>No</td><td>Band math expression between assets</td></tr>
     * <tr><td>assetBidx</td><td>List&lt;String&gt;</td><td>No</td><td>Per asset band indexes (coma separated indexes).
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>assetAsBand</td><td>Boolean</td><td>No</td><td>Asset as Band</td></tr>
     * <tr><td>nodata</td><td>String</td><td>No</td><td>Overwrite internal Nodata value</td></tr>
     * <tr><td>unscale</td><td>Boolean</td><td>No</td><td>Apply internal Scale or Offset</td></tr>
     * <tr><td>resampling</td><td>String</td><td>No</td><td>Resampling method. Allowed values: "nearest", "bilinear",
     * "cubic", "cubic_spline", "lanczos", "average", "mode", "gauss", "rms".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     coordinates (Required): [
     *         double (Required)
     *     ]
     *     values (Required): [
     *         double (Required)
     *     ]
     *     band_names (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param lon Longitude.
     * @param lat Latitude.
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return point model.
     * 
     * response model for `/point` endpointsTODO: add description for TitilerCoreModelsResponsesPoint along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLonLatWithResponse(String lon, String lat, String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLonLatWithResponseAsync(lon, lat, collectionId, itemId, requestOptions);
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * 
     * @param lon Longitude.
     * @param lat Latitude.
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @param coordCrs Coordinate Reference System of the input coords. Default to `epsg:4326`.
     * @param assets Asset's names.
     * @param expression Band math expression between assets.
     * @param assetBidx Per asset band indexes (coma separated indexes).
     * @param assetAsBand Asset as Band.
     * @param nodata Overwrite internal Nodata value.
     * @param unscale Apply internal Scale or Offset.
     * @param resampling Resampling method.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return point model.
     * 
     * response model for `/point` endpointsTODO: add description for TitilerCoreModelsResponsesPoint on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TitilerCoreModelsResponsesPoint> getLonLat(String lon, String lat, String collectionId, String itemId,
        String coordCrs, List<String> assets, String expression, List<String> assetBidx, Boolean assetAsBand,
        String nodata, Boolean unscale, Resampling resampling) {
        // Generated convenience method for getLonLatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (coordCrs != null) {
            requestOptions.addQueryParam("coord-crs", coordCrs, false);
        }
        if (assets != null) {
            for (String paramItemValue : assets) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assets", paramItemValue, false);
                }
            }
        }
        if (expression != null) {
            requestOptions.addQueryParam("expression", expression, false);
        }
        if (assetBidx != null) {
            for (String paramItemValue : assetBidx) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("assetBidx", paramItemValue, false);
                }
            }
        }
        if (assetAsBand != null) {
            requestOptions.addQueryParam("assetAsBand", String.valueOf(assetAsBand), false);
        }
        if (nodata != null) {
            requestOptions.addQueryParam("nodata", nodata, false);
        }
        if (unscale != null) {
            requestOptions.addQueryParam("unscale", String.valueOf(unscale), false);
        }
        if (resampling != null) {
            requestOptions.addQueryParam("resampling", resampling.toString(), false);
        }
        return getLonLatWithResponse(lon, lat, collectionId, itemId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TitilerCoreModelsResponsesPoint.class));
    }

    /**
     * Point
     * 
     * Get Point value for a dataset.
     * 
     * @param lon Longitude.
     * @param lat Latitude.
     * @param collectionId STAC Collection Identifier.
     * @param itemId STAC Item Identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return point model.
     * 
     * response model for `/point` endpointsTODO: add description for TitilerCoreModelsResponsesPoint on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TitilerCoreModelsResponsesPoint> getLonLat(String lon, String lat, String collectionId, String itemId) {
        // Generated convenience method for getLonLatWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLonLatWithResponse(lon, lat, collectionId, itemId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TitilerCoreModelsResponsesPoint.class));
    }
}
