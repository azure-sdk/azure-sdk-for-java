// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.spatio.MicrosoftPlanetaryComputerProServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SearchOperations.
 */
public final class SearchOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SearchOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPlanetaryComputerProClientImpl client;

    /**
     * Initializes an instance of SearchOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SearchOperationsImpl(MicrosoftPlanetaryComputerProClientImpl client) {
        this.service
            = RestProxy.create(SearchOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlanetaryComputerProServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for MicrosoftPlanetaryComputerProClientSearchOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MicrosoftPlanetaryCo")
    public interface SearchOperationsService {
        @Get("/api/search")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> get(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/api/search")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/api/search")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/api/search")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collections</td><td>String</td><td>No</td><td>TODO: add description for "collections"?</td></tr>
     * <tr><td>ids</td><td>String</td><td>No</td><td>TODO: add description for "ids"?</td></tr>
     * <tr><td>bbox</td><td>String</td><td>No</td><td>TODO: add description for "bbox"?</td></tr>
     * <tr><td>intersects</td><td>String</td><td>No</td><td>TODO: add description for "intersects"?</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>TODO: add description for "datetime"?</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>TODO: add description for "limit"?</td></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * <tr><td>query</td><td>String</td><td>No</td><td>TODO: add description for "query"?</td></tr>
     * <tr><td>sortby</td><td>String</td><td>No</td><td>TODO: add description for "sortby"?</td></tr>
     * <tr><td>fields</td><td>String</td><td>No</td><td>TODO: add description for "fields"?</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>TODO: add description for "filter"?</td></tr>
     * <tr><td>token</td><td>String</td><td>No</td><td>TODO: add description for "token"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collections</td><td>String</td><td>No</td><td>TODO: add description for "collections"?</td></tr>
     * <tr><td>ids</td><td>String</td><td>No</td><td>TODO: add description for "ids"?</td></tr>
     * <tr><td>bbox</td><td>String</td><td>No</td><td>TODO: add description for "bbox"?</td></tr>
     * <tr><td>intersects</td><td>String</td><td>No</td><td>TODO: add description for "intersects"?</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>TODO: add description for "datetime"?</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>TODO: add description for "limit"?</td></tr>
     * <tr><td>sign</td><td>Boolean</td><td>No</td><td>TODO: add description for "sign"?</td></tr>
     * <tr><td>duration</td><td>Integer</td><td>No</td><td>TODO: add description for "duration"?</td></tr>
     * <tr><td>query</td><td>String</td><td>No</td><td>TODO: add description for "query"?</td></tr>
     * <tr><td>sortby</td><td>String</td><td>No</td><td>TODO: add description for "sortby"?</td></tr>
     * <tr><td>fields</td><td>String</td><td>No</td><td>TODO: add description for "fields"?</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>TODO: add description for "filter"?</td></tr>
     * <tr><td>token</td><td>String</td><td>No</td><td>TODO: add description for "token"?</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getWithResponse(RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     datetime: String (Optional)
     *     limit: Integer (Optional)
     *     conf (Optional): {
     *         String: String (Required)
     *     }
     *     sign: Boolean (Optional)
     *     duration: Integer (Optional)
     *     query (Optional): {
     *         String (Required): {
     *              (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     fields (Optional): [
     *          (Optional){
     *             include (Optional): [
     *                 String (Optional)
     *             ]
     *             exclude (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     filter-crs: String (Optional)
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     token: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        final String contentType = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, contentType, body, requestOptions, context));
    }

    /**
     * Search
     * 
     * Endpoint.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     collections (Optional): [
     *         String (Optional)
     *     ]
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     bbox: String (Optional)
     *     intersects (Optional): {
     *     }
     *     datetime: String (Optional)
     *     limit: Integer (Optional)
     *     conf (Optional): {
     *         String: String (Required)
     *     }
     *     sign: Boolean (Optional)
     *     duration: Integer (Optional)
     *     query (Optional): {
     *         String (Required): {
     *              (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     sortby (Optional): [
     *          (Optional){
     *             field: String (Required)
     *             direction: String(asc/desc) (Required)
     *         }
     *     ]
     *     fields (Optional): [
     *          (Optional){
     *             include (Optional): [
     *                 String (Optional)
     *             ]
     *             exclude (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     filter (Optional): {
     *         String: String (Required)
     *     }
     *     filter-crs: String (Optional)
     *     filter-lang: String(cql-json/cql2-json/cql2-text) (Optional)
     *     token: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body TODO: add description for "body".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/geo+json";
        final String contentType = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            contentType, body, requestOptions, Context.NONE);
    }
}
