// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.spatio.implementation.ItemsImpl;
import com.azure.spatio.models.Operation;
import com.azure.spatio.models.StacItem;
import com.azure.spatio.models.StacItemCollection;
import com.azure.spatio.models.StacPostOrPutItem;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MicrosoftPlanetaryComputerProClient type.
 */
@ServiceClient(builder = MicrosoftPlanetaryComputerProClientBuilder.class)
public final class ItemsClient {
    @Generated
    private final ItemsImpl serviceClient;

    /**
     * Initializes an instance of ItemsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ItemsClient(ItemsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Long</td><td>No</td><td>The optional limit parameter recommends the number of items that
     * should be present in the response document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.</td></tr>
     * <tr><td>bbox</td><td>List&lt;Double&gt;</td><td>No</td><td>Only features that have a geometry that intersects the
     * bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * <tr><td>datetime</td><td>String</td><td>No</td><td>Either a date-time or an interval, open or closed. Date and
     * time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     features (Required): [
     *          (Required){
     *             type: String (Required)
     *             stacVersion: String (Required)
     *             stacExtensions (Required): [
     *                 String (Required)
     *             ]
     *             id: String (Required)
     *             geometry: String (Required)
     *             bbox (Required): [
     *                 int (Required)
     *             ]
     *             properties (Required): {
     *                 datetime: String (Required)
     *             }
     *             assets: String (Required)
     *             links (Required): [
     *                  (Required){
     *                     rel: String (Required)
     *                     href: String (Required)
     *                     type: String (Required)
     *                     title: String (Required)
     *                 }
     *             ]
     *             collection: String (Required)
     *         }
     *     ]
     *     links (Required): [
     *         (recursive schema, see above)
     *     ]
     *     stacVersion: String (Optional)
     *     numberMatched: Long (Optional)
     *     numberReturned: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItemCollection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFeaturesWithResponse(String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getFeaturesWithResponse(collectionId, requestOptions);
    }

    /**
     * Fetch a single STAC Item.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: add description for STACItem along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String collectionId, String itemId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(collectionId, itemId, requestOptions);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreate(String collectionId, BinaryData item,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreate(collectionId, item, requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdate(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdate(collectionId, itemId, item, requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     stacVersion: String (Required)
     *     stacExtensions (Required): [
     *         String (Required)
     *     ]
     *     id: String (Required)
     *     geometry: String (Required)
     *     bbox (Required): [
     *         int (Required)
     *     ]
     *     properties (Required): {
     *         datetime: String (Required)
     *     }
     *     assets: String (Required)
     *     links (Required): [
     *          (Required){
     *             rel: String (Required)
     *             href: String (Required)
     *             type: String (Required)
     *             title: String (Required)
     *         }
     *     ]
     *     collection: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginPatch(String collectionId, String itemId, BinaryData item,
        RequestOptions requestOptions) {
        return this.serviceClient.beginPatch(collectionId, itemId, item, requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *     creationTime: OffsetDateTime (Required)
     *     statusHistory (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             status: String(Pending/Running/Finished/Canceled/Canceling/Succeeded/Failed) (Required)
     *             errorCode: String (Optional)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     *     startTime: OffsetDateTime (Optional)
     *     finishTime: OffsetDateTime (Optional)
     *     totalItems: long (Required)
     *     totalPendingItems: long (Required)
     *     totalSuccessfulItems: long (Required)
     *     totalFailedItems: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDelete(String collectionId, String itemId, RequestOptions requestOptions) {
        return this.serviceClient.beginDelete(collectionId, itemId, requestOptions);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * 
     * @param collectionId Catalog collection id.
     * @param limit The optional limit parameter recommends the number of items that should be present in the response
     * document.
     * 
     * If the limit parameter value is greater than advertised limit maximum, the server must return the
     * maximum possible number of items, rather than responding with an error.
     * 
     * Only items are counted that are on the first level of the collection in the response document.
     * Nested objects contained within the explicitly requested items must not be counted.
     * 
     * Minimum = 1. Maximum = 10000. Default = 10.
     * @param bbox Only features that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four or six numbers, depending on whether the
     * coordinate reference system includes a vertical axis (height or depth):
     * 
     * - Lower left corner, coordinate axis 1
     * - Lower left corner, coordinate axis 2
     * - Minimum value, coordinate axis 3 (optional)
     * - Upper right corner, coordinate axis 1
     * - Upper right corner, coordinate axis 2
     * - Maximum value, coordinate axis 3 (optional)
     * 
     * The coordinate reference system of the values is WGS 84 longitude/latitude
     * (http://www.opengis.net/def/crs/OGC/1.3/CRS84).
     * 
     * For WGS 84 longitude/latitude the values are in most cases the sequence of
     * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
     * However, in cases where the box spans the antimeridian the first value
     * (west-most box edge) is larger than the third value (east-most box edge).
     * 
     * If the vertical axis is included, the third and the sixth number are
     * the bottom and the top of the 3-dimensional bounding box.
     * 
     * If a feature has multiple spatial geometry properties, it is the decision of the
     * server whether only a single spatial geometry property is used to determine
     * the extent or all relevant geometries.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions
     * adhere to RFC 3339. Open intervals are expressed using double-dots.
     * 
     * Examples:
     * 
     * - A date-time: "2018-02-12T23:20:50Z"
     * - A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
     * - Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"
     * 
     * Only features that have a temporal property that intersects the value of
     * `datetime` are selected.
     * 
     * If a feature has multiple temporal properties, it is the decision of the
     * server whether only a single temporal property is used to determine
     * the extent or all relevant temporal properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tODO: add description for STACItemCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacItemCollection getFeatures(String collectionId, Long limit, List<Double> bbox, String datetime) {
        // Generated convenience method for getFeaturesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (bbox != null) {
            for (double paramItemValue : bbox) {
                requestOptions.addQueryParam("bbox", String.valueOf(paramItemValue), false);
            }
        }
        if (datetime != null) {
            requestOptions.addQueryParam("datetime", datetime, false);
        }
        return getFeaturesWithResponse(collectionId, requestOptions).getValue().toObject(StacItemCollection.class);
    }

    /**
     * Fetch features of the feature collection with id `collectionId`.
     * 
     * Every feature in a dataset belongs to a collection. A dataset may
     * consist of multiple feature collections. A feature collection is often a
     * collection of features of a similar type, based on a common schema.").
     * 
     * @param collectionId Catalog collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tODO: add description for STACItemCollection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacItemCollection getFeatures(String collectionId) {
        // Generated convenience method for getFeaturesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFeaturesWithResponse(collectionId, requestOptions).getValue().toObject(StacItemCollection.class);
    }

    /**
     * Fetch a single STAC Item.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId STAC Item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tODO: add description for STACItem.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StacItem get(String collectionId, String itemId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(collectionId, itemId, requestOptions).getValue().toObject(StacItem.class);
    }

    /**
     * Create a new STAC item or a set of items in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param item STAC Item or ItemCollection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginCreate(String collectionId, BinaryData item) {
        // Generated convenience method for beginCreateWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateWithModel(collectionId, item, requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginUpdate(String collectionId, String itemId, StacPostOrPutItem item) {
        // Generated convenience method for beginUpdateWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginUpdateWithModel(collectionId, itemId, BinaryData.fromObject(item), requestOptions);
    }

    /**
     * Update a STAC item in a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @param item STAC Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginPatch(String collectionId, String itemId, StacPostOrPutItem item) {
        // Generated convenience method for beginPatchWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginPatchWithModel(collectionId, itemId, BinaryData.fromObject(item), requestOptions);
    }

    /**
     * Delete a STAC item from a collection.
     * 
     * @param collectionId Catalog collection id.
     * @param itemId TODO: add description for itemId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of spatio geo-catalog operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<Operation, Void> beginDelete(String collectionId, String itemId) {
        // Generated convenience method for beginDeleteWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteWithModel(collectionId, itemId, requestOptions);
    }
}
