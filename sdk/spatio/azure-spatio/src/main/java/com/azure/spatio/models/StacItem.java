// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * TODO: add description for STACItem.
 */
@Immutable
public final class StacItem implements JsonSerializable<StacItem> {
    /*
     * TODO: add description for type
     */
    @Generated
    private final String type;

    /*
     * TODO: add description for stacVersion
     */
    @Generated
    private final String stacVersion;

    /*
     * TODO: add description for stacExtensions
     */
    @Generated
    private final List<String> stacExtensions;

    /*
     * TODO: add description for id
     */
    @Generated
    private final String id;

    /*
     * TODO: add description for geometry
     */
    @Generated
    private final String geometry;

    /*
     * TODO: add description for bbox
     */
    @Generated
    private final List<Integer> bbox;

    /*
     * TODO: add description for properties
     */
    @Generated
    private final Properties properties;

    /*
     * TODO: add description for assets
     */
    @Generated
    private final String assets;

    /*
     * TODO: add description for links
     */
    @Generated
    private final List<Link> links;

    /*
     * TODO: add description for collection
     */
    @Generated
    private final String collection;

    /**
     * Creates an instance of StacItem class.
     * 
     * @param type the type value to set.
     * @param stacVersion the stacVersion value to set.
     * @param stacExtensions the stacExtensions value to set.
     * @param id the id value to set.
     * @param geometry the geometry value to set.
     * @param bbox the bbox value to set.
     * @param properties the properties value to set.
     * @param assets the assets value to set.
     * @param links the links value to set.
     * @param collection the collection value to set.
     */
    @Generated
    private StacItem(String type, String stacVersion, List<String> stacExtensions, String id, String geometry,
        List<Integer> bbox, Properties properties, String assets, List<Link> links, String collection) {
        this.type = type;
        this.stacVersion = stacVersion;
        this.stacExtensions = stacExtensions;
        this.id = id;
        this.geometry = geometry;
        this.bbox = bbox;
        this.properties = properties;
        this.assets = assets;
        this.links = links;
        this.collection = collection;
    }

    /**
     * Get the type property: TODO: add description for type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the stacVersion property: TODO: add description for stacVersion.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the stacExtensions property: TODO: add description for stacExtensions.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the id property: TODO: add description for id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the geometry property: TODO: add description for geometry.
     * 
     * @return the geometry value.
     */
    @Generated
    public String getGeometry() {
        return this.geometry;
    }

    /**
     * Get the bbox property: TODO: add description for bbox.
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Integer> getBbox() {
        return this.bbox;
    }

    /**
     * Get the properties property: TODO: add description for properties.
     * 
     * @return the properties value.
     */
    @Generated
    public Properties getProperties() {
        return this.properties;
    }

    /**
     * Get the assets property: TODO: add description for assets.
     * 
     * @return the assets value.
     */
    @Generated
    public String getAssets() {
        return this.assets;
    }

    /**
     * Get the links property: TODO: add description for links.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the collection property: TODO: add description for collection.
     * 
     * @return the collection value.
     */
    @Generated
    public String getCollection() {
        return this.collection;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("stacVersion", this.stacVersion);
        jsonWriter.writeArrayField("stacExtensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("geometry", this.geometry);
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("assets", this.assets);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("collection", this.collection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItem.
     */
    @Generated
    public static StacItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            String stacVersion = null;
            List<String> stacExtensions = null;
            String id = null;
            String geometry = null;
            List<Integer> bbox = null;
            Properties properties = null;
            String assets = null;
            List<Link> links = null;
            String collection = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("stacVersion".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("stacExtensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("geometry".equals(fieldName)) {
                    geometry = reader.getString();
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.readArray(reader1 -> reader1.getInt());
                } else if ("properties".equals(fieldName)) {
                    properties = Properties.fromJson(reader);
                } else if ("assets".equals(fieldName)) {
                    assets = reader.getString();
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("collection".equals(fieldName)) {
                    collection = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new StacItem(type, stacVersion, stacExtensions, id, geometry, bbox, properties, assets, links,
                collection);
        });
    }
}
