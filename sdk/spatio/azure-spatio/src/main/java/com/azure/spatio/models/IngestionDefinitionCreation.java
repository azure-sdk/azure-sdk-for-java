// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Spatio geo-catalog ingestion creation model.
 */
@Fluent
public final class IngestionDefinitionCreation implements JsonSerializable<IngestionDefinitionCreation> {
    /*
     * Ingestion type
     */
    @Generated
    private final IngestionType importType;

    /*
     * Ingestion name
     */
    @Generated
    private String displayName;

    /*
     * Source catalog URL. *Required for StaticCatalog ingestion type
     */
    @Generated
    private String sourceCatalogUrl;

    /*
     * Parquet catalog URL. *Required for StacGeoparquet ingestion type
     */
    @Generated
    private String geoparquetUrl;

    /*
     * Skip processing existing items in the catalog
     */
    @Generated
    private Boolean skipExistingItems;

    /*
     * Keep original source assets
     */
    @Generated
    private Boolean keepOriginalAssets;

    /**
     * Creates an instance of IngestionDefinitionCreation class.
     * 
     * @param importType the importType value to set.
     */
    @Generated
    public IngestionDefinitionCreation(IngestionType importType) {
        this.importType = importType;
    }

    /**
     * Get the importType property: Ingestion type.
     * 
     * @return the importType value.
     */
    @Generated
    public IngestionType getImportType() {
        return this.importType;
    }

    /**
     * Get the displayName property: Ingestion name.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Ingestion name.
     * 
     * @param displayName the displayName value to set.
     * @return the IngestionDefinitionCreation object itself.
     */
    @Generated
    public IngestionDefinitionCreation setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the sourceCatalogUrl property: Source catalog URL. *Required for StaticCatalog ingestion type.
     * 
     * @return the sourceCatalogUrl value.
     */
    @Generated
    public String getSourceCatalogUrl() {
        return this.sourceCatalogUrl;
    }

    /**
     * Set the sourceCatalogUrl property: Source catalog URL. *Required for StaticCatalog ingestion type.
     * 
     * @param sourceCatalogUrl the sourceCatalogUrl value to set.
     * @return the IngestionDefinitionCreation object itself.
     */
    @Generated
    public IngestionDefinitionCreation setSourceCatalogUrl(String sourceCatalogUrl) {
        this.sourceCatalogUrl = sourceCatalogUrl;
        return this;
    }

    /**
     * Get the geoparquetUrl property: Parquet catalog URL. *Required for StacGeoparquet ingestion type.
     * 
     * @return the geoparquetUrl value.
     */
    @Generated
    public String getGeoparquetUrl() {
        return this.geoparquetUrl;
    }

    /**
     * Set the geoparquetUrl property: Parquet catalog URL. *Required for StacGeoparquet ingestion type.
     * 
     * @param geoparquetUrl the geoparquetUrl value to set.
     * @return the IngestionDefinitionCreation object itself.
     */
    @Generated
    public IngestionDefinitionCreation setGeoparquetUrl(String geoparquetUrl) {
        this.geoparquetUrl = geoparquetUrl;
        return this;
    }

    /**
     * Get the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @return the skipExistingItems value.
     */
    @Generated
    public Boolean isSkipExistingItems() {
        return this.skipExistingItems;
    }

    /**
     * Set the skipExistingItems property: Skip processing existing items in the catalog.
     * 
     * @param skipExistingItems the skipExistingItems value to set.
     * @return the IngestionDefinitionCreation object itself.
     */
    @Generated
    public IngestionDefinitionCreation setSkipExistingItems(Boolean skipExistingItems) {
        this.skipExistingItems = skipExistingItems;
        return this;
    }

    /**
     * Get the keepOriginalAssets property: Keep original source assets.
     * 
     * @return the keepOriginalAssets value.
     */
    @Generated
    public Boolean isKeepOriginalAssets() {
        return this.keepOriginalAssets;
    }

    /**
     * Set the keepOriginalAssets property: Keep original source assets.
     * 
     * @param keepOriginalAssets the keepOriginalAssets value to set.
     * @return the IngestionDefinitionCreation object itself.
     */
    @Generated
    public IngestionDefinitionCreation setKeepOriginalAssets(Boolean keepOriginalAssets) {
        this.keepOriginalAssets = keepOriginalAssets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("importType", this.importType == null ? null : this.importType.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("sourceCatalogUrl", this.sourceCatalogUrl);
        jsonWriter.writeStringField("geoparquetUrl", this.geoparquetUrl);
        jsonWriter.writeBooleanField("skipExistingItems", this.skipExistingItems);
        jsonWriter.writeBooleanField("keepOriginalAssets", this.keepOriginalAssets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngestionDefinitionCreation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngestionDefinitionCreation if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngestionDefinitionCreation.
     */
    @Generated
    public static IngestionDefinitionCreation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngestionType importType = null;
            String displayName = null;
            String sourceCatalogUrl = null;
            String geoparquetUrl = null;
            Boolean skipExistingItems = null;
            Boolean keepOriginalAssets = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("importType".equals(fieldName)) {
                    importType = IngestionType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("sourceCatalogUrl".equals(fieldName)) {
                    sourceCatalogUrl = reader.getString();
                } else if ("geoparquetUrl".equals(fieldName)) {
                    geoparquetUrl = reader.getString();
                } else if ("skipExistingItems".equals(fieldName)) {
                    skipExistingItems = reader.getNullable(JsonReader::getBoolean);
                } else if ("keepOriginalAssets".equals(fieldName)) {
                    keepOriginalAssets = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            IngestionDefinitionCreation deserializedIngestionDefinitionCreation
                = new IngestionDefinitionCreation(importType);
            deserializedIngestionDefinitionCreation.displayName = displayName;
            deserializedIngestionDefinitionCreation.sourceCatalogUrl = sourceCatalogUrl;
            deserializedIngestionDefinitionCreation.geoparquetUrl = geoparquetUrl;
            deserializedIngestionDefinitionCreation.skipExistingItems = skipExistingItems;
            deserializedIngestionDefinitionCreation.keepOriginalAssets = keepOriginalAssets;

            return deserializedIngestionDefinitionCreation;
        });
    }
}
