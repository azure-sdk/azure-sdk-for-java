// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.spatio.AssetStatisticsClient;
import com.azure.spatio.AssetsForPointsClient;
import com.azure.spatio.AssetsForTileMatrixSetsClient;
import com.azure.spatio.AssetsForTilesClient;
import com.azure.spatio.AuthConfigOperationsClient;
import com.azure.spatio.AvailableAssetsClient;
import com.azure.spatio.AzmapsClient;
import com.azure.spatio.AzmapsTokenClient;
import com.azure.spatio.BoundClient;
import com.azure.spatio.ClassmapLegendsClient;
import com.azure.spatio.CollectionAssetsClient;
import com.azure.spatio.CollectionMosaicsClient;
import com.azure.spatio.CollectionOperationsClient;
import com.azure.spatio.CollectionRenderOptionsClient;
import com.azure.spatio.CollectionThumbnailsClient;
import com.azure.spatio.CollectionTileSettingsClient;
import com.azure.spatio.ConfigClient;
import com.azure.spatio.ConformanceClassClient;
import com.azure.spatio.GeoJsonStatisticsClient;
import com.azure.spatio.GeoJsonsClient;
import com.azure.spatio.InfoGeoJsonOperationsClient;
import com.azure.spatio.InfoOperationsClient;
import com.azure.spatio.InfoSearchClient;
import com.azure.spatio.IngestionSourcesClient;
import com.azure.spatio.IngestionsClient;
import com.azure.spatio.IngestionsRunsClient;
import com.azure.spatio.IntervalLegendsClient;
import com.azure.spatio.ItemsClient;
import com.azure.spatio.LandingPagesClient;
import com.azure.spatio.LegendsClient;
import com.azure.spatio.MatrixDefinitionsClient;
import com.azure.spatio.MatrixListClient;
import com.azure.spatio.MicrosoftPlanetaryComputerProClientBuilder;
import com.azure.spatio.MosaicsTileJsonOperationsClient;
import com.azure.spatio.MosaicsTileMatrixSetsClient;
import com.azure.spatio.MosaicsTilesClient;
import com.azure.spatio.OperationsClient;
import com.azure.spatio.PartitionTypesClient;
import com.azure.spatio.PartsClient;
import com.azure.spatio.PointsClient;
import com.azure.spatio.PreviewsClient;
import com.azure.spatio.QueryablesClient;
import com.azure.spatio.RegisterSearchClient;
import com.azure.spatio.SearchOperationsClient;
import com.azure.spatio.StaticImagesClient;
import com.azure.spatio.StatisticsClient;
import com.azure.spatio.TileJsonMosaicsTileMatrixSetsClient;
import com.azure.spatio.TileJsonOperationsClient;
import com.azure.spatio.TileJsonTileMatrixSetsClient;
import com.azure.spatio.TileMatrixSetsClient;
import com.azure.spatio.TilesClient;
import com.azure.spatio.WmtsClient;
import com.azure.spatio.WmtsMosaicsClient;
import com.azure.spatio.WmtsMosaicsTileMatrixSetsClient;
import com.azure.spatio.WmtsTileMatrixSetsClient;

class MicrosoftPlanetaryComputerProClientTestBase extends TestProxyTestBase {
    protected IngestionsClient ingestionsClient;

    protected IngestionsRunsClient ingestionsRunsClient;

    protected ItemsClient itemsClient;

    protected IngestionSourcesClient ingestionSourcesClient;

    protected OperationsClient operationsClient;

    protected LandingPagesClient landingPagesClient;

    protected ConformanceClassClient conformanceClassClient;

    protected SearchOperationsClient searchOperationsClient;

    protected CollectionOperationsClient collectionOperationsClient;

    protected QueryablesClient queryablesClient;

    protected CollectionAssetsClient collectionAssetsClient;

    protected CollectionThumbnailsClient collectionThumbnailsClient;

    protected AzmapsTokenClient azmapsTokenClient;

    protected AzmapsClient azmapsClient;

    protected AuthConfigOperationsClient authConfigOperationsClient;

    protected ConfigClient configClient;

    protected CollectionMosaicsClient collectionMosaicsClient;

    protected CollectionRenderOptionsClient collectionRenderOptionsClient;

    protected CollectionTileSettingsClient collectionTileSettingsClient;

    protected PartitionTypesClient partitionTypesClient;

    protected BoundClient boundClient;

    protected InfoOperationsClient infoOperationsClient;

    protected InfoGeoJsonOperationsClient infoGeoJsonOperationsClient;

    protected AvailableAssetsClient availableAssetsClient;

    protected AssetStatisticsClient assetStatisticsClient;

    protected StatisticsClient statisticsClient;

    protected GeoJsonStatisticsClient geoJsonStatisticsClient;

    protected TilesClient tilesClient;

    protected MosaicsTilesClient mosaicsTilesClient;

    protected TileMatrixSetsClient tileMatrixSetsClient;

    protected MosaicsTileMatrixSetsClient mosaicsTileMatrixSetsClient;

    protected TileJsonOperationsClient tileJsonOperationsClient;

    protected MosaicsTileJsonOperationsClient mosaicsTileJsonOperationsClient;

    protected TileJsonTileMatrixSetsClient tileJsonTileMatrixSetsClient;

    protected TileJsonMosaicsTileMatrixSetsClient tileJsonMosaicsTileMatrixSetsClient;

    protected WmtsClient wmtsClient;

    protected WmtsMosaicsClient wmtsMosaicsClient;

    protected WmtsTileMatrixSetsClient wmtsTileMatrixSetsClient;

    protected WmtsMosaicsTileMatrixSetsClient wmtsMosaicsTileMatrixSetsClient;

    protected PointsClient pointsClient;

    protected PreviewsClient previewsClient;

    protected PartsClient partsClient;

    protected GeoJsonsClient geoJsonsClient;

    protected RegisterSearchClient registerSearchClient;

    protected InfoSearchClient infoSearchClient;

    protected AssetsForTilesClient assetsForTilesClient;

    protected AssetsForTileMatrixSetsClient assetsForTileMatrixSetsClient;

    protected AssetsForPointsClient assetsForPointsClient;

    protected IntervalLegendsClient intervalLegendsClient;

    protected ClassmapLegendsClient classmapLegendsClient;

    protected LegendsClient legendsClient;

    protected StaticImagesClient staticImagesClient;

    protected MatrixListClient matrixListClient;

    protected MatrixDefinitionsClient matrixDefinitionsClient;

    @Override
    protected void beforeTest() {
        MicrosoftPlanetaryComputerProClientBuilder ingestionsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            ingestionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        ingestionsClient = ingestionsClientbuilder.buildIngestionsClient();

        MicrosoftPlanetaryComputerProClientBuilder ingestionsRunsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            ingestionsRunsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        ingestionsRunsClient = ingestionsRunsClientbuilder.buildIngestionsRunsClient();

        MicrosoftPlanetaryComputerProClientBuilder itemsClientbuilder = new MicrosoftPlanetaryComputerProClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            itemsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        itemsClient = itemsClientbuilder.buildItemsClient();

        MicrosoftPlanetaryComputerProClientBuilder ingestionSourcesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            ingestionSourcesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        ingestionSourcesClient = ingestionSourcesClientbuilder.buildIngestionSourcesClient();

        MicrosoftPlanetaryComputerProClientBuilder operationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            operationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        operationsClient = operationsClientbuilder.buildOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder landingPagesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            landingPagesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        landingPagesClient = landingPagesClientbuilder.buildLandingPagesClient();

        MicrosoftPlanetaryComputerProClientBuilder conformanceClassClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            conformanceClassClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        conformanceClassClient = conformanceClassClientbuilder.buildConformanceClassClient();

        MicrosoftPlanetaryComputerProClientBuilder searchOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            searchOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        searchOperationsClient = searchOperationsClientbuilder.buildSearchOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionOperationsClient = collectionOperationsClientbuilder.buildCollectionOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder queryablesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            queryablesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        queryablesClient = queryablesClientbuilder.buildQueryablesClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionAssetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionAssetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionAssetsClient = collectionAssetsClientbuilder.buildCollectionAssetsClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionThumbnailsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionThumbnailsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionThumbnailsClient = collectionThumbnailsClientbuilder.buildCollectionThumbnailsClient();

        MicrosoftPlanetaryComputerProClientBuilder azmapsTokenClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            azmapsTokenClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        azmapsTokenClient = azmapsTokenClientbuilder.buildAzmapsTokenClient();

        MicrosoftPlanetaryComputerProClientBuilder azmapsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            azmapsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        azmapsClient = azmapsClientbuilder.buildAzmapsClient();

        MicrosoftPlanetaryComputerProClientBuilder authConfigOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            authConfigOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        authConfigOperationsClient = authConfigOperationsClientbuilder.buildAuthConfigOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder configClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            configClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        configClient = configClientbuilder.buildConfigClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionMosaicsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionMosaicsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionMosaicsClient = collectionMosaicsClientbuilder.buildCollectionMosaicsClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionRenderOptionsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionRenderOptionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionRenderOptionsClient = collectionRenderOptionsClientbuilder.buildCollectionRenderOptionsClient();

        MicrosoftPlanetaryComputerProClientBuilder collectionTileSettingsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionTileSettingsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionTileSettingsClient = collectionTileSettingsClientbuilder.buildCollectionTileSettingsClient();

        MicrosoftPlanetaryComputerProClientBuilder partitionTypesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            partitionTypesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        partitionTypesClient = partitionTypesClientbuilder.buildPartitionTypesClient();

        MicrosoftPlanetaryComputerProClientBuilder boundClientbuilder = new MicrosoftPlanetaryComputerProClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            boundClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        boundClient = boundClientbuilder.buildBoundClient();

        MicrosoftPlanetaryComputerProClientBuilder infoOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            infoOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        infoOperationsClient = infoOperationsClientbuilder.buildInfoOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder infoGeoJsonOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            infoGeoJsonOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        infoGeoJsonOperationsClient = infoGeoJsonOperationsClientbuilder.buildInfoGeoJsonOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder availableAssetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            availableAssetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        availableAssetsClient = availableAssetsClientbuilder.buildAvailableAssetsClient();

        MicrosoftPlanetaryComputerProClientBuilder assetStatisticsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            assetStatisticsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        assetStatisticsClient = assetStatisticsClientbuilder.buildAssetStatisticsClient();

        MicrosoftPlanetaryComputerProClientBuilder statisticsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            statisticsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        statisticsClient = statisticsClientbuilder.buildStatisticsClient();

        MicrosoftPlanetaryComputerProClientBuilder geoJsonStatisticsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            geoJsonStatisticsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        geoJsonStatisticsClient = geoJsonStatisticsClientbuilder.buildGeoJsonStatisticsClient();

        MicrosoftPlanetaryComputerProClientBuilder tilesClientbuilder = new MicrosoftPlanetaryComputerProClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            tilesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        tilesClient = tilesClientbuilder.buildTilesClient();

        MicrosoftPlanetaryComputerProClientBuilder mosaicsTilesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            mosaicsTilesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        mosaicsTilesClient = mosaicsTilesClientbuilder.buildMosaicsTilesClient();

        MicrosoftPlanetaryComputerProClientBuilder tileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            tileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        tileMatrixSetsClient = tileMatrixSetsClientbuilder.buildTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder mosaicsTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            mosaicsTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        mosaicsTileMatrixSetsClient = mosaicsTileMatrixSetsClientbuilder.buildMosaicsTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder tileJsonOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            tileJsonOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        tileJsonOperationsClient = tileJsonOperationsClientbuilder.buildTileJsonOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder mosaicsTileJsonOperationsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            mosaicsTileJsonOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        mosaicsTileJsonOperationsClient = mosaicsTileJsonOperationsClientbuilder.buildMosaicsTileJsonOperationsClient();

        MicrosoftPlanetaryComputerProClientBuilder tileJsonTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            tileJsonTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        tileJsonTileMatrixSetsClient = tileJsonTileMatrixSetsClientbuilder.buildTileJsonTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder tileJsonMosaicsTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            tileJsonMosaicsTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        tileJsonMosaicsTileMatrixSetsClient
            = tileJsonMosaicsTileMatrixSetsClientbuilder.buildTileJsonMosaicsTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder wmtsClientbuilder = new MicrosoftPlanetaryComputerProClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            wmtsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        wmtsClient = wmtsClientbuilder.buildWmtsClient();

        MicrosoftPlanetaryComputerProClientBuilder wmtsMosaicsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            wmtsMosaicsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        wmtsMosaicsClient = wmtsMosaicsClientbuilder.buildWmtsMosaicsClient();

        MicrosoftPlanetaryComputerProClientBuilder wmtsTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            wmtsTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        wmtsTileMatrixSetsClient = wmtsTileMatrixSetsClientbuilder.buildWmtsTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder wmtsMosaicsTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            wmtsMosaicsTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        wmtsMosaicsTileMatrixSetsClient = wmtsMosaicsTileMatrixSetsClientbuilder.buildWmtsMosaicsTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder pointsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            pointsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        pointsClient = pointsClientbuilder.buildPointsClient();

        MicrosoftPlanetaryComputerProClientBuilder previewsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            previewsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        previewsClient = previewsClientbuilder.buildPreviewsClient();

        MicrosoftPlanetaryComputerProClientBuilder partsClientbuilder = new MicrosoftPlanetaryComputerProClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            partsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        partsClient = partsClientbuilder.buildPartsClient();

        MicrosoftPlanetaryComputerProClientBuilder geoJsonsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            geoJsonsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        geoJsonsClient = geoJsonsClientbuilder.buildGeoJsonsClient();

        MicrosoftPlanetaryComputerProClientBuilder registerSearchClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            registerSearchClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        registerSearchClient = registerSearchClientbuilder.buildRegisterSearchClient();

        MicrosoftPlanetaryComputerProClientBuilder infoSearchClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            infoSearchClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        infoSearchClient = infoSearchClientbuilder.buildInfoSearchClient();

        MicrosoftPlanetaryComputerProClientBuilder assetsForTilesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            assetsForTilesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        assetsForTilesClient = assetsForTilesClientbuilder.buildAssetsForTilesClient();

        MicrosoftPlanetaryComputerProClientBuilder assetsForTileMatrixSetsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            assetsForTileMatrixSetsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        assetsForTileMatrixSetsClient = assetsForTileMatrixSetsClientbuilder.buildAssetsForTileMatrixSetsClient();

        MicrosoftPlanetaryComputerProClientBuilder assetsForPointsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            assetsForPointsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        assetsForPointsClient = assetsForPointsClientbuilder.buildAssetsForPointsClient();

        MicrosoftPlanetaryComputerProClientBuilder intervalLegendsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            intervalLegendsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        intervalLegendsClient = intervalLegendsClientbuilder.buildIntervalLegendsClient();

        MicrosoftPlanetaryComputerProClientBuilder classmapLegendsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            classmapLegendsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        classmapLegendsClient = classmapLegendsClientbuilder.buildClassmapLegendsClient();

        MicrosoftPlanetaryComputerProClientBuilder legendsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            legendsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        legendsClient = legendsClientbuilder.buildLegendsClient();

        MicrosoftPlanetaryComputerProClientBuilder staticImagesClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            staticImagesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        staticImagesClient = staticImagesClientbuilder.buildStaticImagesClient();

        MicrosoftPlanetaryComputerProClientBuilder matrixListClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            matrixListClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        matrixListClient = matrixListClientbuilder.buildMatrixListClient();

        MicrosoftPlanetaryComputerProClientBuilder matrixDefinitionsClientbuilder
            = new MicrosoftPlanetaryComputerProClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            matrixDefinitionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        matrixDefinitionsClient = matrixDefinitionsClientbuilder.buildMatrixDefinitionsClient();

    }
}
