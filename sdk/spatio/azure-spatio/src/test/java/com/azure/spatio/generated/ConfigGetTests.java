// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.generated;

import com.azure.spatio.models.Mosaic;
import com.azure.spatio.models.MosaicInfo;
import com.azure.spatio.models.RenderOption;
import com.azure.spatio.models.RenderOptionType;
import com.azure.spatio.models.TileSettings;
import com.azure.spatio.models.UserCollectionSettings;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ConfigGetTests extends MicrosoftPlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testConfigGetTests() {
        // method invocation
        UserCollectionSettings response = configClient.get("sentinel-2-l2a-tutorial-7");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "tileSettings"
        TileSettings responseTileSettings = response.getTileSettings();
        Assertions.assertNotNull(responseTileSettings);
        Assertions.assertEquals(12, responseTileSettings.getMinZoom());
        Assertions.assertEquals(35, responseTileSettings.getMaxItemsPerTile());
        // verify property "mosaicInfo"
        MosaicInfo responseMosaicInfo = response.getMosaicInfo();
        Assertions.assertNotNull(responseMosaicInfo);
        List<Mosaic> responseMosaicInfoMosaics = responseMosaicInfo.getMosaics();
        Mosaic responseMosaicInfoMosaicsFirstItem = responseMosaicInfoMosaics.iterator().next();
        Assertions.assertNotNull(responseMosaicInfoMosaicsFirstItem);
        Assertions.assertEquals("default", responseMosaicInfoMosaicsFirstItem.getId());
        Assertions.assertEquals("Default", responseMosaicInfoMosaicsFirstItem.getName());
        Assertions.assertEquals("", responseMosaicInfoMosaicsFirstItem.getDescription());
        List<Map<String, String>> responseMosaicInfoMosaicsFirstItemCql = responseMosaicInfoMosaicsFirstItem.getCql();
        Assertions.assertEquals(0, responseMosaicInfoMosaicsFirstItemCql.size());
        List<RenderOption> responseMosaicInfoRenderOptions = responseMosaicInfo.getRenderOptions();
        RenderOption responseMosaicInfoRenderOptionsFirstItem = responseMosaicInfoRenderOptions.iterator().next();
        Assertions.assertNotNull(responseMosaicInfoRenderOptionsFirstItem);
        Assertions.assertEquals("natural-color", responseMosaicInfoRenderOptionsFirstItem.getId());
        Assertions.assertEquals("Natural color", responseMosaicInfoRenderOptionsFirstItem.getName());
        Assertions.assertEquals("True color composite of visible bands (B04, B03, B02)",
            responseMosaicInfoRenderOptionsFirstItem.getDescription());
        Assertions.assertEquals(RenderOptionType.RASTER_TILE, responseMosaicInfoRenderOptionsFirstItem.getType());
        Assertions.assertEquals(
            "assets=B04&assets=B03&assets=B02&nodata=0&color_formula=Gamma RGB 3.2 Saturation 0.8 Sigmoidal RGB 25 0.35",
            responseMosaicInfoRenderOptionsFirstItem.getOptions());
        Assertions.assertEquals(9, responseMosaicInfoRenderOptionsFirstItem.getMinZoom());
    }
}
