// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.spatio.generated;

import com.azure.spatio.models.Collection;
import com.azure.spatio.models.Collections;
import com.azure.spatio.models.Extent;
import com.azure.spatio.models.Link1;
import com.azure.spatio.models.LinkType;
import com.azure.spatio.models.LinksItem;
import com.azure.spatio.models.SpatialExtent;
import com.azure.spatio.models.TimeInterval;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CollectionOperationsGetAllTests extends MicrosoftPlanetaryComputerProClientTestBase {
    @Test
    @Disabled
    public void testCollectionOperationsGetAllTests() {
        // method invocation
        Collections response = collectionOperationsClient.getAll(null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "links"
        List<Link1> responseLinks = response.getLinks();
        Link1 responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals("root", responseLinksFirstItem.getRel());
        Assertions.assertEquals(LinkType.APPLICATION_JSON, responseLinksFirstItem.getType());
        Assertions.assertEquals("https://devdev3.cmbtazhseqhgeudd.uksouth.geocatalog.ppe.spatio.azure-test.net/api/",
            responseLinksFirstItem.getHref());
        // verify property "collections"
        List<Collection> responseCollections = response.getCollections();
        Collection responseCollectionsFirstItem = responseCollections.iterator().next();
        Assertions.assertNotNull(responseCollectionsFirstItem);
        Assertions.assertEquals("example-collection", responseCollectionsFirstItem.getId());
        Assertions.assertEquals("An example collection", responseCollectionsFirstItem.getDescription());
        Assertions.assertEquals("1.0.0", responseCollectionsFirstItem.getStacVersion());
        List<LinksItem> responseCollectionsFirstItemLinks = responseCollectionsFirstItem.getLinks();
        LinksItem responseCollectionsFirstItemLinksFirstItem = responseCollectionsFirstItemLinks.iterator().next();
        Assertions.assertNotNull(responseCollectionsFirstItemLinksFirstItem);
        Assertions.assertEquals("Example Collection", responseCollectionsFirstItem.getTitle());
        Assertions.assertEquals("Collection", responseCollectionsFirstItem.getType());
        Assertions.assertEquals("CC-BY-4.0", responseCollectionsFirstItem.getLicense());
        Extent responseCollectionsFirstItemExtent = responseCollectionsFirstItem.getExtent();
        Assertions.assertNotNull(responseCollectionsFirstItemExtent);
        SpatialExtent responseCollectionsFirstItemExtentSpatial = responseCollectionsFirstItemExtent.getSpatial();
        Assertions.assertNotNull(responseCollectionsFirstItemExtentSpatial);
        List<List<String>> responseCollectionsFirstItemExtentSpatialBbox
            = responseCollectionsFirstItemExtentSpatial.getBbox();
        List<String> responseCollectionsFirstItemExtentSpatialBboxFirstItem
            = responseCollectionsFirstItemExtentSpatialBbox.iterator().next();
        Assertions.assertEquals("-180", responseCollectionsFirstItemExtentSpatialBboxFirstItem.iterator().next());
        TimeInterval responseCollectionsFirstItemExtentTemporal = responseCollectionsFirstItemExtent.getTemporal();
        Assertions.assertNotNull(responseCollectionsFirstItemExtentTemporal);
        List<List<String>> responseCollectionsFirstItemExtentTemporalInterval
            = responseCollectionsFirstItemExtentTemporal.getInterval();
        List<String> responseCollectionsFirstItemExtentTemporalIntervalFirstItem
            = responseCollectionsFirstItemExtentTemporalInterval.iterator().next();
        Assertions.assertEquals("2018-01-01T00:00:00Z",
            responseCollectionsFirstItemExtentTemporalIntervalFirstItem.iterator().next());
    }
}
