// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration of CCF Authentication policies.
 */
@Immutable
public final class CodeTransparencyConfigurationPolicy
    implements JsonSerializable<CodeTransparencyConfigurationPolicy> {
    /*
     * The accepted_algorithms property.
     */
    @Generated
    private List<String> acceptedAlgorithms;

    /*
     * The accepted_did_issuers property.
     */
    @Generated
    private List<String> acceptedDidIssuers;

    /**
     * Creates an instance of CodeTransparencyConfigurationPolicy class.
     */
    @Generated
    private CodeTransparencyConfigurationPolicy() {
    }

    /**
     * Get the acceptedAlgorithms property: The accepted_algorithms property.
     * 
     * @return the acceptedAlgorithms value.
     */
    @Generated
    public List<String> getAcceptedAlgorithms() {
        return this.acceptedAlgorithms;
    }

    /**
     * Get the acceptedDidIssuers property: The accepted_did_issuers property.
     * 
     * @return the acceptedDidIssuers value.
     */
    @Generated
    public List<String> getAcceptedDidIssuers() {
        return this.acceptedDidIssuers;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("accepted_algorithms", this.acceptedAlgorithms,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("accepted_did_issuers", this.acceptedDidIssuers,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeTransparencyConfigurationPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeTransparencyConfigurationPolicy if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CodeTransparencyConfigurationPolicy.
     */
    @Generated
    public static CodeTransparencyConfigurationPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CodeTransparencyConfigurationPolicy deserializedCodeTransparencyConfigurationPolicy
                = new CodeTransparencyConfigurationPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accepted_algorithms".equals(fieldName)) {
                    List<String> acceptedAlgorithms = reader.readArray(reader1 -> reader1.getString());
                    deserializedCodeTransparencyConfigurationPolicy.acceptedAlgorithms = acceptedAlgorithms;
                } else if ("accepted_did_issuers".equals(fieldName)) {
                    List<String> acceptedDidIssuers = reader.readArray(reader1 -> reader1.getString());
                    deserializedCodeTransparencyConfigurationPolicy.acceptedDidIssuers = acceptedDidIssuers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCodeTransparencyConfigurationPolicy;
        });
    }
}
