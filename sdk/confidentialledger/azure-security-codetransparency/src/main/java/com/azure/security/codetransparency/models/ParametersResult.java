// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Response body of the service parameters.
 */
@Immutable
public final class ParametersResult implements JsonSerializable<ParametersResult> {
    /*
     * The serviceCertificate property.
     */
    @Generated
    private final String serviceCertificate;

    /*
     * The serviceId property.
     */
    @Generated
    private final String serviceId;

    /*
     * The signatureAlgorithm property.
     */
    @Generated
    private final String signatureAlgorithm;

    /*
     * The treeAlgorithm property.
     */
    @Generated
    private final String treeAlgorithm;

    /**
     * Creates an instance of ParametersResult class.
     * 
     * @param serviceCertificate the serviceCertificate value to set.
     * @param serviceId the serviceId value to set.
     * @param signatureAlgorithm the signatureAlgorithm value to set.
     * @param treeAlgorithm the treeAlgorithm value to set.
     */
    @Generated
    private ParametersResult(String serviceCertificate, String serviceId, String signatureAlgorithm,
        String treeAlgorithm) {
        this.serviceCertificate = serviceCertificate;
        this.serviceId = serviceId;
        this.signatureAlgorithm = signatureAlgorithm;
        this.treeAlgorithm = treeAlgorithm;
    }

    /**
     * Get the serviceCertificate property: The serviceCertificate property.
     * 
     * @return the serviceCertificate value.
     */
    @Generated
    public String getServiceCertificate() {
        return this.serviceCertificate;
    }

    /**
     * Get the serviceId property: The serviceId property.
     * 
     * @return the serviceId value.
     */
    @Generated
    public String getServiceId() {
        return this.serviceId;
    }

    /**
     * Get the signatureAlgorithm property: The signatureAlgorithm property.
     * 
     * @return the signatureAlgorithm value.
     */
    @Generated
    public String getSignatureAlgorithm() {
        return this.signatureAlgorithm;
    }

    /**
     * Get the treeAlgorithm property: The treeAlgorithm property.
     * 
     * @return the treeAlgorithm value.
     */
    @Generated
    public String getTreeAlgorithm() {
        return this.treeAlgorithm;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceCertificate", this.serviceCertificate);
        jsonWriter.writeStringField("serviceId", this.serviceId);
        jsonWriter.writeStringField("signatureAlgorithm", this.signatureAlgorithm);
        jsonWriter.writeStringField("treeAlgorithm", this.treeAlgorithm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParametersResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParametersResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ParametersResult.
     */
    @Generated
    public static ParametersResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serviceCertificate = null;
            String serviceId = null;
            String signatureAlgorithm = null;
            String treeAlgorithm = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceCertificate".equals(fieldName)) {
                    serviceCertificate = reader.getString();
                } else if ("serviceId".equals(fieldName)) {
                    serviceId = reader.getString();
                } else if ("signatureAlgorithm".equals(fieldName)) {
                    signatureAlgorithm = reader.getString();
                } else if ("treeAlgorithm".equals(fieldName)) {
                    treeAlgorithm = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ParametersResult(serviceCertificate, serviceId, signatureAlgorithm, treeAlgorithm);
        });
    }
}
