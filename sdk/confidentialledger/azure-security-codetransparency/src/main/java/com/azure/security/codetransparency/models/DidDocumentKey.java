// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A DID document key.
 */
@Immutable
public final class DidDocumentKey implements JsonSerializable<DidDocumentKey> {
    /*
     * Key identifier.
     */
    @Generated
    private final String id;

    /*
     * Key controller - similar to DID issuer.
     */
    @Generated
    private final String controller;

    /*
     * Key type.
     */
    @Generated
    private final String type = "JsonWebKey2020";

    /*
     * Serialized public key in JWK format.
     */
    @Generated
    private final JsonWebKey publicKeyJwk;

    /**
     * Creates an instance of DidDocumentKey class.
     * 
     * @param id the id value to set.
     * @param controller the controller value to set.
     * @param publicKeyJwk the publicKeyJwk value to set.
     */
    @Generated
    private DidDocumentKey(String id, String controller, JsonWebKey publicKeyJwk) {
        this.id = id;
        this.controller = controller;
        this.publicKeyJwk = publicKeyJwk;
    }

    /**
     * Get the id property: Key identifier.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the controller property: Key controller - similar to DID issuer.
     * 
     * @return the controller value.
     */
    @Generated
    public String getController() {
        return this.controller;
    }

    /**
     * Get the type property: Key type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the publicKeyJwk property: Serialized public key in JWK format.
     * 
     * @return the publicKeyJwk value.
     */
    @Generated
    public JsonWebKey getPublicKeyJwk() {
        return this.publicKeyJwk;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("controller", this.controller);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("publicKeyJwk", this.publicKeyJwk);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DidDocumentKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DidDocumentKey if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DidDocumentKey.
     */
    @Generated
    public static DidDocumentKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String controller = null;
            JsonWebKey publicKeyJwk = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("controller".equals(fieldName)) {
                    controller = reader.getString();
                } else if ("publicKeyJwk".equals(fieldName)) {
                    publicKeyJwk = JsonWebKey.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new DidDocumentKey(id, controller, publicKeyJwk);
        });
    }
}
