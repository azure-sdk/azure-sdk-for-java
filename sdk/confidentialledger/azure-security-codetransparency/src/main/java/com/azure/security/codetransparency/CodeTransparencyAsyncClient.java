// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.security.codetransparency.implementation.CodeTransparencyClientImpl;
import com.azure.security.codetransparency.models.CodeTransparencyConfiguration;
import com.azure.security.codetransparency.models.CreateEntryResult;
import com.azure.security.codetransparency.models.DidDocument;
import com.azure.security.codetransparency.models.GetOperationResult;
import com.azure.security.codetransparency.models.ListOperationResult;
import com.azure.security.codetransparency.models.ParametersResult;
import com.azure.security.codetransparency.models.VersionResult;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous CodeTransparencyClient type.
 */
@ServiceClient(builder = CodeTransparencyClientBuilder.class, isAsync = true)
public final class CodeTransparencyAsyncClient {
    @Generated
    private final CodeTransparencyClientImpl serviceClient;

    /**
     * Initializes an instance of CodeTransparencyAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CodeTransparencyAsyncClient(CodeTransparencyClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     * }
     * }</pre>
     * 
     * @param body A raw CoseSign1 signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of entry submission containing the operationId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createEntryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createEntryWithResponseAsync(body, requestOptions);
    }

    /**
     * Get the status the entry operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     entryId: String (Optional)
     *     error: String (Optional)
     *     operationId: String (Required)
     *     status: String(running/failed/succeeded) (Required)
     * }
     * }</pre>
     * 
     * @param operationId ID of the operation to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status the entry operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntryStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getEntryStatusWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Get the status of all entries operations.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operations (Required): [
     *          (Required){
     *             entryId: String (Optional)
     *             error: String (Optional)
     *             operationId: String (Required)
     *             status: String(running/failed/succeeded) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of all entries operations along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listEntryStatusesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listEntryStatusesWithResponseAsync(requestOptions);
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>embedReceipt</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Embed a receipt as part of the response</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entry with or without receipt embedded in its unprotected header along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntryWithResponse(String entryId, RequestOptions requestOptions) {
        return this.serviceClient.getEntryWithResponseAsync(entryId, requestOptions);
    }

    /**
     * Get the receipt of an entry given a specific entry id.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the receipt of an entry given a specific entry id along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntryReceiptWithResponse(String entryId, RequestOptions requestOptions) {
        return this.serviceClient.getEntryReceiptWithResponseAsync(entryId, requestOptions);
    }

    /**
     * Historical query to get a list of entries of a given range.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>from</td>
     * <td>Long</td>
     * <td>No</td>
     * <td>Starting Transaction Id</td>
     * </tr>
     * <tr>
     * <td>to</td>
     * <td>Long</td>
     * <td>No</td>
     * <td>Ending Transaction Id</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a List of Entry IDs as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEntryIds(RequestOptions requestOptions) {
        return this.serviceClient.listEntryIdsAsync(requestOptions);
    }

    /**
     * Get service parameters.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     serviceCertificate: String (Required)
     *     serviceId: String (Required)
     *     signatureAlgorithm: String (Required)
     *     treeAlgorithm: String (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service parameters along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getParametersWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getParametersWithResponseAsync(requestOptions);
    }

    /**
     * Get the DID configuration file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     assertionMethod (Required): [
     *          (Required){
     *             id: String (Required)
     *             controller: String (Required)
     *             type: String (Required)
     *             publicKeyJwk (Required): {
     *                 alg: String (Optional)
     *                 crv: String (Optional)
     *                 d: String (Optional)
     *                 dp: String (Optional)
     *                 dq: String (Optional)
     *                 e: String (Optional)
     *                 k: String (Optional)
     *                 kid: String (Optional)
     *                 kty: String (Required)
     *                 n: String (Optional)
     *                 p: String (Optional)
     *                 q: String (Optional)
     *                 qi: String (Optional)
     *                 use: String (Optional)
     *                 x: String (Optional)
     *                 x5c (Optional): [
     *                     String (Optional)
     *                 ]
     *                 y: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the DID configuration file along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDidConfigWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getDidConfigWithResponseAsync(requestOptions);
    }

    /**
     * Get CodeTransparency configuration information.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     policy (Optional): {
     *         accepted_algorithms (Optional): [
     *             String (Optional)
     *         ]
     *         accepted_did_issuers (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     authentication (Optional): {
     *         allow_unauthenticated: boolean (Required)
     *         jwt (Optional): {
     *             required_claims (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     service_identifier: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return codeTransparency configuration information along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCodeTransparencyConfigWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCodeTransparencyConfigWithResponseAsync(requestOptions);
    }

    /**
     * Get CodeTransparency version information.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     scitt_version: String (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return codeTransparency version information along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCodeTransparencyVersionWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCodeTransparencyVersionWithResponseAsync(requestOptions);
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance.
     * 
     * @param body A raw CoseSign1 signature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of entry submission containing the operationId on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateEntryResult> createEntry(BinaryData body) {
        // Generated convenience method for createEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEntryWithResponse(body, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CreateEntryResult.class));
    }

    /**
     * Get the status the entry operation.
     * 
     * @param operationId ID of the operation to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status the entry operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetOperationResult> getEntryStatus(String operationId) {
        // Generated convenience method for getEntryStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryStatusWithResponse(operationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GetOperationResult.class));
    }

    /**
     * Get the status of all entries operations.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of all entries operations on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListOperationResult> listEntryStatuses() {
        // Generated convenience method for listEntryStatusesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listEntryStatusesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListOperationResult.class));
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * 
     * @param entryId ID of the entry to retrieve.
     * @param embedReceipt Embed a receipt as part of the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return entry with or without receipt embedded in its unprotected header on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getEntry(String entryId, Boolean embedReceipt) {
        // Generated convenience method for getEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (embedReceipt != null) {
            requestOptions.addQueryParam("embedReceipt", String.valueOf(embedReceipt), false);
        }
        return getEntryWithResponse(entryId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * 
     * @param entryId ID of the entry to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return entry with or without receipt embedded in its unprotected header on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getEntry(String entryId) {
        // Generated convenience method for getEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryWithResponse(entryId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get the receipt of an entry given a specific entry id.
     * 
     * @param entryId ID of the entry to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the receipt of an entry given a specific entry id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getEntryReceipt(String entryId) {
        // Generated convenience method for getEntryReceiptWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryReceiptWithResponse(entryId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Historical query to get a list of entries of a given range.
     * 
     * @param from Starting Transaction Id.
     * @param to Ending Transaction Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a List of Entry IDs as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> listEntryIds(Long from, Long to) {
        // Generated convenience method for listEntryIds
        RequestOptions requestOptions = new RequestOptions();
        if (from != null) {
            requestOptions.addQueryParam("from", String.valueOf(from), false);
        }
        if (to != null) {
            requestOptions.addQueryParam("to", String.valueOf(to), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listEntryIds(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, String>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(String.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Historical query to get a list of entries of a given range.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a List of Entry IDs as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> listEntryIds() {
        // Generated convenience method for listEntryIds
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listEntryIds(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, String>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(String.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get service parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service parameters on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ParametersResult> getParameters() {
        // Generated convenience method for getParametersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getParametersWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ParametersResult.class));
    }

    /**
     * Get the DID configuration file.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DID configuration file on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DidDocument> getDidConfig() {
        // Generated convenience method for getDidConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDidConfigWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DidDocument.class));
    }

    /**
     * Get CodeTransparency configuration information.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return codeTransparency configuration information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CodeTransparencyConfiguration> getCodeTransparencyConfig() {
        // Generated convenience method for getCodeTransparencyConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCodeTransparencyConfigWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CodeTransparencyConfiguration.class));
    }

    /**
     * Get CodeTransparency version information.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return codeTransparency version information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VersionResult> getCodeTransparencyVersion() {
        // Generated convenience method for getCodeTransparencyVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCodeTransparencyVersionWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(VersionResult.class));
    }
}
