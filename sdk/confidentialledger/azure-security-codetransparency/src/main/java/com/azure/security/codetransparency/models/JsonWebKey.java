// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * rfc7517 JSON Web Key representation adapted from a shared swagger definition in the common types.
 */
@Immutable
public final class JsonWebKey {
    /*
     * The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key. The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     */
    @Generated
    @JsonProperty(value = "alg")
    private String alg;

    /*
     * The "crv" (curve) parameter identifies the curve type
     */
    @Generated
    @JsonProperty(value = "crv")
    private String crv;

    /*
     * RSA private exponent or ECC private key
     */
    @Generated
    @JsonProperty(value = "d")
    private String d;

    /*
     * RSA Private Key Parameter
     */
    @Generated
    @JsonProperty(value = "dp")
    private String dp;

    /*
     * RSA Private Key Parameter
     */
    @Generated
    @JsonProperty(value = "dq")
    private String dq;

    /*
     * RSA public exponent, in Base64
     */
    @Generated
    @JsonProperty(value = "e")
    private String e;

    /*
     * Symmetric key
     */
    @Generated
    @JsonProperty(value = "k")
    private String k;

    /*
     * The "kid" (key ID) parameter is used to match a specific key. This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover. The structure of the "kid" value is
     * unspecified. When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values. (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.) The "kid"
     * value is a case-sensitive string.
     */
    @Generated
    @JsonProperty(value = "kid")
    private String kid;

    /*
     * The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name. The "kty" value is a case-sensitive string.
     */
    @Generated
    @JsonProperty(value = "kty")
    private String kty;

    /*
     * RSA modulus, in Base64
     */
    @Generated
    @JsonProperty(value = "n")
    private String n;

    /*
     * RSA secret prime
     */
    @Generated
    @JsonProperty(value = "p")
    private String p;

    /*
     * RSA secret prime, with p < q
     */
    @Generated
    @JsonProperty(value = "q")
    private String q;

    /*
     * RSA Private Key Parameter
     */
    @Generated
    @JsonProperty(value = "qi")
    private String qi;

    /*
     * Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     */
    @Generated
    @JsonProperty(value = "use")
    private String use;

    /*
     * X coordinate for the Elliptic Curve point
     */
    @Generated
    @JsonProperty(value = "x")
    private String x;

    /*
     * The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280]. The certificate chain is
     * represented as a JSON array of certificate value strings. Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     */
    @Generated
    @JsonProperty(value = "x5c")
    private List<String> x5c;

    /*
     * Y coordinate for the Elliptic Curve point
     */
    @Generated
    @JsonProperty(value = "y")
    private String y;

    /**
     * Creates an instance of JsonWebKey class.
     * 
     * @param kty the kty value to set.
     */
    @Generated
    @JsonCreator
    private JsonWebKey(@JsonProperty(value = "kty") String kty) {
        this.kty = kty;
    }

    /**
     * Get the alg property: The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key. The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     * 
     * @return the alg value.
     */
    @Generated
    public String getAlg() {
        return this.alg;
    }

    /**
     * Get the crv property: The "crv" (curve) parameter identifies the curve type.
     * 
     * @return the crv value.
     */
    @Generated
    public String getCrv() {
        return this.crv;
    }

    /**
     * Get the d property: RSA private exponent or ECC private key.
     * 
     * @return the d value.
     */
    @Generated
    public String getD() {
        return this.d;
    }

    /**
     * Get the dp property: RSA Private Key Parameter.
     * 
     * @return the dp value.
     */
    @Generated
    public String getDp() {
        return this.dp;
    }

    /**
     * Get the dq property: RSA Private Key Parameter.
     * 
     * @return the dq value.
     */
    @Generated
    public String getDq() {
        return this.dq;
    }

    /**
     * Get the e property: RSA public exponent, in Base64.
     * 
     * @return the e value.
     */
    @Generated
    public String getE() {
        return this.e;
    }

    /**
     * Get the k property: Symmetric key.
     * 
     * @return the k value.
     */
    @Generated
    public String getK() {
        return this.k;
    }

    /**
     * Get the kid property: The "kid" (key ID) parameter is used to match a specific key. This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover. The structure of the "kid" value is
     * unspecified. When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values. (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.) The "kid"
     * value is a case-sensitive string.
     * 
     * @return the kid value.
     */
    @Generated
    public String getKid() {
        return this.kid;
    }

    /**
     * Get the kty property: The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name. The "kty" value is a case-sensitive string.
     * 
     * @return the kty value.
     */
    @Generated
    public String getKty() {
        return this.kty;
    }

    /**
     * Get the n property: RSA modulus, in Base64.
     * 
     * @return the n value.
     */
    @Generated
    public String getN() {
        return this.n;
    }

    /**
     * Get the p property: RSA secret prime.
     * 
     * @return the p value.
     */
    @Generated
    public String getP() {
        return this.p;
    }

    /**
     * Get the q property: RSA secret prime, with p &lt; q.
     * 
     * @return the q value.
     */
    @Generated
    public String getQ() {
        return this.q;
    }

    /**
     * Get the qi property: RSA Private Key Parameter.
     * 
     * @return the qi value.
     */
    @Generated
    public String getQi() {
        return this.qi;
    }

    /**
     * Get the use property: Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     * 
     * @return the use value.
     */
    @Generated
    public String getUse() {
        return this.use;
    }

    /**
     * Get the x property: X coordinate for the Elliptic Curve point.
     * 
     * @return the x value.
     */
    @Generated
    public String getX() {
        return this.x;
    }

    /**
     * Get the x5c property: The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280]. The certificate chain is
     * represented as a JSON array of certificate value strings. Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     * 
     * @return the x5c value.
     */
    @Generated
    public List<String> getX5c() {
        return this.x5c;
    }

    /**
     * Get the y property: Y coordinate for the Elliptic Curve point.
     * 
     * @return the y value.
     */
    @Generated
    public String getY() {
        return this.y;
    }
}
