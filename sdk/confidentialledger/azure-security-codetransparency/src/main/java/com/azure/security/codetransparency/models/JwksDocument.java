// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A JWKS like document.
 */
@Immutable
public final class JwksDocument implements JsonSerializable<JwksDocument> {
    /*
     * List of public keys used for receipt verification.
     */
    @Generated
    private final List<JsonWebKey> keys;

    /**
     * Creates an instance of JwksDocument class.
     * 
     * @param keys the keys value to set.
     */
    @Generated
    private JwksDocument(List<JsonWebKey> keys) {
        this.keys = keys;
    }

    /**
     * Get the keys property: List of public keys used for receipt verification.
     * 
     * @return the keys value.
     */
    @Generated
    public List<JsonWebKey> getKeys() {
        return this.keys;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("keys", this.keys, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwksDocument from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwksDocument if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwksDocument.
     */
    @Generated
    public static JwksDocument fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<JsonWebKey> keys = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keys".equals(fieldName)) {
                    keys = reader.readArray(reader1 -> JsonWebKey.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new JwksDocument(keys);
        });
    }
}
