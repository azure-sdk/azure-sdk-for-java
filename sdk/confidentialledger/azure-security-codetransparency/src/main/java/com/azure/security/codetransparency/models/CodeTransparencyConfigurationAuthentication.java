// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration of CCF authentication.
 */
@Immutable
public final class CodeTransparencyConfigurationAuthentication
    implements JsonSerializable<CodeTransparencyConfigurationAuthentication> {
    /*
     * The allow_unauthenticated property.
     */
    @Generated
    private final boolean allowUnauthenticated;

    /*
     * The jwt property.
     */
    @Generated
    private CodeTransparencyConfigurationAuthenticationJwt jwt;

    /**
     * Creates an instance of CodeTransparencyConfigurationAuthentication class.
     * 
     * @param allowUnauthenticated the allowUnauthenticated value to set.
     */
    @Generated
    private CodeTransparencyConfigurationAuthentication(boolean allowUnauthenticated) {
        this.allowUnauthenticated = allowUnauthenticated;
    }

    /**
     * Get the allowUnauthenticated property: The allow_unauthenticated property.
     * 
     * @return the allowUnauthenticated value.
     */
    @Generated
    public boolean isAllowUnauthenticated() {
        return this.allowUnauthenticated;
    }

    /**
     * Get the jwt property: The jwt property.
     * 
     * @return the jwt value.
     */
    @Generated
    public CodeTransparencyConfigurationAuthenticationJwt getJwt() {
        return this.jwt;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allow_unauthenticated", this.allowUnauthenticated);
        jsonWriter.writeJsonField("jwt", this.jwt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeTransparencyConfigurationAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeTransparencyConfigurationAuthentication if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeTransparencyConfigurationAuthentication.
     */
    @Generated
    public static CodeTransparencyConfigurationAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean allowUnauthenticated = false;
            CodeTransparencyConfigurationAuthenticationJwt jwt = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allow_unauthenticated".equals(fieldName)) {
                    allowUnauthenticated = reader.getBoolean();
                } else if ("jwt".equals(fieldName)) {
                    jwt = CodeTransparencyConfigurationAuthenticationJwt.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            CodeTransparencyConfigurationAuthentication deserializedCodeTransparencyConfigurationAuthentication
                = new CodeTransparencyConfigurationAuthentication(allowUnauthenticated);
            deserializedCodeTransparencyConfigurationAuthentication.jwt = jwt;

            return deserializedCodeTransparencyConfigurationAuthentication;
        });
    }
}
