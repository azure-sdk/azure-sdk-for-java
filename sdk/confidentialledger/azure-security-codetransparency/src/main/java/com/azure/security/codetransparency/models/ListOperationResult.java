// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Response body of the ListOperations API.
 */
@Immutable
public final class ListOperationResult implements JsonSerializable<ListOperationResult> {
    /*
     * List of operations
     */
    @Generated
    private final List<GetOperationResult> operations;

    /**
     * Creates an instance of ListOperationResult class.
     * 
     * @param operations the operations value to set.
     */
    @Generated
    private ListOperationResult(List<GetOperationResult> operations) {
        this.operations = operations;
    }

    /**
     * Get the operations property: List of operations.
     * 
     * @return the operations value.
     */
    @Generated
    public List<GetOperationResult> getOperations() {
        return this.operations;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("operations", this.operations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListOperationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListOperationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ListOperationResult.
     */
    @Generated
    public static ListOperationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<GetOperationResult> operations = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operations".equals(fieldName)) {
                    operations = reader.readArray(reader1 -> GetOperationResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ListOperationResult(operations);
        });
    }
}
