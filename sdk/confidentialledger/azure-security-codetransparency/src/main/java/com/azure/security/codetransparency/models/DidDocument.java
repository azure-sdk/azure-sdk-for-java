// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A DID document.
 */
@Immutable
public final class DidDocument implements JsonSerializable<DidDocument> {
    /*
     * String representing a DID issuer.
     */
    @Generated
    private final String id;

    /*
     * List of public keys used for receipt endorsement verification.
     */
    @Generated
    private final List<DidDocumentKey> assertionMethod;

    /**
     * Creates an instance of DidDocument class.
     * 
     * @param id the id value to set.
     * @param assertionMethod the assertionMethod value to set.
     */
    @Generated
    private DidDocument(String id, List<DidDocumentKey> assertionMethod) {
        this.id = id;
        this.assertionMethod = assertionMethod;
    }

    /**
     * Get the id property: String representing a DID issuer.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the assertionMethod property: List of public keys used for receipt endorsement verification.
     * 
     * @return the assertionMethod value.
     */
    @Generated
    public List<DidDocumentKey> getAssertionMethod() {
        return this.assertionMethod;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("assertionMethod", this.assertionMethod,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DidDocument from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DidDocument if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DidDocument.
     */
    @Generated
    public static DidDocument fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<DidDocumentKey> assertionMethod = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("assertionMethod".equals(fieldName)) {
                    assertionMethod = reader.readArray(reader1 -> DidDocumentKey.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DidDocument(id, assertionMethod);
        });
    }
}
