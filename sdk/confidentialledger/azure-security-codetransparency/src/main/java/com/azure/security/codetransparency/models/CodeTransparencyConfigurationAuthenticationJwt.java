// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Configuration of JWT claims.
 */
@Immutable
public final class CodeTransparencyConfigurationAuthenticationJwt
    implements JsonSerializable<CodeTransparencyConfigurationAuthenticationJwt> {
    /*
     * The required_claims property.
     */
    @Generated
    private final Map<String, String> requiredClaims;

    /**
     * Creates an instance of CodeTransparencyConfigurationAuthenticationJwt class.
     * 
     * @param requiredClaims the requiredClaims value to set.
     */
    @Generated
    private CodeTransparencyConfigurationAuthenticationJwt(Map<String, String> requiredClaims) {
        this.requiredClaims = requiredClaims;
    }

    /**
     * Get the requiredClaims property: The required_claims property.
     * 
     * @return the requiredClaims value.
     */
    @Generated
    public Map<String, String> getRequiredClaims() {
        return this.requiredClaims;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("required_claims", this.requiredClaims,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeTransparencyConfigurationAuthenticationJwt from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeTransparencyConfigurationAuthenticationJwt if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CodeTransparencyConfigurationAuthenticationJwt.
     */
    @Generated
    public static CodeTransparencyConfigurationAuthenticationJwt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, String> requiredClaims = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("required_claims".equals(fieldName)) {
                    requiredClaims = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new CodeTransparencyConfigurationAuthenticationJwt(requiredClaims);
        });
    }
}
