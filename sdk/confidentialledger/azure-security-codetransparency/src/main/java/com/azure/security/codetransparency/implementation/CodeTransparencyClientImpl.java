// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.security.codetransparency.CodeTransparencyServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the CodeTransparencyClient type.
 */
public final class CodeTransparencyClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CodeTransparencyClientService service;

    /**
     */
    private final String endpoint;

    /**
     * Gets.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final CodeTransparencyServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public CodeTransparencyServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of CodeTransparencyClient client.
     * 
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public CodeTransparencyClientImpl(String endpoint, CodeTransparencyServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of CodeTransparencyClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public CodeTransparencyClientImpl(HttpPipeline httpPipeline, String endpoint,
        CodeTransparencyServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of CodeTransparencyClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public CodeTransparencyClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        CodeTransparencyServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(CodeTransparencyClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for CodeTransparencyClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CodeTransparencyClie")
    public interface CodeTransparencyClientService {
        @Get("/.well-known/transparency-configuration")
        @ExpectedResponses({ 200, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTransparencyConfigCbor(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/.well-known/transparency-configuration")
        @ExpectedResponses({ 200, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTransparencyConfigCborSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/jwks")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPublicKeys(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/jwks")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getPublicKeysSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/entries")
        @ExpectedResponses({ 201, 202, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createEntry(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/cose") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/entries")
        @ExpectedResponses({ 201, 202, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createEntrySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/cose") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/operations/{operationId}")
        @ExpectedResponses({ 200, 202, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getOperation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/operations/{operationId}")
        @ExpectedResponses({ 200, 202, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getOperationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("operationId") String operationId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/entries/{entryId}")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEntry(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entryId") String entryId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/entries/{entryId}")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEntrySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entryId") String entryId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/entries/{entryId}/statement")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEntryStatement(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entryId") String entryId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/entries/{entryId}/statement")
        @ExpectedResponses({ 200, 400, 404, 429, 500, 503 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEntryStatementSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entryId") String entryId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get the transparency service configuration, mandatory in IETF SCITT draft.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transparency service configuration, mandatory in IETF SCITT draft along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTransparencyConfigCborWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/cbor";
        return FluxUtil.withContext(context -> service.getTransparencyConfigCbor(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get the transparency service configuration, mandatory in IETF SCITT draft.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transparency service configuration, mandatory in IETF SCITT draft along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTransparencyConfigCborWithResponse(RequestOptions requestOptions) {
        final String accept = "application/cbor";
        return service.getTransparencyConfigCborSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get the public keys used by the service to sign receipts, mentioned in IETF SCITT draft as part of jwks_uri
     * implementation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     keys (Required): [
     *          (Required){
     *             alg: String (Optional)
     *             crv: String (Optional)
     *             d: String (Optional)
     *             dp: String (Optional)
     *             dq: String (Optional)
     *             e: String (Optional)
     *             k: String (Optional)
     *             kid: String (Optional)
     *             kty: String (Required)
     *             n: String (Optional)
     *             p: String (Optional)
     *             q: String (Optional)
     *             qi: String (Optional)
     *             use: String (Optional)
     *             x: String (Optional)
     *             x5c (Optional): [
     *                 String (Optional)
     *             ]
     *             y: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the public keys used by the service to sign receipts, mentioned in IETF SCITT draft as part of jwks_uri
     * implementation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPublicKeysWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getPublicKeys(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get the public keys used by the service to sign receipts, mentioned in IETF SCITT draft as part of jwks_uri
     * implementation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     keys (Required): [
     *          (Required){
     *             alg: String (Optional)
     *             crv: String (Optional)
     *             d: String (Optional)
     *             dp: String (Optional)
     *             dq: String (Optional)
     *             e: String (Optional)
     *             k: String (Optional)
     *             kid: String (Optional)
     *             kty: String (Required)
     *             n: String (Optional)
     *             p: String (Optional)
     *             q: String (Optional)
     *             qi: String (Optional)
     *             use: String (Optional)
     *             x: String (Optional)
     *             x5c (Optional): [
     *                 String (Optional)
     *             ]
     *             y: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the public keys used by the service to sign receipts, mentioned in IETF SCITT draft as part of jwks_uri
     * implementation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPublicKeysWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getPublicKeysSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance, mandatory in IETF SCITT draft.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param body CoseSign1 signature envelope.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createEntryWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/cose";
        final String accept = "application/cose; application/cbor";
        return FluxUtil.withContext(context -> service.createEntry(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance, mandatory in IETF SCITT draft.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param body CoseSign1 signature envelope.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEntryWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/cose";
        final String accept = "application/cose; application/cbor";
        return service.createEntrySync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType, accept,
            body, requestOptions, Context.NONE);
    }

    /**
     * Get status of the long running registration operation, mandatory in IETF SCITT draft.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param operationId ID of the operation to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of the long running registration operation, mandatory in IETF SCITT draft along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponseAsync(String operationId, RequestOptions requestOptions) {
        final String accept = "application/cbor";
        return FluxUtil.withContext(context -> service.getOperation(this.getEndpoint(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Get status of the long running registration operation, mandatory in IETF SCITT draft.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param operationId ID of the operation to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of the long running registration operation, mandatory in IETF SCITT draft along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationWithResponse(String operationId, RequestOptions requestOptions) {
        final String accept = "application/cbor";
        return service.getOperationSync(this.getEndpoint(), this.getServiceVersion().getVersion(), operationId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get receipt.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return receipt along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntryWithResponseAsync(String entryId, RequestOptions requestOptions) {
        final String accept = "application/cose";
        return FluxUtil.withContext(context -> service.getEntry(this.getEndpoint(),
            this.getServiceVersion().getVersion(), entryId, accept, requestOptions, context));
    }

    /**
     * Get receipt.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return receipt along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntryWithResponse(String entryId, RequestOptions requestOptions) {
        final String accept = "application/cose";
        return service.getEntrySync(this.getEndpoint(), this.getServiceVersion().getVersion(), entryId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get the transparent statement consisting of the signed statement and the receipt embedded in the header.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transparent statement consisting of the signed statement and the receipt embedded in the header along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntryStatementWithResponseAsync(String entryId,
        RequestOptions requestOptions) {
        final String accept = "application/cose";
        return FluxUtil.withContext(context -> service.getEntryStatement(this.getEndpoint(),
            this.getServiceVersion().getVersion(), entryId, accept, requestOptions, context));
    }

    /**
     * Get the transparent statement consisting of the signed statement and the receipt embedded in the header.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transparent statement consisting of the signed statement and the receipt embedded in the header along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntryStatementWithResponse(String entryId, RequestOptions requestOptions) {
        final String accept = "application/cose";
        return service.getEntryStatementSync(this.getEndpoint(), this.getServiceVersion().getVersion(), entryId, accept,
            requestOptions, Context.NONE);
    }
}
