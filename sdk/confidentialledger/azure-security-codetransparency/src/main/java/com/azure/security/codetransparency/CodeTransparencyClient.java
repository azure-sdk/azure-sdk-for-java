// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.security.codetransparency.implementation.CodeTransparencyClientImpl;
import com.azure.security.codetransparency.models.CodeTransparencyConfiguration;
import com.azure.security.codetransparency.models.CreateEntryResult;
import com.azure.security.codetransparency.models.DidDocument;
import com.azure.security.codetransparency.models.EmbedReceiptParameter;
import com.azure.security.codetransparency.models.EntryIdParameter;
import com.azure.security.codetransparency.models.GetOperationResult;
import com.azure.security.codetransparency.models.ListOperationResult;
import com.azure.security.codetransparency.models.OperationIdParameter;
import com.azure.security.codetransparency.models.ParametersResult;
import com.azure.security.codetransparency.models.TransactionsRange;
import com.azure.security.codetransparency.models.VersionResult;

/**
 * Initializes a new instance of the synchronous CodeTransparencyClient type.
 */
@ServiceClient(builder = CodeTransparencyClientBuilder.class)
public final class CodeTransparencyClient {
    @Generated
    private final CodeTransparencyClientImpl serviceClient;

    /**
     * Initializes an instance of CodeTransparencyClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CodeTransparencyClient(CodeTransparencyClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     operationId: String (Required)
     * }
     * }</pre>
     * 
     * @param body A raw CoseSign1 signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of entry submission containing the operationId along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEntryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createEntryWithResponse(body, requestOptions);
    }

    /**
     * Get the status the entry operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     entryId: String (Optional)
     *     error: String (Optional)
     *     operationId: String (Required)
     *     status: String(running/failed/succeeded) (Required)
     * }
     * }</pre>
     * 
     * @param operationId ID of the operation to retrieve.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status the entry operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntryStatusWithResponse(String operationId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.getEntryStatusWithResponse(operationId, body, requestOptions);
    }

    /**
     * Get the status of all entries operations.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     operations (Required): [
     *          (Required){
     *             entryId: String (Optional)
     *             error: String (Optional)
     *             operationId: String (Required)
     *             status: String(running/failed/succeeded) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of all entries operations along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listEntryStatusesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listEntryStatusesWithResponse(requestOptions);
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>embedReceipt</td><td>Boolean</td><td>No</td><td>Embed a receipt as part of the response</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entry with or without receipt embedded in its unprotected header along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntryWithResponse(String entryId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getEntryWithResponse(entryId, body, requestOptions);
    }

    /**
     * Get the receipt of an entry given a specific entry id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param entryId ID of the entry to retrieve.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the receipt of an entry given a specific entry id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntryReceiptWithResponse(String entryId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.getEntryReceiptWithResponse(entryId, body, requestOptions);
    }

    /**
     * Historical query to get a list of entries of a given range.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>from</td><td>Long</td><td>No</td><td>Starting Transaction Id</td></tr>
     * <tr><td>to</td><td>Long</td><td>No</td><td>Ending Transaction Id</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a List of Entry IDs as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listEntryIds(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.listEntryIds(body, requestOptions);
    }

    /**
     * Get service parameters.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     serviceCertificate: String (Required)
     *     serviceId: String (Required)
     *     signatureAlgorithm: String (Required)
     *     treeAlgorithm: String (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service parameters along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getParametersWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getParametersWithResponse(requestOptions);
    }

    /**
     * Get the DID configuration file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     assertionMethod (Required): [
     *          (Required){
     *             id: String (Required)
     *             controller: String (Required)
     *             type: String (Required)
     *             publicKeyJwk (Required): {
     *                 alg: String (Optional)
     *                 crv: String (Optional)
     *                 d: String (Optional)
     *                 dp: String (Optional)
     *                 dq: String (Optional)
     *                 e: String (Optional)
     *                 k: String (Optional)
     *                 kid: String (Optional)
     *                 kty: String (Required)
     *                 n: String (Optional)
     *                 p: String (Optional)
     *                 q: String (Optional)
     *                 qi: String (Optional)
     *                 use: String (Optional)
     *                 x: String (Optional)
     *                 x5c (Optional): [
     *                     String (Optional)
     *                 ]
     *                 y: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the DID configuration file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDidConfigWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getDidConfigWithResponse(requestOptions);
    }

    /**
     * Get CodeTransparency configuration information.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     policy (Optional): {
     *         accepted_algorithms (Optional): [
     *             String (Optional)
     *         ]
     *         accepted_did_issuers (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     authentication (Optional): {
     *         allow_unauthenticated: boolean (Required)
     *         jwt (Optional): {
     *             required_claims (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     service_identifier: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return codeTransparency configuration information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCodeTransparencyConfigWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCodeTransparencyConfigWithResponse(requestOptions);
    }

    /**
     * Get CodeTransparency version information.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     scitt_version: String (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return codeTransparency version information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCodeTransparencyVersionWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCodeTransparencyVersionWithResponse(requestOptions);
    }

    /**
     * Post an entry to be registered on the CodeTransparency instance.
     * 
     * @param body A raw CoseSign1 signature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of entry submission containing the operationId.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateEntryResult createEntry(BinaryData body) {
        // Generated convenience method for createEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEntryWithResponse(body, requestOptions).getValue().toObject(CreateEntryResult.class);
    }

    /**
     * Get the status the entry operation.
     * 
     * @param operationId ID of the operation to retrieve.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status the entry operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetOperationResult getEntryStatus(String operationId, OperationIdParameter body) {
        // Generated convenience method for getEntryStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryStatusWithResponse(operationId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(GetOperationResult.class);
    }

    /**
     * Get the status of all entries operations.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of all entries operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListOperationResult listEntryStatuses() {
        // Generated convenience method for listEntryStatusesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listEntryStatusesWithResponse(requestOptions).getValue().toObject(ListOperationResult.class);
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * 
     * @param entryId ID of the entry to retrieve.
     * @param body Body parameter.
     * @param embedReceipt Embed a receipt as part of the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return entry with or without receipt embedded in its unprotected header.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getEntry(String entryId, EmbedReceiptParameter body, Boolean embedReceipt) {
        // Generated convenience method for getEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (embedReceipt != null) {
            requestOptions.addQueryParam("embedReceipt", String.valueOf(embedReceipt), false);
        }
        return getEntryWithResponse(entryId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Get Entry with or without receipt embedded in its unprotected header.
     * 
     * @param entryId ID of the entry to retrieve.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return entry with or without receipt embedded in its unprotected header.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getEntry(String entryId, EmbedReceiptParameter body) {
        // Generated convenience method for getEntryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryWithResponse(entryId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Get the receipt of an entry given a specific entry id.
     * 
     * @param entryId ID of the entry to retrieve.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the receipt of an entry given a specific entry id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getEntryReceipt(String entryId, EntryIdParameter body) {
        // Generated convenience method for getEntryReceiptWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntryReceiptWithResponse(entryId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Historical query to get a list of entries of a given range.
     * 
     * @param body Body parameter.
     * @param from Starting Transaction Id.
     * @param to Ending Transaction Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a List of Entry IDs as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> listEntryIds(TransactionsRange body, Long from, Long to) {
        // Generated convenience method for listEntryIds
        RequestOptions requestOptions = new RequestOptions();
        if (from != null) {
            requestOptions.addQueryParam("from", String.valueOf(from), false);
        }
        if (to != null) {
            requestOptions.addQueryParam("to", String.valueOf(to), false);
        }
        return serviceClient.listEntryIds(BinaryData.fromObject(body), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(String.class));
    }

    /**
     * Historical query to get a list of entries of a given range.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a List of Entry IDs as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> listEntryIds(TransactionsRange body) {
        // Generated convenience method for listEntryIds
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listEntryIds(BinaryData.fromObject(body), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(String.class));
    }

    /**
     * Get service parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service parameters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ParametersResult getParameters() {
        // Generated convenience method for getParametersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getParametersWithResponse(requestOptions).getValue().toObject(ParametersResult.class);
    }

    /**
     * Get the DID configuration file.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DID configuration file.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DidDocument getDidConfig() {
        // Generated convenience method for getDidConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDidConfigWithResponse(requestOptions).getValue().toObject(DidDocument.class);
    }

    /**
     * Get CodeTransparency configuration information.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return codeTransparency configuration information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CodeTransparencyConfiguration getCodeTransparencyConfig() {
        // Generated convenience method for getCodeTransparencyConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCodeTransparencyConfigWithResponse(requestOptions).getValue()
            .toObject(CodeTransparencyConfiguration.class);
    }

    /**
     * Get CodeTransparency version information.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return codeTransparency version information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VersionResult getCodeTransparencyVersion() {
        // Generated convenience method for getCodeTransparencyVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCodeTransparencyVersionWithResponse(requestOptions).getValue().toObject(VersionResult.class);
    }
}
