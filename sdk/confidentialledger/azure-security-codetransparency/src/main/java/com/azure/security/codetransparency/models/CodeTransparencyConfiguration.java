// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Response body of the Configuration API.
 */
@Immutable
public final class CodeTransparencyConfiguration implements JsonSerializable<CodeTransparencyConfiguration> {
    /*
     * The policy property.
     */
    @Generated
    private CodeTransparencyConfigurationPolicy policy;

    /*
     * The authentication property.
     */
    @Generated
    private CodeTransparencyConfigurationAuthentication authentication;

    /*
     * did:web identifier
     */
    @Generated
    private String serviceIdentifier;

    /**
     * Creates an instance of CodeTransparencyConfiguration class.
     */
    @Generated
    private CodeTransparencyConfiguration() {
    }

    /**
     * Get the policy property: The policy property.
     * 
     * @return the policy value.
     */
    @Generated
    public CodeTransparencyConfigurationPolicy getPolicy() {
        return this.policy;
    }

    /**
     * Get the authentication property: The authentication property.
     * 
     * @return the authentication value.
     */
    @Generated
    public CodeTransparencyConfigurationAuthentication getAuthentication() {
        return this.authentication;
    }

    /**
     * Get the serviceIdentifier property: did:web identifier.
     * 
     * @return the serviceIdentifier value.
     */
    @Generated
    public String getServiceIdentifier() {
        return this.serviceIdentifier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("policy", this.policy);
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeStringField("service_identifier", this.serviceIdentifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeTransparencyConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeTransparencyConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CodeTransparencyConfiguration.
     */
    @Generated
    public static CodeTransparencyConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CodeTransparencyConfiguration deserializedCodeTransparencyConfiguration
                = new CodeTransparencyConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policy".equals(fieldName)) {
                    deserializedCodeTransparencyConfiguration.policy
                        = CodeTransparencyConfigurationPolicy.fromJson(reader);
                } else if ("authentication".equals(fieldName)) {
                    deserializedCodeTransparencyConfiguration.authentication
                        = CodeTransparencyConfigurationAuthentication.fromJson(reader);
                } else if ("service_identifier".equals(fieldName)) {
                    deserializedCodeTransparencyConfiguration.serviceIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCodeTransparencyConfiguration;
        });
    }
}
