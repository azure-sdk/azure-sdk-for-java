// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.codetransparency.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Response body of the Version API.
 */
@Immutable
public final class VersionResult implements JsonSerializable<VersionResult> {
    /*
     * Version of the CodeTransparency service
     */
    @Generated
    private final String scittVersion;

    /**
     * Creates an instance of VersionResult class.
     * 
     * @param scittVersion the scittVersion value to set.
     */
    @Generated
    private VersionResult(String scittVersion) {
        this.scittVersion = scittVersion;
    }

    /**
     * Get the scittVersion property: Version of the CodeTransparency service.
     * 
     * @return the scittVersion value.
     */
    @Generated
    public String getScittVersion() {
        return this.scittVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scitt_version", this.scittVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VersionResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VersionResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VersionResult.
     */
    @Generated
    public static VersionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String scittVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scitt_version".equals(fieldName)) {
                    scittVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new VersionResult(scittVersion);
        });
    }
}
