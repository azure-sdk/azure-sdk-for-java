// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.resourcemanager.confluent.models.AuthType;
import com.azure.resourcemanager.confluent.models.AzureBlobStorageSinkConnectorServiceInfo;
import com.azure.resourcemanager.confluent.models.ConnectorClass;
import com.azure.resourcemanager.confluent.models.ConnectorInfoBase;
import com.azure.resourcemanager.confluent.models.ConnectorType;
import com.azure.resourcemanager.confluent.models.DataFormatType;
import com.azure.resourcemanager.confluent.models.KafkaAzureBlobStorageSinkConnectorInfo;
import java.util.Arrays;

/**
 * Samples for Connector CreateOrUpdate.
 */
public final class ConnectorCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/
     * Organization_CreateConnectorByName.json
     */
    /**
     * Sample code: Connector_CreateOrUpdate.
     * 
     * @param manager Entry point to ConfluentManager.
     */
    public static void connectorCreateOrUpdate(com.azure.resourcemanager.confluent.ConfluentManager manager) {
        manager.connectors()
            .define("connector-1")
            .withExistingCluster("myResourceGroup", "myOrganization", "env-12132", "dlz-f3a90de")
            .withConnectorBasicInfo(new ConnectorInfoBase().withConnectorType(ConnectorType.SINK)
                .withConnectorClass(ConnectorClass.fromString("AZUREBLOBSTORAGESINK"))
                .withConnectorName("connector-1"))
            .withConnectorServiceTypeInfo(
                new AzureBlobStorageSinkConnectorServiceInfo().withStorageAccountName("stcfaccount-1")
                    .withStorageAccountKey("fakeTokenPlaceholder")
                    .withStorageContainerName("continer-1"))
            .withPartnerConnectorInfo(new KafkaAzureBlobStorageSinkConnectorInfo().withAuthType(AuthType.KAFKA_API_KEY)
                .withInputFormat(DataFormatType.JSON)
                .withOutputFormat(DataFormatType.JSON)
                .withApiKey("fakeTokenPlaceholder")
                .withApiSecret("fakeTokenPlaceholder")
                .withTopics(Arrays.asList("topic-1"))
                .withTopicsDir("topicsDir")
                .withFlushSize("1000")
                .withMaxTasks("2")
                .withTimeInterval("DAILY"))
            .create();
    }
}
