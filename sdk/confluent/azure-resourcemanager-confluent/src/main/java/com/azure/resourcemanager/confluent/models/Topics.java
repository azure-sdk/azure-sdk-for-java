// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Topics.
 */
public interface Topics {
    /**
     * Lists of all the topics in a clusters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of GET request to list topics in the cluster of a confluent organization as paginated response
     * with {@link PagedIterable}.
     */
    PagedIterable<TopicRecord> list(String resourceGroupName, String organizationName, String environmentId,
        String clusterId);

    /**
     * Lists of all the topics in a clusters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param pageSize Pagination size.
     * @param pageToken An opaque pagination token to fetch the next set of records.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of GET request to list topics in the cluster of a confluent organization as paginated response
     * with {@link PagedIterable}.
     */
    PagedIterable<TopicRecord> list(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, Integer pageSize, String pageToken, Context context);

    /**
     * Get confluent topic by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param topicName Confluent kafka or schema registry topic name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent topic by Name along with {@link Response}.
     */
    Response<TopicRecord> getWithResponse(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, String topicName, Context context);

    /**
     * Get confluent topic by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param topicName Confluent kafka or schema registry topic name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent topic by Name.
     */
    TopicRecord get(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String topicName);

    /**
     * Delete confluent topic by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param topicName Confluent kafka or schema registry topic name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String topicName);

    /**
     * Delete confluent topic by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param topicName Confluent kafka or schema registry topic name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String topicName, Context context);

    /**
     * Get confluent topic by Name.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent topic by Name along with {@link Response}.
     */
    TopicRecord getById(String id);

    /**
     * Get confluent topic by Name.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent topic by Name along with {@link Response}.
     */
    Response<TopicRecord> getByIdWithResponse(String id, Context context);

    /**
     * Delete confluent topic by name.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete confluent topic by name.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new TopicRecord resource.
     * 
     * @param name resource name.
     * @return the first stage of the new TopicRecord definition.
     */
    TopicRecord.DefinitionStages.Blank define(String name);
}
