// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.ConnectorInfoBase;
import com.azure.resourcemanager.confluent.models.ConnectorServiceTypeInfoBase;
import com.azure.resourcemanager.confluent.models.PartnerInfoBase;
import java.io.IOException;

/**
 * The resource properties of the Connector.
 */
@Fluent
public final class ConnectorResourceProperties implements JsonSerializable<ConnectorResourceProperties> {
    /*
     * Connector Info Base
     */
    private ConnectorInfoBase connectorBasicInfo;

    /*
     * Connector Service type info base properties.
     */
    private ConnectorServiceTypeInfoBase connectorServiceTypeInfo;

    /*
     * The connection information consumed by applications.
     */
    private PartnerInfoBase partnerConnectorInfo;

    /**
     * Creates an instance of ConnectorResourceProperties class.
     */
    public ConnectorResourceProperties() {
    }

    /**
     * Get the connectorBasicInfo property: Connector Info Base.
     * 
     * @return the connectorBasicInfo value.
     */
    public ConnectorInfoBase connectorBasicInfo() {
        return this.connectorBasicInfo;
    }

    /**
     * Set the connectorBasicInfo property: Connector Info Base.
     * 
     * @param connectorBasicInfo the connectorBasicInfo value to set.
     * @return the ConnectorResourceProperties object itself.
     */
    public ConnectorResourceProperties withConnectorBasicInfo(ConnectorInfoBase connectorBasicInfo) {
        this.connectorBasicInfo = connectorBasicInfo;
        return this;
    }

    /**
     * Get the connectorServiceTypeInfo property: Connector Service type info base properties.
     * 
     * @return the connectorServiceTypeInfo value.
     */
    public ConnectorServiceTypeInfoBase connectorServiceTypeInfo() {
        return this.connectorServiceTypeInfo;
    }

    /**
     * Set the connectorServiceTypeInfo property: Connector Service type info base properties.
     * 
     * @param connectorServiceTypeInfo the connectorServiceTypeInfo value to set.
     * @return the ConnectorResourceProperties object itself.
     */
    public ConnectorResourceProperties
        withConnectorServiceTypeInfo(ConnectorServiceTypeInfoBase connectorServiceTypeInfo) {
        this.connectorServiceTypeInfo = connectorServiceTypeInfo;
        return this;
    }

    /**
     * Get the partnerConnectorInfo property: The connection information consumed by applications.
     * 
     * @return the partnerConnectorInfo value.
     */
    public PartnerInfoBase partnerConnectorInfo() {
        return this.partnerConnectorInfo;
    }

    /**
     * Set the partnerConnectorInfo property: The connection information consumed by applications.
     * 
     * @param partnerConnectorInfo the partnerConnectorInfo value to set.
     * @return the ConnectorResourceProperties object itself.
     */
    public ConnectorResourceProperties withPartnerConnectorInfo(PartnerInfoBase partnerConnectorInfo) {
        this.partnerConnectorInfo = partnerConnectorInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectorBasicInfo() != null) {
            connectorBasicInfo().validate();
        }
        if (connectorServiceTypeInfo() != null) {
            connectorServiceTypeInfo().validate();
        }
        if (partnerConnectorInfo() != null) {
            partnerConnectorInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectorBasicInfo", this.connectorBasicInfo);
        jsonWriter.writeJsonField("connectorServiceTypeInfo", this.connectorServiceTypeInfo);
        jsonWriter.writeJsonField("partnerConnectorInfo", this.partnerConnectorInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectorResourceProperties.
     */
    public static ConnectorResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorResourceProperties deserializedConnectorResourceProperties = new ConnectorResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorBasicInfo".equals(fieldName)) {
                    deserializedConnectorResourceProperties.connectorBasicInfo = ConnectorInfoBase.fromJson(reader);
                } else if ("connectorServiceTypeInfo".equals(fieldName)) {
                    deserializedConnectorResourceProperties.connectorServiceTypeInfo
                        = ConnectorServiceTypeInfoBase.fromJson(reader);
                } else if ("partnerConnectorInfo".equals(fieldName)) {
                    deserializedConnectorResourceProperties.partnerConnectorInfo = PartnerInfoBase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorResourceProperties;
        });
    }
}
