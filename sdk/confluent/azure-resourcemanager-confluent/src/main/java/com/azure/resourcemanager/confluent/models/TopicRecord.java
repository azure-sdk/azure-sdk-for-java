// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.confluent.fluent.models.TopicRecordInner;
import java.util.List;

/**
 * An immutable client-side representation of TopicRecord.
 */
public interface TopicRecord {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the kind property: Type of topic.
     * 
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the topicId property: Topic Id returned by Confluent.
     * 
     * @return the topicId value.
     */
    String topicId();

    /**
     * Gets the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    TopicMetadataEntity metadata();

    /**
     * Gets the partitions property: Partition Specification of the topic.
     * 
     * @return the partitions value.
     */
    TopicsRelatedLink partitions();

    /**
     * Gets the configs property: Config Specification of the topic.
     * 
     * @return the configs value.
     */
    TopicsRelatedLink configs();

    /**
     * Gets the inputConfigs property: Input Config Specification of the topic.
     * 
     * @return the inputConfigs value.
     */
    List<TopicsInputConfig> inputConfigs();

    /**
     * Gets the partitionsReassignments property: Partition Reassignment Specification of the topic.
     * 
     * @return the partitionsReassignments value.
     */
    TopicsRelatedLink partitionsReassignments();

    /**
     * Gets the partitionsCount property: Partition count of the topic.
     * 
     * @return the partitionsCount value.
     */
    String partitionsCount();

    /**
     * Gets the replicationFactor property: Replication factor of the topic.
     * 
     * @return the replicationFactor value.
     */
    String replicationFactor();

    /**
     * Gets the inner com.azure.resourcemanager.confluent.fluent.models.TopicRecordInner object.
     * 
     * @return the inner object.
     */
    TopicRecordInner innerModel();

    /**
     * The entirety of the TopicRecord definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The TopicRecord definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the TopicRecord definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the TopicRecord definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, organizationName, environmentId, clusterId.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param organizationName Organization resource name.
             * @param environmentId Confluent environment id.
             * @param clusterId Confluent kafka or schema registry cluster id.
             * @return the next definition stage.
             */
            WithCreate withExistingCluster(String resourceGroupName, String organizationName, String environmentId,
                String clusterId);
        }

        /**
         * The stage of the TopicRecord definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithKind, DefinitionStages.WithTopicId,
            DefinitionStages.WithMetadata, DefinitionStages.WithPartitions, DefinitionStages.WithConfigs,
            DefinitionStages.WithInputConfigs, DefinitionStages.WithPartitionsReassignments,
            DefinitionStages.WithPartitionsCount, DefinitionStages.WithReplicationFactor {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            TopicRecord create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            TopicRecord create(Context context);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify kind.
         */
        interface WithKind {
            /**
             * Specifies the kind property: Type of topic.
             * 
             * @param kind Type of topic.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify topicId.
         */
        interface WithTopicId {
            /**
             * Specifies the topicId property: Topic Id returned by Confluent.
             * 
             * @param topicId Topic Id returned by Confluent.
             * @return the next definition stage.
             */
            WithCreate withTopicId(String topicId);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify metadata.
         */
        interface WithMetadata {
            /**
             * Specifies the metadata property: Metadata of the record.
             * 
             * @param metadata Metadata of the record.
             * @return the next definition stage.
             */
            WithCreate withMetadata(TopicMetadataEntity metadata);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify partitions.
         */
        interface WithPartitions {
            /**
             * Specifies the partitions property: Partition Specification of the topic.
             * 
             * @param partitions Partition Specification of the topic.
             * @return the next definition stage.
             */
            WithCreate withPartitions(TopicsRelatedLink partitions);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify configs.
         */
        interface WithConfigs {
            /**
             * Specifies the configs property: Config Specification of the topic.
             * 
             * @param configs Config Specification of the topic.
             * @return the next definition stage.
             */
            WithCreate withConfigs(TopicsRelatedLink configs);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify inputConfigs.
         */
        interface WithInputConfigs {
            /**
             * Specifies the inputConfigs property: Input Config Specification of the topic.
             * 
             * @param inputConfigs Input Config Specification of the topic.
             * @return the next definition stage.
             */
            WithCreate withInputConfigs(List<TopicsInputConfig> inputConfigs);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify partitionsReassignments.
         */
        interface WithPartitionsReassignments {
            /**
             * Specifies the partitionsReassignments property: Partition Reassignment Specification of the topic.
             * 
             * @param partitionsReassignments Partition Reassignment Specification of the topic.
             * @return the next definition stage.
             */
            WithCreate withPartitionsReassignments(TopicsRelatedLink partitionsReassignments);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify partitionsCount.
         */
        interface WithPartitionsCount {
            /**
             * Specifies the partitionsCount property: Partition count of the topic.
             * 
             * @param partitionsCount Partition count of the topic.
             * @return the next definition stage.
             */
            WithCreate withPartitionsCount(String partitionsCount);
        }

        /**
         * The stage of the TopicRecord definition allowing to specify replicationFactor.
         */
        interface WithReplicationFactor {
            /**
             * Specifies the replicationFactor property: Replication factor of the topic.
             * 
             * @param replicationFactor Replication factor of the topic.
             * @return the next definition stage.
             */
            WithCreate withReplicationFactor(String replicationFactor);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    TopicRecord refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    TopicRecord refresh(Context context);
}
