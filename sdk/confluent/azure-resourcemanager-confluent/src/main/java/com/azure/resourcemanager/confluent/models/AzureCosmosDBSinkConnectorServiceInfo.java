// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The authentication info when auth_type is AzureCosmosDBSinkConnector.
 */
@Fluent
public final class AzureCosmosDBSinkConnectorServiceInfo extends ConnectorServiceTypeInfoBase {
    /*
     * The connector service type.
     */
    private ConnectorServiceType connectorServiceType = ConnectorServiceType.AZURE_COSMOS_DBSINK_CONNECTOR;

    /*
     * Azure Cosmos Database Name
     */
    private String cosmosDatabaseName;

    /*
     * Azure Cosmos Database Master Key
     */
    private String cosmosMasterKey;

    /*
     * Azure Cosmos Database Connection Endpoint
     */
    private String cosmosConnectionEndpoint;

    /*
     * Azure Cosmos Database Containers Topic Mapping
     */
    private String cosmosContainersTopicMapping;

    /*
     * Azure Cosmos Database Id Strategy
     */
    private String cosmosIdStrategy;

    /**
     * Creates an instance of AzureCosmosDBSinkConnectorServiceInfo class.
     */
    public AzureCosmosDBSinkConnectorServiceInfo() {
    }

    /**
     * Get the connectorServiceType property: The connector service type.
     * 
     * @return the connectorServiceType value.
     */
    @Override
    public ConnectorServiceType connectorServiceType() {
        return this.connectorServiceType;
    }

    /**
     * Get the cosmosDatabaseName property: Azure Cosmos Database Name.
     * 
     * @return the cosmosDatabaseName value.
     */
    public String cosmosDatabaseName() {
        return this.cosmosDatabaseName;
    }

    /**
     * Set the cosmosDatabaseName property: Azure Cosmos Database Name.
     * 
     * @param cosmosDatabaseName the cosmosDatabaseName value to set.
     * @return the AzureCosmosDBSinkConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSinkConnectorServiceInfo withCosmosDatabaseName(String cosmosDatabaseName) {
        this.cosmosDatabaseName = cosmosDatabaseName;
        return this;
    }

    /**
     * Get the cosmosMasterKey property: Azure Cosmos Database Master Key.
     * 
     * @return the cosmosMasterKey value.
     */
    public String cosmosMasterKey() {
        return this.cosmosMasterKey;
    }

    /**
     * Set the cosmosMasterKey property: Azure Cosmos Database Master Key.
     * 
     * @param cosmosMasterKey the cosmosMasterKey value to set.
     * @return the AzureCosmosDBSinkConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSinkConnectorServiceInfo withCosmosMasterKey(String cosmosMasterKey) {
        this.cosmosMasterKey = cosmosMasterKey;
        return this;
    }

    /**
     * Get the cosmosConnectionEndpoint property: Azure Cosmos Database Connection Endpoint.
     * 
     * @return the cosmosConnectionEndpoint value.
     */
    public String cosmosConnectionEndpoint() {
        return this.cosmosConnectionEndpoint;
    }

    /**
     * Set the cosmosConnectionEndpoint property: Azure Cosmos Database Connection Endpoint.
     * 
     * @param cosmosConnectionEndpoint the cosmosConnectionEndpoint value to set.
     * @return the AzureCosmosDBSinkConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSinkConnectorServiceInfo withCosmosConnectionEndpoint(String cosmosConnectionEndpoint) {
        this.cosmosConnectionEndpoint = cosmosConnectionEndpoint;
        return this;
    }

    /**
     * Get the cosmosContainersTopicMapping property: Azure Cosmos Database Containers Topic Mapping.
     * 
     * @return the cosmosContainersTopicMapping value.
     */
    public String cosmosContainersTopicMapping() {
        return this.cosmosContainersTopicMapping;
    }

    /**
     * Set the cosmosContainersTopicMapping property: Azure Cosmos Database Containers Topic Mapping.
     * 
     * @param cosmosContainersTopicMapping the cosmosContainersTopicMapping value to set.
     * @return the AzureCosmosDBSinkConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSinkConnectorServiceInfo withCosmosContainersTopicMapping(String cosmosContainersTopicMapping) {
        this.cosmosContainersTopicMapping = cosmosContainersTopicMapping;
        return this;
    }

    /**
     * Get the cosmosIdStrategy property: Azure Cosmos Database Id Strategy.
     * 
     * @return the cosmosIdStrategy value.
     */
    public String cosmosIdStrategy() {
        return this.cosmosIdStrategy;
    }

    /**
     * Set the cosmosIdStrategy property: Azure Cosmos Database Id Strategy.
     * 
     * @param cosmosIdStrategy the cosmosIdStrategy value to set.
     * @return the AzureCosmosDBSinkConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSinkConnectorServiceInfo withCosmosIdStrategy(String cosmosIdStrategy) {
        this.cosmosIdStrategy = cosmosIdStrategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectorServiceType",
            this.connectorServiceType == null ? null : this.connectorServiceType.toString());
        jsonWriter.writeStringField("cosmosDatabaseName", this.cosmosDatabaseName);
        jsonWriter.writeStringField("cosmosMasterKey", this.cosmosMasterKey);
        jsonWriter.writeStringField("cosmosConnectionEndpoint", this.cosmosConnectionEndpoint);
        jsonWriter.writeStringField("cosmosContainersTopicMapping", this.cosmosContainersTopicMapping);
        jsonWriter.writeStringField("cosmosIdStrategy", this.cosmosIdStrategy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCosmosDBSinkConnectorServiceInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCosmosDBSinkConnectorServiceInfo if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureCosmosDBSinkConnectorServiceInfo.
     */
    public static AzureCosmosDBSinkConnectorServiceInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureCosmosDBSinkConnectorServiceInfo deserializedAzureCosmosDBSinkConnectorServiceInfo
                = new AzureCosmosDBSinkConnectorServiceInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorServiceType".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.connectorServiceType
                        = ConnectorServiceType.fromString(reader.getString());
                } else if ("cosmosDatabaseName".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.cosmosDatabaseName = reader.getString();
                } else if ("cosmosMasterKey".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.cosmosMasterKey = reader.getString();
                } else if ("cosmosConnectionEndpoint".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.cosmosConnectionEndpoint = reader.getString();
                } else if ("cosmosContainersTopicMapping".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.cosmosContainersTopicMapping = reader.getString();
                } else if ("cosmosIdStrategy".equals(fieldName)) {
                    deserializedAzureCosmosDBSinkConnectorServiceInfo.cosmosIdStrategy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureCosmosDBSinkConnectorServiceInfo;
        });
    }
}
