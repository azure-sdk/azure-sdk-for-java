// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.confluent.fluent.models.ConnectorResourceInner;
import com.azure.resourcemanager.confluent.models.ConnectorInfoBase;
import com.azure.resourcemanager.confluent.models.ConnectorResource;
import com.azure.resourcemanager.confluent.models.ConnectorServiceTypeInfoBase;
import com.azure.resourcemanager.confluent.models.PartnerInfoBase;

public final class ConnectorResourceImpl
    implements ConnectorResource, ConnectorResource.Definition, ConnectorResource.Update {
    private ConnectorResourceInner innerObject;

    private final com.azure.resourcemanager.confluent.ConfluentManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ConnectorInfoBase connectorBasicInfo() {
        return this.innerModel().connectorBasicInfo();
    }

    public ConnectorServiceTypeInfoBase connectorServiceTypeInfo() {
        return this.innerModel().connectorServiceTypeInfo();
    }

    public PartnerInfoBase partnerConnectorInfo() {
        return this.innerModel().partnerConnectorInfo();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectorResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.confluent.ConfluentManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String organizationName;

    private String environmentId;

    private String clusterId;

    private String connectorName;

    public ConnectorResourceImpl withExistingCluster(String resourceGroupName, String organizationName,
        String environmentId, String clusterId) {
        this.resourceGroupName = resourceGroupName;
        this.organizationName = organizationName;
        this.environmentId = environmentId;
        this.clusterId = clusterId;
        return this;
    }

    public ConnectorResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .createOrUpdateWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public ConnectorResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .createOrUpdateWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    ConnectorResourceImpl(String name, com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerObject = new ConnectorResourceInner();
        this.serviceManager = serviceManager;
        this.connectorName = name;
    }

    public ConnectorResourceImpl update() {
        return this;
    }

    public ConnectorResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .createOrUpdateWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public ConnectorResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .createOrUpdateWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    ConnectorResourceImpl(ConnectorResourceInner innerObject,
        com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.organizationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "organizations");
        this.environmentId = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "environments");
        this.clusterId = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "clusters");
        this.connectorName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "connectors");
    }

    public ConnectorResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName, Context.NONE)
            .getValue();
        return this;
    }

    public ConnectorResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnectors()
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName, context)
            .getValue();
        return this;
    }

    public ConnectorResourceImpl withConnectorBasicInfo(ConnectorInfoBase connectorBasicInfo) {
        this.innerModel().withConnectorBasicInfo(connectorBasicInfo);
        return this;
    }

    public ConnectorResourceImpl withConnectorServiceTypeInfo(ConnectorServiceTypeInfoBase connectorServiceTypeInfo) {
        this.innerModel().withConnectorServiceTypeInfo(connectorServiceTypeInfo);
        return this;
    }

    public ConnectorResourceImpl withPartnerConnectorInfo(PartnerInfoBase partnerConnectorInfo) {
        this.innerModel().withPartnerConnectorInfo(partnerConnectorInfo);
        return this;
    }
}
