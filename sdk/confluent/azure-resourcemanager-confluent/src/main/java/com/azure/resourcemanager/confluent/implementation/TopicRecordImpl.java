// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.confluent.fluent.models.TopicRecordInner;
import com.azure.resourcemanager.confluent.models.TopicMetadataEntity;
import com.azure.resourcemanager.confluent.models.TopicRecord;
import com.azure.resourcemanager.confluent.models.TopicsInputConfig;
import com.azure.resourcemanager.confluent.models.TopicsRelatedLink;
import java.util.Collections;
import java.util.List;

public final class TopicRecordImpl implements TopicRecord, TopicRecord.Definition {
    private TopicRecordInner innerObject;

    private final com.azure.resourcemanager.confluent.ConfluentManager serviceManager;

    TopicRecordImpl(TopicRecordInner innerObject, com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String topicId() {
        return this.innerModel().topicId();
    }

    public TopicMetadataEntity metadata() {
        return this.innerModel().metadata();
    }

    public TopicsRelatedLink partitions() {
        return this.innerModel().partitions();
    }

    public TopicsRelatedLink configs() {
        return this.innerModel().configs();
    }

    public List<TopicsInputConfig> inputConfigs() {
        List<TopicsInputConfig> inner = this.innerModel().inputConfigs();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public TopicsRelatedLink partitionsReassignments() {
        return this.innerModel().partitionsReassignments();
    }

    public String partitionsCount() {
        return this.innerModel().partitionsCount();
    }

    public String replicationFactor() {
        return this.innerModel().replicationFactor();
    }

    public TopicRecordInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.confluent.ConfluentManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String organizationName;

    private String environmentId;

    private String clusterId;

    private String topicName;

    public TopicRecordImpl withExistingCluster(String resourceGroupName, String organizationName, String environmentId,
        String clusterId) {
        this.resourceGroupName = resourceGroupName;
        this.organizationName = organizationName;
        this.environmentId = environmentId;
        this.clusterId = clusterId;
        return this;
    }

    public TopicRecord create() {
        this.innerObject = serviceManager.serviceClient()
            .getTopics()
            .createWithResponse(resourceGroupName, organizationName, environmentId, clusterId, topicName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public TopicRecord create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTopics()
            .createWithResponse(resourceGroupName, organizationName, environmentId, clusterId, topicName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    TopicRecordImpl(String name, com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerObject = new TopicRecordInner();
        this.serviceManager = serviceManager;
        this.topicName = name;
    }

    public TopicRecord refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getTopics()
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, topicName, Context.NONE)
            .getValue();
        return this;
    }

    public TopicRecord refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTopics()
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, topicName, context)
            .getValue();
        return this;
    }

    public TopicRecordImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public TopicRecordImpl withTopicId(String topicId) {
        this.innerModel().withTopicId(topicId);
        return this;
    }

    public TopicRecordImpl withMetadata(TopicMetadataEntity metadata) {
        this.innerModel().withMetadata(metadata);
        return this;
    }

    public TopicRecordImpl withPartitions(TopicsRelatedLink partitions) {
        this.innerModel().withPartitions(partitions);
        return this;
    }

    public TopicRecordImpl withConfigs(TopicsRelatedLink configs) {
        this.innerModel().withConfigs(configs);
        return this;
    }

    public TopicRecordImpl withInputConfigs(List<TopicsInputConfig> inputConfigs) {
        this.innerModel().withInputConfigs(inputConfigs);
        return this;
    }

    public TopicRecordImpl withPartitionsReassignments(TopicsRelatedLink partitionsReassignments) {
        this.innerModel().withPartitionsReassignments(partitionsReassignments);
        return this;
    }

    public TopicRecordImpl withPartitionsCount(String partitionsCount) {
        this.innerModel().withPartitionsCount(partitionsCount);
        return this;
    }

    public TopicRecordImpl withReplicationFactor(String replicationFactor) {
        this.innerModel().withReplicationFactor(replicationFactor);
        return this;
    }
}
