// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Metadata of the data record.
 */
@Fluent
public final class TopicMetadataEntity implements JsonSerializable<TopicMetadataEntity> {
    /*
     * Self lookup url
     */
    private String self;

    /*
     * Resource name of the record
     */
    private String resourceName;

    /**
     * Creates an instance of TopicMetadataEntity class.
     */
    public TopicMetadataEntity() {
    }

    /**
     * Get the self property: Self lookup url.
     * 
     * @return the self value.
     */
    public String self() {
        return this.self;
    }

    /**
     * Set the self property: Self lookup url.
     * 
     * @param self the self value to set.
     * @return the TopicMetadataEntity object itself.
     */
    public TopicMetadataEntity withSelf(String self) {
        this.self = self;
        return this;
    }

    /**
     * Get the resourceName property: Resource name of the record.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Resource name of the record.
     * 
     * @param resourceName the resourceName value to set.
     * @return the TopicMetadataEntity object itself.
     */
    public TopicMetadataEntity withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("self", this.self);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopicMetadataEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopicMetadataEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopicMetadataEntity.
     */
    public static TopicMetadataEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopicMetadataEntity deserializedTopicMetadataEntity = new TopicMetadataEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("self".equals(fieldName)) {
                    deserializedTopicMetadataEntity.self = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedTopicMetadataEntity.resourceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopicMetadataEntity;
        });
    }
}
