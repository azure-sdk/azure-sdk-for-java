// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.confluent.fluent.ConnectorsClient;
import com.azure.resourcemanager.confluent.fluent.models.ConnectorResourceInner;
import com.azure.resourcemanager.confluent.models.ConnectorResource;
import com.azure.resourcemanager.confluent.models.Connectors;

public final class ConnectorsImpl implements Connectors {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectorsImpl.class);

    private final ConnectorsClient innerClient;

    private final com.azure.resourcemanager.confluent.ConfluentManager serviceManager;

    public ConnectorsImpl(ConnectorsClient innerClient,
        com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ConnectorResource> getWithResponse(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, String connectorName, Context context) {
        Response<ConnectorResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectorResource get(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, String connectorName) {
        ConnectorResourceInner inner
            = this.serviceClient().get(resourceGroupName, organizationName, environmentId, clusterId, connectorName);
        if (inner != null) {
            return new ConnectorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String connectorName) {
        this.serviceClient().delete(resourceGroupName, organizationName, environmentId, clusterId, connectorName);
    }

    public void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String connectorName, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, organizationName, environmentId, clusterId, connectorName, context);
    }

    public PagedIterable<ConnectorResource> list(String resourceGroupName, String organizationName,
        String environmentId, String clusterId) {
        PagedIterable<ConnectorResourceInner> inner
            = this.serviceClient().list(resourceGroupName, organizationName, environmentId, clusterId);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectorResource> list(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, Integer pageSize, String pageToken, Context context) {
        PagedIterable<ConnectorResourceInner> inner = this.serviceClient()
            .list(resourceGroupName, organizationName, environmentId, clusterId, pageSize, pageToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorResourceImpl(inner1, this.manager()));
    }

    public ConnectorResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String environmentId = ResourceManagerUtils.getValueFromIdByName(id, "environments");
        if (environmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String clusterId = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName, Context.NONE)
            .getValue();
    }

    public Response<ConnectorResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String environmentId = ResourceManagerUtils.getValueFromIdByName(id, "environments");
        if (environmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String clusterId = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, organizationName, environmentId, clusterId, connectorName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String environmentId = ResourceManagerUtils.getValueFromIdByName(id, "environments");
        if (environmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String clusterId = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        this.delete(resourceGroupName, organizationName, environmentId, clusterId, connectorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String environmentId = ResourceManagerUtils.getValueFromIdByName(id, "environments");
        if (environmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String clusterId = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        this.delete(resourceGroupName, organizationName, environmentId, clusterId, connectorName, context);
    }

    private ConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.confluent.ConfluentManager manager() {
        return this.serviceManager;
    }

    public ConnectorResourceImpl define(String name) {
        return new ConnectorResourceImpl(name, this.manager());
    }
}
