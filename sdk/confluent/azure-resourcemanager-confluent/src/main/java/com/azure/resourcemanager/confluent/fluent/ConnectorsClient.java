// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.confluent.fluent.models.ConnectorResourceInner;

/**
 * An instance of this class provides access to all the operations defined in ConnectorsClient.
 */
public interface ConnectorsClient {
    /**
     * Get confluent connector by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent connector by Name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorResourceInner> getWithResponse(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, String connectorName, Context context);

    /**
     * Get confluent connector by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confluent connector by Name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorResourceInner get(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, String connectorName);

    /**
     * Create confluent connector by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @param body Confluent Connector resource model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of connector record along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorResourceInner> createOrUpdateWithResponse(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, String connectorName, ConnectorResourceInner body, Context context);

    /**
     * Create confluent connector by Name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of connector record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorResourceInner createOrUpdate(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, String connectorName);

    /**
     * Delete confluent connector by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, String connectorName);

    /**
     * Delete confluent connector by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName,
        String environmentId, String clusterId, String connectorName, Context context);

    /**
     * Delete confluent connector by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String connectorName);

    /**
     * Delete confluent connector by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param connectorName Confluent connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String organizationName, String environmentId, String clusterId,
        String connectorName, Context context);

    /**
     * Lists all the connectors in a cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of GET request to list connectors in the cluster of a confluent organization as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorResourceInner> list(String resourceGroupName, String organizationName, String environmentId,
        String clusterId);

    /**
     * Lists all the connectors in a cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param environmentId Confluent environment id.
     * @param clusterId Confluent kafka or schema registry cluster id.
     * @param pageSize Pagination size.
     * @param pageToken An opaque pagination token to fetch the next set of records.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of GET request to list connectors in the cluster of a confluent organization as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorResourceInner> list(String resourceGroupName, String organizationName, String environmentId,
        String clusterId, Integer pageSize, String pageToken, Context context);
}
