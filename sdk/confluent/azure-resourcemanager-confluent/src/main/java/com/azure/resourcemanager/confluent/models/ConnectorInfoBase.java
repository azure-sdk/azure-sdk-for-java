// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connector Info Base properties.
 */
@Fluent
public final class ConnectorInfoBase implements JsonSerializable<ConnectorInfoBase> {
    /*
     * Connector Type
     */
    private ConnectorType connectorType;

    /*
     * Connector Class
     */
    private ConnectorClass connectorClass;

    /*
     * Connector Name
     */
    private String connectorName;

    /*
     * Connector Id
     */
    private String connectorId;

    /*
     * Connector Status
     */
    private ConnectorStatus connectorState;

    /**
     * Creates an instance of ConnectorInfoBase class.
     */
    public ConnectorInfoBase() {
    }

    /**
     * Get the connectorType property: Connector Type.
     * 
     * @return the connectorType value.
     */
    public ConnectorType connectorType() {
        return this.connectorType;
    }

    /**
     * Set the connectorType property: Connector Type.
     * 
     * @param connectorType the connectorType value to set.
     * @return the ConnectorInfoBase object itself.
     */
    public ConnectorInfoBase withConnectorType(ConnectorType connectorType) {
        this.connectorType = connectorType;
        return this;
    }

    /**
     * Get the connectorClass property: Connector Class.
     * 
     * @return the connectorClass value.
     */
    public ConnectorClass connectorClass() {
        return this.connectorClass;
    }

    /**
     * Set the connectorClass property: Connector Class.
     * 
     * @param connectorClass the connectorClass value to set.
     * @return the ConnectorInfoBase object itself.
     */
    public ConnectorInfoBase withConnectorClass(ConnectorClass connectorClass) {
        this.connectorClass = connectorClass;
        return this;
    }

    /**
     * Get the connectorName property: Connector Name.
     * 
     * @return the connectorName value.
     */
    public String connectorName() {
        return this.connectorName;
    }

    /**
     * Set the connectorName property: Connector Name.
     * 
     * @param connectorName the connectorName value to set.
     * @return the ConnectorInfoBase object itself.
     */
    public ConnectorInfoBase withConnectorName(String connectorName) {
        this.connectorName = connectorName;
        return this;
    }

    /**
     * Get the connectorId property: Connector Id.
     * 
     * @return the connectorId value.
     */
    public String connectorId() {
        return this.connectorId;
    }

    /**
     * Set the connectorId property: Connector Id.
     * 
     * @param connectorId the connectorId value to set.
     * @return the ConnectorInfoBase object itself.
     */
    public ConnectorInfoBase withConnectorId(String connectorId) {
        this.connectorId = connectorId;
        return this;
    }

    /**
     * Get the connectorState property: Connector Status.
     * 
     * @return the connectorState value.
     */
    public ConnectorStatus connectorState() {
        return this.connectorState;
    }

    /**
     * Set the connectorState property: Connector Status.
     * 
     * @param connectorState the connectorState value to set.
     * @return the ConnectorInfoBase object itself.
     */
    public ConnectorInfoBase withConnectorState(ConnectorStatus connectorState) {
        this.connectorState = connectorState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectorType", this.connectorType == null ? null : this.connectorType.toString());
        jsonWriter.writeStringField("connectorClass",
            this.connectorClass == null ? null : this.connectorClass.toString());
        jsonWriter.writeStringField("connectorName", this.connectorName);
        jsonWriter.writeStringField("connectorId", this.connectorId);
        jsonWriter.writeStringField("connectorState",
            this.connectorState == null ? null : this.connectorState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorInfoBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorInfoBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectorInfoBase.
     */
    public static ConnectorInfoBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorInfoBase deserializedConnectorInfoBase = new ConnectorInfoBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorType".equals(fieldName)) {
                    deserializedConnectorInfoBase.connectorType = ConnectorType.fromString(reader.getString());
                } else if ("connectorClass".equals(fieldName)) {
                    deserializedConnectorInfoBase.connectorClass = ConnectorClass.fromString(reader.getString());
                } else if ("connectorName".equals(fieldName)) {
                    deserializedConnectorInfoBase.connectorName = reader.getString();
                } else if ("connectorId".equals(fieldName)) {
                    deserializedConnectorInfoBase.connectorId = reader.getString();
                } else if ("connectorState".equals(fieldName)) {
                    deserializedConnectorInfoBase.connectorState = ConnectorStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorInfoBase;
        });
    }
}
