// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.TopicMetadataEntity;
import com.azure.resourcemanager.confluent.models.TopicsInputConfig;
import com.azure.resourcemanager.confluent.models.TopicsRelatedLink;
import java.io.IOException;
import java.util.List;

/**
 * Topic Properties.
 */
@Fluent
public final class TopicProperties implements JsonSerializable<TopicProperties> {
    /*
     * Type of topic
     */
    private String kind;

    /*
     * Topic Id returned by Confluent
     */
    private String topicId;

    /*
     * Metadata of the record
     */
    private TopicMetadataEntity metadata;

    /*
     * Partition Specification of the topic
     */
    private TopicsRelatedLink partitions;

    /*
     * Config Specification of the topic
     */
    private TopicsRelatedLink configs;

    /*
     * Input Config Specification of the topic
     */
    private List<TopicsInputConfig> inputConfigs;

    /*
     * Partition Reassignment Specification of the topic
     */
    private TopicsRelatedLink partitionsReassignments;

    /*
     * Partition count of the topic
     */
    private String partitionsCount;

    /*
     * Replication factor of the topic
     */
    private String replicationFactor;

    /**
     * Creates an instance of TopicProperties class.
     */
    public TopicProperties() {
    }

    /**
     * Get the kind property: Type of topic.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of topic.
     * 
     * @param kind the kind value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the topicId property: Topic Id returned by Confluent.
     * 
     * @return the topicId value.
     */
    public String topicId() {
        return this.topicId;
    }

    /**
     * Set the topicId property: Topic Id returned by Confluent.
     * 
     * @param topicId the topicId value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withTopicId(String topicId) {
        this.topicId = topicId;
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public TopicMetadataEntity metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withMetadata(TopicMetadataEntity metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the partitions property: Partition Specification of the topic.
     * 
     * @return the partitions value.
     */
    public TopicsRelatedLink partitions() {
        return this.partitions;
    }

    /**
     * Set the partitions property: Partition Specification of the topic.
     * 
     * @param partitions the partitions value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withPartitions(TopicsRelatedLink partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Get the configs property: Config Specification of the topic.
     * 
     * @return the configs value.
     */
    public TopicsRelatedLink configs() {
        return this.configs;
    }

    /**
     * Set the configs property: Config Specification of the topic.
     * 
     * @param configs the configs value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withConfigs(TopicsRelatedLink configs) {
        this.configs = configs;
        return this;
    }

    /**
     * Get the inputConfigs property: Input Config Specification of the topic.
     * 
     * @return the inputConfigs value.
     */
    public List<TopicsInputConfig> inputConfigs() {
        return this.inputConfigs;
    }

    /**
     * Set the inputConfigs property: Input Config Specification of the topic.
     * 
     * @param inputConfigs the inputConfigs value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withInputConfigs(List<TopicsInputConfig> inputConfigs) {
        this.inputConfigs = inputConfigs;
        return this;
    }

    /**
     * Get the partitionsReassignments property: Partition Reassignment Specification of the topic.
     * 
     * @return the partitionsReassignments value.
     */
    public TopicsRelatedLink partitionsReassignments() {
        return this.partitionsReassignments;
    }

    /**
     * Set the partitionsReassignments property: Partition Reassignment Specification of the topic.
     * 
     * @param partitionsReassignments the partitionsReassignments value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withPartitionsReassignments(TopicsRelatedLink partitionsReassignments) {
        this.partitionsReassignments = partitionsReassignments;
        return this;
    }

    /**
     * Get the partitionsCount property: Partition count of the topic.
     * 
     * @return the partitionsCount value.
     */
    public String partitionsCount() {
        return this.partitionsCount;
    }

    /**
     * Set the partitionsCount property: Partition count of the topic.
     * 
     * @param partitionsCount the partitionsCount value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withPartitionsCount(String partitionsCount) {
        this.partitionsCount = partitionsCount;
        return this;
    }

    /**
     * Get the replicationFactor property: Replication factor of the topic.
     * 
     * @return the replicationFactor value.
     */
    public String replicationFactor() {
        return this.replicationFactor;
    }

    /**
     * Set the replicationFactor property: Replication factor of the topic.
     * 
     * @param replicationFactor the replicationFactor value to set.
     * @return the TopicProperties object itself.
     */
    public TopicProperties withReplicationFactor(String replicationFactor) {
        this.replicationFactor = replicationFactor;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
        if (partitions() != null) {
            partitions().validate();
        }
        if (configs() != null) {
            configs().validate();
        }
        if (inputConfigs() != null) {
            inputConfigs().forEach(e -> e.validate());
        }
        if (partitionsReassignments() != null) {
            partitionsReassignments().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("topicId", this.topicId);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeJsonField("partitions", this.partitions);
        jsonWriter.writeJsonField("configs", this.configs);
        jsonWriter.writeArrayField("inputConfigs", this.inputConfigs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("partitionsReassignments", this.partitionsReassignments);
        jsonWriter.writeStringField("partitionsCount", this.partitionsCount);
        jsonWriter.writeStringField("replicationFactor", this.replicationFactor);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopicProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopicProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopicProperties.
     */
    public static TopicProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopicProperties deserializedTopicProperties = new TopicProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedTopicProperties.kind = reader.getString();
                } else if ("topicId".equals(fieldName)) {
                    deserializedTopicProperties.topicId = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedTopicProperties.metadata = TopicMetadataEntity.fromJson(reader);
                } else if ("partitions".equals(fieldName)) {
                    deserializedTopicProperties.partitions = TopicsRelatedLink.fromJson(reader);
                } else if ("configs".equals(fieldName)) {
                    deserializedTopicProperties.configs = TopicsRelatedLink.fromJson(reader);
                } else if ("inputConfigs".equals(fieldName)) {
                    List<TopicsInputConfig> inputConfigs
                        = reader.readArray(reader1 -> TopicsInputConfig.fromJson(reader1));
                    deserializedTopicProperties.inputConfigs = inputConfigs;
                } else if ("partitionsReassignments".equals(fieldName)) {
                    deserializedTopicProperties.partitionsReassignments = TopicsRelatedLink.fromJson(reader);
                } else if ("partitionsCount".equals(fieldName)) {
                    deserializedTopicProperties.partitionsCount = reader.getString();
                } else if ("replicationFactor".equals(fieldName)) {
                    deserializedTopicProperties.replicationFactor = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopicProperties;
        });
    }
}
