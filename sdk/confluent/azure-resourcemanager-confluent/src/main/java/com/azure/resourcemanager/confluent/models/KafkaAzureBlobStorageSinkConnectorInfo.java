// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The partner connector type is KafkaAzureBlobStorageSink.
 */
@Fluent
public final class KafkaAzureBlobStorageSinkConnectorInfo extends PartnerInfoBase {
    /*
     * The partner connector type.
     */
    private PartnerConnectorType partnerConnectorType = PartnerConnectorType.KAFKA_AZURE_BLOB_STORAGE_SINK;

    /*
     * Kafka Auth Type
     */
    private AuthType authType;

    /*
     * Kafka Input Data Format Type
     */
    private DataFormatType inputFormat;

    /*
     * Kafka Output Data Format Type
     */
    private DataFormatType outputFormat;

    /*
     * Kafka API Key
     */
    private String apiKey;

    /*
     * Kafka API Key Secret
     */
    private String apiSecret;

    /*
     * Kafka Service Account Id
     */
    private String serviceAccountId;

    /*
     * Kafka topics list
     */
    private List<String> topics;

    /*
     * Kafka topics directory
     */
    private String topicsDir;

    /*
     * Flush size
     */
    private String flushSize;

    /*
     * Maximum Tasks
     */
    private String maxTasks;

    /*
     * Time Interval
     */
    private String timeInterval;

    /**
     * Creates an instance of KafkaAzureBlobStorageSinkConnectorInfo class.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo() {
    }

    /**
     * Get the partnerConnectorType property: The partner connector type.
     * 
     * @return the partnerConnectorType value.
     */
    @Override
    public PartnerConnectorType partnerConnectorType() {
        return this.partnerConnectorType;
    }

    /**
     * Get the authType property: Kafka Auth Type.
     * 
     * @return the authType value.
     */
    public AuthType authType() {
        return this.authType;
    }

    /**
     * Set the authType property: Kafka Auth Type.
     * 
     * @param authType the authType value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withAuthType(AuthType authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Get the inputFormat property: Kafka Input Data Format Type.
     * 
     * @return the inputFormat value.
     */
    public DataFormatType inputFormat() {
        return this.inputFormat;
    }

    /**
     * Set the inputFormat property: Kafka Input Data Format Type.
     * 
     * @param inputFormat the inputFormat value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withInputFormat(DataFormatType inputFormat) {
        this.inputFormat = inputFormat;
        return this;
    }

    /**
     * Get the outputFormat property: Kafka Output Data Format Type.
     * 
     * @return the outputFormat value.
     */
    public DataFormatType outputFormat() {
        return this.outputFormat;
    }

    /**
     * Set the outputFormat property: Kafka Output Data Format Type.
     * 
     * @param outputFormat the outputFormat value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withOutputFormat(DataFormatType outputFormat) {
        this.outputFormat = outputFormat;
        return this;
    }

    /**
     * Get the apiKey property: Kafka API Key.
     * 
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: Kafka API Key.
     * 
     * @param apiKey the apiKey value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the apiSecret property: Kafka API Key Secret.
     * 
     * @return the apiSecret value.
     */
    public String apiSecret() {
        return this.apiSecret;
    }

    /**
     * Set the apiSecret property: Kafka API Key Secret.
     * 
     * @param apiSecret the apiSecret value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withApiSecret(String apiSecret) {
        this.apiSecret = apiSecret;
        return this;
    }

    /**
     * Get the serviceAccountId property: Kafka Service Account Id.
     * 
     * @return the serviceAccountId value.
     */
    public String serviceAccountId() {
        return this.serviceAccountId;
    }

    /**
     * Set the serviceAccountId property: Kafka Service Account Id.
     * 
     * @param serviceAccountId the serviceAccountId value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withServiceAccountId(String serviceAccountId) {
        this.serviceAccountId = serviceAccountId;
        return this;
    }

    /**
     * Get the topics property: Kafka topics list.
     * 
     * @return the topics value.
     */
    public List<String> topics() {
        return this.topics;
    }

    /**
     * Set the topics property: Kafka topics list.
     * 
     * @param topics the topics value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withTopics(List<String> topics) {
        this.topics = topics;
        return this;
    }

    /**
     * Get the topicsDir property: Kafka topics directory.
     * 
     * @return the topicsDir value.
     */
    public String topicsDir() {
        return this.topicsDir;
    }

    /**
     * Set the topicsDir property: Kafka topics directory.
     * 
     * @param topicsDir the topicsDir value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withTopicsDir(String topicsDir) {
        this.topicsDir = topicsDir;
        return this;
    }

    /**
     * Get the flushSize property: Flush size.
     * 
     * @return the flushSize value.
     */
    public String flushSize() {
        return this.flushSize;
    }

    /**
     * Set the flushSize property: Flush size.
     * 
     * @param flushSize the flushSize value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withFlushSize(String flushSize) {
        this.flushSize = flushSize;
        return this;
    }

    /**
     * Get the maxTasks property: Maximum Tasks.
     * 
     * @return the maxTasks value.
     */
    public String maxTasks() {
        return this.maxTasks;
    }

    /**
     * Set the maxTasks property: Maximum Tasks.
     * 
     * @param maxTasks the maxTasks value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withMaxTasks(String maxTasks) {
        this.maxTasks = maxTasks;
        return this;
    }

    /**
     * Get the timeInterval property: Time Interval.
     * 
     * @return the timeInterval value.
     */
    public String timeInterval() {
        return this.timeInterval;
    }

    /**
     * Set the timeInterval property: Time Interval.
     * 
     * @param timeInterval the timeInterval value to set.
     * @return the KafkaAzureBlobStorageSinkConnectorInfo object itself.
     */
    public KafkaAzureBlobStorageSinkConnectorInfo withTimeInterval(String timeInterval) {
        this.timeInterval = timeInterval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partnerConnectorType",
            this.partnerConnectorType == null ? null : this.partnerConnectorType.toString());
        jsonWriter.writeStringField("authType", this.authType == null ? null : this.authType.toString());
        jsonWriter.writeStringField("inputFormat", this.inputFormat == null ? null : this.inputFormat.toString());
        jsonWriter.writeStringField("outputFormat", this.outputFormat == null ? null : this.outputFormat.toString());
        jsonWriter.writeStringField("apiKey", this.apiKey);
        jsonWriter.writeStringField("apiSecret", this.apiSecret);
        jsonWriter.writeStringField("serviceAccountId", this.serviceAccountId);
        jsonWriter.writeArrayField("topics", this.topics, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("topicsDir", this.topicsDir);
        jsonWriter.writeStringField("flushSize", this.flushSize);
        jsonWriter.writeStringField("maxTasks", this.maxTasks);
        jsonWriter.writeStringField("timeInterval", this.timeInterval);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KafkaAzureBlobStorageSinkConnectorInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KafkaAzureBlobStorageSinkConnectorInfo if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KafkaAzureBlobStorageSinkConnectorInfo.
     */
    public static KafkaAzureBlobStorageSinkConnectorInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KafkaAzureBlobStorageSinkConnectorInfo deserializedKafkaAzureBlobStorageSinkConnectorInfo
                = new KafkaAzureBlobStorageSinkConnectorInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerConnectorType".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.partnerConnectorType
                        = PartnerConnectorType.fromString(reader.getString());
                } else if ("authType".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.authType
                        = AuthType.fromString(reader.getString());
                } else if ("inputFormat".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.inputFormat
                        = DataFormatType.fromString(reader.getString());
                } else if ("outputFormat".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.outputFormat
                        = DataFormatType.fromString(reader.getString());
                } else if ("apiKey".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.apiKey = reader.getString();
                } else if ("apiSecret".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.apiSecret = reader.getString();
                } else if ("serviceAccountId".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.serviceAccountId = reader.getString();
                } else if ("topics".equals(fieldName)) {
                    List<String> topics = reader.readArray(reader1 -> reader1.getString());
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.topics = topics;
                } else if ("topicsDir".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.topicsDir = reader.getString();
                } else if ("flushSize".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.flushSize = reader.getString();
                } else if ("maxTasks".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.maxTasks = reader.getString();
                } else if ("timeInterval".equals(fieldName)) {
                    deserializedKafkaAzureBlobStorageSinkConnectorInfo.timeInterval = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKafkaAzureBlobStorageSinkConnectorInfo;
        });
    }
}
