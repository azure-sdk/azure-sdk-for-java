// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The authentication info when auth_type is AzureCosmosDBSourceConnector.
 */
@Fluent
public final class AzureCosmosDBSourceConnectorServiceInfo extends ConnectorServiceTypeInfoBase {
    /*
     * The connector service type.
     */
    private ConnectorServiceType connectorServiceType = ConnectorServiceType.AZURE_COSMOS_DBSOURCE_CONNECTOR;

    /*
     * Azure Cosmos Database Name
     */
    private String cosmosDatabaseName;

    /*
     * Azure Cosmos Database Master Key
     */
    private String cosmosMasterKey;

    /*
     * Azure Cosmos Database Connection Endpoint
     */
    private String cosmosConnectionEndpoint;

    /*
     * Azure Cosmos Database Containers Topic Mapping
     */
    private String cosmosContainersTopicMapping;

    /*
     * Azure Cosmos Database Message Key Enabled
     */
    private Boolean cosmosMessageKeyEnabled;

    /*
     * Azure Cosmos Database Message Key Field
     */
    private String cosmosMessageKeyField;

    /**
     * Creates an instance of AzureCosmosDBSourceConnectorServiceInfo class.
     */
    public AzureCosmosDBSourceConnectorServiceInfo() {
    }

    /**
     * Get the connectorServiceType property: The connector service type.
     * 
     * @return the connectorServiceType value.
     */
    @Override
    public ConnectorServiceType connectorServiceType() {
        return this.connectorServiceType;
    }

    /**
     * Get the cosmosDatabaseName property: Azure Cosmos Database Name.
     * 
     * @return the cosmosDatabaseName value.
     */
    public String cosmosDatabaseName() {
        return this.cosmosDatabaseName;
    }

    /**
     * Set the cosmosDatabaseName property: Azure Cosmos Database Name.
     * 
     * @param cosmosDatabaseName the cosmosDatabaseName value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo withCosmosDatabaseName(String cosmosDatabaseName) {
        this.cosmosDatabaseName = cosmosDatabaseName;
        return this;
    }

    /**
     * Get the cosmosMasterKey property: Azure Cosmos Database Master Key.
     * 
     * @return the cosmosMasterKey value.
     */
    public String cosmosMasterKey() {
        return this.cosmosMasterKey;
    }

    /**
     * Set the cosmosMasterKey property: Azure Cosmos Database Master Key.
     * 
     * @param cosmosMasterKey the cosmosMasterKey value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo withCosmosMasterKey(String cosmosMasterKey) {
        this.cosmosMasterKey = cosmosMasterKey;
        return this;
    }

    /**
     * Get the cosmosConnectionEndpoint property: Azure Cosmos Database Connection Endpoint.
     * 
     * @return the cosmosConnectionEndpoint value.
     */
    public String cosmosConnectionEndpoint() {
        return this.cosmosConnectionEndpoint;
    }

    /**
     * Set the cosmosConnectionEndpoint property: Azure Cosmos Database Connection Endpoint.
     * 
     * @param cosmosConnectionEndpoint the cosmosConnectionEndpoint value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo withCosmosConnectionEndpoint(String cosmosConnectionEndpoint) {
        this.cosmosConnectionEndpoint = cosmosConnectionEndpoint;
        return this;
    }

    /**
     * Get the cosmosContainersTopicMapping property: Azure Cosmos Database Containers Topic Mapping.
     * 
     * @return the cosmosContainersTopicMapping value.
     */
    public String cosmosContainersTopicMapping() {
        return this.cosmosContainersTopicMapping;
    }

    /**
     * Set the cosmosContainersTopicMapping property: Azure Cosmos Database Containers Topic Mapping.
     * 
     * @param cosmosContainersTopicMapping the cosmosContainersTopicMapping value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo
        withCosmosContainersTopicMapping(String cosmosContainersTopicMapping) {
        this.cosmosContainersTopicMapping = cosmosContainersTopicMapping;
        return this;
    }

    /**
     * Get the cosmosMessageKeyEnabled property: Azure Cosmos Database Message Key Enabled.
     * 
     * @return the cosmosMessageKeyEnabled value.
     */
    public Boolean cosmosMessageKeyEnabled() {
        return this.cosmosMessageKeyEnabled;
    }

    /**
     * Set the cosmosMessageKeyEnabled property: Azure Cosmos Database Message Key Enabled.
     * 
     * @param cosmosMessageKeyEnabled the cosmosMessageKeyEnabled value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo withCosmosMessageKeyEnabled(Boolean cosmosMessageKeyEnabled) {
        this.cosmosMessageKeyEnabled = cosmosMessageKeyEnabled;
        return this;
    }

    /**
     * Get the cosmosMessageKeyField property: Azure Cosmos Database Message Key Field.
     * 
     * @return the cosmosMessageKeyField value.
     */
    public String cosmosMessageKeyField() {
        return this.cosmosMessageKeyField;
    }

    /**
     * Set the cosmosMessageKeyField property: Azure Cosmos Database Message Key Field.
     * 
     * @param cosmosMessageKeyField the cosmosMessageKeyField value to set.
     * @return the AzureCosmosDBSourceConnectorServiceInfo object itself.
     */
    public AzureCosmosDBSourceConnectorServiceInfo withCosmosMessageKeyField(String cosmosMessageKeyField) {
        this.cosmosMessageKeyField = cosmosMessageKeyField;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectorServiceType",
            this.connectorServiceType == null ? null : this.connectorServiceType.toString());
        jsonWriter.writeStringField("cosmosDatabaseName", this.cosmosDatabaseName);
        jsonWriter.writeStringField("cosmosMasterKey", this.cosmosMasterKey);
        jsonWriter.writeStringField("cosmosConnectionEndpoint", this.cosmosConnectionEndpoint);
        jsonWriter.writeStringField("cosmosContainersTopicMapping", this.cosmosContainersTopicMapping);
        jsonWriter.writeBooleanField("cosmosMessageKeyEnabled", this.cosmosMessageKeyEnabled);
        jsonWriter.writeStringField("cosmosMessageKeyField", this.cosmosMessageKeyField);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCosmosDBSourceConnectorServiceInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCosmosDBSourceConnectorServiceInfo if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureCosmosDBSourceConnectorServiceInfo.
     */
    public static AzureCosmosDBSourceConnectorServiceInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureCosmosDBSourceConnectorServiceInfo deserializedAzureCosmosDBSourceConnectorServiceInfo
                = new AzureCosmosDBSourceConnectorServiceInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorServiceType".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.connectorServiceType
                        = ConnectorServiceType.fromString(reader.getString());
                } else if ("cosmosDatabaseName".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosDatabaseName = reader.getString();
                } else if ("cosmosMasterKey".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosMasterKey = reader.getString();
                } else if ("cosmosConnectionEndpoint".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosConnectionEndpoint = reader.getString();
                } else if ("cosmosContainersTopicMapping".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosContainersTopicMapping
                        = reader.getString();
                } else if ("cosmosMessageKeyEnabled".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosMessageKeyEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("cosmosMessageKeyField".equals(fieldName)) {
                    deserializedAzureCosmosDBSourceConnectorServiceInfo.cosmosMessageKeyField = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureCosmosDBSourceConnectorServiceInfo;
        });
    }
}
