// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.SCMetadataEntity;
import com.azure.resourcemanager.confluent.models.StreamGovernanceConfig;
import java.io.IOException;

/**
 * Details about environment name, metadata and environment id of an environment.
 */
@Fluent
public final class SCEnvironmentRecordInner extends ProxyResource {
    /*
     * Type of environment
     */
    private String kind;

    /*
     * Id of the environment
     */
    private String id;

    /*
     * Type of the resource
     */
    private String type;

    /*
     * Environment properties
     */
    private EnvironmentProperties innerProperties;

    /*
     * Display name of the environment
     */
    private String name;

    /**
     * Creates an instance of SCEnvironmentRecordInner class.
     */
    public SCEnvironmentRecordInner() {
    }

    /**
     * Get the kind property: Type of environment.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of environment.
     * 
     * @param kind the kind value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the environment.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the environment.
     * 
     * @param id the id value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: Type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the resource.
     * 
     * @param type the type value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the innerProperties property: Environment properties.
     * 
     * @return the innerProperties value.
     */
    private EnvironmentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the name property: Display name of the environment.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Display name of the environment.
     * 
     * @param name the name value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the streamGovernanceConfig property: Stream governance configuration.
     * 
     * @return the streamGovernanceConfig value.
     */
    public StreamGovernanceConfig streamGovernanceConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().streamGovernanceConfig();
    }

    /**
     * Set the streamGovernanceConfig property: Stream governance configuration.
     * 
     * @param streamGovernanceConfig the streamGovernanceConfig value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withStreamGovernanceConfig(StreamGovernanceConfig streamGovernanceConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnvironmentProperties();
        }
        this.innerProperties().withStreamGovernanceConfig(streamGovernanceConfig);
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public SCMetadataEntity metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the SCEnvironmentRecordInner object itself.
     */
    public SCEnvironmentRecordInner withMetadata(SCMetadataEntity metadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnvironmentProperties();
        }
        this.innerProperties().withMetadata(metadata);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SCEnvironmentRecordInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SCEnvironmentRecordInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SCEnvironmentRecordInner.
     */
    public static SCEnvironmentRecordInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SCEnvironmentRecordInner deserializedSCEnvironmentRecordInner = new SCEnvironmentRecordInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedSCEnvironmentRecordInner.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedSCEnvironmentRecordInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSCEnvironmentRecordInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSCEnvironmentRecordInner.innerProperties = EnvironmentProperties.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedSCEnvironmentRecordInner.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSCEnvironmentRecordInner;
        });
    }
}
