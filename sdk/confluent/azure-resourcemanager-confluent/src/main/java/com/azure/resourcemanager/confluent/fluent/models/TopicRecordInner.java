// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.TopicMetadataEntity;
import com.azure.resourcemanager.confluent.models.TopicsInputConfig;
import com.azure.resourcemanager.confluent.models.TopicsRelatedLink;
import java.io.IOException;
import java.util.List;

/**
 * Details of topic record.
 */
@Fluent
public final class TopicRecordInner extends ProxyResource {
    /*
     * Topic Properties
     */
    private TopicProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TopicRecordInner class.
     */
    public TopicRecordInner() {
    }

    /**
     * Get the innerProperties property: Topic Properties.
     * 
     * @return the innerProperties value.
     */
    private TopicProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the kind property: Type of topic.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Set the kind property: Type of topic.
     * 
     * @param kind the kind value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withKind(String kind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withKind(kind);
        return this;
    }

    /**
     * Get the topicId property: Topic Id returned by Confluent.
     * 
     * @return the topicId value.
     */
    public String topicId() {
        return this.innerProperties() == null ? null : this.innerProperties().topicId();
    }

    /**
     * Set the topicId property: Topic Id returned by Confluent.
     * 
     * @param topicId the topicId value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withTopicId(String topicId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withTopicId(topicId);
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public TopicMetadataEntity metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withMetadata(TopicMetadataEntity metadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withMetadata(metadata);
        return this;
    }

    /**
     * Get the partitions property: Partition Specification of the topic.
     * 
     * @return the partitions value.
     */
    public TopicsRelatedLink partitions() {
        return this.innerProperties() == null ? null : this.innerProperties().partitions();
    }

    /**
     * Set the partitions property: Partition Specification of the topic.
     * 
     * @param partitions the partitions value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withPartitions(TopicsRelatedLink partitions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withPartitions(partitions);
        return this;
    }

    /**
     * Get the configs property: Config Specification of the topic.
     * 
     * @return the configs value.
     */
    public TopicsRelatedLink configs() {
        return this.innerProperties() == null ? null : this.innerProperties().configs();
    }

    /**
     * Set the configs property: Config Specification of the topic.
     * 
     * @param configs the configs value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withConfigs(TopicsRelatedLink configs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withConfigs(configs);
        return this;
    }

    /**
     * Get the inputConfigs property: Input Config Specification of the topic.
     * 
     * @return the inputConfigs value.
     */
    public List<TopicsInputConfig> inputConfigs() {
        return this.innerProperties() == null ? null : this.innerProperties().inputConfigs();
    }

    /**
     * Set the inputConfigs property: Input Config Specification of the topic.
     * 
     * @param inputConfigs the inputConfigs value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withInputConfigs(List<TopicsInputConfig> inputConfigs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withInputConfigs(inputConfigs);
        return this;
    }

    /**
     * Get the partitionsReassignments property: Partition Reassignment Specification of the topic.
     * 
     * @return the partitionsReassignments value.
     */
    public TopicsRelatedLink partitionsReassignments() {
        return this.innerProperties() == null ? null : this.innerProperties().partitionsReassignments();
    }

    /**
     * Set the partitionsReassignments property: Partition Reassignment Specification of the topic.
     * 
     * @param partitionsReassignments the partitionsReassignments value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withPartitionsReassignments(TopicsRelatedLink partitionsReassignments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withPartitionsReassignments(partitionsReassignments);
        return this;
    }

    /**
     * Get the partitionsCount property: Partition count of the topic.
     * 
     * @return the partitionsCount value.
     */
    public String partitionsCount() {
        return this.innerProperties() == null ? null : this.innerProperties().partitionsCount();
    }

    /**
     * Set the partitionsCount property: Partition count of the topic.
     * 
     * @param partitionsCount the partitionsCount value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withPartitionsCount(String partitionsCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withPartitionsCount(partitionsCount);
        return this;
    }

    /**
     * Get the replicationFactor property: Replication factor of the topic.
     * 
     * @return the replicationFactor value.
     */
    public String replicationFactor() {
        return this.innerProperties() == null ? null : this.innerProperties().replicationFactor();
    }

    /**
     * Set the replicationFactor property: Replication factor of the topic.
     * 
     * @param replicationFactor the replicationFactor value to set.
     * @return the TopicRecordInner object itself.
     */
    public TopicRecordInner withReplicationFactor(String replicationFactor) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopicProperties();
        }
        this.innerProperties().withReplicationFactor(replicationFactor);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopicRecordInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopicRecordInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TopicRecordInner.
     */
    public static TopicRecordInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopicRecordInner deserializedTopicRecordInner = new TopicRecordInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTopicRecordInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTopicRecordInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTopicRecordInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedTopicRecordInner.innerProperties = TopicProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopicRecordInner;
        });
    }
}
