// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector.
 */
@Fluent
public final class AzureSynapseAnalyticsSinkConnectorServiceInfo extends ConnectorServiceTypeInfoBase {
    /*
     * The connector service type.
     */
    private ConnectorServiceType connectorServiceType = ConnectorServiceType.AZURE_SYNAPSE_ANALYTICS_SINK_CONNECTOR;

    /*
     * Azure Synapse Analytics SQL Server Name
     */
    private String synapseSqlServerName;

    /*
     * Azure Synapse SQL login details
     */
    private String synapseSqlUser;

    /*
     * Azure Synapse SQL login details
     */
    private String synapseSqlPassword;

    /*
     * Azure Synapse Dedicated SQL Pool Database Name
     */
    private String synapseSqlDatabaseName;

    /**
     * Creates an instance of AzureSynapseAnalyticsSinkConnectorServiceInfo class.
     */
    public AzureSynapseAnalyticsSinkConnectorServiceInfo() {
    }

    /**
     * Get the connectorServiceType property: The connector service type.
     * 
     * @return the connectorServiceType value.
     */
    @Override
    public ConnectorServiceType connectorServiceType() {
        return this.connectorServiceType;
    }

    /**
     * Get the synapseSqlServerName property: Azure Synapse Analytics SQL Server Name.
     * 
     * @return the synapseSqlServerName value.
     */
    public String synapseSqlServerName() {
        return this.synapseSqlServerName;
    }

    /**
     * Set the synapseSqlServerName property: Azure Synapse Analytics SQL Server Name.
     * 
     * @param synapseSqlServerName the synapseSqlServerName value to set.
     * @return the AzureSynapseAnalyticsSinkConnectorServiceInfo object itself.
     */
    public AzureSynapseAnalyticsSinkConnectorServiceInfo withSynapseSqlServerName(String synapseSqlServerName) {
        this.synapseSqlServerName = synapseSqlServerName;
        return this;
    }

    /**
     * Get the synapseSqlUser property: Azure Synapse SQL login details.
     * 
     * @return the synapseSqlUser value.
     */
    public String synapseSqlUser() {
        return this.synapseSqlUser;
    }

    /**
     * Set the synapseSqlUser property: Azure Synapse SQL login details.
     * 
     * @param synapseSqlUser the synapseSqlUser value to set.
     * @return the AzureSynapseAnalyticsSinkConnectorServiceInfo object itself.
     */
    public AzureSynapseAnalyticsSinkConnectorServiceInfo withSynapseSqlUser(String synapseSqlUser) {
        this.synapseSqlUser = synapseSqlUser;
        return this;
    }

    /**
     * Get the synapseSqlPassword property: Azure Synapse SQL login details.
     * 
     * @return the synapseSqlPassword value.
     */
    public String synapseSqlPassword() {
        return this.synapseSqlPassword;
    }

    /**
     * Set the synapseSqlPassword property: Azure Synapse SQL login details.
     * 
     * @param synapseSqlPassword the synapseSqlPassword value to set.
     * @return the AzureSynapseAnalyticsSinkConnectorServiceInfo object itself.
     */
    public AzureSynapseAnalyticsSinkConnectorServiceInfo withSynapseSqlPassword(String synapseSqlPassword) {
        this.synapseSqlPassword = synapseSqlPassword;
        return this;
    }

    /**
     * Get the synapseSqlDatabaseName property: Azure Synapse Dedicated SQL Pool Database Name.
     * 
     * @return the synapseSqlDatabaseName value.
     */
    public String synapseSqlDatabaseName() {
        return this.synapseSqlDatabaseName;
    }

    /**
     * Set the synapseSqlDatabaseName property: Azure Synapse Dedicated SQL Pool Database Name.
     * 
     * @param synapseSqlDatabaseName the synapseSqlDatabaseName value to set.
     * @return the AzureSynapseAnalyticsSinkConnectorServiceInfo object itself.
     */
    public AzureSynapseAnalyticsSinkConnectorServiceInfo withSynapseSqlDatabaseName(String synapseSqlDatabaseName) {
        this.synapseSqlDatabaseName = synapseSqlDatabaseName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectorServiceType",
            this.connectorServiceType == null ? null : this.connectorServiceType.toString());
        jsonWriter.writeStringField("synapseSqlServerName", this.synapseSqlServerName);
        jsonWriter.writeStringField("synapseSqlUser", this.synapseSqlUser);
        jsonWriter.writeStringField("synapseSqlPassword", this.synapseSqlPassword);
        jsonWriter.writeStringField("synapseSqlDatabaseName", this.synapseSqlDatabaseName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSynapseAnalyticsSinkConnectorServiceInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSynapseAnalyticsSinkConnectorServiceInfo if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSynapseAnalyticsSinkConnectorServiceInfo.
     */
    public static AzureSynapseAnalyticsSinkConnectorServiceInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSynapseAnalyticsSinkConnectorServiceInfo deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo
                = new AzureSynapseAnalyticsSinkConnectorServiceInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorServiceType".equals(fieldName)) {
                    deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo.connectorServiceType
                        = ConnectorServiceType.fromString(reader.getString());
                } else if ("synapseSqlServerName".equals(fieldName)) {
                    deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo.synapseSqlServerName = reader.getString();
                } else if ("synapseSqlUser".equals(fieldName)) {
                    deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo.synapseSqlUser = reader.getString();
                } else if ("synapseSqlPassword".equals(fieldName)) {
                    deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo.synapseSqlPassword = reader.getString();
                } else if ("synapseSqlDatabaseName".equals(fieldName)) {
                    deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo.synapseSqlDatabaseName
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSynapseAnalyticsSinkConnectorServiceInfo;
        });
    }
}
