// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.playwright.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Playwright workspace is the parent resource for most of the other service resources.
 */
@Immutable
public final class Workspace implements JsonSerializable<Workspace> {
    /*
     * The workspace id.
     */
    @Generated
    private String id;

    /*
     * Fully-qualified Azure resource id for the workspace.
     */
    @Generated
    private String resourceId;

    /*
     * The workspace name.
     */
    @Generated
    private String name;

    /*
     * The state of workspace - Active | Inactive
     */
    @Generated
    private ResourceState state;

    /*
     * Azure subscription id for the workspace.
     */
    @Generated
    private String subscriptionId;

    /*
     * Azure subscription state - Registered | Unregistered | Warned | Suspended | Deleted
     */
    @Generated
    private SubscriptionState subscriptionState;

    /*
     * Azure tenant id for the workspace.
     */
    @Generated
    private String tenantId;

    /*
     * Azure location of the workspace, for eg. eastus, southeastasia.
     */
    @Generated
    private String location;

    /*
     * The workspace data plane URI.
     */
    @Generated
    private String dataplaneUri;

    /*
     * This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect
     * to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the
     * Azure region in which the workspace was initially created.
     */
    @Generated
    private EnablementStatus regionalAffinity;

    /*
     * When enabled, this feature allows the workspace to use local auth (through service access token) for executing
     * operations.
     */
    @Generated
    private EnablementStatus localAuth;

    /**
     * Creates an instance of Workspace class.
     */
    @Generated
    private Workspace() {
    }

    /**
     * Get the id property: The workspace id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the resourceId property: Fully-qualified Azure resource id for the workspace.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the name property: The workspace name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the state property: The state of workspace - Active | Inactive.
     * 
     * @return the state value.
     */
    @Generated
    public ResourceState getState() {
        return this.state;
    }

    /**
     * Get the subscriptionId property: Azure subscription id for the workspace.
     * 
     * @return the subscriptionId value.
     */
    @Generated
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the subscriptionState property: Azure subscription state - Registered | Unregistered | Warned | Suspended |
     * Deleted.
     * 
     * @return the subscriptionState value.
     */
    @Generated
    public SubscriptionState getSubscriptionState() {
        return this.subscriptionState;
    }

    /**
     * Get the tenantId property: Azure tenant id for the workspace.
     * 
     * @return the tenantId value.
     */
    @Generated
    public String getTenantId() {
        return this.tenantId;
    }

    /**
     * Get the location property: Azure location of the workspace, for eg. eastus, southeastasia.
     * 
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the dataplaneUri property: The workspace data plane URI.
     * 
     * @return the dataplaneUri value.
     */
    @Generated
    public String getDataplaneUri() {
        return this.dataplaneUri;
    }

    /**
     * Get the regionalAffinity property: This property sets the connection region for client workers to cloud-hosted
     * browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If
     * disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
     * 
     * @return the regionalAffinity value.
     */
    @Generated
    public EnablementStatus getRegionalAffinity() {
        return this.regionalAffinity;
    }

    /**
     * Get the localAuth property: When enabled, this feature allows the workspace to use local auth (through service
     * access token) for executing operations.
     * 
     * @return the localAuth value.
     */
    @Generated
    public EnablementStatus getLocalAuth() {
        return this.localAuth;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regionalAffinity",
            this.regionalAffinity == null ? null : this.regionalAffinity.toString());
        jsonWriter.writeStringField("localAuth", this.localAuth == null ? null : this.localAuth.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Workspace from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Workspace if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Workspace.
     */
    @Generated
    public static Workspace fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Workspace deserializedWorkspace = new Workspace();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWorkspace.id = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedWorkspace.resourceId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedWorkspace.name = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedWorkspace.state = ResourceState.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedWorkspace.subscriptionId = reader.getString();
                } else if ("subscriptionState".equals(fieldName)) {
                    deserializedWorkspace.subscriptionState = SubscriptionState.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedWorkspace.tenantId = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedWorkspace.location = reader.getString();
                } else if ("dataplaneUri".equals(fieldName)) {
                    deserializedWorkspace.dataplaneUri = reader.getString();
                } else if ("regionalAffinity".equals(fieldName)) {
                    deserializedWorkspace.regionalAffinity = EnablementStatus.fromString(reader.getString());
                } else if ("localAuth".equals(fieldName)) {
                    deserializedWorkspace.localAuth = EnablementStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspace;
        });
    }
}
