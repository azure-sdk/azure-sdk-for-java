// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.playwright;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.FluxUtil;
import com.azure.developer.playwright.implementation.WorkspacesImpl;
import com.azure.developer.playwright.models.OS;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous PlaywrightClient type.
 */
@ServiceClient(builder = PlaywrightClientBuilder.class, isAsync = true)
public final class WorkspacesAsyncClient {
    @Generated
    private final WorkspacesImpl serviceClient;

    /**
     * Initializes an instance of WorkspacesAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    WorkspacesAsyncClient(WorkspacesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote script runs. Allowed values:
     * "Linux", "Windows".</td></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The runId provided by client to track remote script runs. It
     * should match regex ^[a-zA-Z0-9-]{3,24}$</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param workspaceId The workspace id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getBrowsersWithResponse(String workspaceId, RequestOptions requestOptions) {
        return this.serviceClient.getBrowsersWithResponseAsync(workspaceId, requestOptions);
    }

    /**
     * Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
     * 
     * @param workspaceId The workspace id.
     * @param os The os provided by client for remote script runs.
     * @param runId The runId provided by client to track remote script runs. It should match regex
     * ^[a-zA-Z0-9-]{3,24}$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getBrowsers(String workspaceId, OS os, String runId) {
        // Generated convenience method for getBrowsersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (os != null) {
            requestOptions.addQueryParam("os", os.toString(), false);
        }
        if (runId != null) {
            requestOptions.addQueryParam("runId", runId, false);
        }
        return getBrowsersWithResponse(workspaceId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
     * 
     * @param workspaceId The workspace id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getBrowsers(String workspaceId) {
        // Generated convenience method for getBrowsersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBrowsersWithResponse(workspaceId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
