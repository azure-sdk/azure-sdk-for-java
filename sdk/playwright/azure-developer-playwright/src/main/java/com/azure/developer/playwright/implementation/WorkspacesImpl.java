// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.playwright.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.developer.playwright.MicrosoftPlaywrightServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Workspaces.
 */
public final class WorkspacesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final WorkspacesService service;

    /**
     * The service client containing this operation class.
     */
    private final PlaywrightClientImpl client;

    /**
     * Initializes an instance of WorkspacesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    WorkspacesImpl(PlaywrightClientImpl client) {
        this.service
            = RestProxy.create(WorkspacesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlaywrightServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for PlaywrightClientWorkspaces to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PlaywrightClientWork")
    public interface WorkspacesService {
        @Get("/playwrightworkspaces/{workspaceId}/browsers")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getBrowsers(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workspaceId") String workspaceId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/playwrightworkspaces/{workspaceId}/browsers")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getBrowsersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workspaceId") String workspaceId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote script runs. Allowed values:
     * "Linux", "Windows".</td></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The runId provided by client to track remote script runs. It
     * should match regex ^[a-zA-Z0-9-]{3,24}$</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param workspaceId The workspace id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getBrowsersWithResponseAsync(String workspaceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBrowsers(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), workspaceId, accept, requestOptions, context));
    }

    /**
     * Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote script runs. Allowed values:
     * "Linux", "Windows".</td></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The runId provided by client to track remote script runs. It
     * should match regex ^[a-zA-Z0-9-]{3,24}$</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param workspaceId The workspace id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given workspace id and redirects the client for executing Playwright
     * scripts along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getBrowsersWithResponse(String workspaceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getBrowsersSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            workspaceId, accept, requestOptions, Context.NONE);
    }
}
