// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.playwright;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.developer.playwright.implementation.AccessTokensImpl;
import com.azure.developer.playwright.models.AccessToken;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous PlaywrightClient type.
 */
@ServiceClient(builder = PlaywrightClientBuilder.class, isAsync = true)
public final class AccessTokensAsyncClient {
    @Generated
    private final AccessTokensImpl serviceClient;

    /**
     * Initializes an instance of AccessTokensAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AccessTokensAsyncClient(AccessTokensImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }
     * </pre>
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model of an access-token linked to a workspace along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponse(String workspaceId, String accessTokenId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponseAsync(workspaceId, accessTokenId, resource,
            requestOptions);
    }

    /**
     * Gets an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }
     * </pre>
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an access-token for the workspace with given access-token id along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String workspaceId, String accessTokenId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(workspaceId, accessTokenId, requestOptions);
    }

    /**
     * Deletes an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String workspaceId, String accessTokenId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(workspaceId, accessTokenId, requestOptions);
    }

    /**
     * Lists access-tokens for the given workspace id. It can use OData query params like $select, $filter, $orderby,
     * $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list.
     * Authorization required is Bearer JWT Access token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }
     * </pre>
     * 
     * @param workspaceId The workspace id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AccessToken items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(String workspaceId, RequestOptions requestOptions) {
        return this.serviceClient.listAsync(workspaceId, requestOptions);
    }

    /**
     * Creates an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model of an access-token linked to a workspace on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessToken> createOrReplace(String workspaceId, String accessTokenId, AccessToken resource) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(workspaceId, accessTokenId, BinaryData.fromObject(resource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AccessToken.class));
    }

    /**
     * Gets an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access-token for the workspace with given access-token id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessToken> get(String workspaceId, String accessTokenId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(workspaceId, accessTokenId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AccessToken.class));
    }

    /**
     * Deletes an access-token for the workspace with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param workspaceId The workspace id.
     * @param accessTokenId The access-token id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String workspaceId, String accessTokenId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(workspaceId, accessTokenId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Lists access-tokens for the given workspace id. It can use OData query params like $select, $filter, $orderby,
     * $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list.
     * Authorization required is Bearer JWT Access token provided by EntraID.
     * 
     * @param workspaceId The workspace id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of AccessToken items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AccessToken> list(String workspaceId) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = list(workspaceId, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, AccessToken>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(AccessToken.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
