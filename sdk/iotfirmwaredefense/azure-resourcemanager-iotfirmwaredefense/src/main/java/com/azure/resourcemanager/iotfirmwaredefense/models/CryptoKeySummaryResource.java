// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for cryptographic key summary.
 */
@Fluent
public final class CryptoKeySummaryResource extends SummaryResourceProperties {
    /*
     * The type of summary.
     */
    private SummaryType summaryType = SummaryType.CRYPTO_KEY;

    /*
     * Total number of cryptographic keys found.
     */
    private Long totalKeyCount;

    /*
     * Total number of (non-certificate) public keys found.
     */
    private Long publicKeyCount;

    /*
     * Total number of private keys found.
     */
    private Long privateKeyCount;

    /*
     * Total number of keys found that have a matching paired key or certificate.
     */
    private Long pairedKeyCount;

    /*
     * Total number of keys found that have an insecure key size for the algorithm.
     */
    private Long shortKeySizeCount;

    /**
     * Creates an instance of CryptoKeySummaryResource class.
     */
    public CryptoKeySummaryResource() {
    }

    /**
     * Get the summaryType property: The type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the totalKeyCount property: Total number of cryptographic keys found.
     * 
     * @return the totalKeyCount value.
     */
    public Long totalKeyCount() {
        return this.totalKeyCount;
    }

    /**
     * Set the totalKeyCount property: Total number of cryptographic keys found.
     * 
     * @param totalKeyCount the totalKeyCount value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withTotalKeyCount(Long totalKeyCount) {
        this.totalKeyCount = totalKeyCount;
        return this;
    }

    /**
     * Get the publicKeyCount property: Total number of (non-certificate) public keys found.
     * 
     * @return the publicKeyCount value.
     */
    public Long publicKeyCount() {
        return this.publicKeyCount;
    }

    /**
     * Set the publicKeyCount property: Total number of (non-certificate) public keys found.
     * 
     * @param publicKeyCount the publicKeyCount value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPublicKeyCount(Long publicKeyCount) {
        this.publicKeyCount = publicKeyCount;
        return this;
    }

    /**
     * Get the privateKeyCount property: Total number of private keys found.
     * 
     * @return the privateKeyCount value.
     */
    public Long privateKeyCount() {
        return this.privateKeyCount;
    }

    /**
     * Set the privateKeyCount property: Total number of private keys found.
     * 
     * @param privateKeyCount the privateKeyCount value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPrivateKeyCount(Long privateKeyCount) {
        this.privateKeyCount = privateKeyCount;
        return this;
    }

    /**
     * Get the pairedKeyCount property: Total number of keys found that have a matching paired key or certificate.
     * 
     * @return the pairedKeyCount value.
     */
    public Long pairedKeyCount() {
        return this.pairedKeyCount;
    }

    /**
     * Set the pairedKeyCount property: Total number of keys found that have a matching paired key or certificate.
     * 
     * @param pairedKeyCount the pairedKeyCount value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPairedKeyCount(Long pairedKeyCount) {
        this.pairedKeyCount = pairedKeyCount;
        return this;
    }

    /**
     * Get the shortKeySizeCount property: Total number of keys found that have an insecure key size for the algorithm.
     * 
     * @return the shortKeySizeCount value.
     */
    public Long shortKeySizeCount() {
        return this.shortKeySizeCount;
    }

    /**
     * Set the shortKeySizeCount property: Total number of keys found that have an insecure key size for the algorithm.
     * 
     * @param shortKeySizeCount the shortKeySizeCount value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withShortKeySizeCount(Long shortKeySizeCount) {
        this.shortKeySizeCount = shortKeySizeCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("totalKeyCount", this.totalKeyCount);
        jsonWriter.writeNumberField("publicKeyCount", this.publicKeyCount);
        jsonWriter.writeNumberField("privateKeyCount", this.privateKeyCount);
        jsonWriter.writeNumberField("pairedKeyCount", this.pairedKeyCount);
        jsonWriter.writeNumberField("shortKeySizeCount", this.shortKeySizeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoKeySummaryResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoKeySummaryResource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CryptoKeySummaryResource.
     */
    public static CryptoKeySummaryResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoKeySummaryResource deserializedCryptoKeySummaryResource = new CryptoKeySummaryResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("summaryType".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.summaryType = SummaryType.fromString(reader.getString());
                } else if ("totalKeyCount".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.totalKeyCount = reader.getNullable(JsonReader::getLong);
                } else if ("publicKeyCount".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.publicKeyCount = reader.getNullable(JsonReader::getLong);
                } else if ("privateKeyCount".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.privateKeyCount = reader.getNullable(JsonReader::getLong);
                } else if ("pairedKeyCount".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.pairedKeyCount = reader.getNullable(JsonReader::getLong);
                } else if ("shortKeySizeCount".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.shortKeySizeCount = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoKeySummaryResource;
        });
    }
}
