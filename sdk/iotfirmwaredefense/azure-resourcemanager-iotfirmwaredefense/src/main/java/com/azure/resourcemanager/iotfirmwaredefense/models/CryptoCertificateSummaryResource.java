// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for cryptographic certificate summary.
 */
@Fluent
public final class CryptoCertificateSummaryResource extends SummaryResourceProperties {
    /*
     * The type of summary.
     */
    private SummaryType summaryType = SummaryType.CRYPTO_CERTIFICATE;

    /*
     * Total number of certificates found.
     */
    private Long totalCertificateCount;

    /*
     * Total number of paired private keys found for the certificates.
     */
    private Long pairedKeyCount;

    /*
     * Total number of expired certificates found.
     */
    private Long expiredCertificateCount;

    /*
     * Total number of nearly expired certificates found.
     */
    private Long expiringSoonCertificateCount;

    /*
     * Total number of certificates found using a weak signature algorithm.
     */
    private Long weakSignatureCount;

    /*
     * Total number of certificates found that are self-signed.
     */
    private Long selfSignedCertificateCount;

    /*
     * Total number of certificates found that have an insecure key size for the key algorithm.
     */
    private Long shortKeySizeCount;

    /**
     * Creates an instance of CryptoCertificateSummaryResource class.
     */
    public CryptoCertificateSummaryResource() {
    }

    /**
     * Get the summaryType property: The type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the totalCertificateCount property: Total number of certificates found.
     * 
     * @return the totalCertificateCount value.
     */
    public Long totalCertificateCount() {
        return this.totalCertificateCount;
    }

    /**
     * Set the totalCertificateCount property: Total number of certificates found.
     * 
     * @param totalCertificateCount the totalCertificateCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withTotalCertificateCount(Long totalCertificateCount) {
        this.totalCertificateCount = totalCertificateCount;
        return this;
    }

    /**
     * Get the pairedKeyCount property: Total number of paired private keys found for the certificates.
     * 
     * @return the pairedKeyCount value.
     */
    public Long pairedKeyCount() {
        return this.pairedKeyCount;
    }

    /**
     * Set the pairedKeyCount property: Total number of paired private keys found for the certificates.
     * 
     * @param pairedKeyCount the pairedKeyCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withPairedKeyCount(Long pairedKeyCount) {
        this.pairedKeyCount = pairedKeyCount;
        return this;
    }

    /**
     * Get the expiredCertificateCount property: Total number of expired certificates found.
     * 
     * @return the expiredCertificateCount value.
     */
    public Long expiredCertificateCount() {
        return this.expiredCertificateCount;
    }

    /**
     * Set the expiredCertificateCount property: Total number of expired certificates found.
     * 
     * @param expiredCertificateCount the expiredCertificateCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withExpiredCertificateCount(Long expiredCertificateCount) {
        this.expiredCertificateCount = expiredCertificateCount;
        return this;
    }

    /**
     * Get the expiringSoonCertificateCount property: Total number of nearly expired certificates found.
     * 
     * @return the expiringSoonCertificateCount value.
     */
    public Long expiringSoonCertificateCount() {
        return this.expiringSoonCertificateCount;
    }

    /**
     * Set the expiringSoonCertificateCount property: Total number of nearly expired certificates found.
     * 
     * @param expiringSoonCertificateCount the expiringSoonCertificateCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withExpiringSoonCertificateCount(Long expiringSoonCertificateCount) {
        this.expiringSoonCertificateCount = expiringSoonCertificateCount;
        return this;
    }

    /**
     * Get the weakSignatureCount property: Total number of certificates found using a weak signature algorithm.
     * 
     * @return the weakSignatureCount value.
     */
    public Long weakSignatureCount() {
        return this.weakSignatureCount;
    }

    /**
     * Set the weakSignatureCount property: Total number of certificates found using a weak signature algorithm.
     * 
     * @param weakSignatureCount the weakSignatureCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withWeakSignatureCount(Long weakSignatureCount) {
        this.weakSignatureCount = weakSignatureCount;
        return this;
    }

    /**
     * Get the selfSignedCertificateCount property: Total number of certificates found that are self-signed.
     * 
     * @return the selfSignedCertificateCount value.
     */
    public Long selfSignedCertificateCount() {
        return this.selfSignedCertificateCount;
    }

    /**
     * Set the selfSignedCertificateCount property: Total number of certificates found that are self-signed.
     * 
     * @param selfSignedCertificateCount the selfSignedCertificateCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withSelfSignedCertificateCount(Long selfSignedCertificateCount) {
        this.selfSignedCertificateCount = selfSignedCertificateCount;
        return this;
    }

    /**
     * Get the shortKeySizeCount property: Total number of certificates found that have an insecure key size for the key
     * algorithm.
     * 
     * @return the shortKeySizeCount value.
     */
    public Long shortKeySizeCount() {
        return this.shortKeySizeCount;
    }

    /**
     * Set the shortKeySizeCount property: Total number of certificates found that have an insecure key size for the key
     * algorithm.
     * 
     * @param shortKeySizeCount the shortKeySizeCount value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withShortKeySizeCount(Long shortKeySizeCount) {
        this.shortKeySizeCount = shortKeySizeCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("totalCertificateCount", this.totalCertificateCount);
        jsonWriter.writeNumberField("pairedKeyCount", this.pairedKeyCount);
        jsonWriter.writeNumberField("expiredCertificateCount", this.expiredCertificateCount);
        jsonWriter.writeNumberField("expiringSoonCertificateCount", this.expiringSoonCertificateCount);
        jsonWriter.writeNumberField("weakSignatureCount", this.weakSignatureCount);
        jsonWriter.writeNumberField("selfSignedCertificateCount", this.selfSignedCertificateCount);
        jsonWriter.writeNumberField("shortKeySizeCount", this.shortKeySizeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoCertificateSummaryResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoCertificateSummaryResource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CryptoCertificateSummaryResource.
     */
    public static CryptoCertificateSummaryResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoCertificateSummaryResource deserializedCryptoCertificateSummaryResource
                = new CryptoCertificateSummaryResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("summaryType".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.summaryType
                        = SummaryType.fromString(reader.getString());
                } else if ("totalCertificateCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.totalCertificateCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("pairedKeyCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.pairedKeyCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("expiredCertificateCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.expiredCertificateCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("expiringSoonCertificateCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.expiringSoonCertificateCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("weakSignatureCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.weakSignatureCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("selfSignedCertificateCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.selfSignedCertificateCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("shortKeySizeCount".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.shortKeySizeCount
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoCertificateSummaryResource;
        });
    }
}
