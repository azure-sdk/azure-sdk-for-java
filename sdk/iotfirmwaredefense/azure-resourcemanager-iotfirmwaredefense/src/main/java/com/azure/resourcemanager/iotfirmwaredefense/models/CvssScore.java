// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Common Vulnerability Scoring System values.
 */
@Fluent
public final class CvssScore implements JsonSerializable<CvssScore> {
    /*
     * The version of the Common Vulnerability Scoring System (CVSS).
     */
    private int version;

    /*
     * The score of the CVE according to the CVSS specified.
     */
    private Float score;

    /**
     * Creates an instance of CvssScore class.
     */
    public CvssScore() {
    }

    /**
     * Get the version property: The version of the Common Vulnerability Scoring System (CVSS).
     * 
     * @return the version value.
     */
    public int version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the Common Vulnerability Scoring System (CVSS).
     * 
     * @param version the version value to set.
     * @return the CvssScore object itself.
     */
    public CvssScore withVersion(int version) {
        this.version = version;
        return this;
    }

    /**
     * Get the score property: The score of the CVE according to the CVSS specified.
     * 
     * @return the score value.
     */
    public Float score() {
        return this.score;
    }

    /**
     * Set the score property: The score of the CVE according to the CVSS specified.
     * 
     * @param score the score value to set.
     * @return the CvssScore object itself.
     */
    public CvssScore withScore(Float score) {
        this.score = score;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("version", this.version);
        jsonWriter.writeNumberField("score", this.score);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CvssScore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CvssScore if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CvssScore.
     */
    public static CvssScore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CvssScore deserializedCvssScore = new CvssScore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedCvssScore.version = reader.getInt();
                } else if ("score".equals(fieldName)) {
                    deserializedCvssScore.score = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCvssScore;
        });
    }
}
