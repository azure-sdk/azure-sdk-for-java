// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for a CVE analysis summary.
 */
@Fluent
public final class CveSummary extends SummaryResourceProperties {
    /*
     * The type of summary.
     */
    private SummaryType summaryType = SummaryType.COMMON_VULNERABILITIES_AND_EXPOSURES;

    /*
     * The total number of critical severity CVEs detected
     */
    private Long criticalCveCount;

    /*
     * The total number of high severity CVEs detected
     */
    private Long highCveCount;

    /*
     * The total number of medium severity CVEs detected
     */
    private Long mediumCveCount;

    /*
     * The total number of low severity CVEs detected
     */
    private Long lowCveCount;

    /*
     * The total number of unknown severity CVEs detected
     */
    private Long unknownCveCount;

    /**
     * Creates an instance of CveSummary class.
     */
    public CveSummary() {
    }

    /**
     * Get the summaryType property: The type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the criticalCveCount property: The total number of critical severity CVEs detected.
     * 
     * @return the criticalCveCount value.
     */
    public Long criticalCveCount() {
        return this.criticalCveCount;
    }

    /**
     * Set the criticalCveCount property: The total number of critical severity CVEs detected.
     * 
     * @param criticalCveCount the criticalCveCount value to set.
     * @return the CveSummary object itself.
     */
    public CveSummary withCriticalCveCount(Long criticalCveCount) {
        this.criticalCveCount = criticalCveCount;
        return this;
    }

    /**
     * Get the highCveCount property: The total number of high severity CVEs detected.
     * 
     * @return the highCveCount value.
     */
    public Long highCveCount() {
        return this.highCveCount;
    }

    /**
     * Set the highCveCount property: The total number of high severity CVEs detected.
     * 
     * @param highCveCount the highCveCount value to set.
     * @return the CveSummary object itself.
     */
    public CveSummary withHighCveCount(Long highCveCount) {
        this.highCveCount = highCveCount;
        return this;
    }

    /**
     * Get the mediumCveCount property: The total number of medium severity CVEs detected.
     * 
     * @return the mediumCveCount value.
     */
    public Long mediumCveCount() {
        return this.mediumCveCount;
    }

    /**
     * Set the mediumCveCount property: The total number of medium severity CVEs detected.
     * 
     * @param mediumCveCount the mediumCveCount value to set.
     * @return the CveSummary object itself.
     */
    public CveSummary withMediumCveCount(Long mediumCveCount) {
        this.mediumCveCount = mediumCveCount;
        return this;
    }

    /**
     * Get the lowCveCount property: The total number of low severity CVEs detected.
     * 
     * @return the lowCveCount value.
     */
    public Long lowCveCount() {
        return this.lowCveCount;
    }

    /**
     * Set the lowCveCount property: The total number of low severity CVEs detected.
     * 
     * @param lowCveCount the lowCveCount value to set.
     * @return the CveSummary object itself.
     */
    public CveSummary withLowCveCount(Long lowCveCount) {
        this.lowCveCount = lowCveCount;
        return this;
    }

    /**
     * Get the unknownCveCount property: The total number of unknown severity CVEs detected.
     * 
     * @return the unknownCveCount value.
     */
    public Long unknownCveCount() {
        return this.unknownCveCount;
    }

    /**
     * Set the unknownCveCount property: The total number of unknown severity CVEs detected.
     * 
     * @param unknownCveCount the unknownCveCount value to set.
     * @return the CveSummary object itself.
     */
    public CveSummary withUnknownCveCount(Long unknownCveCount) {
        this.unknownCveCount = unknownCveCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("criticalCveCount", this.criticalCveCount);
        jsonWriter.writeNumberField("highCveCount", this.highCveCount);
        jsonWriter.writeNumberField("mediumCveCount", this.mediumCveCount);
        jsonWriter.writeNumberField("lowCveCount", this.lowCveCount);
        jsonWriter.writeNumberField("unknownCveCount", this.unknownCveCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CveSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CveSummary if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CveSummary.
     */
    public static CveSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CveSummary deserializedCveSummary = new CveSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCveSummary.withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("summaryType".equals(fieldName)) {
                    deserializedCveSummary.summaryType = SummaryType.fromString(reader.getString());
                } else if ("criticalCveCount".equals(fieldName)) {
                    deserializedCveSummary.criticalCveCount = reader.getNullable(JsonReader::getLong);
                } else if ("highCveCount".equals(fieldName)) {
                    deserializedCveSummary.highCveCount = reader.getNullable(JsonReader::getLong);
                } else if ("mediumCveCount".equals(fieldName)) {
                    deserializedCveSummary.mediumCveCount = reader.getNullable(JsonReader::getLong);
                } else if ("lowCveCount".equals(fieldName)) {
                    deserializedCveSummary.lowCveCount = reader.getNullable(JsonReader::getLong);
                } else if ("unknownCveCount".equals(fieldName)) {
                    deserializedCveSummary.unknownCveCount = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCveSummary;
        });
    }
}
