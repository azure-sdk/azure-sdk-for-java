// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.generated;

import com.azure.resourcemanager.postgresqlhsc.models.CoordinatorEnablePublicIpEnum;
import com.azure.resourcemanager.postgresqlhsc.models.EnableHaEnum;
import com.azure.resourcemanager.postgresqlhsc.models.EnableShardsOnCoordinatorEnum;
import com.azure.resourcemanager.postgresqlhsc.models.NodeEnablePublicIpEnum;
import java.util.HashMap;
import java.util.Map;

/** Samples for Clusters CreateOrUpdate. */
public final class ClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/stable/2022-11-08/examples/ClusterCreateReadReplica.json
     */
    /**
     * Sample code: Create a new cluster as a read replica.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewClusterAsAReadReplica(
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .clusters()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withSourceResourceId(
                "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtests-source-cluster")
            .withSourceLocation("westus")
            .create();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/stable/2022-11-08/examples/ClusterCreatePITR.json
     */
    /**
     * Sample code: Create a new cluster as a point in time restore.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewClusterAsAPointInTimeRestore(
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .clusters()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withSourceResourceId(
                "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtests-source-cluster")
            .withSourceLocation("westus")
            .create();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/stable/2022-11-08/examples/ClusterCreate.json
     */
    /**
     * Sample code: Create a new cluster.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewCluster(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .clusters()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withTags(mapOf())
            .withAdministratorLoginPassword("password")
            .withPostgresqlVersion("15")
            .withCitusVersion("11.1")
            .withEnableShardsOnCoordinator(EnableShardsOnCoordinatorEnum.FALSE)
            .withEnableHa(EnableHaEnum.TRUE)
            .withPreferredPrimaryZone("1")
            .withCoordinatorServerEdition("GeneralPurpose")
            .withCoordinatorStorageQuotaInMb(524288L)
            .withCoordinatorVCores(4L)
            .withCoordinatorEnablePublicIpAccess(CoordinatorEnablePublicIpEnum.TRUE)
            .withNodeServerEdition("MemoryOptimized")
            .withNodeCount(3L)
            .withNodeStorageQuotaInMb(524288L)
            .withNodeVCores(8L)
            .withNodeEnablePublicIpAccess(NodeEnablePublicIpEnum.FALSE)
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
