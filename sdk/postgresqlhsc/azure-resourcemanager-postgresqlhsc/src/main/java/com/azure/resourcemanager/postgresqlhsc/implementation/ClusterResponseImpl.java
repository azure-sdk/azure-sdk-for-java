// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.postgresqlhsc.fluent.models.ClusterResponseInner;
import com.azure.resourcemanager.postgresqlhsc.models.Cluster;
import com.azure.resourcemanager.postgresqlhsc.models.ClusterForUpdate;
import com.azure.resourcemanager.postgresqlhsc.models.ClusterResponse;
import com.azure.resourcemanager.postgresqlhsc.models.MaintenanceWindow;
import com.azure.resourcemanager.postgresqlhsc.models.ServerNameItem;
import com.azure.resourcemanager.postgresqlhsc.models.SimplePrivateEndpointConnection;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ClusterResponseImpl implements ClusterResponse, ClusterResponse.Definition, ClusterResponse.Update {
    private ClusterResponseInner innerObject;

    private final com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String administratorLogin() {
        return this.innerModel().administratorLogin();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String state() {
        return this.innerModel().state();
    }

    public String postgresqlVersion() {
        return this.innerModel().postgresqlVersion();
    }

    public String citusVersion() {
        return this.innerModel().citusVersion();
    }

    public MaintenanceWindow maintenanceWindow() {
        return this.innerModel().maintenanceWindow();
    }

    public String preferredPrimaryZone() {
        return this.innerModel().preferredPrimaryZone();
    }

    public Boolean enableShardsOnCoordinator() {
        return this.innerModel().enableShardsOnCoordinator();
    }

    public Boolean enableHa() {
        return this.innerModel().enableHa();
    }

    public String coordinatorServerEdition() {
        return this.innerModel().coordinatorServerEdition();
    }

    public Long coordinatorStorageQuotaInMb() {
        return this.innerModel().coordinatorStorageQuotaInMb();
    }

    public Long coordinatorVCores() {
        return this.innerModel().coordinatorVCores();
    }

    public Boolean coordinatorEnablePublicIpAccess() {
        return this.innerModel().coordinatorEnablePublicIpAccess();
    }

    public String nodeServerEdition() {
        return this.innerModel().nodeServerEdition();
    }

    public Long nodeCount() {
        return this.innerModel().nodeCount();
    }

    public Long nodeStorageQuotaInMb() {
        return this.innerModel().nodeStorageQuotaInMb();
    }

    public Long nodeVCores() {
        return this.innerModel().nodeVCores();
    }

    public Boolean nodeEnablePublicIpAccess() {
        return this.innerModel().nodeEnablePublicIpAccess();
    }

    public List<ServerNameItem> serverNames() {
        List<ServerNameItem> inner = this.innerModel().serverNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String sourceResourceId() {
        return this.innerModel().sourceResourceId();
    }

    public String sourceLocation() {
        return this.innerModel().sourceLocation();
    }

    public OffsetDateTime pointInTimeUtc() {
        return this.innerModel().pointInTimeUtc();
    }

    public List<String> readReplicas() {
        List<String> inner = this.innerModel().readReplicas();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime earliestRestoreTime() {
        return this.innerModel().earliestRestoreTime();
    }

    public List<SimplePrivateEndpointConnection> privateEndpointConnections() {
        List<SimplePrivateEndpointConnection> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ClusterResponseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private Cluster createParameters;

    private ClusterForUpdate updateParameters;

    public ClusterResponseImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ClusterResponse create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .createOrUpdate(resourceGroupName, clusterName, createParameters, Context.NONE);
        return this;
    }

    public ClusterResponse create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .createOrUpdate(resourceGroupName, clusterName, createParameters, context);
        return this;
    }

    ClusterResponseImpl(String name, com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager) {
        this.innerObject = new ClusterResponseInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
        this.createParameters = new Cluster();
    }

    public ClusterResponseImpl update() {
        this.updateParameters = new ClusterForUpdate();
        return this;
    }

    public ClusterResponse apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .update(resourceGroupName, clusterName, updateParameters, Context.NONE);
        return this;
    }

    public ClusterResponse apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .update(resourceGroupName, clusterName, updateParameters, context);
        return this;
    }

    ClusterResponseImpl(
        ClusterResponseInner innerObject, com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "serverGroupsv2");
    }

    public ClusterResponse refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
                .getValue();
        return this;
    }

    public ClusterResponse refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
                .getValue();
        return this;
    }

    public void restart() {
        serviceManager.clusters().restart(resourceGroupName, clusterName);
    }

    public void restart(Context context) {
        serviceManager.clusters().restart(resourceGroupName, clusterName, context);
    }

    public void start() {
        serviceManager.clusters().start(resourceGroupName, clusterName);
    }

    public void start(Context context) {
        serviceManager.clusters().start(resourceGroupName, clusterName, context);
    }

    public void stop() {
        serviceManager.clusters().stop(resourceGroupName, clusterName);
    }

    public void stop(Context context) {
        serviceManager.clusters().stop(resourceGroupName, clusterName, context);
    }

    public void promoteReadReplica() {
        serviceManager.clusters().promoteReadReplica(resourceGroupName, clusterName);
    }

    public void promoteReadReplica(Context context) {
        serviceManager.clusters().promoteReadReplica(resourceGroupName, clusterName, context);
    }

    public ClusterResponseImpl withRegion(Region location) {
        this.createParameters.withLocation(location.toString());
        return this;
    }

    public ClusterResponseImpl withRegion(String location) {
        this.createParameters.withLocation(location);
        return this;
    }

    public ClusterResponseImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameters.withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ClusterResponseImpl withAdministratorLoginPassword(String administratorLoginPassword) {
        if (isInCreateMode()) {
            this.createParameters.withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        } else {
            this.updateParameters.withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        }
    }

    public ClusterResponseImpl withPostgresqlVersion(String postgresqlVersion) {
        if (isInCreateMode()) {
            this.createParameters.withPostgresqlVersion(postgresqlVersion);
            return this;
        } else {
            this.updateParameters.withPostgresqlVersion(postgresqlVersion);
            return this;
        }
    }

    public ClusterResponseImpl withCitusVersion(String citusVersion) {
        if (isInCreateMode()) {
            this.createParameters.withCitusVersion(citusVersion);
            return this;
        } else {
            this.updateParameters.withCitusVersion(citusVersion);
            return this;
        }
    }

    public ClusterResponseImpl withEnableShardsOnCoordinator(Boolean enableShardsOnCoordinator) {
        if (isInCreateMode()) {
            this.createParameters.withEnableShardsOnCoordinator(enableShardsOnCoordinator);
            return this;
        } else {
            this.updateParameters.withEnableShardsOnCoordinator(enableShardsOnCoordinator);
            return this;
        }
    }

    public ClusterResponseImpl withEnableHa(Boolean enableHa) {
        if (isInCreateMode()) {
            this.createParameters.withEnableHa(enableHa);
            return this;
        } else {
            this.updateParameters.withEnableHa(enableHa);
            return this;
        }
    }

    public ClusterResponseImpl withPreferredPrimaryZone(String preferredPrimaryZone) {
        if (isInCreateMode()) {
            this.createParameters.withPreferredPrimaryZone(preferredPrimaryZone);
            return this;
        } else {
            this.updateParameters.withPreferredPrimaryZone(preferredPrimaryZone);
            return this;
        }
    }

    public ClusterResponseImpl withCoordinatorServerEdition(String coordinatorServerEdition) {
        if (isInCreateMode()) {
            this.createParameters.withCoordinatorServerEdition(coordinatorServerEdition);
            return this;
        } else {
            this.updateParameters.withCoordinatorServerEdition(coordinatorServerEdition);
            return this;
        }
    }

    public ClusterResponseImpl withCoordinatorStorageQuotaInMb(Long coordinatorStorageQuotaInMb) {
        if (isInCreateMode()) {
            this.createParameters.withCoordinatorStorageQuotaInMb(coordinatorStorageQuotaInMb);
            return this;
        } else {
            this.updateParameters.withCoordinatorStorageQuotaInMb(coordinatorStorageQuotaInMb);
            return this;
        }
    }

    public ClusterResponseImpl withCoordinatorVCores(Long coordinatorVCores) {
        if (isInCreateMode()) {
            this.createParameters.withCoordinatorVCores(coordinatorVCores);
            return this;
        } else {
            this.updateParameters.withCoordinatorVCores(coordinatorVCores);
            return this;
        }
    }

    public ClusterResponseImpl withCoordinatorEnablePublicIpAccess(Boolean coordinatorEnablePublicIpAccess) {
        if (isInCreateMode()) {
            this.createParameters.withCoordinatorEnablePublicIpAccess(coordinatorEnablePublicIpAccess);
            return this;
        } else {
            this.updateParameters.withCoordinatorEnablePublicIpAccess(coordinatorEnablePublicIpAccess);
            return this;
        }
    }

    public ClusterResponseImpl withNodeServerEdition(String nodeServerEdition) {
        if (isInCreateMode()) {
            this.createParameters.withNodeServerEdition(nodeServerEdition);
            return this;
        } else {
            this.updateParameters.withNodeServerEdition(nodeServerEdition);
            return this;
        }
    }

    public ClusterResponseImpl withNodeCount(Long nodeCount) {
        if (isInCreateMode()) {
            this.createParameters.withNodeCount(nodeCount);
            return this;
        } else {
            this.updateParameters.withNodeCount(nodeCount);
            return this;
        }
    }

    public ClusterResponseImpl withNodeStorageQuotaInMb(Long nodeStorageQuotaInMb) {
        if (isInCreateMode()) {
            this.createParameters.withNodeStorageQuotaInMb(nodeStorageQuotaInMb);
            return this;
        } else {
            this.updateParameters.withNodeStorageQuotaInMb(nodeStorageQuotaInMb);
            return this;
        }
    }

    public ClusterResponseImpl withNodeVCores(Long nodeVCores) {
        if (isInCreateMode()) {
            this.createParameters.withNodeVCores(nodeVCores);
            return this;
        } else {
            this.updateParameters.withNodeVCores(nodeVCores);
            return this;
        }
    }

    public ClusterResponseImpl withNodeEnablePublicIpAccess(Boolean nodeEnablePublicIpAccess) {
        this.createParameters.withNodeEnablePublicIpAccess(nodeEnablePublicIpAccess);
        return this;
    }

    public ClusterResponseImpl withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        if (isInCreateMode()) {
            this.createParameters.withMaintenanceWindow(maintenanceWindow);
            return this;
        } else {
            this.updateParameters.withMaintenanceWindow(maintenanceWindow);
            return this;
        }
    }

    public ClusterResponseImpl withSourceResourceId(String sourceResourceId) {
        this.createParameters.withSourceResourceId(sourceResourceId);
        return this;
    }

    public ClusterResponseImpl withSourceLocation(String sourceLocation) {
        this.createParameters.withSourceLocation(sourceLocation);
        return this;
    }

    public ClusterResponseImpl withPointInTimeUtc(OffsetDateTime pointInTimeUtc) {
        this.createParameters.withPointInTimeUtc(pointInTimeUtc);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
