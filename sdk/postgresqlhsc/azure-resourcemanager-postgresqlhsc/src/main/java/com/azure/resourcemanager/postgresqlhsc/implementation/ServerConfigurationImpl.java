// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.postgresqlhsc.fluent.models.ServerConfigurationInner;
import com.azure.resourcemanager.postgresqlhsc.models.ConfigurationDataType;
import com.azure.resourcemanager.postgresqlhsc.models.ServerConfiguration;
import com.azure.resourcemanager.postgresqlhsc.models.ServerConfigurationRequest;

public final class ServerConfigurationImpl
    implements ServerConfiguration, ServerConfiguration.Definition, ServerConfiguration.Update {
    private ServerConfigurationInner innerObject;

    private final com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String value() {
        return this.innerModel().value();
    }

    public String source() {
        return this.innerModel().source();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String defaultValue() {
        return this.innerModel().defaultValue();
    }

    public ConfigurationDataType dataType() {
        return this.innerModel().dataType();
    }

    public String allowedValues() {
        return this.innerModel().allowedValues();
    }

    public Boolean requiresRestart() {
        return this.innerModel().requiresRestart();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ServerConfigurationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String configurationName;

    private ServerConfigurationRequest createParameters;

    private ServerConfigurationRequest updateParameters;

    public ServerConfigurationImpl withExistingServerGroupsv2(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    public ServerConfiguration create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .createOrUpdateCoordinator(
                    resourceGroupName, clusterName, configurationName, createParameters, Context.NONE);
        return this;
    }

    public ServerConfiguration create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .createOrUpdateCoordinator(
                    resourceGroupName, clusterName, configurationName, createParameters, context);
        return this;
    }

    ServerConfigurationImpl(String name, com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager) {
        this.innerObject = new ServerConfigurationInner();
        this.serviceManager = serviceManager;
        this.configurationName = name;
        this.createParameters = new ServerConfigurationRequest();
    }

    public ServerConfigurationImpl update() {
        this.updateParameters = new ServerConfigurationRequest();
        return this;
    }

    public ServerConfiguration apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .createOrUpdateCoordinator(
                    resourceGroupName, clusterName, configurationName, updateParameters, Context.NONE);
        return this;
    }

    public ServerConfiguration apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .createOrUpdateCoordinator(
                    resourceGroupName, clusterName, configurationName, updateParameters, context);
        return this;
    }

    ServerConfigurationImpl(
        ServerConfigurationInner innerObject,
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "serverGroupsv2");
        this.configurationName = Utils.getValueFromIdByName(innerObject.id(), "coordinatorConfigurations");
    }

    public ServerConfiguration refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .getCoordinatorWithResponse(resourceGroupName, clusterName, configurationName, Context.NONE)
                .getValue();
        return this;
    }

    public ServerConfiguration refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConfigurations()
                .getCoordinatorWithResponse(resourceGroupName, clusterName, configurationName, context)
                .getValue();
        return this;
    }

    public ServerConfigurationImpl withValue(String value) {
        if (isInCreateMode()) {
            this.createParameters.withValue(value);
            return this;
        } else {
            this.updateParameters.withValue(value);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
