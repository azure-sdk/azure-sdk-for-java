// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.postgresqlhsc.models.ServerRole;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of a server. */
@Fluent
public final class ServerProperties {
    /*
     * The edition of a server
     */
    @JsonProperty(value = "serverEdition")
    private String serverEdition;

    /*
     * The storage of a server in MB.
     */
    @JsonProperty(value = "storageQuotaInMb")
    private Long storageQuotaInMb;

    /*
     * The vCores count of a server (max: 64).
     */
    @JsonProperty(value = "vCores")
    private Long vCores;

    /*
     * If high availability is enabled or not for the server.
     */
    @JsonProperty(value = "enableHa")
    private Boolean enableHa;

    /*
     * If public IP is requested or not for a server.
     */
    @JsonProperty(value = "enablePublicIpAccess", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean enablePublicIpAccess;

    /*
     * The administrator's login name of the servers in the cluster.
     */
    @JsonProperty(value = "administratorLogin", access = JsonProperty.Access.WRITE_ONLY)
    private String administratorLogin;

    /*
     * The fully qualified domain name of a server.
     */
    @JsonProperty(value = "fullyQualifiedDomainName", access = JsonProperty.Access.WRITE_ONLY)
    private String fullyQualifiedDomainName;

    /*
     * The role of server in the cluster.
     */
    @JsonProperty(value = "role")
    private ServerRole role;

    /*
     * A state of a cluster/server that is visible to user.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private String state;

    /*
     * A state of HA feature for the cluster.
     */
    @JsonProperty(value = "haState", access = JsonProperty.Access.WRITE_ONLY)
    private String haState;

    /*
     * Availability Zone information of the server.
     */
    @JsonProperty(value = "availabilityZone")
    private String availabilityZone;

    /*
     * The PostgreSQL version of server.
     */
    @JsonProperty(value = "postgresqlVersion")
    private String postgresqlVersion;

    /*
     * The Citus version of server.
     */
    @JsonProperty(value = "citusVersion")
    private String citusVersion;

    /*
     * If server is set to read-only.
     */
    @JsonProperty(value = "isReadOnly")
    private Boolean isReadOnly;

    /** Creates an instance of ServerProperties class. */
    public ServerProperties() {
    }

    /**
     * Get the serverEdition property: The edition of a server.
     *
     * @return the serverEdition value.
     */
    public String serverEdition() {
        return this.serverEdition;
    }

    /**
     * Set the serverEdition property: The edition of a server.
     *
     * @param serverEdition the serverEdition value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withServerEdition(String serverEdition) {
        this.serverEdition = serverEdition;
        return this;
    }

    /**
     * Get the storageQuotaInMb property: The storage of a server in MB.
     *
     * @return the storageQuotaInMb value.
     */
    public Long storageQuotaInMb() {
        return this.storageQuotaInMb;
    }

    /**
     * Set the storageQuotaInMb property: The storage of a server in MB.
     *
     * @param storageQuotaInMb the storageQuotaInMb value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withStorageQuotaInMb(Long storageQuotaInMb) {
        this.storageQuotaInMb = storageQuotaInMb;
        return this;
    }

    /**
     * Get the vCores property: The vCores count of a server (max: 64).
     *
     * @return the vCores value.
     */
    public Long vCores() {
        return this.vCores;
    }

    /**
     * Set the vCores property: The vCores count of a server (max: 64).
     *
     * @param vCores the vCores value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withVCores(Long vCores) {
        this.vCores = vCores;
        return this;
    }

    /**
     * Get the enableHa property: If high availability is enabled or not for the server.
     *
     * @return the enableHa value.
     */
    public Boolean enableHa() {
        return this.enableHa;
    }

    /**
     * Set the enableHa property: If high availability is enabled or not for the server.
     *
     * @param enableHa the enableHa value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withEnableHa(Boolean enableHa) {
        this.enableHa = enableHa;
        return this;
    }

    /**
     * Get the enablePublicIpAccess property: If public IP is requested or not for a server.
     *
     * @return the enablePublicIpAccess value.
     */
    public Boolean enablePublicIpAccess() {
        return this.enablePublicIpAccess;
    }

    /**
     * Get the administratorLogin property: The administrator's login name of the servers in the cluster.
     *
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Get the fullyQualifiedDomainName property: The fully qualified domain name of a server.
     *
     * @return the fullyQualifiedDomainName value.
     */
    public String fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }

    /**
     * Get the role property: The role of server in the cluster.
     *
     * @return the role value.
     */
    public ServerRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role of server in the cluster.
     *
     * @param role the role value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withRole(ServerRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the state property: A state of a cluster/server that is visible to user.
     *
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the haState property: A state of HA feature for the cluster.
     *
     * @return the haState value.
     */
    public String haState() {
        return this.haState;
    }

    /**
     * Get the availabilityZone property: Availability Zone information of the server.
     *
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: Availability Zone information of the server.
     *
     * @param availabilityZone the availabilityZone value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the postgresqlVersion property: The PostgreSQL version of server.
     *
     * @return the postgresqlVersion value.
     */
    public String postgresqlVersion() {
        return this.postgresqlVersion;
    }

    /**
     * Set the postgresqlVersion property: The PostgreSQL version of server.
     *
     * @param postgresqlVersion the postgresqlVersion value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withPostgresqlVersion(String postgresqlVersion) {
        this.postgresqlVersion = postgresqlVersion;
        return this;
    }

    /**
     * Get the citusVersion property: The Citus version of server.
     *
     * @return the citusVersion value.
     */
    public String citusVersion() {
        return this.citusVersion;
    }

    /**
     * Set the citusVersion property: The Citus version of server.
     *
     * @param citusVersion the citusVersion value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withCitusVersion(String citusVersion) {
        this.citusVersion = citusVersion;
        return this;
    }

    /**
     * Get the isReadOnly property: If server is set to read-only.
     *
     * @return the isReadOnly value.
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }

    /**
     * Set the isReadOnly property: If server is set to read-only.
     *
     * @param isReadOnly the isReadOnly value to set.
     * @return the ServerProperties object itself.
     */
    public ServerProperties withIsReadOnly(Boolean isReadOnly) {
        this.isReadOnly = isReadOnly;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
