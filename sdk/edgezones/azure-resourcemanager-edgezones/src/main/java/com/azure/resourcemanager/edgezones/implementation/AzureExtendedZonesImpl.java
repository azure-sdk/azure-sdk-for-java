// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgezones.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgezones.fluent.AzureExtendedZonesClient;
import com.azure.resourcemanager.edgezones.fluent.models.AzureExtendedZoneInner;
import com.azure.resourcemanager.edgezones.models.AzureExtendedZone;
import com.azure.resourcemanager.edgezones.models.AzureExtendedZones;

public final class AzureExtendedZonesImpl implements AzureExtendedZones {
    private static final ClientLogger LOGGER = new ClientLogger(AzureExtendedZonesImpl.class);

    private final AzureExtendedZonesClient innerClient;

    private final com.azure.resourcemanager.edgezones.EdgezonesManager serviceManager;

    public AzureExtendedZonesImpl(AzureExtendedZonesClient innerClient,
        com.azure.resourcemanager.edgezones.EdgezonesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureExtendedZone> list() {
        PagedIterable<AzureExtendedZoneInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AzureExtendedZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureExtendedZone> list(Context context) {
        PagedIterable<AzureExtendedZoneInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AzureExtendedZoneImpl(inner1, this.manager()));
    }

    public Response<AzureExtendedZone> getWithResponse(String azureExtendedZoneName, Context context) {
        Response<AzureExtendedZoneInner> inner = this.serviceClient().getWithResponse(azureExtendedZoneName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureExtendedZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureExtendedZone get(String azureExtendedZoneName) {
        AzureExtendedZoneInner inner = this.serviceClient().get(azureExtendedZoneName);
        if (inner != null) {
            return new AzureExtendedZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureExtendedZone> registerWithResponse(String azureExtendedZoneName, Context context) {
        Response<AzureExtendedZoneInner> inner
            = this.serviceClient().registerWithResponse(azureExtendedZoneName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureExtendedZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureExtendedZone register(String azureExtendedZoneName) {
        AzureExtendedZoneInner inner = this.serviceClient().register(azureExtendedZoneName);
        if (inner != null) {
            return new AzureExtendedZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureExtendedZone> unregisterWithResponse(String azureExtendedZoneName, Context context) {
        Response<AzureExtendedZoneInner> inner
            = this.serviceClient().unregisterWithResponse(azureExtendedZoneName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureExtendedZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureExtendedZone unregister(String azureExtendedZoneName) {
        AzureExtendedZoneInner inner = this.serviceClient().unregister(azureExtendedZoneName);
        if (inner != null) {
            return new AzureExtendedZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private AzureExtendedZonesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgezones.EdgezonesManager manager() {
        return this.serviceManager;
    }
}
