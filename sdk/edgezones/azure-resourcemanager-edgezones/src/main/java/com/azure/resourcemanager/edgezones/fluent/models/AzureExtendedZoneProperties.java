// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgezones.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgezones.models.ProvisioningState;
import com.azure.resourcemanager.edgezones.models.RegistrationState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of an AzureExtendedZone Resource.
 */
@Fluent
public final class AzureExtendedZoneProperties {
    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * AzureExtendedZone registration approved or not
     */
    @JsonProperty(value = "registrationState", access = JsonProperty.Access.WRITE_ONLY)
    private RegistrationState registrationState;

    /*
     * AzureExtendedZone displayName
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * AzureExtendedZone regionalDisplayName
     */
    @JsonProperty(value = "regionalDisplayName", required = true)
    private String regionalDisplayName;

    /*
     * AzureExtendedZone regionType
     */
    @JsonProperty(value = "regionType", required = true)
    private String regionType;

    /*
     * AzureExtendedZone regionCategory
     */
    @JsonProperty(value = "regionCategory", required = true)
    private String regionCategory;

    /*
     * AzureExtendedZone geography
     */
    @JsonProperty(value = "geography", required = true)
    private String geography;

    /*
     * AzureExtendedZone geographyGroup
     */
    @JsonProperty(value = "geographyGroup", required = true)
    private String geographyGroup;

    /*
     * AzureExtendedZone longitude
     */
    @JsonProperty(value = "longitude", required = true)
    private String longitude;

    /*
     * AzureExtendedZone latitude
     */
    @JsonProperty(value = "latitude", required = true)
    private String latitude;

    /*
     * AzureExtendedZone homeLocation
     */
    @JsonProperty(value = "homeLocation", required = true)
    private String homeLocation;

    /**
     * Creates an instance of AzureExtendedZoneProperties class.
     */
    public AzureExtendedZoneProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the registrationState property: AzureExtendedZone registration approved or not.
     * 
     * @return the registrationState value.
     */
    public RegistrationState registrationState() {
        return this.registrationState;
    }

    /**
     * Get the displayName property: AzureExtendedZone displayName.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: AzureExtendedZone displayName.
     * 
     * @param displayName the displayName value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the regionalDisplayName property: AzureExtendedZone regionalDisplayName.
     * 
     * @return the regionalDisplayName value.
     */
    public String regionalDisplayName() {
        return this.regionalDisplayName;
    }

    /**
     * Set the regionalDisplayName property: AzureExtendedZone regionalDisplayName.
     * 
     * @param regionalDisplayName the regionalDisplayName value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withRegionalDisplayName(String regionalDisplayName) {
        this.regionalDisplayName = regionalDisplayName;
        return this;
    }

    /**
     * Get the regionType property: AzureExtendedZone regionType.
     * 
     * @return the regionType value.
     */
    public String regionType() {
        return this.regionType;
    }

    /**
     * Set the regionType property: AzureExtendedZone regionType.
     * 
     * @param regionType the regionType value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withRegionType(String regionType) {
        this.regionType = regionType;
        return this;
    }

    /**
     * Get the regionCategory property: AzureExtendedZone regionCategory.
     * 
     * @return the regionCategory value.
     */
    public String regionCategory() {
        return this.regionCategory;
    }

    /**
     * Set the regionCategory property: AzureExtendedZone regionCategory.
     * 
     * @param regionCategory the regionCategory value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withRegionCategory(String regionCategory) {
        this.regionCategory = regionCategory;
        return this;
    }

    /**
     * Get the geography property: AzureExtendedZone geography.
     * 
     * @return the geography value.
     */
    public String geography() {
        return this.geography;
    }

    /**
     * Set the geography property: AzureExtendedZone geography.
     * 
     * @param geography the geography value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withGeography(String geography) {
        this.geography = geography;
        return this;
    }

    /**
     * Get the geographyGroup property: AzureExtendedZone geographyGroup.
     * 
     * @return the geographyGroup value.
     */
    public String geographyGroup() {
        return this.geographyGroup;
    }

    /**
     * Set the geographyGroup property: AzureExtendedZone geographyGroup.
     * 
     * @param geographyGroup the geographyGroup value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withGeographyGroup(String geographyGroup) {
        this.geographyGroup = geographyGroup;
        return this;
    }

    /**
     * Get the longitude property: AzureExtendedZone longitude.
     * 
     * @return the longitude value.
     */
    public String longitude() {
        return this.longitude;
    }

    /**
     * Set the longitude property: AzureExtendedZone longitude.
     * 
     * @param longitude the longitude value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withLongitude(String longitude) {
        this.longitude = longitude;
        return this;
    }

    /**
     * Get the latitude property: AzureExtendedZone latitude.
     * 
     * @return the latitude value.
     */
    public String latitude() {
        return this.latitude;
    }

    /**
     * Set the latitude property: AzureExtendedZone latitude.
     * 
     * @param latitude the latitude value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withLatitude(String latitude) {
        this.latitude = latitude;
        return this;
    }

    /**
     * Get the homeLocation property: AzureExtendedZone homeLocation.
     * 
     * @return the homeLocation value.
     */
    public String homeLocation() {
        return this.homeLocation;
    }

    /**
     * Set the homeLocation property: AzureExtendedZone homeLocation.
     * 
     * @param homeLocation the homeLocation value to set.
     * @return the AzureExtendedZoneProperties object itself.
     */
    public AzureExtendedZoneProperties withHomeLocation(String homeLocation) {
        this.homeLocation = homeLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property displayName in model AzureExtendedZoneProperties"));
        }
        if (regionalDisplayName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property regionalDisplayName in model AzureExtendedZoneProperties"));
        }
        if (regionType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property regionType in model AzureExtendedZoneProperties"));
        }
        if (regionCategory() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property regionCategory in model AzureExtendedZoneProperties"));
        }
        if (geography() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property geography in model AzureExtendedZoneProperties"));
        }
        if (geographyGroup() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property geographyGroup in model AzureExtendedZoneProperties"));
        }
        if (longitude() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property longitude in model AzureExtendedZoneProperties"));
        }
        if (latitude() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property latitude in model AzureExtendedZoneProperties"));
        }
        if (homeLocation() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property homeLocation in model AzureExtendedZoneProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureExtendedZoneProperties.class);
}
