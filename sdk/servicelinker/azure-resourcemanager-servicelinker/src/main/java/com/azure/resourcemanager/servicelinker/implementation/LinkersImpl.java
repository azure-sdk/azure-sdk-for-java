// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicelinker.fluent.LinkersClient;
import com.azure.resourcemanager.servicelinker.fluent.models.ConfigurationResultInner;
import com.azure.resourcemanager.servicelinker.fluent.models.LinkerResourceInner;
import com.azure.resourcemanager.servicelinker.fluent.models.ValidateOperationResultInner;
import com.azure.resourcemanager.servicelinker.models.ConfigurationResult;
import com.azure.resourcemanager.servicelinker.models.LinkerPatch;
import com.azure.resourcemanager.servicelinker.models.LinkerResource;
import com.azure.resourcemanager.servicelinker.models.Linkers;
import com.azure.resourcemanager.servicelinker.models.LinkersUpdateResponse;
import com.azure.resourcemanager.servicelinker.models.ValidateOperationResult;

public final class LinkersImpl implements Linkers {
    private static final ClientLogger LOGGER = new ClientLogger(LinkersImpl.class);

    private final LinkersClient innerClient;

    private final com.azure.resourcemanager.servicelinker.ServiceLinkerManager serviceManager;

    public LinkersImpl(LinkersClient innerClient,
        com.azure.resourcemanager.servicelinker.ServiceLinkerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LinkerResource> list(String providers, String resourceUri) {
        PagedIterable<LinkerResourceInner> inner = this.serviceClient().list(providers, resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LinkerResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LinkerResource> list(String providers, String resourceUri, Context context) {
        PagedIterable<LinkerResourceInner> inner = this.serviceClient().list(providers, resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LinkerResourceImpl(inner1, this.manager()));
    }

    public Response<LinkerResource> getWithResponse(String providers, String linkers, String resourceUri,
        String linkerName, Context context) {
        Response<LinkerResourceInner> inner
            = this.serviceClient().getWithResponse(providers, linkers, resourceUri, linkerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LinkerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LinkerResource get(String providers, String linkers, String resourceUri, String linkerName) {
        LinkerResourceInner inner = this.serviceClient().get(providers, linkers, resourceUri, linkerName);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LinkerResource createOrUpdate(String providers, String linkers, String resourceUri, String linkerName,
        LinkerResourceInner parameters) {
        LinkerResourceInner inner
            = this.serviceClient().createOrUpdate(providers, linkers, resourceUri, linkerName, parameters);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LinkerResource createOrUpdate(String providers, String linkers, String resourceUri, String linkerName,
        LinkerResourceInner parameters, Context context) {
        LinkerResourceInner inner
            = this.serviceClient().createOrUpdate(providers, linkers, resourceUri, linkerName, parameters, context);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LinkerResource> updateWithResponse(String providers, String linkers, String resourceUri,
        String linkerName, LinkerPatch parameters, Context context) {
        LinkersUpdateResponse inner
            = this.serviceClient().updateWithResponse(providers, linkers, resourceUri, linkerName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LinkerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LinkerResource update(String providers, String linkers, String resourceUri, String linkerName,
        LinkerPatch parameters) {
        LinkerResourceInner inner
            = this.serviceClient().update(providers, linkers, resourceUri, linkerName, parameters);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String providers, String linkers, String resourceUri, String linkerName) {
        this.serviceClient().delete(providers, linkers, resourceUri, linkerName);
    }

    public void delete(String providers, String linkers, String resourceUri, String linkerName, Context context) {
        this.serviceClient().delete(providers, linkers, resourceUri, linkerName, context);
    }

    public Response<ConfigurationResult> listConfigurationsWithResponse(String providers, String linkers,
        String resourceUri, String linkerName, Context context) {
        Response<ConfigurationResultInner> inner
            = this.serviceClient().listConfigurationsWithResponse(providers, linkers, resourceUri, linkerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigurationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigurationResult listConfigurations(String providers, String linkers, String resourceUri,
        String linkerName) {
        ConfigurationResultInner inner
            = this.serviceClient().listConfigurations(providers, linkers, resourceUri, linkerName);
        if (inner != null) {
            return new ConfigurationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateOperationResult validate(String providers, String linkers, String resourceUri, String linkerName) {
        ValidateOperationResultInner inner = this.serviceClient().validate(providers, linkers, resourceUri, linkerName);
        if (inner != null) {
            return new ValidateOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateOperationResult validate(String providers, String linkers, String resourceUri, String linkerName,
        Context context) {
        ValidateOperationResultInner inner
            = this.serviceClient().validate(providers, linkers, resourceUri, linkerName, context);
        if (inner != null) {
            return new ValidateOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private LinkersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.servicelinker.ServiceLinkerManager manager() {
        return this.serviceManager;
    }
}
