// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicelinker.fluent.ConnectorsClient;
import com.azure.resourcemanager.servicelinker.fluent.models.ConfigurationResultInner;
import com.azure.resourcemanager.servicelinker.fluent.models.DryrunResourceInner;
import com.azure.resourcemanager.servicelinker.fluent.models.LinkerResourceInner;
import com.azure.resourcemanager.servicelinker.fluent.models.ValidateOperationResultInner;
import com.azure.resourcemanager.servicelinker.models.ConfigurationInfo;
import com.azure.resourcemanager.servicelinker.models.DryrunList;
import com.azure.resourcemanager.servicelinker.models.DryrunPatch;
import com.azure.resourcemanager.servicelinker.models.LinkerPatch;
import com.azure.resourcemanager.servicelinker.models.ResourceList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConnectorsClient.
 */
public final class ConnectorsClientImpl implements ConnectorsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConnectorsService service;

    /**
     * The service client containing this operation class.
     */
    private final ServiceLinkerManagementClientImpl client;

    /**
     * Initializes an instance of ConnectorsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConnectorsClientImpl(ServiceLinkerManagementClientImpl client) {
        this.service
            = RestProxy.create(ConnectorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceLinkerManagementClientConnectors to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceLinkerManagem")
    public interface ConnectorsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LinkerResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName,
            @BodyParam("application/json") LinkerResourceInner parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName, @BodyParam("application/json") LinkerPatch parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/generateConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationResultInner>> generateConfigurations(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName,
            @BodyParam("application/json") ConfigurationInfo parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/validate")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> validate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("connectorName") String connectorName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DryrunList>> listDryrun(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DryrunResourceInner>> getDryrun(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("dryrunName") String dryrunName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createDryrun(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("dryrunName") String dryrunName, @BodyParam("application/json") DryrunResourceInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateDryrun(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("dryrunName") String dryrunName, @BodyParam("application/json") DryrunPatch parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteDryrun(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @PathParam("dryrunName") String dryrunName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DryrunList>> listDryrunNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LinkerResourceInner>> listSinglePageAsync(String resourceGroupName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, accept, context))
            .<PagedResponse<LinkerResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LinkerResourceInner>> listSinglePageAsync(String resourceGroupName, String location,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, location, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LinkerResourceInner> listAsync(String resourceGroupName, String location) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, location),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LinkerResourceInner> listAsync(String resourceGroupName, String location, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, location, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LinkerResourceInner> list(String resourceGroupName, String location) {
        return new PagedIterable<>(listAsync(resourceGroupName, location));
    }

    /**
     * Returns list of connector which connects to the resource, which supports to config the target service during the
     * resource provision.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LinkerResourceInner> list(String resourceGroupName, String location, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, location, context));
    }

    /**
     * Returns Connector resource for a given name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinkerResourceInner>> getWithResponseAsync(String resourceGroupName, String location,
        String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, connectorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns Connector resource for a given name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinkerResourceInner>> getWithResponseAsync(String resourceGroupName, String location,
        String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, location, connectorName, accept, context);
    }

    /**
     * Returns Connector resource for a given name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinkerResourceInner> getAsync(String resourceGroupName, String location, String connectorName) {
        return getWithResponseAsync(resourceGroupName, location, connectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns Connector resource for a given name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LinkerResourceInner> getWithResponse(String resourceGroupName, String location,
        String connectorName, Context context) {
        return getWithResponseAsync(resourceGroupName, location, connectorName, context).block();
    }

    /**
     * Returns Connector resource for a given name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkerResourceInner get(String resourceGroupName, String location, String connectorName) {
        return getWithResponse(resourceGroupName, location, connectorName, Context.NONE).getValue();
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, connectorName, parameters, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, connectorName, parameters, accept, context);
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LinkerResourceInner>, LinkerResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String location, String connectorName, LinkerResourceInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, location, connectorName, parameters);
        return this.client.<LinkerResourceInner, LinkerResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            LinkerResourceInner.class, LinkerResourceInner.class, this.client.getContext());
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LinkerResourceInner>, LinkerResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String location, String connectorName, LinkerResourceInner parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, location, connectorName, parameters, context);
        return this.client.<LinkerResourceInner, LinkerResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            LinkerResourceInner.class, LinkerResourceInner.class, context);
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LinkerResourceInner>, LinkerResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String location, String connectorName, LinkerResourceInner parameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, location, connectorName, parameters).getSyncPoller();
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LinkerResourceInner>, LinkerResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String location, String connectorName, LinkerResourceInner parameters,
        Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, location, connectorName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinkerResourceInner> createOrUpdateAsync(String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, location, connectorName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinkerResourceInner> createOrUpdateAsync(String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, location, connectorName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkerResourceInner createOrUpdate(String resourceGroupName, String location, String connectorName,
        LinkerResourceInner parameters) {
        return createOrUpdateAsync(resourceGroupName, location, connectorName, parameters).block();
    }

    /**
     * Create or update Connector resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkerResourceInner createOrUpdate(String resourceGroupName, String location, String connectorName,
        LinkerResourceInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, location, connectorName, parameters, context).block();
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String location,
        String connectorName, LinkerPatch parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, connectorName, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String location,
        String connectorName, LinkerPatch parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, location, connectorName, parameters, accept, context);
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LinkerResourceInner>, LinkerResourceInner> beginUpdateAsync(String resourceGroupName,
        String location, String connectorName, LinkerPatch parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, location, connectorName, parameters);
        return this.client.<LinkerResourceInner, LinkerResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            LinkerResourceInner.class, LinkerResourceInner.class, this.client.getContext());
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LinkerResourceInner>, LinkerResourceInner> beginUpdateAsync(String resourceGroupName,
        String location, String connectorName, LinkerPatch parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, location, connectorName, parameters, context);
        return this.client.<LinkerResourceInner, LinkerResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            LinkerResourceInner.class, LinkerResourceInner.class, context);
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LinkerResourceInner>, LinkerResourceInner> beginUpdate(String resourceGroupName,
        String location, String connectorName, LinkerPatch parameters) {
        return this.beginUpdateAsync(resourceGroupName, location, connectorName, parameters).getSyncPoller();
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LinkerResourceInner>, LinkerResourceInner> beginUpdate(String resourceGroupName,
        String location, String connectorName, LinkerPatch parameters, Context context) {
        return this.beginUpdateAsync(resourceGroupName, location, connectorName, parameters, context).getSyncPoller();
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinkerResourceInner> updateAsync(String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters) {
        return beginUpdateAsync(resourceGroupName, location, connectorName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinkerResourceInner> updateAsync(String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters, Context context) {
        return beginUpdateAsync(resourceGroupName, location, connectorName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkerResourceInner update(String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters) {
        return updateAsync(resourceGroupName, location, connectorName, parameters).block();
    }

    /**
     * Operation to update an existing Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connector details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return linker of source and target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkerResourceInner update(String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters, Context context) {
        return updateAsync(resourceGroupName, location, connectorName, parameters, context).block();
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String location,
        String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, connectorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String location,
        String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, location, connectorName, accept, context);
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String location,
        String connectorName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, location, connectorName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String location,
        String connectorName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, location, connectorName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String location,
        String connectorName) {
        return this.beginDeleteAsync(resourceGroupName, location, connectorName).getSyncPoller();
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String location,
        String connectorName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, location, connectorName, context).getSyncPoller();
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String location, String connectorName) {
        return beginDeleteAsync(resourceGroupName, location, connectorName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String location, String connectorName, Context context) {
        return beginDeleteAsync(resourceGroupName, location, connectorName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String location, String connectorName) {
        deleteAsync(resourceGroupName, location, connectorName).block();
    }

    /**
     * Delete a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String location, String connectorName, Context context) {
        deleteAsync(resourceGroupName, location, connectorName, context).block();
    }

    /**
     * Generate configurations for a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connection Info, including format, secret store, etc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configurations for source resource, include appSettings, connectionString and serviceBindings along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationResultInner>> generateConfigurationsWithResponseAsync(String resourceGroupName,
        String location, String connectorName, ConfigurationInfo parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateConfigurations(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, location,
                connectorName, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate configurations for a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connection Info, including format, secret store, etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configurations for source resource, include appSettings, connectionString and serviceBindings along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationResultInner>> generateConfigurationsWithResponseAsync(String resourceGroupName,
        String location, String connectorName, ConfigurationInfo parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.generateConfigurations(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, connectorName, parameters, accept, context);
    }

    /**
     * Generate configurations for a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configurations for source resource, include appSettings, connectionString and serviceBindings on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationResultInner> generateConfigurationsAsync(String resourceGroupName, String location,
        String connectorName) {
        final ConfigurationInfo parameters = null;
        return generateConfigurationsWithResponseAsync(resourceGroupName, location, connectorName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Generate configurations for a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param parameters Connection Info, including format, secret store, etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configurations for source resource, include appSettings, connectionString and serviceBindings along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationResultInner> generateConfigurationsWithResponse(String resourceGroupName,
        String location, String connectorName, ConfigurationInfo parameters, Context context) {
        return generateConfigurationsWithResponseAsync(resourceGroupName, location, connectorName, parameters, context)
            .block();
    }

    /**
     * Generate configurations for a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configurations for source resource, include appSettings, connectionString and serviceBindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationResultInner generateConfigurations(String resourceGroupName, String location,
        String connectorName) {
        final ConfigurationInfo parameters = null;
        return generateConfigurationsWithResponse(resourceGroupName, location, connectorName, parameters, Context.NONE)
            .getValue();
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> validateWithResponseAsync(String resourceGroupName, String location,
        String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.validate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, connectorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> validateWithResponseAsync(String resourceGroupName, String location,
        String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.validate(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, location, connectorName, accept, context);
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ValidateOperationResultInner>, ValidateOperationResultInner>
        beginValidateAsync(String resourceGroupName, String location, String connectorName) {
        Mono<Response<Flux<ByteBuffer>>> mono = validateWithResponseAsync(resourceGroupName, location, connectorName);
        return this.client.<ValidateOperationResultInner, ValidateOperationResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), ValidateOperationResultInner.class, ValidateOperationResultInner.class,
            this.client.getContext());
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ValidateOperationResultInner>, ValidateOperationResultInner>
        beginValidateAsync(String resourceGroupName, String location, String connectorName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = validateWithResponseAsync(resourceGroupName, location, connectorName, context);
        return this.client.<ValidateOperationResultInner, ValidateOperationResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), ValidateOperationResultInner.class, ValidateOperationResultInner.class,
            context);
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ValidateOperationResultInner>, ValidateOperationResultInner>
        beginValidate(String resourceGroupName, String location, String connectorName) {
        return this.beginValidateAsync(resourceGroupName, location, connectorName).getSyncPoller();
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ValidateOperationResultInner>, ValidateOperationResultInner>
        beginValidate(String resourceGroupName, String location, String connectorName, Context context) {
        return this.beginValidateAsync(resourceGroupName, location, connectorName, context).getSyncPoller();
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ValidateOperationResultInner> validateAsync(String resourceGroupName, String location,
        String connectorName) {
        return beginValidateAsync(resourceGroupName, location, connectorName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ValidateOperationResultInner> validateAsync(String resourceGroupName, String location,
        String connectorName, Context context) {
        return beginValidateAsync(resourceGroupName, location, connectorName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateOperationResultInner validate(String resourceGroupName, String location, String connectorName) {
        return validateAsync(resourceGroupName, location, connectorName).block();
    }

    /**
     * Validate a Connector.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param connectorName The name of the LinkerResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the validation operation result for a Linker.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateOperationResultInner validate(String resourceGroupName, String location, String connectorName,
        Context context) {
        return validateAsync(resourceGroupName, location, connectorName, context).block();
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DryrunResourceInner>> listDryrunSinglePageAsync(String resourceGroupName,
        String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, accept, context))
            .<PagedResponse<DryrunResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DryrunResourceInner>> listDryrunSinglePageAsync(String resourceGroupName,
        String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listDryrun(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, location, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DryrunResourceInner> listDryrunAsync(String resourceGroupName, String location) {
        return new PagedFlux<>(() -> listDryrunSinglePageAsync(resourceGroupName, location),
            nextLink -> listDryrunNextSinglePageAsync(nextLink));
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DryrunResourceInner> listDryrunAsync(String resourceGroupName, String location, Context context) {
        return new PagedFlux<>(() -> listDryrunSinglePageAsync(resourceGroupName, location, context),
            nextLink -> listDryrunNextSinglePageAsync(nextLink, context));
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DryrunResourceInner> listDryrun(String resourceGroupName, String location) {
        return new PagedIterable<>(listDryrunAsync(resourceGroupName, location));
    }

    /**
     * list dryrun jobs.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DryrunResourceInner> listDryrun(String resourceGroupName, String location, Context context) {
        return new PagedIterable<>(listDryrunAsync(resourceGroupName, location, context));
    }

    /**
     * get a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DryrunResourceInner>> getDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * get a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DryrunResourceInner>> getDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, accept, context);
    }

    /**
     * get a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DryrunResourceInner> getDryrunAsync(String resourceGroupName, String location, String dryrunName) {
        return getDryrunWithResponseAsync(resourceGroupName, location, dryrunName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * get a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DryrunResourceInner> getDryrunWithResponse(String resourceGroupName, String location,
        String dryrunName, Context context) {
        return getDryrunWithResponseAsync(resourceGroupName, location, dryrunName, context).block();
    }

    /**
     * get a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DryrunResourceInner getDryrun(String resourceGroupName, String location, String dryrunName) {
        return getDryrunWithResponse(resourceGroupName, location, dryrunName, Context.NONE).getValue();
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, DryrunResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, DryrunResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, parameters, accept, context);
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DryrunResourceInner>, DryrunResourceInner> beginCreateDryrunAsync(
        String resourceGroupName, String location, String dryrunName, DryrunResourceInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createDryrunWithResponseAsync(resourceGroupName, location, dryrunName, parameters);
        return this.client.<DryrunResourceInner, DryrunResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            DryrunResourceInner.class, DryrunResourceInner.class, this.client.getContext());
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DryrunResourceInner>, DryrunResourceInner> beginCreateDryrunAsync(
        String resourceGroupName, String location, String dryrunName, DryrunResourceInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createDryrunWithResponseAsync(resourceGroupName, location, dryrunName, parameters, context);
        return this.client.<DryrunResourceInner, DryrunResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            DryrunResourceInner.class, DryrunResourceInner.class, context);
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DryrunResourceInner>, DryrunResourceInner> beginCreateDryrun(String resourceGroupName,
        String location, String dryrunName, DryrunResourceInner parameters) {
        return this.beginCreateDryrunAsync(resourceGroupName, location, dryrunName, parameters).getSyncPoller();
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DryrunResourceInner>, DryrunResourceInner> beginCreateDryrun(String resourceGroupName,
        String location, String dryrunName, DryrunResourceInner parameters, Context context) {
        return this.beginCreateDryrunAsync(resourceGroupName, location, dryrunName, parameters, context)
            .getSyncPoller();
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DryrunResourceInner> createDryrunAsync(String resourceGroupName, String location, String dryrunName,
        DryrunResourceInner parameters) {
        return beginCreateDryrunAsync(resourceGroupName, location, dryrunName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DryrunResourceInner> createDryrunAsync(String resourceGroupName, String location, String dryrunName,
        DryrunResourceInner parameters, Context context) {
        return beginCreateDryrunAsync(resourceGroupName, location, dryrunName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DryrunResourceInner createDryrun(String resourceGroupName, String location, String dryrunName,
        DryrunResourceInner parameters) {
        return createDryrunAsync(resourceGroupName, location, dryrunName, parameters).block();
    }

    /**
     * create a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DryrunResourceInner createDryrun(String resourceGroupName, String location, String dryrunName,
        DryrunResourceInner parameters, Context context) {
        return createDryrunAsync(resourceGroupName, location, dryrunName, parameters, context).block();
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, DryrunPatch parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, DryrunPatch parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, parameters, accept, context);
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DryrunResourceInner>, DryrunResourceInner>
        beginUpdateDryrunAsync(String resourceGroupName, String location, String dryrunName, DryrunPatch parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateDryrunWithResponseAsync(resourceGroupName, location, dryrunName, parameters);
        return this.client.<DryrunResourceInner, DryrunResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            DryrunResourceInner.class, DryrunResourceInner.class, this.client.getContext());
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DryrunResourceInner>, DryrunResourceInner> beginUpdateDryrunAsync(
        String resourceGroupName, String location, String dryrunName, DryrunPatch parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateDryrunWithResponseAsync(resourceGroupName, location, dryrunName, parameters, context);
        return this.client.<DryrunResourceInner, DryrunResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            DryrunResourceInner.class, DryrunResourceInner.class, context);
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DryrunResourceInner>, DryrunResourceInner> beginUpdateDryrun(String resourceGroupName,
        String location, String dryrunName, DryrunPatch parameters) {
        return this.beginUpdateDryrunAsync(resourceGroupName, location, dryrunName, parameters).getSyncPoller();
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DryrunResourceInner>, DryrunResourceInner> beginUpdateDryrun(String resourceGroupName,
        String location, String dryrunName, DryrunPatch parameters, Context context) {
        return this.beginUpdateDryrunAsync(resourceGroupName, location, dryrunName, parameters, context)
            .getSyncPoller();
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DryrunResourceInner> updateDryrunAsync(String resourceGroupName, String location, String dryrunName,
        DryrunPatch parameters) {
        return beginUpdateDryrunAsync(resourceGroupName, location, dryrunName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DryrunResourceInner> updateDryrunAsync(String resourceGroupName, String location, String dryrunName,
        DryrunPatch parameters, Context context) {
        return beginUpdateDryrunAsync(resourceGroupName, location, dryrunName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DryrunResourceInner updateDryrun(String resourceGroupName, String location, String dryrunName,
        DryrunPatch parameters) {
        return updateDryrunAsync(resourceGroupName, location, dryrunName, parameters).block();
    }

    /**
     * update a dryrun job to do necessary check before actual creation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param parameters dryrun resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a dryrun job resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DryrunResourceInner updateDryrun(String resourceGroupName, String location, String dryrunName,
        DryrunPatch parameters, Context context) {
        return updateDryrunAsync(resourceGroupName, location, dryrunName, parameters, context).block();
    }

    /**
     * delete a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * delete a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteDryrunWithResponseAsync(String resourceGroupName, String location,
        String dryrunName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (dryrunName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dryrunName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteDryrun(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, location, dryrunName, accept, context);
    }

    /**
     * delete a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteDryrunAsync(String resourceGroupName, String location, String dryrunName) {
        return deleteDryrunWithResponseAsync(resourceGroupName, location, dryrunName).flatMap(ignored -> Mono.empty());
    }

    /**
     * delete a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDryrunWithResponse(String resourceGroupName, String location, String dryrunName,
        Context context) {
        return deleteDryrunWithResponseAsync(resourceGroupName, location, dryrunName, context).block();
    }

    /**
     * delete a dryrun job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param dryrunName The name of the DryrunResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDryrun(String resourceGroupName, String location, String dryrunName) {
        deleteDryrunWithResponse(resourceGroupName, location, dryrunName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LinkerResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<LinkerResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Linker along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LinkerResourceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DryrunResourceInner>> listDryrunNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDryrunNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DryrunResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of dryrun along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DryrunResourceInner>> listDryrunNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listDryrunNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
