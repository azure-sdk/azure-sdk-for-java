// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to the NFS protocol.
 */
@Fluent
public final class NfsProtocolProperties implements JsonSerializable<NfsProtocolProperties> {
    /*
     * Root squash defines how root users on clients are mapped to the NFS share.
     */
    private ShareRootSquash rootSquash;

    /**
     * Creates an instance of NfsProtocolProperties class.
     */
    public NfsProtocolProperties() {
    }

    /**
     * Get the rootSquash property: Root squash defines how root users on clients are mapped to the NFS share.
     * 
     * @return the rootSquash value.
     */
    public ShareRootSquash rootSquash() {
        return this.rootSquash;
    }

    /**
     * Set the rootSquash property: Root squash defines how root users on clients are mapped to the NFS share.
     * 
     * @param rootSquash the rootSquash value to set.
     * @return the NfsProtocolProperties object itself.
     */
    public NfsProtocolProperties withRootSquash(ShareRootSquash rootSquash) {
        this.rootSquash = rootSquash;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rootSquash", this.rootSquash == null ? null : this.rootSquash.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NfsProtocolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NfsProtocolProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NfsProtocolProperties.
     */
    public static NfsProtocolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NfsProtocolProperties deserializedNfsProtocolProperties = new NfsProtocolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rootSquash".equals(fieldName)) {
                    deserializedNfsProtocolProperties.rootSquash = ShareRootSquash.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNfsProtocolProperties;
        });
    }
}
