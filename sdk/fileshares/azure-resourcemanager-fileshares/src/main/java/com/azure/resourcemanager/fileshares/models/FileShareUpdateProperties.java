// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the FileShare.
 */
@Fluent
public final class FileShareUpdateProperties implements JsonSerializable<FileShareUpdateProperties> {
    /*
     * The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the
     * file share's bill is the provisioned storage, regardless of the amount of used storage.
     */
    private Integer provisionedStorageGiB;

    /*
     * The provisioned IO / sec of the share.
     */
    private Integer provisionedIOPerSec;

    /*
     * The provisioned throughput / sec of the share.
     */
    private Integer provisionedThroughputMiBPerSec;

    /*
     * Protocol settings specific NFS.
     */
    private NfsProtocolProperties nfsProtocolProperties;

    /*
     * The set of properties for control public access.
     */
    private PublicAccessProperties publicAccessProperties;

    /*
     * Gets or sets allow or disallow public network access to azure managed file share
     */
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of FileShareUpdateProperties class.
     */
    public FileShareUpdateProperties() {
    }

    /**
     * Get the provisionedStorageGiB property: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes
     * or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount
     * of used storage.
     * 
     * @return the provisionedStorageGiB value.
     */
    public Integer provisionedStorageGiB() {
        return this.provisionedStorageGiB;
    }

    /**
     * Set the provisionedStorageGiB property: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes
     * or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount
     * of used storage.
     * 
     * @param provisionedStorageGiB the provisionedStorageGiB value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withProvisionedStorageGiB(Integer provisionedStorageGiB) {
        this.provisionedStorageGiB = provisionedStorageGiB;
        return this;
    }

    /**
     * Get the provisionedIOPerSec property: The provisioned IO / sec of the share.
     * 
     * @return the provisionedIOPerSec value.
     */
    public Integer provisionedIOPerSec() {
        return this.provisionedIOPerSec;
    }

    /**
     * Set the provisionedIOPerSec property: The provisioned IO / sec of the share.
     * 
     * @param provisionedIOPerSec the provisionedIOPerSec value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withProvisionedIOPerSec(Integer provisionedIOPerSec) {
        this.provisionedIOPerSec = provisionedIOPerSec;
        return this;
    }

    /**
     * Get the provisionedThroughputMiBPerSec property: The provisioned throughput / sec of the share.
     * 
     * @return the provisionedThroughputMiBPerSec value.
     */
    public Integer provisionedThroughputMiBPerSec() {
        return this.provisionedThroughputMiBPerSec;
    }

    /**
     * Set the provisionedThroughputMiBPerSec property: The provisioned throughput / sec of the share.
     * 
     * @param provisionedThroughputMiBPerSec the provisionedThroughputMiBPerSec value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withProvisionedThroughputMiBPerSec(Integer provisionedThroughputMiBPerSec) {
        this.provisionedThroughputMiBPerSec = provisionedThroughputMiBPerSec;
        return this;
    }

    /**
     * Get the nfsProtocolProperties property: Protocol settings specific NFS.
     * 
     * @return the nfsProtocolProperties value.
     */
    public NfsProtocolProperties nfsProtocolProperties() {
        return this.nfsProtocolProperties;
    }

    /**
     * Set the nfsProtocolProperties property: Protocol settings specific NFS.
     * 
     * @param nfsProtocolProperties the nfsProtocolProperties value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withNfsProtocolProperties(NfsProtocolProperties nfsProtocolProperties) {
        this.nfsProtocolProperties = nfsProtocolProperties;
        return this;
    }

    /**
     * Get the publicAccessProperties property: The set of properties for control public access.
     * 
     * @return the publicAccessProperties value.
     */
    public PublicAccessProperties publicAccessProperties() {
        return this.publicAccessProperties;
    }

    /**
     * Set the publicAccessProperties property: The set of properties for control public access.
     * 
     * @param publicAccessProperties the publicAccessProperties value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withPublicAccessProperties(PublicAccessProperties publicAccessProperties) {
        this.publicAccessProperties = publicAccessProperties;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Gets or sets allow or disallow public network access to azure managed file
     * share.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Gets or sets allow or disallow public network access to azure managed file
     * share.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the FileShareUpdateProperties object itself.
     */
    public FileShareUpdateProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nfsProtocolProperties() != null) {
            nfsProtocolProperties().validate();
        }
        if (publicAccessProperties() != null) {
            publicAccessProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("provisionedStorageGiB", this.provisionedStorageGiB);
        jsonWriter.writeNumberField("provisionedIOPerSec", this.provisionedIOPerSec);
        jsonWriter.writeNumberField("provisionedThroughputMiBPerSec", this.provisionedThroughputMiBPerSec);
        jsonWriter.writeJsonField("nfsProtocolProperties", this.nfsProtocolProperties);
        jsonWriter.writeJsonField("publicAccessProperties", this.publicAccessProperties);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileShareUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileShareUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileShareUpdateProperties.
     */
    public static FileShareUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileShareUpdateProperties deserializedFileShareUpdateProperties = new FileShareUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisionedStorageGiB".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.provisionedStorageGiB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedIOPerSec".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.provisionedIOPerSec = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedThroughputMiBPerSec".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.provisionedThroughputMiBPerSec
                        = reader.getNullable(JsonReader::getInt);
                } else if ("nfsProtocolProperties".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.nfsProtocolProperties
                        = NfsProtocolProperties.fromJson(reader);
                } else if ("publicAccessProperties".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.publicAccessProperties
                        = PublicAccessProperties.fromJson(reader);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedFileShareUpdateProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileShareUpdateProperties;
        });
    }
}
