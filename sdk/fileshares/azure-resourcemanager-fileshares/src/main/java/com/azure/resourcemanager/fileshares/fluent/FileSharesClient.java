// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.fileshares.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.fileshares.fluent.models.FileShareInner;
import com.azure.resourcemanager.fileshares.fluent.models.FileShareSnapshotInner;
import com.azure.resourcemanager.fileshares.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.fileshares.models.FileShareSnapshotUpdate;
import com.azure.resourcemanager.fileshares.models.FileShareUpdate;

/**
 * An instance of this class provides access to all the operations defined in FileSharesClient.
 */
public interface FileSharesClient {
    /**
     * Get a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FileShareInner> getByResourceGroupWithResponse(String resourceGroupName, String resourceName,
        Context context);

    /**
     * Get a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareInner getByResourceGroup(String resourceGroupName, String resourceName);

    /**
     * Create or update a file share.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of file share resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareInner>, FileShareInner> beginCreateOrUpdate(String resourceGroupName,
        String resourceName, FileShareInner resource);

    /**
     * Create or update a file share.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of file share resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareInner>, FileShareInner> beginCreateOrUpdate(String resourceGroupName,
        String resourceName, FileShareInner resource, Context context);

    /**
     * Create or update a file share.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file share resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareInner createOrUpdate(String resourceGroupName, String resourceName, FileShareInner resource);

    /**
     * Create or update a file share.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file share resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareInner createOrUpdate(String resourceGroupName, String resourceName, FileShareInner resource,
        Context context);

    /**
     * Update a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of file share resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareInner>, FileShareInner> beginUpdate(String resourceGroupName, String resourceName,
        FileShareUpdate properties);

    /**
     * Update a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of file share resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareInner>, FileShareInner> beginUpdate(String resourceGroupName, String resourceName,
        FileShareUpdate properties, Context context);

    /**
     * Update a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file share resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareInner update(String resourceGroupName, String resourceName, FileShareUpdate properties);

    /**
     * Update a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file share resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareInner update(String resourceGroupName, String resourceName, FileShareUpdate properties, Context context);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName, Context context);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName, Context context);

    /**
     * List FileShare resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareInner> list();

    /**
     * List FileShare resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareInner> list(Context context);

    /**
     * List FileShare resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareInner> listByResourceGroup(String resourceGroupName);

    /**
     * List FileShare resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Implements local CheckNameAvailability operations.
     * 
     * @param location The name of the Azure region.
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResponseInner> checkNameAvailabilityWithResponse(String location,
        CheckNameAvailabilityRequest body, Context context);

    /**
     * Implements local CheckNameAvailability operations.
     * 
     * @param location The name of the Azure region.
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResponseInner checkNameAvailability(String location, CheckNameAvailabilityRequest body);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FileShareSnapshotInner> getFileShareSnapshotWithResponse(String resourceGroupName, String resourceName,
        String name, Context context);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareSnapshotInner getFileShareSnapshot(String resourceGroupName, String resourceName, String name);

    /**
     * Create a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileShareSnapshot resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FileShareSnapshotInner> createOrUpdateFileShareSnapshotWithResponse(String resourceGroupName,
        String resourceName, String name, FileShareSnapshotInner resource, Context context);

    /**
     * Create a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileShareSnapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareSnapshotInner createOrUpdateFileShareSnapshot(String resourceGroupName, String resourceName, String name,
        FileShareSnapshotInner resource);

    /**
     * Update a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fileShareSnapshot resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareSnapshotInner>, FileShareSnapshotInner> beginUpdateFileShareSnapshot(
        String resourceGroupName, String resourceName, String name, FileShareSnapshotUpdate properties);

    /**
     * Update a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fileShareSnapshot resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FileShareSnapshotInner>, FileShareSnapshotInner> beginUpdateFileShareSnapshot(
        String resourceGroupName, String resourceName, String name, FileShareSnapshotUpdate properties,
        Context context);

    /**
     * Update a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileShareSnapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareSnapshotInner updateFileShareSnapshot(String resourceGroupName, String resourceName, String name,
        FileShareSnapshotUpdate properties);

    /**
     * Update a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileShareSnapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileShareSnapshotInner updateFileShareSnapshot(String resourceGroupName, String resourceName, String name,
        FileShareSnapshotUpdate properties, Context context);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteFileShareSnapshot(String resourceGroupName, String resourceName,
        String name);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteFileShareSnapshot(String resourceGroupName, String resourceName,
        String name, Context context);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name, Context context);

    /**
     * List FileShareSnapshot by FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShareSnapshot list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareSnapshotInner> listByFileShare(String resourceGroupName, String resourceName);

    /**
     * List FileShareSnapshot by FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShareSnapshot list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FileShareSnapshotInner> listByFileShare(String resourceGroupName, String resourceName,
        Context context);
}
