// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fileshares.fluent.FileSharesClient;
import com.azure.resourcemanager.fileshares.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.fileshares.fluent.models.FileShareInner;
import com.azure.resourcemanager.fileshares.fluent.models.FileShareSnapshotInner;
import com.azure.resourcemanager.fileshares.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.fileshares.models.CheckNameAvailabilityResponse;
import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.FileShareSnapshot;
import com.azure.resourcemanager.fileshares.models.FileShares;

public final class FileSharesImpl implements FileShares {
    private static final ClientLogger LOGGER = new ClientLogger(FileSharesImpl.class);

    private final FileSharesClient innerClient;

    private final com.azure.resourcemanager.fileshares.FileSharesManager serviceManager;

    public FileSharesImpl(FileSharesClient innerClient,
        com.azure.resourcemanager.fileshares.FileSharesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FileShare> getByResourceGroupWithResponse(String resourceGroupName, String resourceName,
        Context context) {
        Response<FileShareInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FileShareImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FileShare getByResourceGroup(String resourceGroupName, String resourceName) {
        FileShareInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceName);
        if (inner != null) {
            return new FileShareImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName);
    }

    public void delete(String resourceGroupName, String resourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, context);
    }

    public PagedIterable<FileShare> list() {
        PagedIterable<FileShareInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareImpl(inner1, this.manager()));
    }

    public PagedIterable<FileShare> list(Context context) {
        PagedIterable<FileShareInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareImpl(inner1, this.manager()));
    }

    public PagedIterable<FileShare> listByResourceGroup(String resourceGroupName) {
        PagedIterable<FileShareInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareImpl(inner1, this.manager()));
    }

    public PagedIterable<FileShare> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<FileShareInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareImpl(inner1, this.manager()));
    }

    public Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(String location,
        CheckNameAvailabilityRequest body, Context context) {
        Response<CheckNameAvailabilityResponseInner> inner
            = this.serviceClient().checkNameAvailabilityWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckNameAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResponse checkNameAvailability(String location, CheckNameAvailabilityRequest body) {
        CheckNameAvailabilityResponseInner inner = this.serviceClient().checkNameAvailability(location, body);
        if (inner != null) {
            return new CheckNameAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FileShareSnapshot> getFileShareSnapshotWithResponse(String resourceGroupName, String resourceName,
        String name, Context context) {
        Response<FileShareSnapshotInner> inner
            = this.serviceClient().getFileShareSnapshotWithResponse(resourceGroupName, resourceName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FileShareSnapshotImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FileShareSnapshot getFileShareSnapshot(String resourceGroupName, String resourceName, String name) {
        FileShareSnapshotInner inner = this.serviceClient().getFileShareSnapshot(resourceGroupName, resourceName, name);
        if (inner != null) {
            return new FileShareSnapshotImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name) {
        this.serviceClient().deleteFileShareSnapshot(resourceGroupName, resourceName, name);
    }

    public void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name, Context context) {
        this.serviceClient().deleteFileShareSnapshot(resourceGroupName, resourceName, name, context);
    }

    public PagedIterable<FileShareSnapshot> listByFileShare(String resourceGroupName, String resourceName) {
        PagedIterable<FileShareSnapshotInner> inner
            = this.serviceClient().listByFileShare(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareSnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<FileShareSnapshot> listByFileShare(String resourceGroupName, String resourceName,
        Context context) {
        PagedIterable<FileShareSnapshotInner> inner
            = this.serviceClient().listByFileShare(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FileShareSnapshotImpl(inner1, this.manager()));
    }

    public FileShare getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE).getValue();
    }

    public Response<FileShare> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    public FileShareSnapshot getFileShareSnapshotById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "fileShareSnapshots");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShareSnapshots'.", id)));
        }
        return this.getFileShareSnapshotWithResponse(resourceGroupName, resourceName, name, Context.NONE).getValue();
    }

    public Response<FileShareSnapshot> getFileShareSnapshotByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "fileShareSnapshots");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShareSnapshots'.", id)));
        }
        return this.getFileShareSnapshotWithResponse(resourceGroupName, resourceName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        this.delete(resourceGroupName, resourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        this.delete(resourceGroupName, resourceName, context);
    }

    public void deleteFileShareSnapshotById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "fileShareSnapshots");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShareSnapshots'.", id)));
        }
        this.deleteFileShareSnapshot(resourceGroupName, resourceName, name, Context.NONE);
    }

    public void deleteFileShareSnapshotByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "fileShares");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShares'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "fileShareSnapshots");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fileShareSnapshots'.", id)));
        }
        this.deleteFileShareSnapshot(resourceGroupName, resourceName, name, context);
    }

    private FileSharesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fileshares.FileSharesManager manager() {
        return this.serviceManager;
    }

    public FileShareImpl define(String name) {
        return new FileShareImpl(name, this.manager());
    }

    public FileShareSnapshotImpl defineFileShareSnapshot(String name) {
        return new FileShareSnapshotImpl(name, this.manager());
    }
}
