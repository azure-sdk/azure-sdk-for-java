// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * File share properties.
 */
@Fluent
public final class FileShareProperties implements JsonSerializable<FileShareProperties> {
    /*
     * The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in
     * their operating system.
     */
    private String mountName;

    /*
     * The host name of the file share.
     */
    private String hostName;

    /*
     * The storage media tier of the file share.
     */
    private MediaTier mediaTier;

    /*
     * The chosen redundancy level of the file share.
     */
    private Redundancy redundancy;

    /*
     * The file sharing protocol for this file share.
     */
    private Protocol protocol;

    /*
     * The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the
     * file share's bill is the provisioned storage, regardless of the amount of used storage.
     */
    private Integer provisionedStorageGiB;

    /*
     * A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced.
     */
    private OffsetDateTime provisionedStorageNextAllowedDowngrade;

    /*
     * The provisioned IO / sec of the share.
     */
    private Integer provisionedIOPerSec;

    /*
     * A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced.
     */
    private OffsetDateTime provisionedIOPerSecNextAllowedDowngrade;

    /*
     * The provisioned throughput / sec of the share.
     */
    private Integer provisionedThroughputMiBPerSec;

    /*
     * A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced.
     */
    private OffsetDateTime provisionedThroughputNextAllowedDowngrade;

    /*
     * Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of
     * time, depending on the burst credits available for your share.
     */
    private Integer includedBurstIOPerSec;

    /*
     * Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS
     * provisioning level.
     */
    private Long maxBurstIOPerSecCredits;

    /*
     * Protocol settings specific NFS.
     */
    private NfsProtocolProperties nfsProtocolProperties;

    /*
     * The set of properties for control public access.
     */
    private PublicAccessProperties publicAccessProperties;

    /*
     * The status of the last operation.
     */
    private FileShareProvisioningState provisioningState;

    /*
     * Gets or sets allow or disallow public network access to azure managed file share
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The list of associated private endpoint connections.
     */
    private List<PrivateEndpointConnection> privateEndpointConnections;

    /**
     * Creates an instance of FileShareProperties class.
     */
    public FileShareProperties() {
    }

    /**
     * Get the mountName property: The name of the file share as seen by the end user when mounting the share, such as
     * in a URI or UNC format in their operating system.
     * 
     * @return the mountName value.
     */
    public String mountName() {
        return this.mountName;
    }

    /**
     * Set the mountName property: The name of the file share as seen by the end user when mounting the share, such as
     * in a URI or UNC format in their operating system.
     * 
     * @param mountName the mountName value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withMountName(String mountName) {
        this.mountName = mountName;
        return this;
    }

    /**
     * Get the hostName property: The host name of the file share.
     * 
     * @return the hostName value.
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * Get the mediaTier property: The storage media tier of the file share.
     * 
     * @return the mediaTier value.
     */
    public MediaTier mediaTier() {
        return this.mediaTier;
    }

    /**
     * Set the mediaTier property: The storage media tier of the file share.
     * 
     * @param mediaTier the mediaTier value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withMediaTier(MediaTier mediaTier) {
        this.mediaTier = mediaTier;
        return this;
    }

    /**
     * Get the redundancy property: The chosen redundancy level of the file share.
     * 
     * @return the redundancy value.
     */
    public Redundancy redundancy() {
        return this.redundancy;
    }

    /**
     * Set the redundancy property: The chosen redundancy level of the file share.
     * 
     * @param redundancy the redundancy value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withRedundancy(Redundancy redundancy) {
        this.redundancy = redundancy;
        return this;
    }

    /**
     * Get the protocol property: The file sharing protocol for this file share.
     * 
     * @return the protocol value.
     */
    public Protocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The file sharing protocol for this file share.
     * 
     * @param protocol the protocol value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withProtocol(Protocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the provisionedStorageGiB property: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes
     * or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount
     * of used storage.
     * 
     * @return the provisionedStorageGiB value.
     */
    public Integer provisionedStorageGiB() {
        return this.provisionedStorageGiB;
    }

    /**
     * Set the provisionedStorageGiB property: The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes
     * or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount
     * of used storage.
     * 
     * @param provisionedStorageGiB the provisionedStorageGiB value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withProvisionedStorageGiB(Integer provisionedStorageGiB) {
        this.provisionedStorageGiB = provisionedStorageGiB;
        return this;
    }

    /**
     * Get the provisionedStorageNextAllowedDowngrade property: A date/time value that specifies when the provisioned
     * storage for the file share is permitted to be reduced.
     * 
     * @return the provisionedStorageNextAllowedDowngrade value.
     */
    public OffsetDateTime provisionedStorageNextAllowedDowngrade() {
        return this.provisionedStorageNextAllowedDowngrade;
    }

    /**
     * Get the provisionedIOPerSec property: The provisioned IO / sec of the share.
     * 
     * @return the provisionedIOPerSec value.
     */
    public Integer provisionedIOPerSec() {
        return this.provisionedIOPerSec;
    }

    /**
     * Set the provisionedIOPerSec property: The provisioned IO / sec of the share.
     * 
     * @param provisionedIOPerSec the provisionedIOPerSec value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withProvisionedIOPerSec(Integer provisionedIOPerSec) {
        this.provisionedIOPerSec = provisionedIOPerSec;
        return this;
    }

    /**
     * Get the provisionedIOPerSecNextAllowedDowngrade property: A date/time value that specifies when the provisioned
     * IOPS for the file share is permitted to be reduced.
     * 
     * @return the provisionedIOPerSecNextAllowedDowngrade value.
     */
    public OffsetDateTime provisionedIOPerSecNextAllowedDowngrade() {
        return this.provisionedIOPerSecNextAllowedDowngrade;
    }

    /**
     * Get the provisionedThroughputMiBPerSec property: The provisioned throughput / sec of the share.
     * 
     * @return the provisionedThroughputMiBPerSec value.
     */
    public Integer provisionedThroughputMiBPerSec() {
        return this.provisionedThroughputMiBPerSec;
    }

    /**
     * Set the provisionedThroughputMiBPerSec property: The provisioned throughput / sec of the share.
     * 
     * @param provisionedThroughputMiBPerSec the provisionedThroughputMiBPerSec value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withProvisionedThroughputMiBPerSec(Integer provisionedThroughputMiBPerSec) {
        this.provisionedThroughputMiBPerSec = provisionedThroughputMiBPerSec;
        return this;
    }

    /**
     * Get the provisionedThroughputNextAllowedDowngrade property: A date/time value that specifies when the provisioned
     * throughput for the file share is permitted to be reduced.
     * 
     * @return the provisionedThroughputNextAllowedDowngrade value.
     */
    public OffsetDateTime provisionedThroughputNextAllowedDowngrade() {
        return this.provisionedThroughputNextAllowedDowngrade;
    }

    /**
     * Get the includedBurstIOPerSec property: Burst IOPS are extra buffer IOPS enabling you to consume more than your
     * provisioned IOPS for a short period of time, depending on the burst credits available for your share.
     * 
     * @return the includedBurstIOPerSec value.
     */
    public Integer includedBurstIOPerSec() {
        return this.includedBurstIOPerSec;
    }

    /**
     * Get the maxBurstIOPerSecCredits property: Max burst IOPS credits shows the maximum number of burst credits the
     * share can have at the current IOPS provisioning level.
     * 
     * @return the maxBurstIOPerSecCredits value.
     */
    public Long maxBurstIOPerSecCredits() {
        return this.maxBurstIOPerSecCredits;
    }

    /**
     * Get the nfsProtocolProperties property: Protocol settings specific NFS.
     * 
     * @return the nfsProtocolProperties value.
     */
    public NfsProtocolProperties nfsProtocolProperties() {
        return this.nfsProtocolProperties;
    }

    /**
     * Set the nfsProtocolProperties property: Protocol settings specific NFS.
     * 
     * @param nfsProtocolProperties the nfsProtocolProperties value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withNfsProtocolProperties(NfsProtocolProperties nfsProtocolProperties) {
        this.nfsProtocolProperties = nfsProtocolProperties;
        return this;
    }

    /**
     * Get the publicAccessProperties property: The set of properties for control public access.
     * 
     * @return the publicAccessProperties value.
     */
    public PublicAccessProperties publicAccessProperties() {
        return this.publicAccessProperties;
    }

    /**
     * Set the publicAccessProperties property: The set of properties for control public access.
     * 
     * @param publicAccessProperties the publicAccessProperties value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withPublicAccessProperties(PublicAccessProperties publicAccessProperties) {
        this.publicAccessProperties = publicAccessProperties;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public FileShareProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicNetworkAccess property: Gets or sets allow or disallow public network access to azure managed file
     * share.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Gets or sets allow or disallow public network access to azure managed file
     * share.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the FileShareProperties object itself.
     */
    public FileShareProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The list of associated private endpoint connections.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nfsProtocolProperties() != null) {
            nfsProtocolProperties().validate();
        }
        if (publicAccessProperties() != null) {
            publicAccessProperties().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mountName", this.mountName);
        jsonWriter.writeStringField("mediaTier", this.mediaTier == null ? null : this.mediaTier.toString());
        jsonWriter.writeStringField("redundancy", this.redundancy == null ? null : this.redundancy.toString());
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeNumberField("provisionedStorageGiB", this.provisionedStorageGiB);
        jsonWriter.writeNumberField("provisionedIOPerSec", this.provisionedIOPerSec);
        jsonWriter.writeNumberField("provisionedThroughputMiBPerSec", this.provisionedThroughputMiBPerSec);
        jsonWriter.writeJsonField("nfsProtocolProperties", this.nfsProtocolProperties);
        jsonWriter.writeJsonField("publicAccessProperties", this.publicAccessProperties);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileShareProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileShareProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileShareProperties.
     */
    public static FileShareProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileShareProperties deserializedFileShareProperties = new FileShareProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mountName".equals(fieldName)) {
                    deserializedFileShareProperties.mountName = reader.getString();
                } else if ("hostName".equals(fieldName)) {
                    deserializedFileShareProperties.hostName = reader.getString();
                } else if ("mediaTier".equals(fieldName)) {
                    deserializedFileShareProperties.mediaTier = MediaTier.fromString(reader.getString());
                } else if ("redundancy".equals(fieldName)) {
                    deserializedFileShareProperties.redundancy = Redundancy.fromString(reader.getString());
                } else if ("protocol".equals(fieldName)) {
                    deserializedFileShareProperties.protocol = Protocol.fromString(reader.getString());
                } else if ("provisionedStorageGiB".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedStorageGiB = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedStorageNextAllowedDowngrade".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedStorageNextAllowedDowngrade = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisionedIOPerSec".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedIOPerSec = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedIOPerSecNextAllowedDowngrade".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedIOPerSecNextAllowedDowngrade = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisionedThroughputMiBPerSec".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedThroughputMiBPerSec
                        = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedThroughputNextAllowedDowngrade".equals(fieldName)) {
                    deserializedFileShareProperties.provisionedThroughputNextAllowedDowngrade = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("includedBurstIOPerSec".equals(fieldName)) {
                    deserializedFileShareProperties.includedBurstIOPerSec = reader.getNullable(JsonReader::getInt);
                } else if ("maxBurstIOPerSecCredits".equals(fieldName)) {
                    deserializedFileShareProperties.maxBurstIOPerSecCredits = reader.getNullable(JsonReader::getLong);
                } else if ("nfsProtocolProperties".equals(fieldName)) {
                    deserializedFileShareProperties.nfsProtocolProperties = NfsProtocolProperties.fromJson(reader);
                } else if ("publicAccessProperties".equals(fieldName)) {
                    deserializedFileShareProperties.publicAccessProperties = PublicAccessProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFileShareProperties.provisioningState
                        = FileShareProvisioningState.fromString(reader.getString());
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedFileShareProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnection> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnection.fromJson(reader1));
                    deserializedFileShareProperties.privateEndpointConnections = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileShareProperties;
        });
    }
}
