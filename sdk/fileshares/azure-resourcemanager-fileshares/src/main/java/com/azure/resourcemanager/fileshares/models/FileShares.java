// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of FileShares.
 */
public interface FileShares {
    /**
     * Get a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare along with {@link Response}.
     */
    Response<FileShare> getByResourceGroupWithResponse(String resourceGroupName, String resourceName, Context context);

    /**
     * Get a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare.
     */
    FileShare getByResourceGroup(String resourceGroupName, String resourceName);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String resourceName);

    /**
     * Delete a FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String resourceName, Context context);

    /**
     * List FileShare resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShare> list();

    /**
     * List FileShare resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShare> list(Context context);

    /**
     * List FileShare resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShare> listByResourceGroup(String resourceGroupName);

    /**
     * List FileShare resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShare list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShare> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Implements local CheckNameAvailability operations.
     * 
     * @param location The name of the Azure region.
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(String location,
        CheckNameAvailabilityRequest body, Context context);

    /**
     * Implements local CheckNameAvailability operations.
     * 
     * @param location The name of the Azure region.
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    CheckNameAvailabilityResponse checkNameAvailability(String location, CheckNameAvailabilityRequest body);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot along with {@link Response}.
     */
    Response<FileShareSnapshot> getFileShareSnapshotWithResponse(String resourceGroupName, String resourceName,
        String name, Context context);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot.
     */
    FileShareSnapshot getFileShareSnapshot(String resourceGroupName, String resourceName, String name);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param name The name of the FileShareSnapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteFileShareSnapshot(String resourceGroupName, String resourceName, String name, Context context);

    /**
     * List FileShareSnapshot by FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShareSnapshot list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShareSnapshot> listByFileShare(String resourceGroupName, String resourceName);

    /**
     * List FileShareSnapshot by FileShare.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The resource name of the file share, as seen by the administrator through Azure Resource
     * Manager.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FileShareSnapshot list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<FileShareSnapshot> listByFileShare(String resourceGroupName, String resourceName, Context context);

    /**
     * Get a FileShare.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare along with {@link Response}.
     */
    FileShare getById(String id);

    /**
     * Get a FileShare.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShare along with {@link Response}.
     */
    Response<FileShare> getByIdWithResponse(String id, Context context);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot along with {@link Response}.
     */
    FileShareSnapshot getFileShareSnapshotById(String id);

    /**
     * Get a FileShareSnapshot.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a FileShareSnapshot along with {@link Response}.
     */
    Response<FileShareSnapshot> getFileShareSnapshotByIdWithResponse(String id, Context context);

    /**
     * Delete a FileShare.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a FileShare.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteFileShareSnapshotById(String id);

    /**
     * Delete a FileShareSnapshot.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteFileShareSnapshotByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new FileShare resource.
     * 
     * @param name resource name.
     * @return the first stage of the new FileShare definition.
     */
    FileShare.DefinitionStages.Blank define(String name);

    /**
     * Begins definition for a new FileShareSnapshot resource.
     * 
     * @param name resource name.
     * @return the first stage of the new FileShareSnapshot definition.
     */
    FileShareSnapshot.DefinitionStages.Blank defineFileShareSnapshot(String name);
}
