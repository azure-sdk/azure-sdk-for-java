// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * FileShareSnapshot properties.
 */
@Fluent
public final class FileShareSnapshotProperties implements JsonSerializable<FileShareSnapshotProperties> {
    /*
     * The FileShareSnapshot time in UTC in string representation
     */
    private String snapshotTime;

    /*
     * The initiator of the FileShareSnapshot
     */
    private String initiatorId;

    /*
     * The metadata
     */
    private Map<String, String> metadata;

    /*
     * The status of the last operation.
     */
    private FileShareProvisioningState provisioningState;

    /**
     * Creates an instance of FileShareSnapshotProperties class.
     */
    public FileShareSnapshotProperties() {
    }

    /**
     * Get the snapshotTime property: The FileShareSnapshot time in UTC in string representation.
     * 
     * @return the snapshotTime value.
     */
    public String snapshotTime() {
        return this.snapshotTime;
    }

    /**
     * Get the initiatorId property: The initiator of the FileShareSnapshot.
     * 
     * @return the initiatorId value.
     */
    public String initiatorId() {
        return this.initiatorId;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the FileShareSnapshotProperties object itself.
     */
    public FileShareSnapshotProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public FileShareProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileShareSnapshotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileShareSnapshotProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileShareSnapshotProperties.
     */
    public static FileShareSnapshotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileShareSnapshotProperties deserializedFileShareSnapshotProperties = new FileShareSnapshotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("snapshotTime".equals(fieldName)) {
                    deserializedFileShareSnapshotProperties.snapshotTime = reader.getString();
                } else if ("initiatorId".equals(fieldName)) {
                    deserializedFileShareSnapshotProperties.initiatorId = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedFileShareSnapshotProperties.metadata = metadata;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFileShareSnapshotProperties.provisioningState
                        = FileShareProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileShareSnapshotProperties;
        });
    }
}
