// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The set of properties for control public access.
 */
@Fluent
public final class PublicAccessProperties implements JsonSerializable<PublicAccessProperties> {
    /*
     * The allowed set of subnets when access is restricted.
     */
    private List<String> allowedSubnets;

    /**
     * Creates an instance of PublicAccessProperties class.
     */
    public PublicAccessProperties() {
    }

    /**
     * Get the allowedSubnets property: The allowed set of subnets when access is restricted.
     * 
     * @return the allowedSubnets value.
     */
    public List<String> allowedSubnets() {
        return this.allowedSubnets;
    }

    /**
     * Set the allowedSubnets property: The allowed set of subnets when access is restricted.
     * 
     * @param allowedSubnets the allowedSubnets value to set.
     * @return the PublicAccessProperties object itself.
     */
    public PublicAccessProperties withAllowedSubnets(List<String> allowedSubnets) {
        this.allowedSubnets = allowedSubnets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedSubnets", this.allowedSubnets,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicAccessProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicAccessProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PublicAccessProperties.
     */
    public static PublicAccessProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicAccessProperties deserializedPublicAccessProperties = new PublicAccessProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedSubnets".equals(fieldName)) {
                    List<String> allowedSubnets = reader.readArray(reader1 -> reader1.getString());
                    deserializedPublicAccessProperties.allowedSubnets = allowedSubnets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicAccessProperties;
        });
    }
}
