// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.FileShareUpdateProperties;
import com.azure.resourcemanager.fileshares.models.NfsProtocolProperties;
import com.azure.resourcemanager.fileshares.models.PublicAccessProperties;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FileShares Update.
 */
public final class FileSharesUpdateSamples {
    /*
     * x-ms-original-file: 2024-01-01-preview/FileShares_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: FileShares_Update_MaximumSet_Gen - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to FileSharesManager.
     */
    public static void fileSharesUpdateMaximumSetGenGeneratedByMaximumSetRule(
        com.azure.resourcemanager.fileshares.FileSharesManager manager) {
        FileShare resource = manager.fileShares()
            .getByResourceGroupWithResponse("rgfileshares", "testfileshare", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key9986", "fakeTokenPlaceholder"))
            .withProperties(new FileShareUpdateProperties().withProvisionedStorageGiB(20)
                .withProvisionedIOPerSec(19)
                .withProvisionedThroughputMiBPerSec(27)
                .withNfsProtocolProperties(new NfsProtocolProperties().withRootSquash(ShareRootSquash.NO_ROOT_SQUASH))
                .withPublicAccessProperties(
                    new PublicAccessProperties().withAllowedSubnets(Arrays.asList("pvjhqlnqfiubvbfcggthlpy")))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
