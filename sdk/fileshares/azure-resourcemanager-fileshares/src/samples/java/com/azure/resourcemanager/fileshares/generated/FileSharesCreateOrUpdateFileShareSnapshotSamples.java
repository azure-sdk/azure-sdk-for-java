// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.resourcemanager.fileshares.models.FileShareSnapshotProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FileShares CreateOrUpdateFileShareSnapshot.
 */
public final class FileSharesCreateOrUpdateFileShareSnapshotSamples {
    /*
     * x-ms-original-file: 2024-01-01-preview/FileShares_CreateOrUpdateFileShareSnapshot_MaximumSet_Gen.json
     */
    /**
     * Sample code: FileShares_CreateOrUpdateFileShareSnapshot_MaximumSet_Gen - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to FileSharesManager.
     */
    public static void fileSharesCreateOrUpdateFileShareSnapshotMaximumSetGenGeneratedByMaximumSetRule(
        com.azure.resourcemanager.fileshares.FileSharesManager manager) {
        manager.fileShares()
            .defineFileShareSnapshot("testfilesharesnapshot")
            .withExistingFileShare("rgfileshares", "testfileshare")
            .withProperties(new FileShareSnapshotProperties().withMetadata(mapOf("key5497", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
