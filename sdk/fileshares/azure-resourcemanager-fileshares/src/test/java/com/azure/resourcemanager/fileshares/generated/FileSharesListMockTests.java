// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fileshares.FileSharesManager;
import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.MediaTier;
import com.azure.resourcemanager.fileshares.models.Protocol;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.Redundancy;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FileSharesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"mountName\":\"yocf\",\"hostName\":\"ksymd\",\"mediaTier\":\"SSD\",\"redundancy\":\"Zone\",\"protocol\":\"NFS\",\"provisionedStorageGiB\":1173289641,\"provisionedStorageNextAllowedDowngrade\":\"2021-04-18T09:38:59Z\",\"provisionedIOPerSec\":2028632264,\"provisionedIOPerSecNextAllowedDowngrade\":\"2021-04-24T13:37:15Z\",\"provisionedThroughputMiBPerSec\":2120884016,\"provisionedThroughputNextAllowedDowngrade\":\"2021-08-01T07:23:31Z\",\"includedBurstIOPerSec\":10431278,\"maxBurstIOPerSecCredits\":5681518543466823728,\"nfsProtocolProperties\":{\"rootSquash\":\"AllSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"rvkdvjsllrm\",\"vdfwatkpn\"]},\"provisioningState\":\"Failed\",\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"truwiqzb\",\"j\",\"sovmyokacspkwl\",\"zdobpxjmflbvvnch\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"wwzjuqkhrsajiwku\",\"name\":\"foskghsauuimj\",\"type\":\"vxieduugidyj\"}]},\"location\":\"f\",\"tags\":{\"hslkevleggzf\":\"osvexcsonpclhoc\"},\"id\":\"u\",\"name\":\"fmvfaxkffeiit\",\"type\":\"lvmezyvshxmzsbbz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FileSharesManager manager = FileSharesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<FileShare> response = manager.fileShares().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("f", response.iterator().next().location());
        Assertions.assertEquals("osvexcsonpclhoc", response.iterator().next().tags().get("hslkevleggzf"));
        Assertions.assertEquals("yocf", response.iterator().next().properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, response.iterator().next().properties().mediaTier());
        Assertions.assertEquals(Redundancy.ZONE, response.iterator().next().properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, response.iterator().next().properties().protocol());
        Assertions.assertEquals(1173289641, response.iterator().next().properties().provisionedStorageGiB());
        Assertions.assertEquals(2028632264, response.iterator().next().properties().provisionedIOPerSec());
        Assertions.assertEquals(2120884016, response.iterator().next().properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ALL_SQUASH,
            response.iterator().next().properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("rvkdvjsllrm",
            response.iterator().next().properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
