// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.fileshares.fluent.models.FileShareInner;
import com.azure.resourcemanager.fileshares.models.FileShareProperties;
import com.azure.resourcemanager.fileshares.models.MediaTier;
import com.azure.resourcemanager.fileshares.models.NfsProtocolProperties;
import com.azure.resourcemanager.fileshares.models.Protocol;
import com.azure.resourcemanager.fileshares.models.PublicAccessProperties;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.Redundancy;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileShareInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareInner model = BinaryData.fromString(
            "{\"properties\":{\"mountName\":\"hq\",\"hostName\":\"gjxpybczmehmt\",\"mediaTier\":\"SSD\",\"redundancy\":\"Zone\",\"protocol\":\"NFS\",\"provisionedStorageGiB\":594038518,\"provisionedStorageNextAllowedDowngrade\":\"2021-05-31T07:59:53Z\",\"provisionedIOPerSec\":182731623,\"provisionedIOPerSecNextAllowedDowngrade\":\"2021-04-26T13:22:48Z\",\"provisionedThroughputMiBPerSec\":1332019186,\"provisionedThroughputNextAllowedDowngrade\":\"2021-04-19T05:48:54Z\",\"includedBurstIOPerSec\":318397575,\"maxBurstIOPerSecCredits\":7862936344800210145,\"nfsProtocolProperties\":{\"rootSquash\":\"RootSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"bhdxbm\",\"qioqjzehtbmu\",\"p\",\"wnoi\"]},\"provisioningState\":\"Provisioning\",\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"oqijgkdmbpaz\",\"obcu\"],\"privateEndpoint\":{\"id\":\"znrb\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"jnqglhqgnu\",\"actionsRequired\":\"oo\"},\"provisioningState\":\"Creating\"},\"id\":\"fsqesaagdfmglzlh\",\"name\":\"xrifkwmrvkts\",\"type\":\"zntocipaouajps\"},{\"properties\":{\"groupIds\":[\"poyfdkfogkn\",\"gjofjd\"],\"privateEndpoint\":{\"id\":\"s\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"pewnw\",\"actionsRequired\":\"itjz\"},\"provisioningState\":\"Creating\"},\"id\":\"sarhmofc\",\"name\":\"hs\",\"type\":\"yurkdtmlxhekuksj\"},{\"properties\":{\"groupIds\":[\"cdm\"],\"privateEndpoint\":{\"id\":\"cryuan\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"zdxtayrlhmwhf\",\"actionsRequired\":\"rqobmtuk\"},\"provisioningState\":\"Failed\"},\"id\":\"rtihfxtijbpz\",\"name\":\"gnwzsymglzufc\",\"type\":\"zk\"}]},\"location\":\"dbihanufhfcbj\",\"tags\":{\"xqhabi\":\"git\"},\"id\":\"pikxwczbyscnpqxu\",\"name\":\"ivyqniwbybrkxvd\",\"type\":\"mjgr\"}")
            .toObject(FileShareInner.class);
        Assertions.assertEquals("dbihanufhfcbj", model.location());
        Assertions.assertEquals("git", model.tags().get("xqhabi"));
        Assertions.assertEquals("hq", model.properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, model.properties().mediaTier());
        Assertions.assertEquals(Redundancy.ZONE, model.properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, model.properties().protocol());
        Assertions.assertEquals(594038518, model.properties().provisionedStorageGiB());
        Assertions.assertEquals(182731623, model.properties().provisionedIOPerSec());
        Assertions.assertEquals(1332019186, model.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ROOT_SQUASH, model.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("bhdxbm", model.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareInner model = new FileShareInner().withLocation("dbihanufhfcbj")
            .withTags(mapOf("xqhabi", "git"))
            .withProperties(new FileShareProperties().withMountName("hq")
                .withMediaTier(MediaTier.SSD)
                .withRedundancy(Redundancy.ZONE)
                .withProtocol(Protocol.NFS)
                .withProvisionedStorageGiB(594038518)
                .withProvisionedIOPerSec(182731623)
                .withProvisionedThroughputMiBPerSec(1332019186)
                .withNfsProtocolProperties(new NfsProtocolProperties().withRootSquash(ShareRootSquash.ROOT_SQUASH))
                .withPublicAccessProperties(new PublicAccessProperties()
                    .withAllowedSubnets(Arrays.asList("bhdxbm", "qioqjzehtbmu", "p", "wnoi")))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED));
        model = BinaryData.fromObject(model).toObject(FileShareInner.class);
        Assertions.assertEquals("dbihanufhfcbj", model.location());
        Assertions.assertEquals("git", model.tags().get("xqhabi"));
        Assertions.assertEquals("hq", model.properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, model.properties().mediaTier());
        Assertions.assertEquals(Redundancy.ZONE, model.properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, model.properties().protocol());
        Assertions.assertEquals(594038518, model.properties().provisionedStorageGiB());
        Assertions.assertEquals(182731623, model.properties().provisionedIOPerSec());
        Assertions.assertEquals(1332019186, model.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ROOT_SQUASH, model.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("bhdxbm", model.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
