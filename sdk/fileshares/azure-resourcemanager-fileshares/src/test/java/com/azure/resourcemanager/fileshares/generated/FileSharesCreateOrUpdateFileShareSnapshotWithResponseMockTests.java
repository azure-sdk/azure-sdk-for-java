// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fileshares.FileSharesManager;
import com.azure.resourcemanager.fileshares.models.FileShareSnapshot;
import com.azure.resourcemanager.fileshares.models.FileShareSnapshotProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FileSharesCreateOrUpdateFileShareSnapshotWithResponseMockTests {
    @Test
    public void testCreateOrUpdateFileShareSnapshotWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"snapshotTime\":\"rtjriplrbpbew\",\"initiatorId\":\"hfgblc\",\"metadata\":{\"nmxiebwwaloayqc\":\"zvlvqhjkbegib\",\"uzgwyzmhtx\":\"wrtz\",\"wxqpsrknftguvri\":\"ngmtsavjcb\",\"qtayri\":\"hprwmdyv\"},\"provisioningState\":\"Updating\"},\"id\":\"yqbexrmcqibycno\",\"name\":\"v\",\"type\":\"nmefqsgzvahapj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FileSharesManager manager = FileSharesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FileShareSnapshot response = manager.fileShares()
            .defineFileShareSnapshot("cjooxdjebwpucwwf")
            .withExistingFileShare("hashsfwxosow", "xcug")
            .withProperties(new FileShareSnapshotProperties().withMetadata(
                mapOf("x", "gjrwjueiotwmcdyt", "nrjawgqwg", "it", "klwndnhjdauwhv", "hniskxfbkpyc", "zbtd", "l")))
            .create();

        Assertions.assertEquals("zvlvqhjkbegib", response.properties().metadata().get("nmxiebwwaloayqc"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
