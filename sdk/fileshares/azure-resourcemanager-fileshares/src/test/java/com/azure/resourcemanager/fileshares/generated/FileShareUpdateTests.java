// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.fileshares.models.FileShareUpdate;
import com.azure.resourcemanager.fileshares.models.FileShareUpdateProperties;
import com.azure.resourcemanager.fileshares.models.NfsProtocolProperties;
import com.azure.resourcemanager.fileshares.models.PublicAccessProperties;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileShareUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareUpdate model = BinaryData.fromString(
            "{\"tags\":{\"jfm\":\"sainqpjwnzl\",\"vmgxsab\":\"pee\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"properties\":{\"provisionedStorageGiB\":1618302294,\"provisionedIOPerSec\":391471833,\"provisionedThroughputMiBPerSec\":1969626150,\"nfsProtocolProperties\":{\"rootSquash\":\"RootSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"datqxhocdgeabl\",\"phut\",\"cndvkaozwyiftyhx\"]},\"publicNetworkAccess\":\"Enabled\"}}")
            .toObject(FileShareUpdate.class);
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals(1618302294, model.properties().provisionedStorageGiB());
        Assertions.assertEquals(391471833, model.properties().provisionedIOPerSec());
        Assertions.assertEquals(1969626150, model.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ROOT_SQUASH, model.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("datqxhocdgeabl", model.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareUpdate model = new FileShareUpdate()
            .withTags(
                mapOf("jfm", "sainqpjwnzl", "vmgxsab", "pee", "jczdzevndh", "yqduujit", "feusnhut", "rwpdappdsbdkvwrw"))
            .withProperties(new FileShareUpdateProperties().withProvisionedStorageGiB(1618302294)
                .withProvisionedIOPerSec(391471833)
                .withProvisionedThroughputMiBPerSec(1969626150)
                .withNfsProtocolProperties(new NfsProtocolProperties().withRootSquash(ShareRootSquash.ROOT_SQUASH))
                .withPublicAccessProperties(new PublicAccessProperties()
                    .withAllowedSubnets(Arrays.asList("datqxhocdgeabl", "phut", "cndvkaozwyiftyhx")))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED));
        model = BinaryData.fromObject(model).toObject(FileShareUpdate.class);
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals(1618302294, model.properties().provisionedStorageGiB());
        Assertions.assertEquals(391471833, model.properties().provisionedIOPerSec());
        Assertions.assertEquals(1969626150, model.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ROOT_SQUASH, model.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("datqxhocdgeabl", model.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
