// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fileshares.FileSharesManager;
import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.MediaTier;
import com.azure.resourcemanager.fileshares.models.Protocol;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.Redundancy;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FileSharesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"mountName\":\"wburvjxxjnspydpt\",\"hostName\":\"enkouknvudw\",\"mediaTier\":\"SSD\",\"redundancy\":\"Zone\",\"protocol\":\"NFS\",\"provisionedStorageGiB\":1236477167,\"provisionedStorageNextAllowedDowngrade\":\"2021-09-30T15:05:34Z\",\"provisionedIOPerSec\":2138211196,\"provisionedIOPerSecNextAllowedDowngrade\":\"2021-07-10T00:22:18Z\",\"provisionedThroughputMiBPerSec\":198508752,\"provisionedThroughputNextAllowedDowngrade\":\"2021-03-18T22:03:28Z\",\"includedBurstIOPerSec\":829690425,\"maxBurstIOPerSecCredits\":7699505413324678544,\"nfsProtocolProperties\":{\"rootSquash\":\"AllSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"cgygev\",\"zntypmrb\",\"izcdrqjsd\"]},\"provisioningState\":\"Accepted\",\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"oejzi\",\"w\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"tgzfbishcbkh\",\"name\":\"jdeyeamdpha\",\"type\":\"alpbuxwgipwhon\"},{\"properties\":{\"groupIds\":[\"shwankixzbinje\",\"uttmrywnuzoqft\",\"yqzrnkcqvyxlw\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"cohoq\",\"name\":\"nwvlryavwhheunmm\",\"type\":\"hgyxzkonoc\"}]},\"location\":\"oklyaxuconuq\",\"tags\":{\"rmjmwvvjektc\":\"kbeype\",\"frzpwvlqdqgb\":\"senhwlrs\"},\"id\":\"qylihkaetckt\",\"name\":\"fcivfsnkym\",\"type\":\"ctq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FileSharesManager manager = FileSharesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<FileShare> response
            = manager.fileShares().listByResourceGroup("ggi", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("oklyaxuconuq", response.iterator().next().location());
        Assertions.assertEquals("kbeype", response.iterator().next().tags().get("rmjmwvvjektc"));
        Assertions.assertEquals("wburvjxxjnspydpt", response.iterator().next().properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, response.iterator().next().properties().mediaTier());
        Assertions.assertEquals(Redundancy.ZONE, response.iterator().next().properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, response.iterator().next().properties().protocol());
        Assertions.assertEquals(1236477167, response.iterator().next().properties().provisionedStorageGiB());
        Assertions.assertEquals(2138211196, response.iterator().next().properties().provisionedIOPerSec());
        Assertions.assertEquals(198508752, response.iterator().next().properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ALL_SQUASH,
            response.iterator().next().properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("cgygev",
            response.iterator().next().properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
