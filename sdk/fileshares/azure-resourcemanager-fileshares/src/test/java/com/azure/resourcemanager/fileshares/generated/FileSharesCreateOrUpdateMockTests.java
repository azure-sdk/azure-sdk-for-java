// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fileshares.FileSharesManager;
import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.FileShareProperties;
import com.azure.resourcemanager.fileshares.models.MediaTier;
import com.azure.resourcemanager.fileshares.models.NfsProtocolProperties;
import com.azure.resourcemanager.fileshares.models.Protocol;
import com.azure.resourcemanager.fileshares.models.PublicAccessProperties;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.Redundancy;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FileSharesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"mountName\":\"ceoveilovno\",\"hostName\":\"fj\",\"mediaTier\":\"SSD\",\"redundancy\":\"Local\",\"protocol\":\"NFS\",\"provisionedStorageGiB\":74427835,\"provisionedStorageNextAllowedDowngrade\":\"2021-06-03T02:49:41Z\",\"provisionedIOPerSec\":2096880843,\"provisionedIOPerSecNextAllowedDowngrade\":\"2021-07-22T04:13:03Z\",\"provisionedThroughputMiBPerSec\":59412891,\"provisionedThroughputNextAllowedDowngrade\":\"2021-10-10T12:57:16Z\",\"includedBurstIOPerSec\":492744230,\"maxBurstIOPerSecCredits\":5798583815536033606,\"nfsProtocolProperties\":{\"rootSquash\":\"RootSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"clfp\",\"phoxus\",\"rpabg\",\"epsbjtazqu\"]},\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"jzwf\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"ids\",\"name\":\"yonobgl\",\"type\":\"ocqxtccmg\"},{\"properties\":{\"groupIds\":[\"ytlmoyrxvwfud\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"xhdzhlrqjbhckf\",\"name\":\"lhrxsbkyvpyc\",\"type\":\"n\"},{\"properties\":{\"groupIds\":[\"zka\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"crnwbmeh\",\"name\":\"seyvj\",\"type\":\"srtslhspkdeem\"}]},\"location\":\"fm\",\"tags\":{\"melmqkrha\":\"kv\",\"aquhcdhm\":\"vljua\",\"rcrgvx\":\"ualaexqpvfadmw\",\"fmisg\":\"vgomz\"},\"id\":\"bnbbeldawkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FileSharesManager manager = FileSharesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FileShare response = manager.fileShares()
            .define("eaxib")
            .withRegion("gmgsxnkjzkde")
            .withExistingResourceGroup("edckzywbiexzfey")
            .withTags(mapOf("kdwzbaiuebbaumny", "vlopwiyighx", "txp", "upedeojnabckhs", "tfhvpesapskrdqmh", "ie",
                "tkncwsc", "jdhtldwkyzxu"))
            .withProperties(new FileShareProperties().withMountName("wbhqwal")
                .withMediaTier(MediaTier.SSD)
                .withRedundancy(Redundancy.ZONE)
                .withProtocol(Protocol.NFS)
                .withProvisionedStorageGiB(1879785159)
                .withProvisionedIOPerSec(1767161087)
                .withProvisionedThroughputMiBPerSec(485576970)
                .withNfsProtocolProperties(new NfsProtocolProperties().withRootSquash(ShareRootSquash.ALL_SQUASH))
                .withPublicAccessProperties(new PublicAccessProperties().withAllowedSubnets(Arrays.asList("x")))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED))
            .create();

        Assertions.assertEquals("fm", response.location());
        Assertions.assertEquals("kv", response.tags().get("melmqkrha"));
        Assertions.assertEquals("ceoveilovno", response.properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, response.properties().mediaTier());
        Assertions.assertEquals(Redundancy.LOCAL, response.properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, response.properties().protocol());
        Assertions.assertEquals(74427835, response.properties().provisionedStorageGiB());
        Assertions.assertEquals(2096880843, response.properties().provisionedIOPerSec());
        Assertions.assertEquals(59412891, response.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.ROOT_SQUASH,
            response.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("clfp", response.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
