// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fileshares.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fileshares.FileSharesManager;
import com.azure.resourcemanager.fileshares.models.FileShare;
import com.azure.resourcemanager.fileshares.models.MediaTier;
import com.azure.resourcemanager.fileshares.models.Protocol;
import com.azure.resourcemanager.fileshares.models.PublicNetworkAccess;
import com.azure.resourcemanager.fileshares.models.Redundancy;
import com.azure.resourcemanager.fileshares.models.ShareRootSquash;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FileSharesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"mountName\":\"xnj\",\"hostName\":\"seiphe\",\"mediaTier\":\"SSD\",\"redundancy\":\"Local\",\"protocol\":\"NFS\",\"provisionedStorageGiB\":674171704,\"provisionedStorageNextAllowedDowngrade\":\"2021-09-18T17:01:56Z\",\"provisionedIOPerSec\":1285754335,\"provisionedIOPerSecNextAllowedDowngrade\":\"2021-04-10T02:54:21Z\",\"provisionedThroughputMiBPerSec\":1289591857,\"provisionedThroughputNextAllowedDowngrade\":\"2021-11-01T19:43:22Z\",\"includedBurstIOPerSec\":1521575474,\"maxBurstIOPerSecCredits\":1345911664339180162,\"nfsProtocolProperties\":{\"rootSquash\":\"NoRootSquash\"},\"publicAccessProperties\":{\"allowedSubnets\":[\"azjpqyegualhbxxh\",\"jj\",\"zvdudgwdslfhotwm\"]},\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"gacftadeh\",\"nltyfsoppusuesnz\",\"dejbavo\",\"xzdmohctb\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"xdn\",\"name\":\"nvowgujju\",\"type\":\"wdkcglhsl\"},{\"properties\":{\"groupIds\":[\"yggdtjixh\",\"kuofqweykhme\",\"evfyexfwhybcib\",\"yvdcsitynnaa\"],\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"eh\",\"name\":\"iqscjeypv\",\"type\":\"ezrkgqhcjrefo\"}]},\"location\":\"mkqsleyyv\",\"tags\":{\"cr\":\"jpkcattpng\",\"ajvnysounqe\":\"czsqpjhvm\",\"oaeupfhyhltrpmo\":\"a\",\"uaodsfcpk\":\"jmcmatuokthfu\"},\"id\":\"xodpuozmyzydagfu\",\"name\":\"xbezyiuokktwh\",\"type\":\"dxwzywqsmbsurexi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FileSharesManager manager = FileSharesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FileShare response = manager.fileShares()
            .getByResourceGroupWithResponse("wooc", "cbonqvpk", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("mkqsleyyv", response.location());
        Assertions.assertEquals("jpkcattpng", response.tags().get("cr"));
        Assertions.assertEquals("xnj", response.properties().mountName());
        Assertions.assertEquals(MediaTier.SSD, response.properties().mediaTier());
        Assertions.assertEquals(Redundancy.LOCAL, response.properties().redundancy());
        Assertions.assertEquals(Protocol.NFS, response.properties().protocol());
        Assertions.assertEquals(674171704, response.properties().provisionedStorageGiB());
        Assertions.assertEquals(1285754335, response.properties().provisionedIOPerSec());
        Assertions.assertEquals(1289591857, response.properties().provisionedThroughputMiBPerSec());
        Assertions.assertEquals(ShareRootSquash.NO_ROOT_SQUASH,
            response.properties().nfsProtocolProperties().rootSquash());
        Assertions.assertEquals("azjpqyegualhbxxh",
            response.properties().publicAccessProperties().allowedSubnets().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
    }
}
