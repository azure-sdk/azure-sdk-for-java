// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.marketplace.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Get if the user has already submitted a review for the product.
 */
@Immutable
public final class UserHasReviewProperties implements JsonSerializable<UserHasReviewProperties> {
    /*
     * Indicates whether user has already submitted a review.
     */
    private boolean hasReview;

    /*
     * The date and time when the review was last updated.
     */
    private String updatedAt;

    /**
     * Creates an instance of UserHasReviewProperties class.
     */
    private UserHasReviewProperties() {
    }

    /**
     * Get the hasReview property: Indicates whether user has already submitted a review.
     * 
     * @return the hasReview value.
     */
    public boolean hasReview() {
        return this.hasReview;
    }

    /**
     * Get the updatedAt property: The date and time when the review was last updated.
     * 
     * @return the updatedAt value.
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (updatedAt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property updatedAt in model UserHasReviewProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserHasReviewProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("hasReview", this.hasReview);
        jsonWriter.writeStringField("updatedAt", this.updatedAt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserHasReviewProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserHasReviewProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserHasReviewProperties.
     */
    public static UserHasReviewProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserHasReviewProperties deserializedUserHasReviewProperties = new UserHasReviewProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hasReview".equals(fieldName)) {
                    deserializedUserHasReviewProperties.hasReview = reader.getBoolean();
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedUserHasReviewProperties.updatedAt = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserHasReviewProperties;
        });
    }
}
