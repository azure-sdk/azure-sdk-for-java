// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.marketplace.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.marketplace.fluent.RatingAndReviewsOperationsClient;
import com.azure.resourcemanager.marketplace.fluent.models.UserHasReviewInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RatingAndReviewsOperationsClient.
 */
public final class RatingAndReviewsOperationsClientImpl implements RatingAndReviewsOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RatingAndReviewsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MarketplaceClientImpl client;

    /**
     * Initializes an instance of RatingAndReviewsOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RatingAndReviewsOperationsClientImpl(MarketplaceClientImpl client) {
        this.service = RestProxy.create(RatingAndReviewsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MarketplaceClientRatingAndReviewsOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MarketplaceClientRat")
    public interface RatingAndReviewsOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UserHasReviewInner>> checkUserHasReview(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("uniqueProductId") String uniqueProductId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<UserHasReviewInner> checkUserHasReviewSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("uniqueProductId") String uniqueProductId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Check user has review.
     * 
     * @param uniqueProductId Unique Product Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserHasReviewInner>> checkUserHasReviewWithResponseAsync(String uniqueProductId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (uniqueProductId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter uniqueProductId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkUserHasReview(this.client.getEndpoint(), this.client.getApiVersion(),
                uniqueProductId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Check user has review.
     * 
     * @param uniqueProductId Unique Product Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserHasReviewInner> checkUserHasReviewAsync(String uniqueProductId) {
        return checkUserHasReviewWithResponseAsync(uniqueProductId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Check user has review.
     * 
     * @param uniqueProductId Unique Product Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UserHasReviewInner> checkUserHasReviewWithResponse(String uniqueProductId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (uniqueProductId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter uniqueProductId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.checkUserHasReviewSync(this.client.getEndpoint(), this.client.getApiVersion(), uniqueProductId,
            accept, context);
    }

    /**
     * Check user has review.
     * 
     * @param uniqueProductId Unique Product Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserHasReviewInner checkUserHasReview(String uniqueProductId) {
        return checkUserHasReviewWithResponse(uniqueProductId, Context.NONE).getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(RatingAndReviewsOperationsClientImpl.class);
}
