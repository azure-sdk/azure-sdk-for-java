// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.portal.models.Dashboard;
import com.azure.resourcemanager.portal.models.DashboardLens;
import com.azure.resourcemanager.portal.models.DashboardParts;
import com.azure.resourcemanager.portal.models.DashboardPartsPosition;
import com.azure.resourcemanager.portal.models.DashboardProperties;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Dashboards Update.
 */
public final class DashboardsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/portal/resource-manager/Microsoft.Portal/preview/2022-12-01-preview/examples/Dashboards_Update.json
     */
    /**
     * Sample code: Update a Dashboard.
     * 
     * @param manager Entry point to PortalManager.
     */
    public static void updateADashboard(com.azure.resourcemanager.portal.PortalManager manager) throws IOException {
        Dashboard resource = manager.dashboards()
            .getByResourceGroupWithResponse("testRG", "testDashboard", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("aKey", "fakeTokenPlaceholder", "anotherKey", "fakeTokenPlaceholder"))
            .withProperties(
                new DashboardProperties()
                    .withLenses(
                        Arrays.asList(
                            new DashboardLens().withOrder(1)
                                .withParts(Arrays.asList(
                                    new DashboardParts().withPosition(
                                        new DashboardPartsPosition().withX(1).withY(2).withRowSpan(4).withColSpan(3)),
                                    new DashboardParts().withPosition(
                                        new DashboardPartsPosition().withX(5).withY(5).withRowSpan(6).withColSpan(6)))),
                            new DashboardLens().withOrder(2).withParts(Arrays.asList())))
                    .withMetadata(SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{\"metadata\":{\"ColSpan\":2,\"RowSpan\":1,\"X\":4,\"Y\":3}}", Object.class,
                            SerializerEncoding.JSON)))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
