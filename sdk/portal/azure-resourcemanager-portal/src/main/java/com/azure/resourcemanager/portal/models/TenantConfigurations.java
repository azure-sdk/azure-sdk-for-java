// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.portal.fluent.models.ConfigurationInner;

/**
 * Resource collection API of TenantConfigurations.
 */
public interface TenantConfigurations {
    /**
     * Gets list of the tenant configurations.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of the tenant configurations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Configuration> list();

    /**
     * Gets list of the tenant configurations.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of the tenant configurations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Configuration> list(Context context);

    /**
     * Gets the tenant configuration.
     * 
     * @param configurationName The name of the Configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tenant configuration along with {@link Response}.
     */
    Response<Configuration> getWithResponse(String configurationName, Context context);

    /**
     * Gets the tenant configuration.
     * 
     * @param configurationName The name of the Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tenant configuration.
     */
    Configuration get(String configurationName);

    /**
     * Create the tenant configuration. If configuration already exists - update it. User has to be a Tenant Admin for
     * this operation.
     * 
     * @param configurationName The name of the Configuration.
     * @param resource The parameters required to create or update tenant configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tenant configuration resource definition along with {@link Response}.
     */
    Response<Configuration> createWithResponse(String configurationName, ConfigurationInner resource, Context context);

    /**
     * Create the tenant configuration. If configuration already exists - update it. User has to be a Tenant Admin for
     * this operation.
     * 
     * @param configurationName The name of the Configuration.
     * @param resource The parameters required to create or update tenant configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tenant configuration resource definition.
     */
    Configuration create(String configurationName, ConfigurationInner resource);

    /**
     * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
     * 
     * @param configurationName The name of the Configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String configurationName, Context context);

    /**
     * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
     * 
     * @param configurationName The name of the Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String configurationName);
}
