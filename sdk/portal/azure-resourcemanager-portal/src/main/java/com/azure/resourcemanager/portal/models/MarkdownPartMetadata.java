// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Markdown part metadata.
 */
@Fluent
public final class MarkdownPartMetadata extends DashboardPartMetadata {
    /*
     * The dashboard part metadata type.
     */
    private DashboardPartMetadataType type = DashboardPartMetadataType.EXTENSION_HUBS_EXTENSION_PART_TYPE_MARKDOWN_PART;

    /*
     * Input to dashboard part.
     */
    private List<Object> inputs;

    /*
     * Markdown part settings.
     */
    private MarkdownPartMetadataSettings settings;

    /**
     * Creates an instance of MarkdownPartMetadata class.
     */
    public MarkdownPartMetadata() {
    }

    /**
     * Get the type property: The dashboard part metadata type.
     * 
     * @return the type value.
     */
    @Override
    public DashboardPartMetadataType type() {
        return this.type;
    }

    /**
     * Get the inputs property: Input to dashboard part.
     * 
     * @return the inputs value.
     */
    public List<Object> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Input to dashboard part.
     * 
     * @param inputs the inputs value to set.
     * @return the MarkdownPartMetadata object itself.
     */
    public MarkdownPartMetadata withInputs(List<Object> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the settings property: Markdown part settings.
     * 
     * @return the settings value.
     */
    public MarkdownPartMetadataSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Markdown part settings.
     * 
     * @param settings the settings value to set.
     * @return the MarkdownPartMetadata object itself.
     */
    public MarkdownPartMetadata withSettings(MarkdownPartMetadataSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (settings() != null) {
            settings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeJsonField("settings", this.settings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarkdownPartMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarkdownPartMetadata if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MarkdownPartMetadata.
     */
    public static MarkdownPartMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarkdownPartMetadata deserializedMarkdownPartMetadata = new MarkdownPartMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedMarkdownPartMetadata.type = DashboardPartMetadataType.fromString(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    List<Object> inputs = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedMarkdownPartMetadata.inputs = inputs;
                } else if ("settings".equals(fieldName)) {
                    deserializedMarkdownPartMetadata.settings = MarkdownPartMetadataSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarkdownPartMetadata;
        });
    }
}
