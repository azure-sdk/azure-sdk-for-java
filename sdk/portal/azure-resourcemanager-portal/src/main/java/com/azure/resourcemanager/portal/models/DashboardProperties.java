// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The shared dashboard properties.
 */
@Fluent
public final class DashboardProperties implements JsonSerializable<DashboardProperties> {
    /*
     * The dashboard lenses.
     */
    private List<DashboardLens> lenses;

    /*
     * The dashboard metadata.
     */
    private Object metadata;

    /**
     * Creates an instance of DashboardProperties class.
     */
    public DashboardProperties() {
    }

    /**
     * Get the lenses property: The dashboard lenses.
     * 
     * @return the lenses value.
     */
    public List<DashboardLens> lenses() {
        return this.lenses;
    }

    /**
     * Set the lenses property: The dashboard lenses.
     * 
     * @param lenses the lenses value to set.
     * @return the DashboardProperties object itself.
     */
    public DashboardProperties withLenses(List<DashboardLens> lenses) {
        this.lenses = lenses;
        return this;
    }

    /**
     * Get the metadata property: The dashboard metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The dashboard metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the DashboardProperties object itself.
     */
    public DashboardProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lenses() != null) {
            lenses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("lenses", this.lenses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DashboardProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DashboardProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DashboardProperties.
     */
    public static DashboardProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DashboardProperties deserializedDashboardProperties = new DashboardProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lenses".equals(fieldName)) {
                    List<DashboardLens> lenses = reader.readArray(reader1 -> DashboardLens.fromJson(reader1));
                    deserializedDashboardProperties.lenses = lenses;
                } else if ("metadata".equals(fieldName)) {
                    deserializedDashboardProperties.metadata = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDashboardProperties;
        });
    }
}
