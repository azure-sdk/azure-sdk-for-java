// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The dashboard's part position.
 */
@Fluent
public final class DashboardPartsPosition implements JsonSerializable<DashboardPartsPosition> {
    /*
     * The dashboard's part x coordinate.
     */
    private int x;

    /*
     * The dashboard's part y coordinate.
     */
    private int y;

    /*
     * The dashboard's part row span.
     */
    private int rowSpan;

    /*
     * The dashboard's part column span.
     */
    private int colSpan;

    /*
     * The dashboard part's metadata.
     */
    private Map<String, Object> metadata;

    /**
     * Creates an instance of DashboardPartsPosition class.
     */
    public DashboardPartsPosition() {
    }

    /**
     * Get the x property: The dashboard's part x coordinate.
     * 
     * @return the x value.
     */
    public int x() {
        return this.x;
    }

    /**
     * Set the x property: The dashboard's part x coordinate.
     * 
     * @param x the x value to set.
     * @return the DashboardPartsPosition object itself.
     */
    public DashboardPartsPosition withX(int x) {
        this.x = x;
        return this;
    }

    /**
     * Get the y property: The dashboard's part y coordinate.
     * 
     * @return the y value.
     */
    public int y() {
        return this.y;
    }

    /**
     * Set the y property: The dashboard's part y coordinate.
     * 
     * @param y the y value to set.
     * @return the DashboardPartsPosition object itself.
     */
    public DashboardPartsPosition withY(int y) {
        this.y = y;
        return this;
    }

    /**
     * Get the rowSpan property: The dashboard's part row span.
     * 
     * @return the rowSpan value.
     */
    public int rowSpan() {
        return this.rowSpan;
    }

    /**
     * Set the rowSpan property: The dashboard's part row span.
     * 
     * @param rowSpan the rowSpan value to set.
     * @return the DashboardPartsPosition object itself.
     */
    public DashboardPartsPosition withRowSpan(int rowSpan) {
        this.rowSpan = rowSpan;
        return this;
    }

    /**
     * Get the colSpan property: The dashboard's part column span.
     * 
     * @return the colSpan value.
     */
    public int colSpan() {
        return this.colSpan;
    }

    /**
     * Set the colSpan property: The dashboard's part column span.
     * 
     * @param colSpan the colSpan value to set.
     * @return the DashboardPartsPosition object itself.
     */
    public DashboardPartsPosition withColSpan(int colSpan) {
        this.colSpan = colSpan;
        return this;
    }

    /**
     * Get the metadata property: The dashboard part's metadata.
     * 
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The dashboard part's metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the DashboardPartsPosition object itself.
     */
    public DashboardPartsPosition withMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("x", this.x);
        jsonWriter.writeIntField("y", this.y);
        jsonWriter.writeIntField("rowSpan", this.rowSpan);
        jsonWriter.writeIntField("colSpan", this.colSpan);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DashboardPartsPosition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DashboardPartsPosition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DashboardPartsPosition.
     */
    public static DashboardPartsPosition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DashboardPartsPosition deserializedDashboardPartsPosition = new DashboardPartsPosition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("x".equals(fieldName)) {
                    deserializedDashboardPartsPosition.x = reader.getInt();
                } else if ("y".equals(fieldName)) {
                    deserializedDashboardPartsPosition.y = reader.getInt();
                } else if ("rowSpan".equals(fieldName)) {
                    deserializedDashboardPartsPosition.rowSpan = reader.getInt();
                } else if ("colSpan".equals(fieldName)) {
                    deserializedDashboardPartsPosition.colSpan = reader.getInt();
                } else if ("metadata".equals(fieldName)) {
                    Map<String, Object> metadata = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDashboardPartsPosition.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDashboardPartsPosition;
        });
    }
}
