// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.portal.fluent.DashboardsClient;
import com.azure.resourcemanager.portal.fluent.models.DashboardInner;
import com.azure.resourcemanager.portal.models.Dashboard;
import com.azure.resourcemanager.portal.models.Dashboards;

public final class DashboardsImpl implements Dashboards {
    private static final ClientLogger LOGGER = new ClientLogger(DashboardsImpl.class);

    private final DashboardsClient innerClient;

    private final com.azure.resourcemanager.portal.PortalManager serviceManager;

    public DashboardsImpl(DashboardsClient innerClient, com.azure.resourcemanager.portal.PortalManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Dashboard> list() {
        PagedIterable<DashboardInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DashboardImpl(inner1, this.manager()));
    }

    public PagedIterable<Dashboard> list(Context context) {
        PagedIterable<DashboardInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DashboardImpl(inner1, this.manager()));
    }

    public PagedIterable<Dashboard> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DashboardInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DashboardImpl(inner1, this.manager()));
    }

    public PagedIterable<Dashboard> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DashboardInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DashboardImpl(inner1, this.manager()));
    }

    public Response<Dashboard> getByResourceGroupWithResponse(String resourceGroupName, String dashboardName,
        Context context) {
        Response<DashboardInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, dashboardName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DashboardImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Dashboard getByResourceGroup(String resourceGroupName, String dashboardName) {
        DashboardInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, dashboardName);
        if (inner != null) {
            return new DashboardImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String dashboardName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, dashboardName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String dashboardName) {
        this.serviceClient().delete(resourceGroupName, dashboardName);
    }

    public Dashboard getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dashboardName = ResourceManagerUtils.getValueFromIdByName(id, "dashboards");
        if (dashboardName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dashboards'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dashboardName, Context.NONE).getValue();
    }

    public Response<Dashboard> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dashboardName = ResourceManagerUtils.getValueFromIdByName(id, "dashboards");
        if (dashboardName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dashboards'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dashboardName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dashboardName = ResourceManagerUtils.getValueFromIdByName(id, "dashboards");
        if (dashboardName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dashboards'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, dashboardName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dashboardName = ResourceManagerUtils.getValueFromIdByName(id, "dashboards");
        if (dashboardName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dashboards'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, dashboardName, context);
    }

    private DashboardsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.portal.PortalManager manager() {
        return this.serviceManager;
    }

    public DashboardImpl define(String name) {
        return new DashboardImpl(name, this.manager());
    }
}
