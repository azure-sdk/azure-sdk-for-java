// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A dashboard lens.
 */
@Fluent
public final class DashboardLens implements JsonSerializable<DashboardLens> {
    /*
     * The lens order.
     */
    private int order;

    /*
     * The dashboard parts.
     */
    private List<DashboardParts> parts;

    /*
     * The dashboard len's metadata.
     */
    private Object metadata;

    /**
     * Creates an instance of DashboardLens class.
     */
    public DashboardLens() {
    }

    /**
     * Get the order property: The lens order.
     * 
     * @return the order value.
     */
    public int order() {
        return this.order;
    }

    /**
     * Set the order property: The lens order.
     * 
     * @param order the order value to set.
     * @return the DashboardLens object itself.
     */
    public DashboardLens withOrder(int order) {
        this.order = order;
        return this;
    }

    /**
     * Get the parts property: The dashboard parts.
     * 
     * @return the parts value.
     */
    public List<DashboardParts> parts() {
        return this.parts;
    }

    /**
     * Set the parts property: The dashboard parts.
     * 
     * @param parts the parts value to set.
     * @return the DashboardLens object itself.
     */
    public DashboardLens withParts(List<DashboardParts> parts) {
        this.parts = parts;
        return this;
    }

    /**
     * Get the metadata property: The dashboard len's metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The dashboard len's metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the DashboardLens object itself.
     */
    public DashboardLens withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property parts in model DashboardLens"));
        } else {
            parts().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DashboardLens.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("order", this.order);
        jsonWriter.writeArrayField("parts", this.parts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DashboardLens from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DashboardLens if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DashboardLens.
     */
    public static DashboardLens fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DashboardLens deserializedDashboardLens = new DashboardLens();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("order".equals(fieldName)) {
                    deserializedDashboardLens.order = reader.getInt();
                } else if ("parts".equals(fieldName)) {
                    List<DashboardParts> parts = reader.readArray(reader1 -> DashboardParts.fromJson(reader1));
                    deserializedDashboardLens.parts = parts;
                } else if ("metadata".equals(fieldName)) {
                    deserializedDashboardLens.metadata = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDashboardLens;
        });
    }
}
