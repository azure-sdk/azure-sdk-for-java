// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The content of markdown part.
 */
@Fluent
public final class MarkdownPartMetadataSettingsContent
    implements JsonSerializable<MarkdownPartMetadataSettingsContent> {
    /*
     * The content of the markdown part.
     */
    private String content;

    /*
     * The title of the markdown part.
     */
    private String title;

    /*
     * The subtitle of the markdown part.
     */
    private String subtitle;

    /*
     * The source of the content of the markdown part.
     */
    private Integer markdownSource;

    /*
     * The uri of markdown content.
     */
    private String markdownUri;

    /**
     * Creates an instance of MarkdownPartMetadataSettingsContent class.
     */
    public MarkdownPartMetadataSettingsContent() {
    }

    /**
     * Get the content property: The content of the markdown part.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: The content of the markdown part.
     * 
     * @param content the content value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the title property: The title of the markdown part.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: The title of the markdown part.
     * 
     * @param title the title value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the subtitle property: The subtitle of the markdown part.
     * 
     * @return the subtitle value.
     */
    public String subtitle() {
        return this.subtitle;
    }

    /**
     * Set the subtitle property: The subtitle of the markdown part.
     * 
     * @param subtitle the subtitle value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withSubtitle(String subtitle) {
        this.subtitle = subtitle;
        return this;
    }

    /**
     * Get the markdownSource property: The source of the content of the markdown part.
     * 
     * @return the markdownSource value.
     */
    public Integer markdownSource() {
        return this.markdownSource;
    }

    /**
     * Set the markdownSource property: The source of the content of the markdown part.
     * 
     * @param markdownSource the markdownSource value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withMarkdownSource(Integer markdownSource) {
        this.markdownSource = markdownSource;
        return this;
    }

    /**
     * Get the markdownUri property: The uri of markdown content.
     * 
     * @return the markdownUri value.
     */
    public String markdownUri() {
        return this.markdownUri;
    }

    /**
     * Set the markdownUri property: The uri of markdown content.
     * 
     * @param markdownUri the markdownUri value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withMarkdownUri(String markdownUri) {
        this.markdownUri = markdownUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("subtitle", this.subtitle);
        jsonWriter.writeNumberField("markdownSource", this.markdownSource);
        jsonWriter.writeStringField("markdownUri", this.markdownUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarkdownPartMetadataSettingsContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarkdownPartMetadataSettingsContent if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MarkdownPartMetadataSettingsContent.
     */
    public static MarkdownPartMetadataSettingsContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarkdownPartMetadataSettingsContent deserializedMarkdownPartMetadataSettingsContent
                = new MarkdownPartMetadataSettingsContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.content = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.title = reader.getString();
                } else if ("subtitle".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.subtitle = reader.getString();
                } else if ("markdownSource".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.markdownSource
                        = reader.getNullable(JsonReader::getInt);
                } else if ("markdownUri".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.markdownUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarkdownPartMetadataSettingsContent;
        });
    }
}
