// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The content of markdown part.
 */
@Fluent
public final class MarkdownPartMetadataSettingsContent
    implements JsonSerializable<MarkdownPartMetadataSettingsContent> {
    /*
     * The setting of the content of markdown part.
     */
    private MarkdownPartMetadataSettingsContentSettings settings;

    /**
     * Creates an instance of MarkdownPartMetadataSettingsContent class.
     */
    public MarkdownPartMetadataSettingsContent() {
    }

    /**
     * Get the settings property: The setting of the content of markdown part.
     * 
     * @return the settings value.
     */
    public MarkdownPartMetadataSettingsContentSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: The setting of the content of markdown part.
     * 
     * @param settings the settings value to set.
     * @return the MarkdownPartMetadataSettingsContent object itself.
     */
    public MarkdownPartMetadataSettingsContent withSettings(MarkdownPartMetadataSettingsContentSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (settings() != null) {
            settings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("settings", this.settings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarkdownPartMetadataSettingsContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarkdownPartMetadataSettingsContent if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MarkdownPartMetadataSettingsContent.
     */
    public static MarkdownPartMetadataSettingsContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarkdownPartMetadataSettingsContent deserializedMarkdownPartMetadataSettingsContent
                = new MarkdownPartMetadataSettingsContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("settings".equals(fieldName)) {
                    deserializedMarkdownPartMetadataSettingsContent.settings
                        = MarkdownPartMetadataSettingsContentSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarkdownPartMetadataSettingsContent;
        });
    }
}
