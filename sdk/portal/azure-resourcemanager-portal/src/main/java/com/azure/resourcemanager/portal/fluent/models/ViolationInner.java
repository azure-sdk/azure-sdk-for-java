// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Violation information.
 */
@Immutable
public final class ViolationInner implements JsonSerializable<ViolationInner> {
    /*
     * Id of the item that violates tenant configuration.
     */
    private String id;

    /*
     * Id of the user who owns violated item.
     */
    private String userId;

    /*
     * Error message.
     */
    private String errorMessage;

    /**
     * Creates an instance of ViolationInner class.
     */
    public ViolationInner() {
    }

    /**
     * Get the id property: Id of the item that violates tenant configuration.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the userId property: Id of the user who owns violated item.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Get the errorMessage property: Error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ViolationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ViolationInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ViolationInner.
     */
    public static ViolationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ViolationInner deserializedViolationInner = new ViolationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedViolationInner.id = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedViolationInner.userId = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedViolationInner.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedViolationInner;
        });
    }
}
