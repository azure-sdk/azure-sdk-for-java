// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.portal.fluent.TenantConfigurationsClient;
import com.azure.resourcemanager.portal.fluent.models.ConfigurationInner;
import com.azure.resourcemanager.portal.models.Configuration;
import com.azure.resourcemanager.portal.models.TenantConfigurations;

public final class TenantConfigurationsImpl implements TenantConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(TenantConfigurationsImpl.class);

    private final TenantConfigurationsClient innerClient;

    private final com.azure.resourcemanager.portal.PortalManager serviceManager;

    public TenantConfigurationsImpl(TenantConfigurationsClient innerClient,
        com.azure.resourcemanager.portal.PortalManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Configuration> list() {
        PagedIterable<ConfigurationInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<Configuration> list(Context context) {
        PagedIterable<ConfigurationInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConfigurationImpl(inner1, this.manager()));
    }

    public Response<Configuration> getWithResponse(String configurationName, Context context) {
        Response<ConfigurationInner> inner = this.serviceClient().getWithResponse(configurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Configuration get(String configurationName) {
        ConfigurationInner inner = this.serviceClient().get(configurationName);
        if (inner != null) {
            return new ConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Configuration> createWithResponse(String configurationName, ConfigurationInner resource,
        Context context) {
        Response<ConfigurationInner> inner
            = this.serviceClient().createWithResponse(configurationName, resource, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Configuration create(String configurationName, ConfigurationInner resource) {
        ConfigurationInner inner = this.serviceClient().create(configurationName, resource);
        if (inner != null) {
            return new ConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String configurationName, Context context) {
        return this.serviceClient().deleteWithResponse(configurationName, context);
    }

    public void delete(String configurationName) {
        this.serviceClient().delete(configurationName);
    }

    private TenantConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.portal.PortalManager manager() {
        return this.serviceManager;
    }
}
