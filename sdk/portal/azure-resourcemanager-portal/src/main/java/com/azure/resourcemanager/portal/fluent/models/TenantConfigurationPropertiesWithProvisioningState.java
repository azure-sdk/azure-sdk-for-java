// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.portal.models.ResourceProvisioningState;
import java.io.IOException;

/**
 * Dashboard Properties with Provisioning state.
 */
@Fluent
public final class TenantConfigurationPropertiesWithProvisioningState
    implements JsonSerializable<TenantConfigurationPropertiesWithProvisioningState> {
    /*
     * When flag is set to true Markdown tile will require external storage configuration (URI). The inline content
     * configuration will be prohibited.
     */
    private Boolean enforcePrivateMarkdownStorage;

    /*
     * The status of the last operation.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of TenantConfigurationPropertiesWithProvisioningState class.
     */
    public TenantConfigurationPropertiesWithProvisioningState() {
    }

    /**
     * Get the enforcePrivateMarkdownStorage property: When flag is set to true Markdown tile will require external
     * storage configuration (URI). The inline content configuration will be prohibited.
     * 
     * @return the enforcePrivateMarkdownStorage value.
     */
    public Boolean enforcePrivateMarkdownStorage() {
        return this.enforcePrivateMarkdownStorage;
    }

    /**
     * Set the enforcePrivateMarkdownStorage property: When flag is set to true Markdown tile will require external
     * storage configuration (URI). The inline content configuration will be prohibited.
     * 
     * @param enforcePrivateMarkdownStorage the enforcePrivateMarkdownStorage value to set.
     * @return the TenantConfigurationPropertiesWithProvisioningState object itself.
     */
    public TenantConfigurationPropertiesWithProvisioningState
        withEnforcePrivateMarkdownStorage(Boolean enforcePrivateMarkdownStorage) {
        this.enforcePrivateMarkdownStorage = enforcePrivateMarkdownStorage;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enforcePrivateMarkdownStorage", this.enforcePrivateMarkdownStorage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TenantConfigurationPropertiesWithProvisioningState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TenantConfigurationPropertiesWithProvisioningState if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TenantConfigurationPropertiesWithProvisioningState.
     */
    public static TenantConfigurationPropertiesWithProvisioningState fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            TenantConfigurationPropertiesWithProvisioningState deserializedTenantConfigurationPropertiesWithProvisioningState
                = new TenantConfigurationPropertiesWithProvisioningState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enforcePrivateMarkdownStorage".equals(fieldName)) {
                    deserializedTenantConfigurationPropertiesWithProvisioningState.enforcePrivateMarkdownStorage
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTenantConfigurationPropertiesWithProvisioningState.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTenantConfigurationPropertiesWithProvisioningState;
        });
    }
}
