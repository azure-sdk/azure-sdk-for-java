// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of pipeline. */
@Fluent
public final class PipelineProperties {
    /*
     * Remote cloud of the data to be transferred or received
     */
    @JsonProperty(value = "remoteCloud", required = true)
    private String remoteCloud;

    /*
     * Connections associated with pipeline
     */
    @JsonProperty(value = "connections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PipelineConnection> connections;

    /*
     * Provisioning state of the pipeline
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the remoteCloud property: Remote cloud of the data to be transferred or received.
     *
     * @return the remoteCloud value.
     */
    public String remoteCloud() {
        return this.remoteCloud;
    }

    /**
     * Set the remoteCloud property: Remote cloud of the data to be transferred or received.
     *
     * @param remoteCloud the remoteCloud value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withRemoteCloud(String remoteCloud) {
        this.remoteCloud = remoteCloud;
        return this;
    }

    /**
     * Get the connections property: Connections associated with pipeline.
     *
     * @return the connections value.
     */
    public List<PipelineConnection> connections() {
        return this.connections;
    }

    /**
     * Get the provisioningState property: Provisioning state of the pipeline.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (remoteCloud() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property remoteCloud in model PipelineProperties"));
        }
        if (connections() != null) {
            connections().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineProperties.class);
}
