// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cts.fluent.models.FlowInner;
import com.azure.resourcemanager.cts.models.FlowsPatch;

/** An instance of this class provides access to all the operations defined in FlowsClient. */
public interface FlowsClient {
    /**
     * Gets flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner getByResourceGroup(String resourceGroupName, String flowName);

    /**
     * Gets flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FlowInner> getByResourceGroupWithResponse(String resourceGroupName, String flowName, Context context);

    /**
     * Creates or updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(
        String resourceGroupName, String flowName, FlowInner flow);

    /**
     * Creates or updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(
        String resourceGroupName, String flowName, FlowInner flow, Context context);

    /**
     * Creates or updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner createOrUpdate(String resourceGroupName, String flowName, FlowInner flow);

    /**
     * Creates or updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner createOrUpdate(String resourceGroupName, String flowName, FlowInner flow, Context context);

    /**
     * Deletes the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String flowName);

    /**
     * Deletes the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String flowName, Context context);

    /**
     * Deletes the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String flowName);

    /**
     * Deletes the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String flowName, Context context);

    /**
     * Updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(
        String resourceGroupName, String flowName, FlowsPatch flow);

    /**
     * Updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(
        String resourceGroupName, String flowName, FlowsPatch flow, Context context);

    /**
     * Updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner update(String resourceGroupName, String flowName, FlowsPatch flow);

    /**
     * Updates the flow resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner update(String resourceGroupName, String flowName, FlowsPatch flow, Context context);

    /**
     * Enables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(String resourceGroupName, String flowName);

    /**
     * Enables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(
        String resourceGroupName, String flowName, Context context);

    /**
     * Enables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner enable(String resourceGroupName, String flowName);

    /**
     * Enables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner enable(String resourceGroupName, String flowName, Context context);

    /**
     * Disables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(String resourceGroupName, String flowName);

    /**
     * Disables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(
        String resourceGroupName, String flowName, Context context);

    /**
     * Disables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner disable(String resourceGroupName, String flowName);

    /**
     * Disables the specified flow.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner disable(String resourceGroupName, String flowName, Context context);

    /**
     * Gets flows in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets flows in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets flows in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> list();

    /**
     * Gets flows in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> list(Context context);
}
