// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.resourcemanager.cts.models.FlowProperties;
import com.azure.resourcemanager.cts.models.Plan;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The flow resource definition. */
@Fluent
public final class FlowInner extends Resource {
    /*
     * Properties of flow
     */
    @JsonProperty(value = "properties")
    private FlowProperties properties;

    /*
     * Plan for the resource.
     */
    @JsonProperty(value = "plan")
    private Plan plan;

    /**
     * Get the properties property: Properties of flow.
     *
     * @return the properties value.
     */
    public FlowProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties of flow.
     *
     * @param properties the properties value to set.
     * @return the FlowInner object itself.
     */
    public FlowInner withProperties(FlowProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the plan property: Plan for the resource.
     *
     * @return the plan value.
     */
    public Plan plan() {
        return this.plan;
    }

    /**
     * Set the plan property: Plan for the resource.
     *
     * @param plan the plan value to set.
     * @return the FlowInner object itself.
     */
    public FlowInner withPlan(Plan plan) {
        this.plan = plan;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FlowInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FlowInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (plan() != null) {
            plan().validate();
        }
    }
}
