// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cts.fluent.models.PipelineInner;
import com.azure.resourcemanager.cts.models.ConnectionBody;
import com.azure.resourcemanager.cts.models.Pipeline;
import com.azure.resourcemanager.cts.models.PipelineProperties;
import com.azure.resourcemanager.cts.models.PipelinesPatch;
import com.azure.resourcemanager.cts.models.PipelinesPatchProperties;
import java.util.Collections;
import java.util.Map;

public final class PipelineImpl implements Pipeline, Pipeline.Definition, Pipeline.Update {
    private PipelineInner innerObject;

    private final com.azure.resourcemanager.cts.CtsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public PipelineProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public PipelineInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cts.CtsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String pipelineName;

    private PipelinesPatch updatePipeline;

    public PipelineImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Pipeline create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .createOrUpdate(resourceGroupName, pipelineName, this.innerModel(), Context.NONE);
        return this;
    }

    public Pipeline create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .createOrUpdate(resourceGroupName, pipelineName, this.innerModel(), context);
        return this;
    }

    PipelineImpl(String name, com.azure.resourcemanager.cts.CtsManager serviceManager) {
        this.innerObject = new PipelineInner();
        this.serviceManager = serviceManager;
        this.pipelineName = name;
    }

    public PipelineImpl update() {
        this.updatePipeline = new PipelinesPatch();
        return this;
    }

    public Pipeline apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .update(resourceGroupName, pipelineName, updatePipeline, Context.NONE);
        return this;
    }

    public Pipeline apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .update(resourceGroupName, pipelineName, updatePipeline, context);
        return this;
    }

    PipelineImpl(PipelineInner innerObject, com.azure.resourcemanager.cts.CtsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.pipelineName = Utils.getValueFromIdByName(innerObject.id(), "pipelines");
    }

    public Pipeline refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .getByResourceGroupWithResponse(resourceGroupName, pipelineName, Context.NONE)
                .getValue();
        return this;
    }

    public Pipeline refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .getByResourceGroupWithResponse(resourceGroupName, pipelineName, context)
                .getValue();
        return this;
    }

    public Pipeline approveConnection(ConnectionBody connection) {
        return serviceManager.pipelines().approveConnection(resourceGroupName, pipelineName, connection);
    }

    public Pipeline approveConnection(ConnectionBody connection, Context context) {
        return serviceManager.pipelines().approveConnection(resourceGroupName, pipelineName, connection, context);
    }

    public Pipeline rejectConnection(ConnectionBody connection) {
        return serviceManager.pipelines().rejectConnection(resourceGroupName, pipelineName, connection);
    }

    public Pipeline rejectConnection(ConnectionBody connection, Context context) {
        return serviceManager.pipelines().rejectConnection(resourceGroupName, pipelineName, connection, context);
    }

    public PipelineImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public PipelineImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public PipelineImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updatePipeline.withTags(tags);
            return this;
        }
    }

    public PipelineImpl withProperties(PipelineProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public PipelineImpl withProperties(PipelinesPatchProperties properties) {
        this.updatePipeline.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
