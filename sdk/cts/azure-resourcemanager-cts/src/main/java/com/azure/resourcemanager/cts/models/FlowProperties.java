// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of flow. */
@Fluent
public final class FlowProperties {
    /*
     * Link to signed Acceptable Use Policy (AUP) form
     */
    @JsonProperty(value = "acceptableUsePolicyForm")
    private String acceptableUsePolicyForm;

    /*
     * Daily estimate on data size (GB)
     */
    @JsonProperty(value = "averageDailyData")
    private Long averageDailyData;

    /*
     * The connection associated with this flow
     */
    @JsonProperty(value = "connection", required = true)
    private SelectedResource connection;

    /*
     * Dataflow GUID associated with this flow
     */
    @JsonProperty(value = "dataflowGuid", access = JsonProperty.Access.WRITE_ONLY)
    private String dataflowGuid;

    /*
     * Data currently stored in CloudVault?
     */
    @JsonProperty(value = "storageLocation")
    private StorageLocation storageLocation;

    /*
     * List of data types that this Dataflow will service
     */
    @JsonProperty(value = "dataTypes")
    private List<DataTypes> dataTypes;

    /*
     * How will the data be used on the high side?
     */
    @JsonProperty(value = "dataUse")
    private String dataUse;

    /*
     * What is the destination of this data? (beyond the high-side Storage
     * Account?)
     */
    @JsonProperty(value = "destination")
    private String destination;

    /*
     * Microsoft corporate e-mail address
     */
    @JsonProperty(value = "email")
    private String email;

    /*
     * ICM (Incident Management) number in high side where onboarding details
     * are entered
     */
    @JsonProperty(value = "incidentNumber")
    private Long incidentNumber;

    /*
     * Please confirm JIT will be used for manual transfers, whether that be
     * access to the source Storage Container or any service which interacts
     * with the Storage Account
     */
    @JsonProperty(value = "accessForManualTransfers")
    private AccessForManualTransfers accessForManualTransfers;

    /*
     * AME, PME, or TORUS only! AKV Chain Containing SAS Token
     */
    @JsonProperty(value = "keyVaultUri")
    private String keyVaultUri;

    /*
     * Does your service have manual upload through the Teleport pipeline
     */
    @JsonProperty(value = "usage")
    private Usage usage;

    /*
     * Status of manual users
     */
    @JsonProperty(value = "manualUsersStatus")
    private ManualUsersStatus manualUsersStatus;

    /*
     * Enter the max (99th percentile) data sent in a day (GB)
     */
    @JsonProperty(value = "maxData")
    private Long maxData;

    /*
     * What is the system of origin for this data?
     */
    @JsonProperty(value = "origin")
    private String origin;

    /*
     * Primary contact's alias for this data flow
     */
    @JsonProperty(value = "primaryContactAlias")
    private String primaryContactAlias;

    /*
     * Secondary contacts' aliases for this dataflow
     */
    @JsonProperty(value = "secondaryContactsAliases")
    private List<String> secondaryContactsAliases;

    /*
     * Service Name
     */
    @JsonProperty(value = "serviceName")
    private String serviceName;

    /*
     * Service Tree ID of the service
     */
    @JsonProperty(value = "serviceTreeId")
    private String serviceTreeId;

    /*
     * Status of the current flow
     */
    @JsonProperty(value = "status")
    private FlowStatus status;

    /*
     * Storage Account
     */
    @JsonProperty(value = "storageAccountName", required = true)
    private String storageAccountName;

    /*
     * Storage Container
     */
    @JsonProperty(value = "storageContainerName", required = true)
    private String storageContainerName;

    /*
     * Transfer Storage Blobs or Tables
     */
    @JsonProperty(value = "storageContainerType", required = true)
    private StorageContainerType storageContainerType;

    /*
     * Subscription ID for the storage account to be onboarded
     */
    @JsonProperty(value = "subscriptionId")
    private String subscriptionId;

    /*
     * Title of flow
     */
    @JsonProperty(value = "title")
    private String title;

    /*
     * Use case for this data flow.
     */
    @JsonProperty(value = "useCase")
    private String useCase;

    /*
     * Provisioning state of the flow
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the acceptableUsePolicyForm property: Link to signed Acceptable Use Policy (AUP) form.
     *
     * @return the acceptableUsePolicyForm value.
     */
    public String acceptableUsePolicyForm() {
        return this.acceptableUsePolicyForm;
    }

    /**
     * Set the acceptableUsePolicyForm property: Link to signed Acceptable Use Policy (AUP) form.
     *
     * @param acceptableUsePolicyForm the acceptableUsePolicyForm value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withAcceptableUsePolicyForm(String acceptableUsePolicyForm) {
        this.acceptableUsePolicyForm = acceptableUsePolicyForm;
        return this;
    }

    /**
     * Get the averageDailyData property: Daily estimate on data size (GB).
     *
     * @return the averageDailyData value.
     */
    public Long averageDailyData() {
        return this.averageDailyData;
    }

    /**
     * Set the averageDailyData property: Daily estimate on data size (GB).
     *
     * @param averageDailyData the averageDailyData value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withAverageDailyData(Long averageDailyData) {
        this.averageDailyData = averageDailyData;
        return this;
    }

    /**
     * Get the connection property: The connection associated with this flow.
     *
     * @return the connection value.
     */
    public SelectedResource connection() {
        return this.connection;
    }

    /**
     * Set the connection property: The connection associated with this flow.
     *
     * @param connection the connection value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withConnection(SelectedResource connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Get the dataflowGuid property: Dataflow GUID associated with this flow.
     *
     * @return the dataflowGuid value.
     */
    public String dataflowGuid() {
        return this.dataflowGuid;
    }

    /**
     * Get the storageLocation property: Data currently stored in CloudVault?.
     *
     * @return the storageLocation value.
     */
    public StorageLocation storageLocation() {
        return this.storageLocation;
    }

    /**
     * Set the storageLocation property: Data currently stored in CloudVault?.
     *
     * @param storageLocation the storageLocation value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageLocation(StorageLocation storageLocation) {
        this.storageLocation = storageLocation;
        return this;
    }

    /**
     * Get the dataTypes property: List of data types that this Dataflow will service.
     *
     * @return the dataTypes value.
     */
    public List<DataTypes> dataTypes() {
        return this.dataTypes;
    }

    /**
     * Set the dataTypes property: List of data types that this Dataflow will service.
     *
     * @param dataTypes the dataTypes value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withDataTypes(List<DataTypes> dataTypes) {
        this.dataTypes = dataTypes;
        return this;
    }

    /**
     * Get the dataUse property: How will the data be used on the high side?.
     *
     * @return the dataUse value.
     */
    public String dataUse() {
        return this.dataUse;
    }

    /**
     * Set the dataUse property: How will the data be used on the high side?.
     *
     * @param dataUse the dataUse value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withDataUse(String dataUse) {
        this.dataUse = dataUse;
        return this;
    }

    /**
     * Get the destination property: What is the destination of this data? (beyond the high-side Storage Account?).
     *
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: What is the destination of this data? (beyond the high-side Storage Account?).
     *
     * @param destination the destination value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the email property: Microsoft corporate e-mail address.
     *
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Microsoft corporate e-mail address.
     *
     * @param email the email value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the incidentNumber property: ICM (Incident Management) number in high side where onboarding details are
     * entered.
     *
     * @return the incidentNumber value.
     */
    public Long incidentNumber() {
        return this.incidentNumber;
    }

    /**
     * Set the incidentNumber property: ICM (Incident Management) number in high side where onboarding details are
     * entered.
     *
     * @param incidentNumber the incidentNumber value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withIncidentNumber(Long incidentNumber) {
        this.incidentNumber = incidentNumber;
        return this;
    }

    /**
     * Get the accessForManualTransfers property: Please confirm JIT will be used for manual transfers, whether that be
     * access to the source Storage Container or any service which interacts with the Storage Account.
     *
     * @return the accessForManualTransfers value.
     */
    public AccessForManualTransfers accessForManualTransfers() {
        return this.accessForManualTransfers;
    }

    /**
     * Set the accessForManualTransfers property: Please confirm JIT will be used for manual transfers, whether that be
     * access to the source Storage Container or any service which interacts with the Storage Account.
     *
     * @param accessForManualTransfers the accessForManualTransfers value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withAccessForManualTransfers(AccessForManualTransfers accessForManualTransfers) {
        this.accessForManualTransfers = accessForManualTransfers;
        return this;
    }

    /**
     * Get the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     *
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     *
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the usage property: Does your service have manual upload through the Teleport pipeline.
     *
     * @return the usage value.
     */
    public Usage usage() {
        return this.usage;
    }

    /**
     * Set the usage property: Does your service have manual upload through the Teleport pipeline.
     *
     * @param usage the usage value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withUsage(Usage usage) {
        this.usage = usage;
        return this;
    }

    /**
     * Get the manualUsersStatus property: Status of manual users.
     *
     * @return the manualUsersStatus value.
     */
    public ManualUsersStatus manualUsersStatus() {
        return this.manualUsersStatus;
    }

    /**
     * Set the manualUsersStatus property: Status of manual users.
     *
     * @param manualUsersStatus the manualUsersStatus value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withManualUsersStatus(ManualUsersStatus manualUsersStatus) {
        this.manualUsersStatus = manualUsersStatus;
        return this;
    }

    /**
     * Get the maxData property: Enter the max (99th percentile) data sent in a day (GB).
     *
     * @return the maxData value.
     */
    public Long maxData() {
        return this.maxData;
    }

    /**
     * Set the maxData property: Enter the max (99th percentile) data sent in a day (GB).
     *
     * @param maxData the maxData value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withMaxData(Long maxData) {
        this.maxData = maxData;
        return this;
    }

    /**
     * Get the origin property: What is the system of origin for this data?.
     *
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Set the origin property: What is the system of origin for this data?.
     *
     * @param origin the origin value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withOrigin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the primaryContactAlias property: Primary contact's alias for this data flow.
     *
     * @return the primaryContactAlias value.
     */
    public String primaryContactAlias() {
        return this.primaryContactAlias;
    }

    /**
     * Set the primaryContactAlias property: Primary contact's alias for this data flow.
     *
     * @param primaryContactAlias the primaryContactAlias value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withPrimaryContactAlias(String primaryContactAlias) {
        this.primaryContactAlias = primaryContactAlias;
        return this;
    }

    /**
     * Get the secondaryContactsAliases property: Secondary contacts' aliases for this dataflow.
     *
     * @return the secondaryContactsAliases value.
     */
    public List<String> secondaryContactsAliases() {
        return this.secondaryContactsAliases;
    }

    /**
     * Set the secondaryContactsAliases property: Secondary contacts' aliases for this dataflow.
     *
     * @param secondaryContactsAliases the secondaryContactsAliases value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withSecondaryContactsAliases(List<String> secondaryContactsAliases) {
        this.secondaryContactsAliases = secondaryContactsAliases;
        return this;
    }

    /**
     * Get the serviceName property: Service Name.
     *
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Service Name.
     *
     * @param serviceName the serviceName value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the serviceTreeId property: Service Tree ID of the service.
     *
     * @return the serviceTreeId value.
     */
    public String serviceTreeId() {
        return this.serviceTreeId;
    }

    /**
     * Set the serviceTreeId property: Service Tree ID of the service.
     *
     * @param serviceTreeId the serviceTreeId value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withServiceTreeId(String serviceTreeId) {
        this.serviceTreeId = serviceTreeId;
        return this;
    }

    /**
     * Get the status property: Status of the current flow.
     *
     * @return the status value.
     */
    public FlowStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the current flow.
     *
     * @param status the status value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStatus(FlowStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the storageAccountName property: Storage Account.
     *
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Storage Account.
     *
     * @param storageAccountName the storageAccountName value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the storageContainerName property: Storage Container.
     *
     * @return the storageContainerName value.
     */
    public String storageContainerName() {
        return this.storageContainerName;
    }

    /**
     * Set the storageContainerName property: Storage Container.
     *
     * @param storageContainerName the storageContainerName value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageContainerName(String storageContainerName) {
        this.storageContainerName = storageContainerName;
        return this;
    }

    /**
     * Get the storageContainerType property: Transfer Storage Blobs or Tables.
     *
     * @return the storageContainerType value.
     */
    public StorageContainerType storageContainerType() {
        return this.storageContainerType;
    }

    /**
     * Set the storageContainerType property: Transfer Storage Blobs or Tables.
     *
     * @param storageContainerType the storageContainerType value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageContainerType(StorageContainerType storageContainerType) {
        this.storageContainerType = storageContainerType;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription ID for the storage account to be onboarded.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription ID for the storage account to be onboarded.
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the title property: Title of flow.
     *
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of flow.
     *
     * @param title the title value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the useCase property: Use case for this data flow.
     *
     * @return the useCase value.
     */
    public String useCase() {
        return this.useCase;
    }

    /**
     * Set the useCase property: Use case for this data flow.
     *
     * @param useCase the useCase value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withUseCase(String useCase) {
        this.useCase = useCase;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the flow.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connection() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property connection in model FlowProperties"));
        } else {
            connection().validate();
        }
        if (storageAccountName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property storageAccountName in model FlowProperties"));
        }
        if (storageContainerName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property storageContainerName in model FlowProperties"));
        }
        if (storageContainerType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property storageContainerType in model FlowProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FlowProperties.class);
}
