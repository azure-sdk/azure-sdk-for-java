// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of connection. */
@Fluent
public final class ConnectionProperties {
    /*
     * Destination cloud of the data to be transferred
     */
    @JsonProperty(value = "remoteCloud", required = true)
    private String remoteCloud;

    /*
     * Justification for the connection request
     */
    @JsonProperty(value = "justification")
    private String justification;

    /*
     * Status of the connection
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private Status status;

    /*
     * Reason for status
     */
    @JsonProperty(value = "statusReason", access = JsonProperty.Access.WRITE_ONLY)
    private String statusReason;

    /*
     * Provisioning state of the connection
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the remoteCloud property: Destination cloud of the data to be transferred.
     *
     * @return the remoteCloud value.
     */
    public String remoteCloud() {
        return this.remoteCloud;
    }

    /**
     * Set the remoteCloud property: Destination cloud of the data to be transferred.
     *
     * @param remoteCloud the remoteCloud value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withRemoteCloud(String remoteCloud) {
        this.remoteCloud = remoteCloud;
        return this;
    }

    /**
     * Get the justification property: Justification for the connection request.
     *
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification for the connection request.
     *
     * @param justification the justification value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Get the status property: Status of the connection.
     *
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the statusReason property: Reason for status.
     *
     * @return the statusReason value.
     */
    public String statusReason() {
        return this.statusReason;
    }

    /**
     * Get the provisioningState property: Provisioning state of the connection.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (remoteCloud() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property remoteCloud in model ConnectionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectionProperties.class);
}
