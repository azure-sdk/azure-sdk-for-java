// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The connection to approve or reject. */
@Fluent
public final class ConnectionBody {
    /*
     * ID of the connection to approve or reject.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Reason for approval or rejection.
     */
    @JsonProperty(value = "statusReason")
    private String statusReason;

    /**
     * Get the id property: ID of the connection to approve or reject.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: ID of the connection to approve or reject.
     *
     * @param id the id value to set.
     * @return the ConnectionBody object itself.
     */
    public ConnectionBody withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the statusReason property: Reason for approval or rejection.
     *
     * @return the statusReason value.
     */
    public String statusReason() {
        return this.statusReason;
    }

    /**
     * Set the statusReason property: Reason for approval or rejection.
     *
     * @param statusReason the statusReason value to set.
     * @return the ConnectionBody object itself.
     */
    public ConnectionBody withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model ConnectionBody"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectionBody.class);
}
