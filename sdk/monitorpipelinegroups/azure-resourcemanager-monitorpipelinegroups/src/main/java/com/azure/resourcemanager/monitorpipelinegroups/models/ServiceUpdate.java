// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service Info.
 */
@Fluent
public final class ServiceUpdate implements JsonSerializable<ServiceUpdate> {
    /*
     * Pipelines belonging to a given pipeline group.
     */
    private List<Pipeline> pipelines;

    /*
     * Persistence options to all pipelines in the instance.
     */
    private PersistenceConfigurationsUpdate persistence;

    /**
     * Creates an instance of ServiceUpdate class.
     */
    public ServiceUpdate() {
    }

    /**
     * Get the pipelines property: Pipelines belonging to a given pipeline group.
     * 
     * @return the pipelines value.
     */
    public List<Pipeline> pipelines() {
        return this.pipelines;
    }

    /**
     * Set the pipelines property: Pipelines belonging to a given pipeline group.
     * 
     * @param pipelines the pipelines value to set.
     * @return the ServiceUpdate object itself.
     */
    public ServiceUpdate withPipelines(List<Pipeline> pipelines) {
        this.pipelines = pipelines;
        return this;
    }

    /**
     * Get the persistence property: Persistence options to all pipelines in the instance.
     * 
     * @return the persistence value.
     */
    public PersistenceConfigurationsUpdate persistence() {
        return this.persistence;
    }

    /**
     * Set the persistence property: Persistence options to all pipelines in the instance.
     * 
     * @param persistence the persistence value to set.
     * @return the ServiceUpdate object itself.
     */
    public ServiceUpdate withPersistence(PersistenceConfigurationsUpdate persistence) {
        this.persistence = persistence;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pipelines() != null) {
            pipelines().forEach(e -> e.validate());
        }
        if (persistence() != null) {
            persistence().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("pipelines", this.pipelines, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("persistence", this.persistence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceUpdate.
     */
    public static ServiceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceUpdate deserializedServiceUpdate = new ServiceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipelines".equals(fieldName)) {
                    List<Pipeline> pipelines = reader.readArray(reader1 -> Pipeline.fromJson(reader1));
                    deserializedServiceUpdate.pipelines = pipelines;
                } else if ("persistence".equals(fieldName)) {
                    deserializedServiceUpdate.persistence = PersistenceConfigurationsUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceUpdate;
        });
    }
}
