// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Networking route configuration.
 */
@Fluent
public final class NetworkingRoute implements JsonSerializable<NetworkingRoute> {
    /*
     * The name of the previously defined receiver.
     */
    private String receiver;

    /*
     * The port that will be configured externally. If not specified, it will use the port from the receiver definition.
     */
    private Integer port;

    /*
     * Route path.
     */
    private String path;

    /*
     * Route subdomain.
     */
    private String subdomain;

    /**
     * Creates an instance of NetworkingRoute class.
     */
    public NetworkingRoute() {
    }

    /**
     * Get the receiver property: The name of the previously defined receiver.
     * 
     * @return the receiver value.
     */
    public String receiver() {
        return this.receiver;
    }

    /**
     * Set the receiver property: The name of the previously defined receiver.
     * 
     * @param receiver the receiver value to set.
     * @return the NetworkingRoute object itself.
     */
    public NetworkingRoute withReceiver(String receiver) {
        this.receiver = receiver;
        return this;
    }

    /**
     * Get the port property: The port that will be configured externally. If not specified, it will use the port from
     * the receiver definition.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port that will be configured externally. If not specified, it will use the port from
     * the receiver definition.
     * 
     * @param port the port value to set.
     * @return the NetworkingRoute object itself.
     */
    public NetworkingRoute withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the path property: Route path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Route path.
     * 
     * @param path the path value to set.
     * @return the NetworkingRoute object itself.
     */
    public NetworkingRoute withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the subdomain property: Route subdomain.
     * 
     * @return the subdomain value.
     */
    public String subdomain() {
        return this.subdomain;
    }

    /**
     * Set the subdomain property: Route subdomain.
     * 
     * @param subdomain the subdomain value to set.
     * @return the NetworkingRoute object itself.
     */
    public NetworkingRoute withSubdomain(String subdomain) {
        this.subdomain = subdomain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (receiver() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property receiver in model NetworkingRoute"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkingRoute.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("receiver", this.receiver);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("subdomain", this.subdomain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkingRoute from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkingRoute if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkingRoute.
     */
    public static NetworkingRoute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkingRoute deserializedNetworkingRoute = new NetworkingRoute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("receiver".equals(fieldName)) {
                    deserializedNetworkingRoute.receiver = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedNetworkingRoute.port = reader.getNullable(JsonReader::getInt);
                } else if ("path".equals(fieldName)) {
                    deserializedNetworkingRoute.path = reader.getString();
                } else if ("subdomain".equals(fieldName)) {
                    deserializedNetworkingRoute.subdomain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkingRoute;
        });
    }
}
