// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Receiver Info.
 */
@Fluent
public final class Receiver implements JsonSerializable<Receiver> {
    /*
     * The type of receiver.
     */
    private ReceiverType type;

    /*
     * The name of receiver.
     */
    private String name;

    /*
     * Syslog configurations. This field is mandatory for syslog type receivers.
     */
    private SyslogReceiver syslog;

    /*
     * OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
     */
    private OtlpReceiver otlp;

    /*
     * UDP receiver configurations. This field is mandatory for UDP receivers.
     */
    private UdpReceiver udp;

    /**
     * Creates an instance of Receiver class.
     */
    public Receiver() {
    }

    /**
     * Get the type property: The type of receiver.
     * 
     * @return the type value.
     */
    public ReceiverType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of receiver.
     * 
     * @param type the type value to set.
     * @return the Receiver object itself.
     */
    public Receiver withType(ReceiverType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: The name of receiver.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of receiver.
     * 
     * @param name the name value to set.
     * @return the Receiver object itself.
     */
    public Receiver withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the syslog property: Syslog configurations. This field is mandatory for syslog type receivers.
     * 
     * @return the syslog value.
     */
    public SyslogReceiver syslog() {
        return this.syslog;
    }

    /**
     * Set the syslog property: Syslog configurations. This field is mandatory for syslog type receivers.
     * 
     * @param syslog the syslog value to set.
     * @return the Receiver object itself.
     */
    public Receiver withSyslog(SyslogReceiver syslog) {
        this.syslog = syslog;
        return this;
    }

    /**
     * Get the otlp property: OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup
     * receivers.
     * 
     * @return the otlp value.
     */
    public OtlpReceiver otlp() {
        return this.otlp;
    }

    /**
     * Set the otlp property: OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup
     * receivers.
     * 
     * @param otlp the otlp value to set.
     * @return the Receiver object itself.
     */
    public Receiver withOtlp(OtlpReceiver otlp) {
        this.otlp = otlp;
        return this;
    }

    /**
     * Get the udp property: UDP receiver configurations. This field is mandatory for UDP receivers.
     * 
     * @return the udp value.
     */
    public UdpReceiver udp() {
        return this.udp;
    }

    /**
     * Set the udp property: UDP receiver configurations. This field is mandatory for UDP receivers.
     * 
     * @param udp the udp value to set.
     * @return the Receiver object itself.
     */
    public Receiver withUdp(UdpReceiver udp) {
        this.udp = udp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model Receiver"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Receiver"));
        }
        if (syslog() != null) {
            syslog().validate();
        }
        if (otlp() != null) {
            otlp().validate();
        }
        if (udp() != null) {
            udp().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Receiver.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("syslog", this.syslog);
        jsonWriter.writeJsonField("otlp", this.otlp);
        jsonWriter.writeJsonField("udp", this.udp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Receiver from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Receiver if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Receiver.
     */
    public static Receiver fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Receiver deserializedReceiver = new Receiver();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedReceiver.type = ReceiverType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedReceiver.name = reader.getString();
                } else if ("syslog".equals(fieldName)) {
                    deserializedReceiver.syslog = SyslogReceiver.fromJson(reader);
                } else if ("otlp".equals(fieldName)) {
                    deserializedReceiver.otlp = OtlpReceiver.fromJson(reader);
                } else if ("udp".equals(fieldName)) {
                    deserializedReceiver.udp = UdpReceiver.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReceiver;
        });
    }
}
