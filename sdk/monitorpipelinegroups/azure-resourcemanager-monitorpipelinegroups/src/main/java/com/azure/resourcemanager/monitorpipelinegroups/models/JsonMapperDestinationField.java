// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
 */
@Fluent
public final class JsonMapperDestinationField implements JsonSerializable<JsonMapperDestinationField> {
    /*
     * Define the destination's element. The element is the body or the attributes of the message, to which the json
     * array mapper will write the output map.
     */
    private JsonMapperElement destination;

    /*
     * Define a destination field name under the given element. Leaving this empty, means the root of the element. In
     * case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value
     * output pairs.
     */
    private String fieldName;

    /**
     * Creates an instance of JsonMapperDestinationField class.
     */
    public JsonMapperDestinationField() {
    }

    /**
     * Get the destination property: Define the destination's element. The element is the body or the attributes of the
     * message, to which the json array mapper will write the output map.
     * 
     * @return the destination value.
     */
    public JsonMapperElement destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Define the destination's element. The element is the body or the attributes of the
     * message, to which the json array mapper will write the output map.
     * 
     * @param destination the destination value to set.
     * @return the JsonMapperDestinationField object itself.
     */
    public JsonMapperDestinationField withDestination(JsonMapperElement destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the fieldName property: Define a destination field name under the given element. Leaving this empty, means
     * the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves
     * will contain the key value output pairs.
     * 
     * @return the fieldName value.
     */
    public String fieldName() {
        return this.fieldName;
    }

    /**
     * Set the fieldName property: Define a destination field name under the given element. Leaving this empty, means
     * the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves
     * will contain the key value output pairs.
     * 
     * @param fieldName the fieldName value to set.
     * @return the JsonMapperDestinationField object itself.
     */
    public JsonMapperDestinationField withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destination", this.destination == null ? null : this.destination.toString());
        jsonWriter.writeStringField("fieldName", this.fieldName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonMapperDestinationField from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonMapperDestinationField if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JsonMapperDestinationField.
     */
    public static JsonMapperDestinationField fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonMapperDestinationField deserializedJsonMapperDestinationField = new JsonMapperDestinationField();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(jsonFieldName)) {
                    deserializedJsonMapperDestinationField.destination
                        = JsonMapperElement.fromString(reader.getString());
                } else if ("fieldName".equals(jsonFieldName)) {
                    deserializedJsonMapperDestinationField.fieldName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonMapperDestinationField;
        });
    }
}
