// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Pipeline Info.
 */
@Fluent
public final class Pipeline implements JsonSerializable<Pipeline> {
    /*
     * Name of the pipeline.
     */
    private String name;

    /*
     * The type of pipeline
     */
    private PipelineType type;

    /*
     * Reference to receivers configured for the pipeline.
     */
    private List<String> receivers;

    /*
     * Reference to processors configured for the pipeline.
     */
    private List<String> processors;

    /*
     * Reference to exporters configured for the pipeline.
     */
    private List<String> exporters;

    /**
     * Creates an instance of Pipeline class.
     */
    public Pipeline() {
    }

    /**
     * Get the name property: Name of the pipeline.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the pipeline.
     * 
     * @param name the name value to set.
     * @return the Pipeline object itself.
     */
    public Pipeline withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of pipeline.
     * 
     * @return the type value.
     */
    public PipelineType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of pipeline.
     * 
     * @param type the type value to set.
     * @return the Pipeline object itself.
     */
    public Pipeline withType(PipelineType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the receivers property: Reference to receivers configured for the pipeline.
     * 
     * @return the receivers value.
     */
    public List<String> receivers() {
        return this.receivers;
    }

    /**
     * Set the receivers property: Reference to receivers configured for the pipeline.
     * 
     * @param receivers the receivers value to set.
     * @return the Pipeline object itself.
     */
    public Pipeline withReceivers(List<String> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * Get the processors property: Reference to processors configured for the pipeline.
     * 
     * @return the processors value.
     */
    public List<String> processors() {
        return this.processors;
    }

    /**
     * Set the processors property: Reference to processors configured for the pipeline.
     * 
     * @param processors the processors value to set.
     * @return the Pipeline object itself.
     */
    public Pipeline withProcessors(List<String> processors) {
        this.processors = processors;
        return this;
    }

    /**
     * Get the exporters property: Reference to exporters configured for the pipeline.
     * 
     * @return the exporters value.
     */
    public List<String> exporters() {
        return this.exporters;
    }

    /**
     * Set the exporters property: Reference to exporters configured for the pipeline.
     * 
     * @param exporters the exporters value to set.
     * @return the Pipeline object itself.
     */
    public Pipeline withExporters(List<String> exporters) {
        this.exporters = exporters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Pipeline"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model Pipeline"));
        }
        if (receivers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property receivers in model Pipeline"));
        }
        if (exporters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property exporters in model Pipeline"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Pipeline.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("receivers", this.receivers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exporters", this.exporters, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("processors", this.processors, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Pipeline from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Pipeline if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Pipeline.
     */
    public static Pipeline fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Pipeline deserializedPipeline = new Pipeline();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPipeline.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPipeline.type = PipelineType.fromString(reader.getString());
                } else if ("receivers".equals(fieldName)) {
                    List<String> receivers = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipeline.receivers = receivers;
                } else if ("exporters".equals(fieldName)) {
                    List<String> exporters = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipeline.exporters = exporters;
                } else if ("processors".equals(fieldName)) {
                    List<String> processors = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipeline.processors = processors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipeline;
        });
    }
}
