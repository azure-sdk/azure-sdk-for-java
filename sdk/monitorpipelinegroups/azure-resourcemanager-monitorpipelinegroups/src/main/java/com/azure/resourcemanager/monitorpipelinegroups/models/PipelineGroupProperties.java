// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties that need to be specified to create a new pipeline group instance.
 */
@Fluent
public final class PipelineGroupProperties implements JsonSerializable<PipelineGroupProperties> {
    /*
     * Defines the amount of replicas of the pipeline group instance.
     */
    private Integer replicas;

    /*
     * The receivers specified for a pipeline group instance.
     */
    private List<Receiver> receivers;

    /*
     * The processors specified for a pipeline group instance.
     */
    private List<Processor> processors;

    /*
     * The exporters specified for a pipeline group instance.
     */
    private List<Exporter> exporters;

    /*
     * The service section for a given pipeline group instance.
     */
    private Service service;

    /*
     * Networking configurations for the pipeline group instance.
     */
    private List<NetworkingConfiguration> networkingConfigurations;

    /*
     * The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PipelineGroupProperties class.
     */
    public PipelineGroupProperties() {
    }

    /**
     * Get the replicas property: Defines the amount of replicas of the pipeline group instance.
     * 
     * @return the replicas value.
     */
    public Integer replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: Defines the amount of replicas of the pipeline group instance.
     * 
     * @param replicas the replicas value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties withReplicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the receivers property: The receivers specified for a pipeline group instance.
     * 
     * @return the receivers value.
     */
    public List<Receiver> receivers() {
        return this.receivers;
    }

    /**
     * Set the receivers property: The receivers specified for a pipeline group instance.
     * 
     * @param receivers the receivers value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties withReceivers(List<Receiver> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * Get the processors property: The processors specified for a pipeline group instance.
     * 
     * @return the processors value.
     */
    public List<Processor> processors() {
        return this.processors;
    }

    /**
     * Set the processors property: The processors specified for a pipeline group instance.
     * 
     * @param processors the processors value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties withProcessors(List<Processor> processors) {
        this.processors = processors;
        return this;
    }

    /**
     * Get the exporters property: The exporters specified for a pipeline group instance.
     * 
     * @return the exporters value.
     */
    public List<Exporter> exporters() {
        return this.exporters;
    }

    /**
     * Set the exporters property: The exporters specified for a pipeline group instance.
     * 
     * @param exporters the exporters value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties withExporters(List<Exporter> exporters) {
        this.exporters = exporters;
        return this;
    }

    /**
     * Get the service property: The service section for a given pipeline group instance.
     * 
     * @return the service value.
     */
    public Service service() {
        return this.service;
    }

    /**
     * Set the service property: The service section for a given pipeline group instance.
     * 
     * @param service the service value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties withService(Service service) {
        this.service = service;
        return this;
    }

    /**
     * Get the networkingConfigurations property: Networking configurations for the pipeline group instance.
     * 
     * @return the networkingConfigurations value.
     */
    public List<NetworkingConfiguration> networkingConfigurations() {
        return this.networkingConfigurations;
    }

    /**
     * Set the networkingConfigurations property: Networking configurations for the pipeline group instance.
     * 
     * @param networkingConfigurations the networkingConfigurations value to set.
     * @return the PipelineGroupProperties object itself.
     */
    public PipelineGroupProperties
        withNetworkingConfigurations(List<NetworkingConfiguration> networkingConfigurations) {
        this.networkingConfigurations = networkingConfigurations;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of a pipeline group instance. Set to Succeeded if
     * everything is healthy.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (receivers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property receivers in model PipelineGroupProperties"));
        } else {
            receivers().forEach(e -> e.validate());
        }
        if (processors() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property processors in model PipelineGroupProperties"));
        } else {
            processors().forEach(e -> e.validate());
        }
        if (exporters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property exporters in model PipelineGroupProperties"));
        } else {
            exporters().forEach(e -> e.validate());
        }
        if (service() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property service in model PipelineGroupProperties"));
        } else {
            service().validate();
        }
        if (networkingConfigurations() != null) {
            networkingConfigurations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("receivers", this.receivers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("processors", this.processors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("exporters", this.exporters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("service", this.service);
        jsonWriter.writeNumberField("replicas", this.replicas);
        jsonWriter.writeArrayField("networkingConfigurations", this.networkingConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineGroupProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineGroupProperties.
     */
    public static PipelineGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineGroupProperties deserializedPipelineGroupProperties = new PipelineGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("receivers".equals(fieldName)) {
                    List<Receiver> receivers = reader.readArray(reader1 -> Receiver.fromJson(reader1));
                    deserializedPipelineGroupProperties.receivers = receivers;
                } else if ("processors".equals(fieldName)) {
                    List<Processor> processors = reader.readArray(reader1 -> Processor.fromJson(reader1));
                    deserializedPipelineGroupProperties.processors = processors;
                } else if ("exporters".equals(fieldName)) {
                    List<Exporter> exporters = reader.readArray(reader1 -> Exporter.fromJson(reader1));
                    deserializedPipelineGroupProperties.exporters = exporters;
                } else if ("service".equals(fieldName)) {
                    deserializedPipelineGroupProperties.service = Service.fromJson(reader);
                } else if ("replicas".equals(fieldName)) {
                    deserializedPipelineGroupProperties.replicas = reader.getNullable(JsonReader::getInt);
                } else if ("networkingConfigurations".equals(fieldName)) {
                    List<NetworkingConfiguration> networkingConfigurations
                        = reader.readArray(reader1 -> NetworkingConfiguration.fromJson(reader1));
                    deserializedPipelineGroupProperties.networkingConfigurations = networkingConfigurations;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPipelineGroupProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineGroupProperties;
        });
    }
}
