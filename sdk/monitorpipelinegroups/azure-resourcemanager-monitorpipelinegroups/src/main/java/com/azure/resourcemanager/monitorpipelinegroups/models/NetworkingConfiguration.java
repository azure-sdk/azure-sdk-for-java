// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Networking configuration for the pipeline group instance.
 */
@Fluent
public final class NetworkingConfiguration implements JsonSerializable<NetworkingConfiguration> {
    /*
     * External networking mode.
     */
    private ExternalNetworkingMode externalNetworkingMode;

    /*
     * The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
     */
    private String host;

    /*
     * Networking routes configuration.
     */
    private List<NetworkingRoute> routes;

    /**
     * Creates an instance of NetworkingConfiguration class.
     */
    public NetworkingConfiguration() {
    }

    /**
     * Get the externalNetworkingMode property: External networking mode.
     * 
     * @return the externalNetworkingMode value.
     */
    public ExternalNetworkingMode externalNetworkingMode() {
        return this.externalNetworkingMode;
    }

    /**
     * Set the externalNetworkingMode property: External networking mode.
     * 
     * @param externalNetworkingMode the externalNetworkingMode value to set.
     * @return the NetworkingConfiguration object itself.
     */
    public NetworkingConfiguration withExternalNetworkingMode(ExternalNetworkingMode externalNetworkingMode) {
        this.externalNetworkingMode = externalNetworkingMode;
        return this;
    }

    /**
     * Get the host property: The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
     * 
     * @param host the host value to set.
     * @return the NetworkingConfiguration object itself.
     */
    public NetworkingConfiguration withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the routes property: Networking routes configuration.
     * 
     * @return the routes value.
     */
    public List<NetworkingRoute> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: Networking routes configuration.
     * 
     * @param routes the routes value to set.
     * @return the NetworkingConfiguration object itself.
     */
    public NetworkingConfiguration withRoutes(List<NetworkingRoute> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (externalNetworkingMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property externalNetworkingMode in model NetworkingConfiguration"));
        }
        if (routes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property routes in model NetworkingConfiguration"));
        } else {
            routes().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkingConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("externalNetworkingMode",
            this.externalNetworkingMode == null ? null : this.externalNetworkingMode.toString());
        jsonWriter.writeArrayField("routes", this.routes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("host", this.host);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkingConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkingConfiguration.
     */
    public static NetworkingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkingConfiguration deserializedNetworkingConfiguration = new NetworkingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("externalNetworkingMode".equals(fieldName)) {
                    deserializedNetworkingConfiguration.externalNetworkingMode
                        = ExternalNetworkingMode.fromString(reader.getString());
                } else if ("routes".equals(fieldName)) {
                    List<NetworkingRoute> routes = reader.readArray(reader1 -> NetworkingRoute.fromJson(reader1));
                    deserializedNetworkingConfiguration.routes = routes;
                } else if ("host".equals(fieldName)) {
                    deserializedNetworkingConfiguration.host = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkingConfiguration;
        });
    }
}
