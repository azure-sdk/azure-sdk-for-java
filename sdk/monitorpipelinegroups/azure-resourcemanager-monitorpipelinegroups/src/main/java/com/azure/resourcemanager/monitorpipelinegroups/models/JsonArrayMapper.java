// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys,
 * and output the key-value map to destinationField field.
 */
@Fluent
public final class JsonArrayMapper implements JsonSerializable<JsonArrayMapper> {
    /*
     * Define a source field from which a json array will be read and parsed to it's elements. The number of elements in
     * the json array is expected to be the same as the length of keys.
     */
    private JsonMapperSourceField sourceField;

    /*
     * Define a destination field to which the parsed output will be written. The output is a map, it's keys is the
     * given keys array and the matching values are the parsed json array elements.
     */
    private JsonMapperDestinationField destinationField;

    /*
     * Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for
     * every key.
     */
    private List<String> keys;

    /**
     * Creates an instance of JsonArrayMapper class.
     */
    public JsonArrayMapper() {
    }

    /**
     * Get the sourceField property: Define a source field from which a json array will be read and parsed to it's
     * elements. The number of elements in the json array is expected to be the same as the length of keys.
     * 
     * @return the sourceField value.
     */
    public JsonMapperSourceField sourceField() {
        return this.sourceField;
    }

    /**
     * Set the sourceField property: Define a source field from which a json array will be read and parsed to it's
     * elements. The number of elements in the json array is expected to be the same as the length of keys.
     * 
     * @param sourceField the sourceField value to set.
     * @return the JsonArrayMapper object itself.
     */
    public JsonArrayMapper withSourceField(JsonMapperSourceField sourceField) {
        this.sourceField = sourceField;
        return this;
    }

    /**
     * Get the destinationField property: Define a destination field to which the parsed output will be written. The
     * output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
     * 
     * @return the destinationField value.
     */
    public JsonMapperDestinationField destinationField() {
        return this.destinationField;
    }

    /**
     * Set the destinationField property: Define a destination field to which the parsed output will be written. The
     * output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
     * 
     * @param destinationField the destinationField value to set.
     * @return the JsonArrayMapper object itself.
     */
    public JsonArrayMapper withDestinationField(JsonMapperDestinationField destinationField) {
        this.destinationField = destinationField;
        return this;
    }

    /**
     * Get the keys property: Define the names of the keys in the resulting map. The input json array elements are
     * mapped in order, one for every key.
     * 
     * @return the keys value.
     */
    public List<String> keys() {
        return this.keys;
    }

    /**
     * Set the keys property: Define the names of the keys in the resulting map. The input json array elements are
     * mapped in order, one for every key.
     * 
     * @param keys the keys value to set.
     * @return the JsonArrayMapper object itself.
     */
    public JsonArrayMapper withKeys(List<String> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceField() != null) {
            sourceField().validate();
        }
        if (destinationField() != null) {
            destinationField().validate();
        }
        if (keys() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keys in model JsonArrayMapper"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JsonArrayMapper.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("keys", this.keys, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sourceField", this.sourceField);
        jsonWriter.writeJsonField("destinationField", this.destinationField);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonArrayMapper from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonArrayMapper if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JsonArrayMapper.
     */
    public static JsonArrayMapper fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonArrayMapper deserializedJsonArrayMapper = new JsonArrayMapper();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keys".equals(fieldName)) {
                    List<String> keys = reader.readArray(reader1 -> reader1.getString());
                    deserializedJsonArrayMapper.keys = keys;
                } else if ("sourceField".equals(fieldName)) {
                    deserializedJsonArrayMapper.sourceField = JsonMapperSourceField.fromJson(reader);
                } else if ("destinationField".equals(fieldName)) {
                    deserializedJsonArrayMapper.destinationField = JsonMapperDestinationField.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonArrayMapper;
        });
    }
}
