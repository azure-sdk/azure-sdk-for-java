// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The encoding of the stream being received.
 */
public final class StreamEncodingType extends ExpandableStringEnum<StreamEncodingType> {
    /**
     * Static value nop for StreamEncodingType.
     */
    public static final StreamEncodingType NOP = fromString("nop");

    /**
     * Static value utf-8 for StreamEncodingType.
     */
    public static final StreamEncodingType UTF_8 = fromString("utf-8");

    /**
     * Static value utf-16le for StreamEncodingType.
     */
    public static final StreamEncodingType UTF_16LE = fromString("utf-16le");

    /**
     * Static value utf-16be for StreamEncodingType.
     */
    public static final StreamEncodingType UTF_16BE = fromString("utf-16be");

    /**
     * Static value ascii for StreamEncodingType.
     */
    public static final StreamEncodingType ASCII = fromString("ascii");

    /**
     * Static value big5 for StreamEncodingType.
     */
    public static final StreamEncodingType BIG5 = fromString("big5");

    /**
     * Creates a new instance of StreamEncodingType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public StreamEncodingType() {
    }

    /**
     * Creates or finds a StreamEncodingType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding StreamEncodingType.
     */
    public static StreamEncodingType fromString(String name) {
        return fromString(name, StreamEncodingType.class);
    }

    /**
     * Gets known StreamEncodingType values.
     * 
     * @return known StreamEncodingType values.
     */
    public static Collection<StreamEncodingType> values() {
        return values(StreamEncodingType.class);
    }
}
