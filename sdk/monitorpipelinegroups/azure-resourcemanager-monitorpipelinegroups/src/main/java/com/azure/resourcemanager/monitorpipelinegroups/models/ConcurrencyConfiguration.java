// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Concurrent publishing configuration.
 */
@Fluent
public final class ConcurrencyConfiguration implements JsonSerializable<ConcurrencyConfiguration> {
    /*
     * Number of parallel workers processing the log queues.
     */
    private Integer workerCount;

    /*
     * Size of the queue for log batches.
     */
    private Integer batchQueueSize;

    /**
     * Creates an instance of ConcurrencyConfiguration class.
     */
    public ConcurrencyConfiguration() {
    }

    /**
     * Get the workerCount property: Number of parallel workers processing the log queues.
     * 
     * @return the workerCount value.
     */
    public Integer workerCount() {
        return this.workerCount;
    }

    /**
     * Set the workerCount property: Number of parallel workers processing the log queues.
     * 
     * @param workerCount the workerCount value to set.
     * @return the ConcurrencyConfiguration object itself.
     */
    public ConcurrencyConfiguration withWorkerCount(Integer workerCount) {
        this.workerCount = workerCount;
        return this;
    }

    /**
     * Get the batchQueueSize property: Size of the queue for log batches.
     * 
     * @return the batchQueueSize value.
     */
    public Integer batchQueueSize() {
        return this.batchQueueSize;
    }

    /**
     * Set the batchQueueSize property: Size of the queue for log batches.
     * 
     * @param batchQueueSize the batchQueueSize value to set.
     * @return the ConcurrencyConfiguration object itself.
     */
    public ConcurrencyConfiguration withBatchQueueSize(Integer batchQueueSize) {
        this.batchQueueSize = batchQueueSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("workerCount", this.workerCount);
        jsonWriter.writeNumberField("batchQueueSize", this.batchQueueSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConcurrencyConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConcurrencyConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConcurrencyConfiguration.
     */
    public static ConcurrencyConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConcurrencyConfiguration deserializedConcurrencyConfiguration = new ConcurrencyConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workerCount".equals(fieldName)) {
                    deserializedConcurrencyConfiguration.workerCount = reader.getNullable(JsonReader::getInt);
                } else if ("batchQueueSize".equals(fieldName)) {
                    deserializedConcurrencyConfiguration.batchQueueSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConcurrencyConfiguration;
        });
    }
}
