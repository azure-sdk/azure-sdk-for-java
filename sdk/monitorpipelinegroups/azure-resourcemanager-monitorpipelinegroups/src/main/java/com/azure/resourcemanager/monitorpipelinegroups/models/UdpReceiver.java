// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitorpipelinegroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Receiver using UDP as transport protocol.
 */
@Fluent
public final class UdpReceiver implements JsonSerializable<UdpReceiver> {
    /*
     * TCP endpoint definition. Example: 0.0.0.0:<port>.
     */
    private String endpoint;

    /*
     * The encoding of the stream being received.
     */
    private StreamEncodingType encoding;

    /*
     * Max read queue length.
     */
    private Integer readQueueLength;

    /*
     * Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a
     * key to each parsed value and output the key-value map to a given output field.
     */
    private JsonArrayMapper jsonArrayMapper;

    /**
     * Creates an instance of UdpReceiver class.
     */
    public UdpReceiver() {
    }

    /**
     * Get the endpoint property: TCP endpoint definition. Example: 0.0.0.0:&lt;port&gt;.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: TCP endpoint definition. Example: 0.0.0.0:&lt;port&gt;.
     * 
     * @param endpoint the endpoint value to set.
     * @return the UdpReceiver object itself.
     */
    public UdpReceiver withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the encoding property: The encoding of the stream being received.
     * 
     * @return the encoding value.
     */
    public StreamEncodingType encoding() {
        return this.encoding;
    }

    /**
     * Set the encoding property: The encoding of the stream being received.
     * 
     * @param encoding the encoding value to set.
     * @return the UdpReceiver object itself.
     */
    public UdpReceiver withEncoding(StreamEncodingType encoding) {
        this.encoding = encoding;
        return this;
    }

    /**
     * Get the readQueueLength property: Max read queue length.
     * 
     * @return the readQueueLength value.
     */
    public Integer readQueueLength() {
        return this.readQueueLength;
    }

    /**
     * Set the readQueueLength property: Max read queue length.
     * 
     * @param readQueueLength the readQueueLength value to set.
     * @return the UdpReceiver object itself.
     */
    public UdpReceiver withReadQueueLength(Integer readQueueLength) {
        this.readQueueLength = readQueueLength;
        return this;
    }

    /**
     * Get the jsonArrayMapper property: Json array mapper - allows this udp receiver to parse a value from a given
     * source field as a json array, match a key to each parsed value and output the key-value map to a given output
     * field.
     * 
     * @return the jsonArrayMapper value.
     */
    public JsonArrayMapper jsonArrayMapper() {
        return this.jsonArrayMapper;
    }

    /**
     * Set the jsonArrayMapper property: Json array mapper - allows this udp receiver to parse a value from a given
     * source field as a json array, match a key to each parsed value and output the key-value map to a given output
     * field.
     * 
     * @param jsonArrayMapper the jsonArrayMapper value to set.
     * @return the UdpReceiver object itself.
     */
    public UdpReceiver withJsonArrayMapper(JsonArrayMapper jsonArrayMapper) {
        this.jsonArrayMapper = jsonArrayMapper;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endpoint in model UdpReceiver"));
        }
        if (jsonArrayMapper() != null) {
            jsonArrayMapper().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UdpReceiver.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("encoding", this.encoding == null ? null : this.encoding.toString());
        jsonWriter.writeNumberField("readQueueLength", this.readQueueLength);
        jsonWriter.writeJsonField("jsonArrayMapper", this.jsonArrayMapper);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UdpReceiver from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UdpReceiver if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UdpReceiver.
     */
    public static UdpReceiver fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UdpReceiver deserializedUdpReceiver = new UdpReceiver();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    deserializedUdpReceiver.endpoint = reader.getString();
                } else if ("encoding".equals(fieldName)) {
                    deserializedUdpReceiver.encoding = StreamEncodingType.fromString(reader.getString());
                } else if ("readQueueLength".equals(fieldName)) {
                    deserializedUdpReceiver.readQueueLength = reader.getNullable(JsonReader::getInt);
                } else if ("jsonArrayMapper".equals(fieldName)) {
                    deserializedUdpReceiver.jsonArrayMapper = JsonArrayMapper.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUdpReceiver;
        });
    }
}
