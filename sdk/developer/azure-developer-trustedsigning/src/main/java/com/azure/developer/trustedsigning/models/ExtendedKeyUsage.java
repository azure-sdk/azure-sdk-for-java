// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.trustedsigning.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Extended key usage object identifier that are allowable.
 */
@Immutable
public final class ExtendedKeyUsage implements JsonSerializable<ExtendedKeyUsage> {
    /*
     * An oid string that represents an eku.
     */
    @Generated
    private String eku;

    /**
     * Creates an instance of ExtendedKeyUsage class.
     */
    @Generated
    private ExtendedKeyUsage() {
    }

    /**
     * Get the eku property: An oid string that represents an eku.
     * 
     * @return the eku value.
     */
    @Generated
    public String getEku() {
        return this.eku;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtendedKeyUsage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtendedKeyUsage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtendedKeyUsage.
     */
    @Generated
    public static ExtendedKeyUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtendedKeyUsage deserializedExtendedKeyUsage = new ExtendedKeyUsage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eku".equals(fieldName)) {
                    deserializedExtendedKeyUsage.eku = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtendedKeyUsage;
        });
    }
}
