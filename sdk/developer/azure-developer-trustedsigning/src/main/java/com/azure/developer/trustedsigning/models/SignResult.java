// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.trustedsigning.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sign status model.
 */
@Immutable
public final class SignResult implements JsonSerializable<SignResult> {
    /*
     * Digital signature of the requested content digest.
     */
    @Generated
    private byte[] signature;

    /*
     * Signing certificate corresponding to the private key used to sign the requested
     * digest.
     */
    @Generated
    private byte[] signingCertificate;

    /**
     * Creates an instance of SignResult class.
     */
    @Generated
    private SignResult() {
    }

    /**
     * Get the signature property: Digital signature of the requested content digest.
     * 
     * @return the signature value.
     */
    @Generated
    public byte[] getSignature() {
        return CoreUtils.clone(this.signature);
    }

    /**
     * Get the signingCertificate property: Signing certificate corresponding to the private key used to sign the
     * requested
     * digest.
     * 
     * @return the signingCertificate value.
     */
    @Generated
    public byte[] getSigningCertificate() {
        return CoreUtils.clone(this.signingCertificate);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("signature", this.signature);
        jsonWriter.writeBinaryField("signingCertificate", this.signingCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SignResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SignResult if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SignResult.
     */
    @Generated
    public static SignResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SignResult deserializedSignResult = new SignResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("signature".equals(fieldName)) {
                    deserializedSignResult.signature = reader.getBinary();
                } else if ("signingCertificate".equals(fieldName)) {
                    deserializedSignResult.signingCertificate = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSignResult;
        });
    }
}
