// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.signing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The artifact request information to be signed by the service.
 */
@Fluent
public final class SigningPayloadOptions implements JsonSerializable<SigningPayloadOptions> {
    /*
     * The supported signature algorithm identifiers.
     */
    @Generated
    private final SignatureAlgorithm signatureAlgorithm;

    /*
     * Content digest to sign.
     */
    @Generated
    private final byte[] digest;

    /*
     * List of full file digital signatures.
     */
    @Generated
    private List<byte[]> fileHashList;

    /*
     * List of authenticode digital signatures.
     */
    @Generated
    private List<byte[]> authenticodeHashList;

    /**
     * Creates an instance of SigningPayloadOptions class.
     * 
     * @param signatureAlgorithm the signatureAlgorithm value to set.
     * @param digest the digest value to set.
     */
    @Generated
    public SigningPayloadOptions(SignatureAlgorithm signatureAlgorithm, byte[] digest) {
        this.signatureAlgorithm = signatureAlgorithm;
        this.digest = digest;
    }

    /**
     * Get the signatureAlgorithm property: The supported signature algorithm identifiers.
     * 
     * @return the signatureAlgorithm value.
     */
    @Generated
    public SignatureAlgorithm getSignatureAlgorithm() {
        return this.signatureAlgorithm;
    }

    /**
     * Get the digest property: Content digest to sign.
     * 
     * @return the digest value.
     */
    @Generated
    public byte[] getDigest() {
        return CoreUtils.clone(this.digest);
    }

    /**
     * Get the fileHashList property: List of full file digital signatures.
     * 
     * @return the fileHashList value.
     */
    @Generated
    public List<byte[]> getFileHashList() {
        return this.fileHashList;
    }

    /**
     * Set the fileHashList property: List of full file digital signatures.
     * 
     * @param fileHashList the fileHashList value to set.
     * @return the SigningPayloadOptions object itself.
     */
    @Generated
    public SigningPayloadOptions setFileHashList(List<byte[]> fileHashList) {
        this.fileHashList = fileHashList;
        return this;
    }

    /**
     * Get the authenticodeHashList property: List of authenticode digital signatures.
     * 
     * @return the authenticodeHashList value.
     */
    @Generated
    public List<byte[]> getAuthenticodeHashList() {
        return this.authenticodeHashList;
    }

    /**
     * Set the authenticodeHashList property: List of authenticode digital signatures.
     * 
     * @param authenticodeHashList the authenticodeHashList value to set.
     * @return the SigningPayloadOptions object itself.
     */
    @Generated
    public SigningPayloadOptions setAuthenticodeHashList(List<byte[]> authenticodeHashList) {
        this.authenticodeHashList = authenticodeHashList;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("signatureAlgorithm",
            this.signatureAlgorithm == null ? null : this.signatureAlgorithm.toString());
        jsonWriter.writeBinaryField("digest", this.digest);
        jsonWriter.writeArrayField("fileHashList", this.fileHashList, (writer, element) -> writer.writeBinary(element));
        jsonWriter.writeArrayField("authenticodeHashList", this.authenticodeHashList,
            (writer, element) -> writer.writeBinary(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SigningPayloadOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SigningPayloadOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SigningPayloadOptions.
     */
    @Generated
    public static SigningPayloadOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SignatureAlgorithm signatureAlgorithm = null;
            byte[] digest = null;
            List<byte[]> fileHashList = null;
            List<byte[]> authenticodeHashList = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("signatureAlgorithm".equals(fieldName)) {
                    signatureAlgorithm = SignatureAlgorithm.fromString(reader.getString());
                } else if ("digest".equals(fieldName)) {
                    digest = reader.getBinary();
                } else if ("fileHashList".equals(fieldName)) {
                    fileHashList = reader.readArray(reader1 -> reader1.getBinary());
                } else if ("authenticodeHashList".equals(fieldName)) {
                    authenticodeHashList = reader.readArray(reader1 -> reader1.getBinary());
                } else {
                    reader.skipChildren();
                }
            }
            SigningPayloadOptions deserializedSigningPayloadOptions
                = new SigningPayloadOptions(signatureAlgorithm, digest);
            deserializedSigningPayloadOptions.fileHashList = fileHashList;
            deserializedSigningPayloadOptions.authenticodeHashList = authenticodeHashList;

            return deserializedSigningPayloadOptions;
        });
    }
}
