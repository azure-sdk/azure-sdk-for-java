// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.verifiedid.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.verifiedid.fluent.models.AuthorityInner;
import com.azure.resourcemanager.verifiedid.models.AuthorityUpdate;

/**
 * An instance of this class provides access to all the operations defined in AuthoritiesClient.
 */
public interface AuthoritiesClient {
    /**
     * List Authority resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Authority list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorityInner> list();

    /**
     * List Authority resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Authority list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorityInner> list(Context context);

    /**
     * A resource list operation, at the scope of the resource's parent.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Authority list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorityInner> listByResourceGroup(String resourceGroupName);

    /**
     * A resource list operation, at the scope of the resource's parent.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Authority list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorityInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Authority along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AuthorityInner> getByResourceGroupWithResponse(String resourceGroupName, String authorityName,
        Context context);

    /**
     * Get a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Authority.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorityInner getByResourceGroup(String resourceGroupName, String authorityName);

    /**
     * Create a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a VerifiedId authority resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AuthorityInner>, AuthorityInner> beginCreateOrUpdate(String resourceGroupName,
        String authorityName, AuthorityInner resource);

    /**
     * Create a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a VerifiedId authority resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AuthorityInner>, AuthorityInner> beginCreateOrUpdate(String resourceGroupName,
        String authorityName, AuthorityInner resource, Context context);

    /**
     * Create a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a VerifiedId authority resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorityInner createOrUpdate(String resourceGroupName, String authorityName, AuthorityInner resource);

    /**
     * Create a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a VerifiedId authority resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorityInner createOrUpdate(String resourceGroupName, String authorityName, AuthorityInner resource,
        Context context);

    /**
     * Update a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a VerifiedId authority resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AuthorityInner> updateWithResponse(String resourceGroupName, String authorityName,
        AuthorityUpdate properties, Context context);

    /**
     * Update a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a VerifiedId authority resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorityInner update(String resourceGroupName, String authorityName, AuthorityUpdate properties);

    /**
     * Delete a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String authorityName, Context context);

    /**
     * Delete a Authority.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param authorityName The ID of the authority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String authorityName);
}
