// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The credentials for authentication mode UsernamePassword.
 */
@Fluent
public final class UsernamePasswordCredentialsUpdate implements JsonSerializable<UsernamePasswordCredentialsUpdate> {
    /*
     * A reference to secret containing the username.
     */
    private String usernameReference;

    /*
     * A reference to secret containing the password.
     */
    private String passwordReference;

    /**
     * Creates an instance of UsernamePasswordCredentialsUpdate class.
     */
    public UsernamePasswordCredentialsUpdate() {
    }

    /**
     * Get the usernameReference property: A reference to secret containing the username.
     * 
     * @return the usernameReference value.
     */
    public String usernameReference() {
        return this.usernameReference;
    }

    /**
     * Set the usernameReference property: A reference to secret containing the username.
     * 
     * @param usernameReference the usernameReference value to set.
     * @return the UsernamePasswordCredentialsUpdate object itself.
     */
    public UsernamePasswordCredentialsUpdate withUsernameReference(String usernameReference) {
        this.usernameReference = usernameReference;
        return this;
    }

    /**
     * Get the passwordReference property: A reference to secret containing the password.
     * 
     * @return the passwordReference value.
     */
    public String passwordReference() {
        return this.passwordReference;
    }

    /**
     * Set the passwordReference property: A reference to secret containing the password.
     * 
     * @param passwordReference the passwordReference value to set.
     * @return the UsernamePasswordCredentialsUpdate object itself.
     */
    public UsernamePasswordCredentialsUpdate withPasswordReference(String passwordReference) {
        this.passwordReference = passwordReference;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("usernameReference", this.usernameReference);
        jsonWriter.writeStringField("passwordReference", this.passwordReference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsernamePasswordCredentialsUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsernamePasswordCredentialsUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UsernamePasswordCredentialsUpdate.
     */
    public static UsernamePasswordCredentialsUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsernamePasswordCredentialsUpdate deserializedUsernamePasswordCredentialsUpdate
                = new UsernamePasswordCredentialsUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usernameReference".equals(fieldName)) {
                    deserializedUsernamePasswordCredentialsUpdate.usernameReference = reader.getString();
                } else if ("passwordReference".equals(fieldName)) {
                    deserializedUsernamePasswordCredentialsUpdate.passwordReference = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsernamePasswordCredentialsUpdate;
        });
    }
}
