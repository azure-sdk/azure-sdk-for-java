// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The credentials for authentication mode UsernamePassword.
 */
@Fluent
public final class UsernamePasswordCredentialsUpdate implements JsonSerializable<UsernamePasswordCredentialsUpdate> {
    /*
     * The name of the secret containing the username.
     */
    private String usernameSecretName;

    /*
     * The name of the secret containing the password.
     */
    private String passwordSecretName;

    /**
     * Creates an instance of UsernamePasswordCredentialsUpdate class.
     */
    public UsernamePasswordCredentialsUpdate() {
    }

    /**
     * Get the usernameSecretName property: The name of the secret containing the username.
     * 
     * @return the usernameSecretName value.
     */
    public String usernameSecretName() {
        return this.usernameSecretName;
    }

    /**
     * Set the usernameSecretName property: The name of the secret containing the username.
     * 
     * @param usernameSecretName the usernameSecretName value to set.
     * @return the UsernamePasswordCredentialsUpdate object itself.
     */
    public UsernamePasswordCredentialsUpdate withUsernameSecretName(String usernameSecretName) {
        this.usernameSecretName = usernameSecretName;
        return this;
    }

    /**
     * Get the passwordSecretName property: The name of the secret containing the password.
     * 
     * @return the passwordSecretName value.
     */
    public String passwordSecretName() {
        return this.passwordSecretName;
    }

    /**
     * Set the passwordSecretName property: The name of the secret containing the password.
     * 
     * @param passwordSecretName the passwordSecretName value to set.
     * @return the UsernamePasswordCredentialsUpdate object itself.
     */
    public UsernamePasswordCredentialsUpdate withPasswordSecretName(String passwordSecretName) {
        this.passwordSecretName = passwordSecretName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("usernameSecretName", this.usernameSecretName);
        jsonWriter.writeStringField("passwordSecretName", this.passwordSecretName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsernamePasswordCredentialsUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsernamePasswordCredentialsUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UsernamePasswordCredentialsUpdate.
     */
    public static UsernamePasswordCredentialsUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsernamePasswordCredentialsUpdate deserializedUsernamePasswordCredentialsUpdate
                = new UsernamePasswordCredentialsUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usernameSecretName".equals(fieldName)) {
                    deserializedUsernamePasswordCredentialsUpdate.usernameSecretName = reader.getString();
                } else if ("passwordSecretName".equals(fieldName)) {
                    deserializedUsernamePasswordCredentialsUpdate.passwordSecretName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsernamePasswordCredentialsUpdate;
        });
    }
}
