// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the asset status properties.
 */
@Fluent
public final class AssetStatus implements JsonSerializable<AssetStatus> {
    /*
     * Array object to transfer and persist errors that originate from the Edge.
     */
    private List<AssetStatusError> errors;

    /*
     * A read only incremental counter indicating the number of times the configuration has been modified from the
     * perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and
     * would sync back up to the cloud. In steady state, this should equal version.
     */
    private Integer version;

    /**
     * Creates an instance of AssetStatus class.
     */
    public AssetStatus() {
    }

    /**
     * Get the errors property: Array object to transfer and persist errors that originate from the Edge.
     * 
     * @return the errors value.
     */
    public List<AssetStatusError> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: Array object to transfer and persist errors that originate from the Edge.
     * 
     * @param errors the errors value to set.
     * @return the AssetStatus object itself.
     */
    public AssetStatus withErrors(List<AssetStatusError> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the version property: A read only incremental counter indicating the number of times the configuration has
     * been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer
     * of this value and would sync back up to the cloud. In steady state, this should equal version.
     * 
     * @return the version value.
     */
    public Integer version() {
        return this.version;
    }

    /**
     * Set the version property: A read only incremental counter indicating the number of times the configuration has
     * been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer
     * of this value and would sync back up to the cloud. In steady state, this should equal version.
     * 
     * @param version the version value to set.
     * @return the AssetStatus object itself.
     */
    public AssetStatus withVersion(Integer version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssetStatus.
     */
    public static AssetStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetStatus deserializedAssetStatus = new AssetStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    List<AssetStatusError> errors = reader.readArray(reader1 -> AssetStatusError.fromJson(reader1));
                    deserializedAssetStatus.errors = errors;
                } else if ("version".equals(fieldName)) {
                    deserializedAssetStatus.version = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetStatus;
        });
    }
}
