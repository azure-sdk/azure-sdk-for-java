// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Serverless Runtime Data Disk.
 */
@Fluent
public final class ServerlessRuntimeDataDisk implements JsonSerializable<ServerlessRuntimeDataDisk> {
    /*
     * Type of the data disk
     */
    private String type;

    /*
     * Server Host or IP Address
     */
    private String serverHostOrIpAddress;

    /*
     * Source mount point
     */
    private String sourceMount;

    /*
     * Target mount point
     */
    private String targetMount;

    /*
     * Mount options
     */
    private String mountOptions;

    /**
     * Creates an instance of ServerlessRuntimeDataDisk class.
     */
    public ServerlessRuntimeDataDisk() {
    }

    /**
     * Get the type property: Type of the data disk.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the data disk.
     * 
     * @param type the type value to set.
     * @return the ServerlessRuntimeDataDisk object itself.
     */
    public ServerlessRuntimeDataDisk withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the serverHostOrIpAddress property: Server Host or IP Address.
     * 
     * @return the serverHostOrIpAddress value.
     */
    public String serverHostOrIpAddress() {
        return this.serverHostOrIpAddress;
    }

    /**
     * Set the serverHostOrIpAddress property: Server Host or IP Address.
     * 
     * @param serverHostOrIpAddress the serverHostOrIpAddress value to set.
     * @return the ServerlessRuntimeDataDisk object itself.
     */
    public ServerlessRuntimeDataDisk withServerHostOrIpAddress(String serverHostOrIpAddress) {
        this.serverHostOrIpAddress = serverHostOrIpAddress;
        return this;
    }

    /**
     * Get the sourceMount property: Source mount point.
     * 
     * @return the sourceMount value.
     */
    public String sourceMount() {
        return this.sourceMount;
    }

    /**
     * Set the sourceMount property: Source mount point.
     * 
     * @param sourceMount the sourceMount value to set.
     * @return the ServerlessRuntimeDataDisk object itself.
     */
    public ServerlessRuntimeDataDisk withSourceMount(String sourceMount) {
        this.sourceMount = sourceMount;
        return this;
    }

    /**
     * Get the targetMount property: Target mount point.
     * 
     * @return the targetMount value.
     */
    public String targetMount() {
        return this.targetMount;
    }

    /**
     * Set the targetMount property: Target mount point.
     * 
     * @param targetMount the targetMount value to set.
     * @return the ServerlessRuntimeDataDisk object itself.
     */
    public ServerlessRuntimeDataDisk withTargetMount(String targetMount) {
        this.targetMount = targetMount;
        return this;
    }

    /**
     * Get the mountOptions property: Mount options.
     * 
     * @return the mountOptions value.
     */
    public String mountOptions() {
        return this.mountOptions;
    }

    /**
     * Set the mountOptions property: Mount options.
     * 
     * @param mountOptions the mountOptions value to set.
     * @return the ServerlessRuntimeDataDisk object itself.
     */
    public ServerlessRuntimeDataDisk withMountOptions(String mountOptions) {
        this.mountOptions = mountOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("serverHostOrIpAddress", this.serverHostOrIpAddress);
        jsonWriter.writeStringField("sourceMount", this.sourceMount);
        jsonWriter.writeStringField("targetMount", this.targetMount);
        jsonWriter.writeStringField("mountOptions", this.mountOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeDataDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeDataDisk if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeDataDisk.
     */
    public static ServerlessRuntimeDataDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeDataDisk deserializedServerlessRuntimeDataDisk = new ServerlessRuntimeDataDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedServerlessRuntimeDataDisk.type = reader.getString();
                } else if ("serverHostOrIpAddress".equals(fieldName)) {
                    deserializedServerlessRuntimeDataDisk.serverHostOrIpAddress = reader.getString();
                } else if ("sourceMount".equals(fieldName)) {
                    deserializedServerlessRuntimeDataDisk.sourceMount = reader.getString();
                } else if ("targetMount".equals(fieldName)) {
                    deserializedServerlessRuntimeDataDisk.targetMount = reader.getString();
                } else if ("mountOptions".equals(fieldName)) {
                    deserializedServerlessRuntimeDataDisk.mountOptions = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeDataDisk;
        });
    }
}
