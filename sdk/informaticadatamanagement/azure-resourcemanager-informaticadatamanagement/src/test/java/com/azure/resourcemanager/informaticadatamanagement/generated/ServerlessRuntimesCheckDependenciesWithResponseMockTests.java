// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.informaticadatamanagement.InformaticaDataManagementManager;
import com.azure.resourcemanager.informaticadatamanagement.models.CheckDependenciesResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerlessRuntimesCheckDependenciesWithResponseMockTests {
    @Test
    public void testCheckDependenciesWithResponse() throws Exception {
        String responseStr
            = "{\"count\":1665980983,\"id\":\"oepry\",\"references\":[{\"id\":\"nwy\",\"appContextId\":\"pzdm\",\"path\":\"vzvfvaawzqadfl\",\"documentType\":\"z\",\"description\":\"riglaec\",\"lastUpdatedTime\":\"ndtic\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        InformaticaDataManagementManager manager = InformaticaDataManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CheckDependenciesResponse response = manager.serverlessRuntimes()
            .checkDependenciesWithResponse("tqedcgzulwm", "rqzz", "rjvpglydzgkrvqee", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(1665980983, response.count());
        Assertions.assertEquals("oepry", response.id());
        Assertions.assertEquals("nwy", response.references().get(0).id());
        Assertions.assertEquals("pzdm", response.references().get(0).appContextId());
        Assertions.assertEquals("vzvfvaawzqadfl", response.references().get(0).path());
        Assertions.assertEquals("z", response.references().get(0).documentType());
        Assertions.assertEquals("riglaec", response.references().get(0).description());
        Assertions.assertEquals("ndtic", response.references().get(0).lastUpdatedTime());
    }
}
