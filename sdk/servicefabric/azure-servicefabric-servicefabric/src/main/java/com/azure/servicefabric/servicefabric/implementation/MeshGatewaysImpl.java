// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MeshGateways. */
public final class MeshGatewaysImpl {
    /** The proxy service used to perform REST calls. */
    private final MeshGatewaysService service;

    /** The service client containing this operation class. */
    private final ServiceFabricClientAPIsClientImpl client;

    /**
     * Initializes an instance of MeshGatewaysImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MeshGatewaysImpl(ServiceFabricClientAPIsClientImpl client) {
        this.service =
                RestProxy.create(MeshGatewaysService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricClientAPIsMeshGateways to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricClientA")
    private interface MeshGatewaysService {
        @Put("/Resources/Gateways/{gatewayResourceName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "gatewayResourceName", encoded = true) String gatewayResourceName,
                @BodyParam("application/json") BinaryData gatewayResourceDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Resources/Gateways/{gatewayResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "gatewayResourceName", encoded = true) String gatewayResourceName,
                RequestOptions requestOptions,
                Context context);

        @Delete("/Resources/Gateways/{gatewayResourceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "gatewayResourceName", encoded = true) String gatewayResourceName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Resources/Gateways")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same
     * name exists, then it is updated with the specified description and properties. Use Gateway resource to provide
     * public connectivity to application services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a gateway resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(
            String gatewayResourceName, BinaryData gatewayResourceDescription, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdate(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                gatewayResourceName,
                                gatewayResourceDescription,
                                requestOptions,
                                context));
    }

    /**
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same
     * name exists, then it is updated with the specified description and properties. Use Gateway resource to provide
     * public connectivity to application services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a gateway resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(
            String gatewayResourceName,
            BinaryData gatewayResourceDescription,
            RequestOptions requestOptions,
            Context context) {
        return service.createOrUpdate(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                gatewayResourceName,
                gatewayResourceDescription,
                requestOptions,
                context);
    }

    /**
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same
     * name exists, then it is updated with the specified description and properties. Use Gateway resource to provide
     * public connectivity to application services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a gateway resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(
            String gatewayResourceName, BinaryData gatewayResourceDescription, RequestOptions requestOptions) {
        return createOrUpdateWithResponseAsync(gatewayResourceName, gatewayResourceDescription, requestOptions).block();
    }

    /**
     * Gets the information about the Gateway resource with the given name. The information include the description and
     * other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the Gateway resource with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String gatewayResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                gatewayResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about the Gateway resource with the given name. The information include the description and
     * other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the Gateway resource with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String gatewayResourceName, RequestOptions requestOptions, Context context) {
        return service.get(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                gatewayResourceName,
                requestOptions,
                context);
    }

    /**
     * Gets the information about the Gateway resource with the given name. The information include the description and
     * other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         sourceNetwork: {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *         destinationNetwork: (recursive schema, see destinationNetwork above)
     *         tcp: [
     *             {
     *                 name: String
     *                 port: int
     *                 destination: {
     *                     applicationName: String
     *                     serviceName: String
     *                     endpointName: String
     *                 }
     *             }
     *         ]
     *         http: [
     *             {
     *                 name: String
     *                 port: int
     *                 hosts: [
     *                     {
     *                         name: String
     *                         routes: [
     *                             {
     *                                 name: String
     *                                 match: {
     *                                     path: {
     *                                         value: String
     *                                         rewrite: String
     *                                         type: String(prefix)
     *                                     }
     *                                     headers: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                             type: String(exact)
     *                                         }
     *                                     ]
     *                                 }
     *                                 destination: (recursive schema, see destination above)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         ipAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the Gateway resource with the given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String gatewayResourceName, RequestOptions requestOptions) {
        return getWithResponseAsync(gatewayResourceName, requestOptions).block();
    }

    /**
     * Deletes the Gateway resource identified by the name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String gatewayResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.delete(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                gatewayResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Deletes the Gateway resource identified by the name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String gatewayResourceName, RequestOptions requestOptions, Context context) {
        return service.delete(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                gatewayResourceName,
                requestOptions,
                context);
    }

    /**
     * Deletes the Gateway resource identified by the name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String gatewayResourceName, RequestOptions requestOptions) {
        return deleteWithResponseAsync(gatewayResourceName, requestOptions).block();
    }

    /**
     * Gets the information about all gateway resources in a given resource group. The information include the
     * description and other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 description: String
     *                 sourceNetwork: {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *                 destinationNetwork: (recursive schema, see destinationNetwork above)
     *                 tcp: [
     *                     {
     *                         name: String
     *                         port: int
     *                         destination: {
     *                             applicationName: String
     *                             serviceName: String
     *                             endpointName: String
     *                         }
     *                     }
     *                 ]
     *                 http: [
     *                     {
     *                         name: String
     *                         port: int
     *                         hosts: [
     *                             {
     *                                 name: String
     *                                 routes: [
     *                                     {
     *                                         name: String
     *                                         match: {
     *                                             path: {
     *                                                 value: String
     *                                                 rewrite: String
     *                                                 type: String(prefix)
     *                                             }
     *                                             headers: [
     *                                                 {
     *                                                     name: String
     *                                                     value: String
     *                                                     type: String(exact)
     *                                                 }
     *                                             ]
     *                                         }
     *                                         destination: (recursive schema, see destination above)
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                 statusDetails: String
     *                 ipAddress: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all gateway resources in a given resource group along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.list(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about all gateway resources in a given resource group. The information include the
     * description and other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 description: String
     *                 sourceNetwork: {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *                 destinationNetwork: (recursive schema, see destinationNetwork above)
     *                 tcp: [
     *                     {
     *                         name: String
     *                         port: int
     *                         destination: {
     *                             applicationName: String
     *                             serviceName: String
     *                             endpointName: String
     *                         }
     *                     }
     *                 ]
     *                 http: [
     *                     {
     *                         name: String
     *                         port: int
     *                         hosts: [
     *                             {
     *                                 name: String
     *                                 routes: [
     *                                     {
     *                                         name: String
     *                                         match: {
     *                                             path: {
     *                                                 value: String
     *                                                 rewrite: String
     *                                                 type: String(prefix)
     *                                             }
     *                                             headers: [
     *                                                 {
     *                                                     name: String
     *                                                     value: String
     *                                                     type: String(exact)
     *                                                 }
     *                                             ]
     *                                         }
     *                                         destination: (recursive schema, see destination above)
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                 statusDetails: String
     *                 ipAddress: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all gateway resources in a given resource group along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions, Context context) {
        return service.list(
                this.client.getHost(), this.client.getServiceVersion().getVersion(), requestOptions, context);
    }

    /**
     * Gets the information about all gateway resources in a given resource group. The information include the
     * description and other properties of the Gateway.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 description: String
     *                 sourceNetwork: {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *                 destinationNetwork: (recursive schema, see destinationNetwork above)
     *                 tcp: [
     *                     {
     *                         name: String
     *                         port: int
     *                         destination: {
     *                             applicationName: String
     *                             serviceName: String
     *                             endpointName: String
     *                         }
     *                     }
     *                 ]
     *                 http: [
     *                     {
     *                         name: String
     *                         port: int
     *                         hosts: [
     *                             {
     *                                 name: String
     *                                 routes: [
     *                                     {
     *                                         name: String
     *                                         match: {
     *                                             path: {
     *                                                 value: String
     *                                                 rewrite: String
     *                                                 type: String(prefix)
     *                                             }
     *                                             headers: [
     *                                                 {
     *                                                     name: String
     *                                                     value: String
     *                                                     type: String(exact)
     *                                                 }
     *                                             ]
     *                                         }
     *                                         destination: (recursive schema, see destination above)
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                 statusDetails: String
     *                 ipAddress: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all gateway resources in a given resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return listWithResponseAsync(requestOptions).block();
    }
}
