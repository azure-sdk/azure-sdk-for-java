// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous ServiceFabricClientAPIsClient type. */
@ServiceClient(builder = MeshApplicationClientBuilder.class)
public final class MeshApplicationClient {
    @Generated private final MeshApplicationAsyncClient client;

    /**
     * Initializes an instance of MeshApplicationClient class.
     *
     * @param client the async client.
     */
    @Generated
    MeshApplicationClient(MeshApplicationAsyncClient client) {
        this.client = client;
    }

    /**
     * Creates a Application resource with the specified name, description and properties. If Application resource with
     * the same name exists, then it is updated with the specified description and properties.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         services: [
     *             {
     *                 name: String
     *                 properties: {
     *                     osType: String(Linux/Windows)
     *                     codePackages: [
     *                         {
     *                             name: String
     *                             image: String
     *                             imageRegistryCredential: {
     *                                 server: String
     *                                 username: String
     *                                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                 password: String
     *                             }
     *                             entryPoint: String
     *                             commands: [
     *                                 String
     *                             ]
     *                             environmentVariables: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             settings: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             labels: [
     *                                 {
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             endpoints: [
     *                                 {
     *                                     name: String
     *                                     port: Integer
     *                                 }
     *                             ]
     *                             resources: {
     *                                 requests: {
     *                                     memoryInGB: double
     *                                     cpu: double
     *                                 }
     *                                 limits: {
     *                                     memoryInGB: Double
     *                                     cpu: Double
     *                                 }
     *                             }
     *                             volumeRefs: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                 }
     *                             ]
     *                             volumes: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                     creationParameters: {
     *                                         description: String
     *                                     }
     *                                 }
     *                             ]
     *                             diagnostics: {
     *                                 enabled: Boolean
     *                                 sinkRefs: [
     *                                     String
     *                                 ]
     *                             }
     *                             reliableCollectionsRefs: [
     *                                 {
     *                                     name: String
     *                                     doNotPersistState: Boolean
     *                                 }
     *                             ]
     *                             instanceView: {
     *                                 restartCount: Integer
     *                                 currentState: {
     *                                     state: String
     *                                     startTime: String
     *                                     exitCode: String
     *                                     finishTime: String
     *                                     detailStatus: String
     *                                 }
     *                                 previousState: (recursive schema, see previousState above)
     *                                 events: [
     *                                     {
     *                                         name: String
     *                                         count: Integer
     *                                         firstTimestamp: String
     *                                         lastTimestamp: String
     *                                         message: String
     *                                         type: String
     *                                     }
     *                                 ]
     *                             }
     *                             livenessProbe: [
     *                                 {
     *                                     initialDelaySeconds: Integer
     *                                     periodSeconds: Integer
     *                                     timeoutSeconds: Integer
     *                                     successThreshold: Integer
     *                                     failureThreshold: Integer
     *                                     exec: {
     *                                         command: String
     *                                     }
     *                                     httpGet: {
     *                                         port: int
     *                                         path: String
     *                                         host: String
     *                                         httpHeaders: [
     *                                             {
     *                                                 name: String
     *                                                 value: String
     *                                             }
     *                                         ]
     *                                         scheme: String(http/https)
     *                                     }
     *                                     tcpSocket: {
     *                                         port: int
     *                                     }
     *                                 }
     *                             ]
     *                             readinessProbe: [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     networkRefs: [
     *                         {
     *                             name: String
     *                             endpointRefs: [
     *                                 {
     *                                     name: String
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                     diagnostics: (recursive schema, see diagnostics above)
     *                     description: String
     *                     replicaCount: Integer
     *                     executionPolicy: {
     *                     }
     *                     autoScalingPolicies: [
     *                         {
     *                             name: String
     *                             trigger: {
     *                             }
     *                             mechanism: {
     *                             }
     *                         }
     *                     ]
     *                     status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                     statusDetails: String
     *                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                     unhealthyEvaluation: String
     *                     identityRefs: [
     *                         {
     *                             name: String
     *                             identityRef: String
     *                         }
     *                     ]
     *                     dnsName: String
     *                 }
     *             }
     *         ]
     *         diagnostics: {
     *             sinks: [
     *                 {
     *                     name: String
     *                     description: String
     *                 }
     *             ]
     *             enabled: Boolean
     *             defaultSinkRefs: [
     *                 String
     *             ]
     *         }
     *         debugParams: String
     *         serviceNames: [
     *             String
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         unhealthyEvaluation: String
     *     }
     *     identity: {
     *         tokenServiceEndpoint: String
     *         type: String
     *         tenantId: String
     *         principalId: String
     *         userAssignedIdentities: {
     *             String: {
     *                 principalId: String
     *                 clientId: String
     *             }
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         services: [
     *             {
     *                 name: String
     *                 properties: {
     *                     osType: String(Linux/Windows)
     *                     codePackages: [
     *                         {
     *                             name: String
     *                             image: String
     *                             imageRegistryCredential: {
     *                                 server: String
     *                                 username: String
     *                                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                 password: String
     *                             }
     *                             entryPoint: String
     *                             commands: [
     *                                 String
     *                             ]
     *                             environmentVariables: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             settings: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             labels: [
     *                                 {
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             endpoints: [
     *                                 {
     *                                     name: String
     *                                     port: Integer
     *                                 }
     *                             ]
     *                             resources: {
     *                                 requests: {
     *                                     memoryInGB: double
     *                                     cpu: double
     *                                 }
     *                                 limits: {
     *                                     memoryInGB: Double
     *                                     cpu: Double
     *                                 }
     *                             }
     *                             volumeRefs: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                 }
     *                             ]
     *                             volumes: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                     creationParameters: {
     *                                         description: String
     *                                     }
     *                                 }
     *                             ]
     *                             diagnostics: {
     *                                 enabled: Boolean
     *                                 sinkRefs: [
     *                                     String
     *                                 ]
     *                             }
     *                             reliableCollectionsRefs: [
     *                                 {
     *                                     name: String
     *                                     doNotPersistState: Boolean
     *                                 }
     *                             ]
     *                             instanceView: {
     *                                 restartCount: Integer
     *                                 currentState: {
     *                                     state: String
     *                                     startTime: String
     *                                     exitCode: String
     *                                     finishTime: String
     *                                     detailStatus: String
     *                                 }
     *                                 previousState: (recursive schema, see previousState above)
     *                                 events: [
     *                                     {
     *                                         name: String
     *                                         count: Integer
     *                                         firstTimestamp: String
     *                                         lastTimestamp: String
     *                                         message: String
     *                                         type: String
     *                                     }
     *                                 ]
     *                             }
     *                             livenessProbe: [
     *                                 {
     *                                     initialDelaySeconds: Integer
     *                                     periodSeconds: Integer
     *                                     timeoutSeconds: Integer
     *                                     successThreshold: Integer
     *                                     failureThreshold: Integer
     *                                     exec: {
     *                                         command: String
     *                                     }
     *                                     httpGet: {
     *                                         port: int
     *                                         path: String
     *                                         host: String
     *                                         httpHeaders: [
     *                                             {
     *                                                 name: String
     *                                                 value: String
     *                                             }
     *                                         ]
     *                                         scheme: String(http/https)
     *                                     }
     *                                     tcpSocket: {
     *                                         port: int
     *                                     }
     *                                 }
     *                             ]
     *                             readinessProbe: [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     networkRefs: [
     *                         {
     *                             name: String
     *                             endpointRefs: [
     *                                 {
     *                                     name: String
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                     diagnostics: (recursive schema, see diagnostics above)
     *                     description: String
     *                     replicaCount: Integer
     *                     executionPolicy: {
     *                     }
     *                     autoScalingPolicies: [
     *                         {
     *                             name: String
     *                             trigger: {
     *                             }
     *                             mechanism: {
     *                             }
     *                         }
     *                     ]
     *                     status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                     statusDetails: String
     *                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                     unhealthyEvaluation: String
     *                     identityRefs: [
     *                         {
     *                             name: String
     *                             identityRef: String
     *                         }
     *                     ]
     *                     dnsName: String
     *                 }
     *             }
     *         ]
     *         diagnostics: {
     *             sinks: [
     *                 {
     *                     name: String
     *                     description: String
     *                 }
     *             ]
     *             enabled: Boolean
     *             defaultSinkRefs: [
     *                 String
     *             ]
     *         }
     *         debugParams: String
     *         serviceNames: [
     *             String
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         unhealthyEvaluation: String
     *     }
     *     identity: {
     *         tokenServiceEndpoint: String
     *         type: String
     *         tenantId: String
     *         principalId: String
     *         userAssignedIdentities: {
     *             String: {
     *                 principalId: String
     *                 clientId: String
     *             }
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param applicationResourceDescription Description for creating a Application resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a application resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(
            String applicationResourceName, BinaryData applicationResourceDescription, RequestOptions requestOptions) {
        return this.client
                .createOrUpdateWithResponse(applicationResourceName, applicationResourceDescription, requestOptions)
                .block();
    }

    /**
     * Gets the information about the Application resource with the given name. The information include the description
     * and other properties of the Application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         description: String
     *         services: [
     *             {
     *                 name: String
     *                 properties: {
     *                     osType: String(Linux/Windows)
     *                     codePackages: [
     *                         {
     *                             name: String
     *                             image: String
     *                             imageRegistryCredential: {
     *                                 server: String
     *                                 username: String
     *                                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                 password: String
     *                             }
     *                             entryPoint: String
     *                             commands: [
     *                                 String
     *                             ]
     *                             environmentVariables: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             settings: [
     *                                 {
     *                                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             labels: [
     *                                 {
     *                                     name: String
     *                                     value: String
     *                                 }
     *                             ]
     *                             endpoints: [
     *                                 {
     *                                     name: String
     *                                     port: Integer
     *                                 }
     *                             ]
     *                             resources: {
     *                                 requests: {
     *                                     memoryInGB: double
     *                                     cpu: double
     *                                 }
     *                                 limits: {
     *                                     memoryInGB: Double
     *                                     cpu: Double
     *                                 }
     *                             }
     *                             volumeRefs: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                 }
     *                             ]
     *                             volumes: [
     *                                 {
     *                                     name: String
     *                                     readOnly: Boolean
     *                                     destinationPath: String
     *                                     creationParameters: {
     *                                         description: String
     *                                     }
     *                                 }
     *                             ]
     *                             diagnostics: {
     *                                 enabled: Boolean
     *                                 sinkRefs: [
     *                                     String
     *                                 ]
     *                             }
     *                             reliableCollectionsRefs: [
     *                                 {
     *                                     name: String
     *                                     doNotPersistState: Boolean
     *                                 }
     *                             ]
     *                             instanceView: {
     *                                 restartCount: Integer
     *                                 currentState: {
     *                                     state: String
     *                                     startTime: String
     *                                     exitCode: String
     *                                     finishTime: String
     *                                     detailStatus: String
     *                                 }
     *                                 previousState: (recursive schema, see previousState above)
     *                                 events: [
     *                                     {
     *                                         name: String
     *                                         count: Integer
     *                                         firstTimestamp: String
     *                                         lastTimestamp: String
     *                                         message: String
     *                                         type: String
     *                                     }
     *                                 ]
     *                             }
     *                             livenessProbe: [
     *                                 {
     *                                     initialDelaySeconds: Integer
     *                                     periodSeconds: Integer
     *                                     timeoutSeconds: Integer
     *                                     successThreshold: Integer
     *                                     failureThreshold: Integer
     *                                     exec: {
     *                                         command: String
     *                                     }
     *                                     httpGet: {
     *                                         port: int
     *                                         path: String
     *                                         host: String
     *                                         httpHeaders: [
     *                                             {
     *                                                 name: String
     *                                                 value: String
     *                                             }
     *                                         ]
     *                                         scheme: String(http/https)
     *                                     }
     *                                     tcpSocket: {
     *                                         port: int
     *                                     }
     *                                 }
     *                             ]
     *                             readinessProbe: [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     networkRefs: [
     *                         {
     *                             name: String
     *                             endpointRefs: [
     *                                 {
     *                                     name: String
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                     diagnostics: (recursive schema, see diagnostics above)
     *                     description: String
     *                     replicaCount: Integer
     *                     executionPolicy: {
     *                     }
     *                     autoScalingPolicies: [
     *                         {
     *                             name: String
     *                             trigger: {
     *                             }
     *                             mechanism: {
     *                             }
     *                         }
     *                     ]
     *                     status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                     statusDetails: String
     *                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                     unhealthyEvaluation: String
     *                     identityRefs: [
     *                         {
     *                             name: String
     *                             identityRef: String
     *                         }
     *                     ]
     *                     dnsName: String
     *                 }
     *             }
     *         ]
     *         diagnostics: {
     *             sinks: [
     *                 {
     *                     name: String
     *                     description: String
     *                 }
     *             ]
     *             enabled: Boolean
     *             defaultSinkRefs: [
     *                 String
     *             ]
     *         }
     *         debugParams: String
     *         serviceNames: [
     *             String
     *         ]
     *         status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *         statusDetails: String
     *         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         unhealthyEvaluation: String
     *     }
     *     identity: {
     *         tokenServiceEndpoint: String
     *         type: String
     *         tenantId: String
     *         principalId: String
     *         userAssignedIdentities: {
     *             String: {
     *                 principalId: String
     *                 clientId: String
     *             }
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the Application resource with the given name along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String applicationResourceName, RequestOptions requestOptions) {
        return this.client.getWithResponse(applicationResourceName, requestOptions).block();
    }

    /**
     * Deletes the Application resource identified by the name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param applicationResourceName The identity of the application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String applicationResourceName, RequestOptions requestOptions) {
        return this.client.deleteWithResponse(applicationResourceName, requestOptions).block();
    }

    /**
     * Gets the information about all application resources in a given resource group. The information include the
     * description and other properties of the Application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 description: String
     *                 services: [
     *                     {
     *                         name: String
     *                         properties: {
     *                             osType: String(Linux/Windows)
     *                             codePackages: [
     *                                 {
     *                                     name: String
     *                                     image: String
     *                                     imageRegistryCredential: {
     *                                         server: String
     *                                         username: String
     *                                         passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                         password: String
     *                                     }
     *                                     entryPoint: String
     *                                     commands: [
     *                                         String
     *                                     ]
     *                                     environmentVariables: [
     *                                         {
     *                                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                             name: String
     *                                             value: String
     *                                         }
     *                                     ]
     *                                     settings: [
     *                                         {
     *                                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                                             name: String
     *                                             value: String
     *                                         }
     *                                     ]
     *                                     labels: [
     *                                         {
     *                                             name: String
     *                                             value: String
     *                                         }
     *                                     ]
     *                                     endpoints: [
     *                                         {
     *                                             name: String
     *                                             port: Integer
     *                                         }
     *                                     ]
     *                                     resources: {
     *                                         requests: {
     *                                             memoryInGB: double
     *                                             cpu: double
     *                                         }
     *                                         limits: {
     *                                             memoryInGB: Double
     *                                             cpu: Double
     *                                         }
     *                                     }
     *                                     volumeRefs: [
     *                                         {
     *                                             name: String
     *                                             readOnly: Boolean
     *                                             destinationPath: String
     *                                         }
     *                                     ]
     *                                     volumes: [
     *                                         {
     *                                             name: String
     *                                             readOnly: Boolean
     *                                             destinationPath: String
     *                                             creationParameters: {
     *                                                 description: String
     *                                             }
     *                                         }
     *                                     ]
     *                                     diagnostics: {
     *                                         enabled: Boolean
     *                                         sinkRefs: [
     *                                             String
     *                                         ]
     *                                     }
     *                                     reliableCollectionsRefs: [
     *                                         {
     *                                             name: String
     *                                             doNotPersistState: Boolean
     *                                         }
     *                                     ]
     *                                     instanceView: {
     *                                         restartCount: Integer
     *                                         currentState: {
     *                                             state: String
     *                                             startTime: String
     *                                             exitCode: String
     *                                             finishTime: String
     *                                             detailStatus: String
     *                                         }
     *                                         previousState: (recursive schema, see previousState above)
     *                                         events: [
     *                                             {
     *                                                 name: String
     *                                                 count: Integer
     *                                                 firstTimestamp: String
     *                                                 lastTimestamp: String
     *                                                 message: String
     *                                                 type: String
     *                                             }
     *                                         ]
     *                                     }
     *                                     livenessProbe: [
     *                                         {
     *                                             initialDelaySeconds: Integer
     *                                             periodSeconds: Integer
     *                                             timeoutSeconds: Integer
     *                                             successThreshold: Integer
     *                                             failureThreshold: Integer
     *                                             exec: {
     *                                                 command: String
     *                                             }
     *                                             httpGet: {
     *                                                 port: int
     *                                                 path: String
     *                                                 host: String
     *                                                 httpHeaders: [
     *                                                     {
     *                                                         name: String
     *                                                         value: String
     *                                                     }
     *                                                 ]
     *                                                 scheme: String(http/https)
     *                                             }
     *                                             tcpSocket: {
     *                                                 port: int
     *                                             }
     *                                         }
     *                                     ]
     *                                     readinessProbe: [
     *                                         (recursive schema, see above)
     *                                     ]
     *                                 }
     *                             ]
     *                             networkRefs: [
     *                                 {
     *                                     name: String
     *                                     endpointRefs: [
     *                                         {
     *                                             name: String
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                             diagnostics: (recursive schema, see diagnostics above)
     *                             description: String
     *                             replicaCount: Integer
     *                             executionPolicy: {
     *                             }
     *                             autoScalingPolicies: [
     *                                 {
     *                                     name: String
     *                                     trigger: {
     *                                     }
     *                                     mechanism: {
     *                                     }
     *                                 }
     *                             ]
     *                             status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                             statusDetails: String
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             unhealthyEvaluation: String
     *                             identityRefs: [
     *                                 {
     *                                     name: String
     *                                     identityRef: String
     *                                 }
     *                             ]
     *                             dnsName: String
     *                         }
     *                     }
     *                 ]
     *                 diagnostics: {
     *                     sinks: [
     *                         {
     *                             name: String
     *                             description: String
     *                         }
     *                     ]
     *                     enabled: Boolean
     *                     defaultSinkRefs: [
     *                         String
     *                     ]
     *                 }
     *                 debugParams: String
     *                 serviceNames: [
     *                     String
     *                 ]
     *                 status: String(Unknown/Ready/Upgrading/Creating/Deleting/Failed)
     *                 statusDetails: String
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 unhealthyEvaluation: String
     *             }
     *             identity: {
     *                 tokenServiceEndpoint: String
     *                 type: String
     *                 tenantId: String
     *                 principalId: String
     *                 userAssignedIdentities: {
     *                     String: {
     *                         principalId: String
     *                         clientId: String
     *                     }
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all application resources in a given resource group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return this.client.listWithResponse(requestOptions).block();
    }

    /**
     * Gets the upgrade progress information about the Application resource with the given name. The information include
     * percentage of completion and other upgrade state information of the Application resource.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * </td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     targetApplicationTypeVersion: String
     *     startTimestampUtc: String
     *     upgradeState: String(Invalid/ProvisioningTarget/RollingForward/UnprovisioningCurrent/CompletedRollforward/RollingBack/UnprovisioningTarget/CompletedRollback/Failed)
     *     percentCompleted: String
     *     serviceUpgradeProgress: [
     *         {
     *             serviceName: String
     *             completedReplicaCount: String
     *             pendingReplicaCount: String
     *         }
     *     ]
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored)
     *     upgradeDuration: String
     *     applicationUpgradeStatusDetails: String
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     failureTimestampUtc: String
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the upgrade progress information about the Application resource with the given name along with {@link
     *     Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpgradeProgressWithResponse(
            String applicationResourceName, RequestOptions requestOptions) {
        return this.client.getUpgradeProgressWithResponse(applicationResourceName, requestOptions).block();
    }
}
