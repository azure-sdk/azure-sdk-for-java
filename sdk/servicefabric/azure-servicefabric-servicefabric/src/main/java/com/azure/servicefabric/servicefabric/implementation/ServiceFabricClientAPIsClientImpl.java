// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.servicefabric.servicefabric.ServiceFabricClientAPIsServiceVersion;
import com.azure.servicefabric.servicefabric.implementation.models.HostOptions;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ServiceFabricClientAPIsClient type. */
public final class ServiceFabricClientAPIsClientImpl {
    /** The proxy service used to perform REST calls. */
    private final ServiceFabricClientAPIsClientService service;

    /** server parameter. */
    private final HostOptions host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public HostOptions getHost() {
        return this.host;
    }

    /** Service version. */
    private final ServiceFabricClientAPIsServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public ServiceFabricClientAPIsServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The MeshSecretsImpl object to access its operations. */
    private final MeshSecretsImpl meshSecrets;

    /**
     * Gets the MeshSecretsImpl object to access its operations.
     *
     * @return the MeshSecretsImpl object.
     */
    public MeshSecretsImpl getMeshSecrets() {
        return this.meshSecrets;
    }

    /** The MeshSecretValuesImpl object to access its operations. */
    private final MeshSecretValuesImpl meshSecretValues;

    /**
     * Gets the MeshSecretValuesImpl object to access its operations.
     *
     * @return the MeshSecretValuesImpl object.
     */
    public MeshSecretValuesImpl getMeshSecretValues() {
        return this.meshSecretValues;
    }

    /** The MeshVolumesImpl object to access its operations. */
    private final MeshVolumesImpl meshVolumes;

    /**
     * Gets the MeshVolumesImpl object to access its operations.
     *
     * @return the MeshVolumesImpl object.
     */
    public MeshVolumesImpl getMeshVolumes() {
        return this.meshVolumes;
    }

    /** The MeshNetworksImpl object to access its operations. */
    private final MeshNetworksImpl meshNetworks;

    /**
     * Gets the MeshNetworksImpl object to access its operations.
     *
     * @return the MeshNetworksImpl object.
     */
    public MeshNetworksImpl getMeshNetworks() {
        return this.meshNetworks;
    }

    /** The MeshApplicationsImpl object to access its operations. */
    private final MeshApplicationsImpl meshApplications;

    /**
     * Gets the MeshApplicationsImpl object to access its operations.
     *
     * @return the MeshApplicationsImpl object.
     */
    public MeshApplicationsImpl getMeshApplications() {
        return this.meshApplications;
    }

    /** The MeshServicesImpl object to access its operations. */
    private final MeshServicesImpl meshServices;

    /**
     * Gets the MeshServicesImpl object to access its operations.
     *
     * @return the MeshServicesImpl object.
     */
    public MeshServicesImpl getMeshServices() {
        return this.meshServices;
    }

    /** The MeshCodePackagesImpl object to access its operations. */
    private final MeshCodePackagesImpl meshCodePackages;

    /**
     * Gets the MeshCodePackagesImpl object to access its operations.
     *
     * @return the MeshCodePackagesImpl object.
     */
    public MeshCodePackagesImpl getMeshCodePackages() {
        return this.meshCodePackages;
    }

    /** The MeshServiceReplicasImpl object to access its operations. */
    private final MeshServiceReplicasImpl meshServiceReplicas;

    /**
     * Gets the MeshServiceReplicasImpl object to access its operations.
     *
     * @return the MeshServiceReplicasImpl object.
     */
    public MeshServiceReplicasImpl getMeshServiceReplicas() {
        return this.meshServiceReplicas;
    }

    /** The MeshGatewaysImpl object to access its operations. */
    private final MeshGatewaysImpl meshGateways;

    /**
     * Gets the MeshGatewaysImpl object to access its operations.
     *
     * @return the MeshGatewaysImpl object.
     */
    public MeshGatewaysImpl getMeshGateways() {
        return this.meshGateways;
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIsClient client.
     *
     * @param host server parameter.
     * @param serviceVersion Service version.
     */
    public ServiceFabricClientAPIsClientImpl(HostOptions host, ServiceFabricClientAPIsServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                host,
                serviceVersion);
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param host server parameter.
     * @param serviceVersion Service version.
     */
    public ServiceFabricClientAPIsClientImpl(
            HttpPipeline httpPipeline, HostOptions host, ServiceFabricClientAPIsServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), host, serviceVersion);
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param host server parameter.
     * @param serviceVersion Service version.
     */
    public ServiceFabricClientAPIsClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            HostOptions host,
            ServiceFabricClientAPIsServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.host = host;
        this.serviceVersion = serviceVersion;
        this.meshSecrets = new MeshSecretsImpl(this);
        this.meshSecretValues = new MeshSecretValuesImpl(this);
        this.meshVolumes = new MeshVolumesImpl(this);
        this.meshNetworks = new MeshNetworksImpl(this);
        this.meshApplications = new MeshApplicationsImpl(this);
        this.meshServices = new MeshServicesImpl(this);
        this.meshCodePackages = new MeshCodePackagesImpl(this);
        this.meshServiceReplicas = new MeshServiceReplicasImpl(this);
        this.meshGateways = new MeshGatewaysImpl(this);
        this.service =
                RestProxy.create(
                        ServiceFabricClientAPIsClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ServiceFabricClientAPIsClient to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricClientA")
    private interface ServiceFabricClientAPIsClientService {
        @Get("/$/GetClusterManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterManifest(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/GetClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetClusterHealthChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterHealthChunk(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/GetClusterHealthChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterHealthChunkUsingPolicyAndAdvancedFilters(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/ReportClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportClusterHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetProvisionedCodeVersions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getProvisionedFabricCodeVersionInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetProvisionedConfigVersions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getProvisionedFabricConfigVersionInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterUpgradeProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetClusterConfiguration")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterConfiguration(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetClusterConfigurationUpgradeStatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterConfigurationUpgradeStatus(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetUpgradeOrchestrationServiceState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUpgradeOrchestrationServiceState(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/SetUpgradeOrchestrationServiceState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> setUpgradeOrchestrationServiceState(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData upgradeOrchestrationServiceState,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/Provision")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> provisionCluster(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData provisionFabricDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/Unprovision")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> unprovisionCluster(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData unprovisionFabricDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/RollbackUpgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> rollbackClusterUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/MoveToNextUpgradeDomain")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resumeClusterUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData resumeClusterUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/Upgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startClusterUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData startClusterUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/StartClusterConfigurationUpgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startClusterConfigurationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData clusterConfigurationUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/UpdateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateClusterUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData updateClusterUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetAadMetadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAadMetadata(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetClusterVersion")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterVersion(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterLoad(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/ToggleVerboseServicePlacementHealthReporting")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> toggleVerboseServicePlacementHealthReporting(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/ValidateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> validateClusterUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData startClusterUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportNodeHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeLoadInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/Deactivate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> disableNode(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData deactivationIntentDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/Activate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> enableNode(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/RemoveNodeState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeNodeState(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> restartNode(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData restartNodeDescription,
                RequestOptions requestOptions,
                Context context);

        @Delete("/Nodes/{nodeName}/$/RemoveConfigurationOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeConfigurationOverrides(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetConfigurationOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getConfigurationOverrides(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/AddConfigurationParameterOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addConfigurationParameterOverrides(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData configParameterOverrideList,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/RemoveNodeTags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeNodeTags(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData nodeTags,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/AddNodeTags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addNodeTags(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData nodeTags,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationTypeInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes/{applicationTypeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationTypeInfoListByName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/ApplicationTypes/$/Provision")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> provisionApplicationType(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData provisionApplicationTypeDescriptionBaseRequiredBodyParam,
                RequestOptions requestOptions,
                Context context);

        @Post("/ApplicationTypes/{applicationTypeName}/$/Unprovision")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> unprovisionApplicationType(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @BodyParam("application/json") BinaryData unprovisionApplicationTypeDescriptionInfo,
                RequestOptions requestOptions,
                Context context);

        @Post("/ApplicationTypes/{applicationTypeName}/$/UpdateArmMetadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateApplicationTypeArmMetadata(
                @HostParam("$host") String host,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData applicationTypeArmMetadataUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceTypeInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceTypeInfoByName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @PathParam(value = "serviceTypeName", encoded = true) String serviceTypeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceManifest(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServiceTypeInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServiceTypeInfoByName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "serviceTypeName", encoded = true) String serviceTypeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createApplication(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData applicationDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteApplication(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetLoadInformation")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationLoadInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationHealth(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationHealthUsingPolicy(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportApplicationHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/Upgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startApplicationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData applicationUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/UpdateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateApplicationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData applicationUpgradeUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateApplication(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData applicationUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/MoveToNextUpgradeDomain")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resumeApplicationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData resumeApplicationUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/RollbackUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> rollbackApplicationUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedApplicationInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedApplicationInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedApplicationHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedApplicationHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportDeployedApplicationHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationManifest(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/UpdateArmMetadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateApplicationArmMetadata(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData applicationArmMetadataUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetServices")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceInfoList(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetServices/{serviceId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceInfo(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetApplicationName")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationNameInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/GetServices/$/Create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createService(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData serviceDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createServiceFromTemplate(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData serviceFromTemplateDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteService(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateService(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @BodyParam("application/json") BinaryData serviceUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetDescription")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceDescription(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportServiceHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/ResolvePartition")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> resolveService(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetUnplacedReplicaInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUnplacedReplicaInformation(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/UpdateArmMetadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateServiceArmMetadata(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData serviceArmMetadataUpdateDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetLoadedPartitionInfoList")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLoadedPartitionInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetServiceName")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceNameInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportPartitionHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionLoadInformation(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/ResetLoad")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resetPartitionLoad(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/Recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> recoverPartition(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/$/{serviceId}/$/GetPartitions/$/Recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> recoverServicePartitions(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/RecoverSystemPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> recoverSystemPartitions(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/RecoverAllPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> recoverAllPartitions(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/MovePrimaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> movePrimaryReplica(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/MoveSecondaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> moveSecondaryReplica(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/UpdatePartitionLoad")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updatePartitionLoad(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData partitionMetricLoadDescriptionList,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/GetPartitions/{partitionId}/$/MoveInstance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> moveInstance(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/GetPartitions/{partitionId}/$/MoveAuxiliaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> moveAuxiliaryReplica(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/CreateRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createRepairTask(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTask,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/CancelRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelRepairTask(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTaskCancelDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/DeleteRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRepairTask(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTaskDeleteDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/GetRepairTaskList")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRepairTaskList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/ForceApproveRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> forceApproveRepairTask(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTaskApproveDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/UpdateRepairTaskHealthPolicy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateRepairTaskHealthPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTaskUpdateHealthPolicyDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/UpdateRepairExecutionState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateRepairExecutionState(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData repairTask,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetReplicas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getReplicaInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetReplicas/{replicaId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getReplicaInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getReplicaHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getReplicaHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportReplicaHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServiceReplicaInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfoByPartitionId(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> restartReplica(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeReplica(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServicePackageInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServicePackageInfoListByName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServicePackageHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedServicePackageHealthUsingPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reportDeployedServicePackageHealth(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                @BodyParam("application/json") BinaryData healthInformation,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/DeployServicePackage")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deployServicePackageToNode(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") BinaryData deployServicePackageToNodeDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployedCodePackageInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> restartDeployedCodePackage(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData restartDeployedCodePackageDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getContainerLogsDeployedOnNode(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> invokeContainerApi(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @BodyParam("application/json") BinaryData containerApiRequestBody,
                RequestOptions requestOptions,
                Context context);

        @Put("/ComposeDeployments/$/Create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createComposeDeployment(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData createComposeDeploymentDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/ComposeDeployments/{deploymentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getComposeDeploymentStatus(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                RequestOptions requestOptions,
                Context context);

        @Get("/ComposeDeployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getComposeDeploymentStatusList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getComposeDeploymentUpgradeProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                RequestOptions requestOptions,
                Context context);

        @Post("/ComposeDeployments/{deploymentName}/$/Delete")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeComposeDeployment(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                RequestOptions requestOptions,
                Context context);

        @Post("/ComposeDeployments/{deploymentName}/$/Upgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startComposeDeploymentUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @BodyParam("application/json") BinaryData composeDeploymentUpgradeDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/ComposeDeployments/{deploymentName}/$/RollbackUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startRollbackComposeDeploymentUpgrade(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Tools/Chaos")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getChaos(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Tools/Chaos/$/Start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startChaos(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData chaosParameters,
                RequestOptions requestOptions,
                Context context);

        @Post("/Tools/Chaos/$/Stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> stopChaos(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Tools/Chaos/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getChaosEvents(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Tools/Chaos/Schedule")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getChaosSchedule(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Tools/Chaos/Schedule")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> postChaosSchedule(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData chaosSchedule,
                RequestOptions requestOptions,
                Context context);

        @Put("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> uploadFile(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreContent(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Delete("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteImageStoreContent(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreRootContent(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/ImageStore/$/Copy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> copyImageStoreContent(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData imageStoreCopyDescription,
                RequestOptions requestOptions,
                Context context);

        @Delete("/ImageStore/$/DeleteUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteImageStoreUploadSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/ImageStore/$/CommitUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> commitImageStoreUploadSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/$/GetUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreUploadSessionById(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/{contentPath}/$/GetUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreUploadSessionByPath(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Put("/ImageStore/{contentPath}/$/UploadChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> uploadFileChunk(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/$/FolderSize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreRootFolderSize(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/{contentPath}/$/FolderSize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreFolderSize(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                RequestOptions requestOptions,
                Context context);

        @Get("/ImageStore/$/Info")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImageStoreInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/$/InvokeInfrastructureCommand")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> invokeInfrastructureCommand(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/$/InvokeInfrastructureQuery")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> invokeInfrastructureQuery(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startDataLoss(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDataLossProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startQuorumLoss(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getQuorumLossProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startPartitionRestart(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionRestartProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Faults/Nodes/{nodeName}/$/StartTransition/")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startNodeTransition(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Faults/Nodes/{nodeName}/$/GetTransitionProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeTransitionProgress(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Faults/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFaultOperationList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Faults/$/Cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/BackupRestore/BackupPolicies/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createBackupPolicy(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData backupPolicyDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteBackupPolicy(
                @HostParam("$host") String host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/BackupRestore/BackupPolicies")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBackupPolicyList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/BackupRestore/BackupPolicies/{backupPolicyName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBackupPolicyByName(
                @HostParam("$host") String host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllEntitiesBackedUpByPolicy(
                @HostParam("$host") String host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateBackupPolicy(
                @HostParam("$host") String host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData backupPolicyDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> enableApplicationBackup(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData enableBackupDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> disableApplicationBackup(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationBackupConfigurationInfo(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Applications/{applicationId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationBackupList(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> suspendApplicationBackup(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Applications/{applicationId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resumeApplicationBackup(
                @HostParam("$host") String host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> enableServiceBackup(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData enableBackupDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> disableServiceBackup(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceBackupConfigurationInfo(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Services/{serviceId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceBackupList(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> suspendServiceBackup(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Services/{serviceId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resumeServiceBackup(
                @HostParam("$host") String host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> enablePartitionBackup(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData enableBackupDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> disablePartitionBackup(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionBackupConfigurationInfo(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionBackupList(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> suspendPartitionBackup(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resumePartitionBackup(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/Backup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> backupPartition(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetBackupProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionBackupProgress(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/Partitions/{partitionId}/$/Restore")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> restorePartition(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData restorePartitionDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Partitions/{partitionId}/$/GetRestoreProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionRestoreProgress(
                @HostParam("$host") String host,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/BackupRestore/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBackupsFromBackupLocation(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData getBackupByStorageQueryDescription,
                RequestOptions requestOptions,
                Context context);

        @Post("/Names/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData nameDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Names/{nameId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getNameExistsInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/Names/{nameId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteName(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Names/{nameId}/$/GetSubNames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSubNameInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Get("/Names/{nameId}/$/GetProperties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPropertyInfoList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Put("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putProperty(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @BodyParam("application/json") BinaryData propertyDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPropertyInfo(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteProperty(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                RequestOptions requestOptions,
                Context context);

        @Post("/Names/{nameId}/$/GetProperties/$/SubmitBatch")
        @ExpectedResponses({200, 409})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> submitPropertyBatch(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @BodyParam("application/json") BinaryData propertyBatchDescriptionList,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Cluster/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClusterEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Containers/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getContainersEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Nodes/{nodeName}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodeEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Nodes/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getNodesEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Applications/{applicationId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Applications/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getApplicationsEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Services/{serviceId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Services/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServicesEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Partitions/{partitionId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Partitions/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionsEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionReplicaEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/Partitions/{partitionId}/$/Replicas/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPartitionReplicasEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Get("/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCorrelatedEventList(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("eventInstanceId") String eventInstanceId,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
     * different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p>These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
     * However, most of the information in the cluster manifest is generated internally by service fabric during cluster
     * deployment in other deployment scenarios (e.g. when using Azure portal).
     *
     * <p>The contents of the cluster manifest are for informational purposes only and users are not expected to take a
     * dependency on the format of the file contents or its interpretation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric cluster manifest along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterManifestWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterManifest(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
     * different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p>These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
     * However, most of the information in the cluster manifest is generated internally by service fabric during cluster
     * deployment in other deployment scenarios (e.g. when using Azure portal).
     *
     * <p>The contents of the cluster manifest are for informational purposes only and users are not expected to take a
     * dependency on the format of the file contents or its interpretation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric cluster manifest along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterManifestWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterManifest(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
     * different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p>These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
     * However, most of the information in the cluster manifest is generated internally by service fabric during cluster
     * deployment in other deployment scenarios (e.g. when using Azure portal).
     *
     * <p>The contents of the cluster manifest are for informational purposes only and users are not expected to take a
     * dependency on the format of the file contents or its interpretation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric cluster manifest along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterManifestWithResponse(RequestOptions requestOptions) {
        return getClusterManifestWithResponseAsync(requestOptions).block();
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterHealth(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterHealth(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterHealthWithResponse(RequestOptions requestOptions) {
        return getClusterHealthWithResponseAsync(requestOptions).block();
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the
     * health policies used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationHealthPolicyMap: [
     *         {
     *             key: String
     *             value: {
     *                 considerWarningAsError: Boolean
     *                 maxPercentUnhealthyDeployedApplications: Integer
     *                 defaultServiceTypeHealthPolicy: {
     *                     maxPercentUnhealthyPartitionsPerService: Integer
     *                     maxPercentUnhealthyReplicasPerPartition: Integer
     *                     maxPercentUnhealthyServices: Integer
     *                 }
     *                 serviceTypeHealthPolicyMap: [
     *                     {
     *                         key: String
     *                         value: (recursive schema, see value above)
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthUsingPolicyWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterHealthUsingPolicy(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the
     * health policies used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationHealthPolicyMap: [
     *         {
     *             key: String
     *             value: {
     *                 considerWarningAsError: Boolean
     *                 maxPercentUnhealthyDeployedApplications: Integer
     *                 defaultServiceTypeHealthPolicy: {
     *                     maxPercentUnhealthyPartitionsPerService: Integer
     *                     maxPercentUnhealthyReplicasPerPartition: Integer
     *                     maxPercentUnhealthyServices: Integer
     *                 }
     *                 serviceTypeHealthPolicyMap: [
     *                     {
     *                         key: String
     *                         value: (recursive schema, see value above)
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthUsingPolicyWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterHealthUsingPolicy(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the
     * health policies used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the node health state objects returned in the result of cluster health query
     * based on their health state. The possible values for this parameter include integer value of one of the
     * following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the application health state objects returned in the result of cluster health
     * query based on their health state.
     * The possible values for this parameter include integer value obtained from members or bitwise operations
     * on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
     * All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>IncludeSystemApplicationHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
     * If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
     * Otherwise, the query result includes health statistics only for user applications.
     * The health statistics must be included in the query result for this parameter to be applied.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationHealthPolicyMap: [
     *         {
     *             key: String
     *             value: {
     *                 considerWarningAsError: Boolean
     *                 maxPercentUnhealthyDeployedApplications: Integer
     *                 defaultServiceTypeHealthPolicy: {
     *                     maxPercentUnhealthyPartitionsPerService: Integer
     *                     maxPercentUnhealthyReplicasPerPartition: Integer
     *                     maxPercentUnhealthyServices: Integer
     *                 }
     *                 serviceTypeHealthPolicyMap: [
     *                     {
     *                         key: String
     *                         value: (recursive schema, see value above)
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     nodeHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *             id: {
     *                 id: String
     *             }
     *         }
     *     ]
     *     applicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterHealthUsingPolicyWithResponse(RequestOptions requestOptions) {
        return getClusterHealthUsingPolicyWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
     * cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some
     * of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthChunkWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterHealthChunk(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
     * cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some
     * of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthChunkWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterHealthChunk(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
     * cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some
     * of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterHealthChunkWithResponse(RequestOptions requestOptions) {
        return getClusterHealthChunkWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
     * cluster health chunk query description. The query description allows users to specify health policies for
     * evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities
     * to return. The selection can be done based on the entities health state and based on the hierarchy. The query can
     * return multi-level children of the entities based on the specified filters. For example, it can return one
     * application with a specified name, and for this application, return only services that are in Error or Warning,
     * and all partitions and replicas for one of these services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeFilters: [
     *         {
     *             nodeNameFilter: String
     *             healthStateFilter: Integer
     *         }
     *     ]
     *     applicationFilters: [
     *         {
     *             applicationNameFilter: String
     *             applicationTypeNameFilter: String
     *             healthStateFilter: Integer
     *             serviceFilters: [
     *                 {
     *                     serviceNameFilter: String
     *                     healthStateFilter: Integer
     *                     partitionFilters: [
     *                         {
     *                             partitionIdFilter: String
     *                             healthStateFilter: Integer
     *                             replicaFilters: [
     *                                 {
     *                                     replicaOrInstanceIdFilter: String
     *                                     healthStateFilter: Integer
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *             deployedApplicationFilters: [
     *                 {
     *                     nodeNameFilter: String
     *                     healthStateFilter: Integer
     *                     deployedServicePackageFilters: [
     *                         {
     *                             serviceManifestNameFilter: String
     *                             servicePackageActivationIdFilter: String
     *                             healthStateFilter: Integer
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getClusterHealthChunkUsingPolicyAndAdvancedFilters(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
     * cluster health chunk query description. The query description allows users to specify health policies for
     * evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities
     * to return. The selection can be done based on the entities health state and based on the hierarchy. The query can
     * return multi-level children of the entities based on the specified filters. For example, it can return one
     * application with a specified name, and for this application, return only services that are in Error or Warning,
     * and all partitions and replicas for one of these services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeFilters: [
     *         {
     *             nodeNameFilter: String
     *             healthStateFilter: Integer
     *         }
     *     ]
     *     applicationFilters: [
     *         {
     *             applicationNameFilter: String
     *             applicationTypeNameFilter: String
     *             healthStateFilter: Integer
     *             serviceFilters: [
     *                 {
     *                     serviceNameFilter: String
     *                     healthStateFilter: Integer
     *                     partitionFilters: [
     *                         {
     *                             partitionIdFilter: String
     *                             healthStateFilter: Integer
     *                             replicaFilters: [
     *                                 {
     *                                     replicaOrInstanceIdFilter: String
     *                                     healthStateFilter: Integer
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *             deployedApplicationFilters: [
     *                 {
     *                     nodeNameFilter: String
     *                     healthStateFilter: Integer
     *                     deployedServicePackageFilters: [
     *                         {
     *                             serviceManifestNameFilter: String
     *                             servicePackageActivationIdFilter: String
     *                             healthStateFilter: Integer
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterHealthChunkUsingPolicyAndAdvancedFilters(
                this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
     * cluster health chunk query description. The query description allows users to specify health policies for
     * evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities
     * to return. The selection can be done based on the entities health state and based on the hierarchy. The query can
     * return multi-level children of the entities based on the specified filters. For example, it can return one
     * application with a specified name, and for this application, return only services that are in Error or Warning,
     * and all partitions and replicas for one of these services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeFilters: [
     *         {
     *             nodeNameFilter: String
     *             healthStateFilter: Integer
     *         }
     *     ]
     *     applicationFilters: [
     *         {
     *             applicationNameFilter: String
     *             applicationTypeNameFilter: String
     *             healthStateFilter: Integer
     *             serviceFilters: [
     *                 {
     *                     serviceNameFilter: String
     *                     healthStateFilter: Integer
     *                     partitionFilters: [
     *                         {
     *                             partitionIdFilter: String
     *                             healthStateFilter: Integer
     *                             replicaFilters: [
     *                                 {
     *                                     replicaOrInstanceIdFilter: String
     *                                     healthStateFilter: Integer
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *             deployedApplicationFilters: [
     *                 {
     *                     nodeNameFilter: String
     *                     healthStateFilter: Integer
     *                     deployedServicePackageFilters: [
     *                         {
     *                             serviceManifestNameFilter: String
     *                             servicePackageActivationIdFilter: String
     *                             healthStateFilter: Integer
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 nodeName: String
     *             }
     *         ]
     *     }
     *     applicationHealthStateChunks: {
     *         totalCount: Long
     *         items: [
     *             {
     *                 healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 applicationName: String
     *                 applicationTypeName: String
     *                 serviceHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             serviceName: String
     *                             partitionHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         partitionId: String
     *                                         replicaHealthStateChunks: {
     *                                             items: [
     *                                                 {
     *                                                     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                                     replicaOrInstanceId: String
     *                                                 }
     *                                             ]
     *                                         }
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *                 deployedApplicationHealthStateChunks: {
     *                     items: [
     *                         {
     *                             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                             nodeName: String
     *                             deployedServicePackageHealthStateChunks: {
     *                                 items: [
     *                                     {
     *                                         healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                                         serviceManifestName: String
     *                                         servicePackageActivationId: String
     *                                     }
     *                                 ]
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponse(
            RequestOptions requestOptions) {
        return getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponseAsync(requestOptions).block();
    }

    /**
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of
     * the health report and property on which it is reported. The report is sent to a Service Fabric gateway node,
     * which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store
     * after extra validation. For example, the health store may reject the report because of an invalid parameter, like
     * a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and
     * check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportClusterHealthWithResponseAsync(
            BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportClusterHealth(
                                this.getHost(), apiVersion, healthInformation, requestOptions, context));
    }

    /**
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of
     * the health report and property on which it is reported. The report is sent to a Service Fabric gateway node,
     * which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store
     * after extra validation. For example, the health store may reject the report because of an invalid parameter, like
     * a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and
     * check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportClusterHealthWithResponseAsync(
            BinaryData healthInformation, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.reportClusterHealth(this.getHost(), apiVersion, healthInformation, requestOptions, context);
    }

    /**
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of
     * the health report and property on which it is reported. The report is sent to a Service Fabric gateway node,
     * which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store
     * after extra validation. For example, the health store may reject the report because of an invalid parameter, like
     * a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and
     * check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportClusterHealthWithResponse(BinaryData healthInformation, RequestOptions requestOptions) {
        return reportClusterHealthWithResponseAsync(healthInformation, requestOptions).block();
    }

    /**
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
     * CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CodeVersion</td><td>String</td><td>No</td><td>The product version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         codeVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric code versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProvisionedFabricCodeVersionInfoListWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getProvisionedFabricCodeVersionInfoList(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
     * CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CodeVersion</td><td>String</td><td>No</td><td>The product version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         codeVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric code versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProvisionedFabricCodeVersionInfoListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getProvisionedFabricCodeVersionInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
     * CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CodeVersion</td><td>String</td><td>No</td><td>The product version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         codeVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric code versions that are provisioned in the cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProvisionedFabricCodeVersionInfoListWithResponse(RequestOptions requestOptions) {
        return getProvisionedFabricCodeVersionInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
     * ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigVersion</td><td>String</td><td>No</td><td>The config version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         configVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric config versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProvisionedFabricConfigVersionInfoListWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getProvisionedFabricConfigVersionInfoList(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
     * ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigVersion</td><td>String</td><td>No</td><td>The config version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         configVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric config versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProvisionedFabricConfigVersionInfoListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getProvisionedFabricConfigVersionInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
     * ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigVersion</td><td>String</td><td>No</td><td>The config version of Service Fabric.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         configVersion: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of information about fabric config versions that are provisioned in the cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProvisionedFabricConfigVersionInfoListWithResponse(RequestOptions requestOptions) {
        return getProvisionedFabricConfigVersionInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
     * state of the previous cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         configVersion: String
     *         codeVersion: String
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         enableDeltaHealthEvaluation: Boolean
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         clusterUpgradeHealthPolicy: {
     *             maxPercentDeltaUnhealthyNodes: Integer
     *             maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *         }
     *         applicationHealthPolicyMap: {
     *             applicationHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyDeployedApplications: Integer
     *                         defaultServiceTypeHealthPolicy: {
     *                             maxPercentUnhealthyPartitionsPerService: Integer
     *                             maxPercentUnhealthyReplicasPerPartition: Integer
     *                             maxPercentUnhealthyServices: Integer
     *                         }
     *                         serviceTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: (recursive schema, see value above)
     *                             }
     *                         ]
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the current progress of the ongoing cluster upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterUpgradeProgressWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterUpgradeProgress(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
     * state of the previous cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         configVersion: String
     *         codeVersion: String
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         enableDeltaHealthEvaluation: Boolean
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         clusterUpgradeHealthPolicy: {
     *             maxPercentDeltaUnhealthyNodes: Integer
     *             maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *         }
     *         applicationHealthPolicyMap: {
     *             applicationHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyDeployedApplications: Integer
     *                         defaultServiceTypeHealthPolicy: {
     *                             maxPercentUnhealthyPartitionsPerService: Integer
     *                             maxPercentUnhealthyReplicasPerPartition: Integer
     *                             maxPercentUnhealthyServices: Integer
     *                         }
     *                         serviceTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: (recursive schema, see value above)
     *                             }
     *                         ]
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the current progress of the ongoing cluster upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterUpgradeProgressWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterUpgradeProgress(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
     * state of the previous cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         configVersion: String
     *         codeVersion: String
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         enableDeltaHealthEvaluation: Boolean
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         clusterUpgradeHealthPolicy: {
     *             maxPercentDeltaUnhealthyNodes: Integer
     *             maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *         }
     *         applicationHealthPolicyMap: {
     *             applicationHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyDeployedApplications: Integer
     *                         defaultServiceTypeHealthPolicy: {
     *                             maxPercentUnhealthyPartitionsPerService: Integer
     *                             maxPercentUnhealthyReplicasPerPartition: Integer
     *                             maxPercentUnhealthyServices: Integer
     *                         }
     *                         serviceTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: (recursive schema, see value above)
     *                             }
     *                         ]
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the current progress of the ongoing cluster upgrade along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterUpgradeProgressWithResponse(RequestOptions requestOptions) {
        return getClusterUpgradeProgressWithResponseAsync(requestOptions).block();
    }

    /**
     * The cluster configuration contains properties of the cluster that include different node types on the cluster,
     * security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigurationApiVersion</td><td>String</td><td>Yes</td><td>The API version of the Standalone cluster json configuration.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfiguration: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the standalone cluster configuration along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterConfigurationWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterConfiguration(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The cluster configuration contains properties of the cluster that include different node types on the cluster,
     * security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigurationApiVersion</td><td>String</td><td>Yes</td><td>The API version of the Standalone cluster json configuration.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfiguration: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the standalone cluster configuration along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterConfigurationWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterConfiguration(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The cluster configuration contains properties of the cluster that include different node types on the cluster,
     * security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ConfigurationApiVersion</td><td>String</td><td>Yes</td><td>The API version of the Standalone cluster json configuration.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfiguration: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the standalone cluster configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterConfigurationWithResponse(RequestOptions requestOptions) {
        return getClusterConfigurationWithResponseAsync(requestOptions).block();
    }

    /**
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     progressStatus: Integer
     *     configVersion: String
     *     details: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster configuration upgrade status details of a Service Fabric standalone cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterConfigurationUpgradeStatusWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getClusterConfigurationUpgradeStatus(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     progressStatus: Integer
     *     configVersion: String
     *     details: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster configuration upgrade status details of a Service Fabric standalone cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterConfigurationUpgradeStatusWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterConfigurationUpgradeStatus(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     progressStatus: Integer
     *     configVersion: String
     *     details: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster configuration upgrade status details of a Service Fabric standalone cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterConfigurationUpgradeStatusWithResponse(RequestOptions requestOptions) {
        return getClusterConfigurationUpgradeStatusWithResponseAsync(requestOptions).block();
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the service state of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpgradeOrchestrationServiceStateWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getUpgradeOrchestrationServiceState(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the service state of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpgradeOrchestrationServiceStateWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getUpgradeOrchestrationServiceState(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the service state of Service Fabric Upgrade Orchestration Service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpgradeOrchestrationServiceStateWithResponse(RequestOptions requestOptions) {
        return getUpgradeOrchestrationServiceStateWithResponseAsync(requestOptions).block();
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentCodeVersion: String
     *     currentManifestVersion: String
     *     targetCodeVersion: String
     *     targetManifestVersion: String
     *     pendingUpgradeType: String
     * }
     * }</pre>
     *
     * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service state summary of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> setUpgradeOrchestrationServiceStateWithResponseAsync(
            BinaryData upgradeOrchestrationServiceState, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.setUpgradeOrchestrationServiceState(
                                this.getHost(), apiVersion, upgradeOrchestrationServiceState, requestOptions, context));
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentCodeVersion: String
     *     currentManifestVersion: String
     *     targetCodeVersion: String
     *     targetManifestVersion: String
     *     pendingUpgradeType: String
     * }
     * }</pre>
     *
     * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service state summary of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> setUpgradeOrchestrationServiceStateWithResponseAsync(
            BinaryData upgradeOrchestrationServiceState, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.setUpgradeOrchestrationServiceState(
                this.getHost(), apiVersion, upgradeOrchestrationServiceState, requestOptions, context);
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceState: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentCodeVersion: String
     *     currentManifestVersion: String
     *     targetCodeVersion: String
     *     targetManifestVersion: String
     *     pendingUpgradeType: String
     * }
     * }</pre>
     *
     * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service state summary of Service Fabric Upgrade Orchestration Service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> setUpgradeOrchestrationServiceStateWithResponse(
            BinaryData upgradeOrchestrationServiceState, RequestOptions requestOptions) {
        return setUpgradeOrchestrationServiceStateWithResponseAsync(upgradeOrchestrationServiceState, requestOptions)
                .block();
    }

    /**
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeFilePath: String
     *     clusterManifestFilePath: String
     * }
     * }</pre>
     *
     * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionClusterWithResponseAsync(
            BinaryData provisionFabricDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.provisionCluster(
                                this.getHost(), apiVersion, provisionFabricDescription, requestOptions, context));
    }

    /**
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeFilePath: String
     *     clusterManifestFilePath: String
     * }
     * }</pre>
     *
     * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionClusterWithResponseAsync(
            BinaryData provisionFabricDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.provisionCluster(
                this.getHost(), apiVersion, provisionFabricDescription, requestOptions, context);
    }

    /**
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeFilePath: String
     *     clusterManifestFilePath: String
     * }
     * }</pre>
     *
     * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> provisionClusterWithResponse(
            BinaryData provisionFabricDescription, RequestOptions requestOptions) {
        return provisionClusterWithResponseAsync(provisionFabricDescription, requestOptions).block();
    }

    /**
     * It is supported to unprovision code and configuration separately.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     * }
     * }</pre>
     *
     * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionClusterWithResponseAsync(
            BinaryData unprovisionFabricDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.unprovisionCluster(
                                this.getHost(), apiVersion, unprovisionFabricDescription, requestOptions, context));
    }

    /**
     * It is supported to unprovision code and configuration separately.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     * }
     * }</pre>
     *
     * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionClusterWithResponseAsync(
            BinaryData unprovisionFabricDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.unprovisionCluster(
                this.getHost(), apiVersion, unprovisionFabricDescription, requestOptions, context);
    }

    /**
     * It is supported to unprovision code and configuration separately.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     * }
     * }</pre>
     *
     * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> unprovisionClusterWithResponse(
            BinaryData unprovisionFabricDescription, RequestOptions requestOptions) {
        return unprovisionClusterWithResponseAsync(unprovisionFabricDescription, requestOptions).block();
    }

    /**
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackClusterUpgradeWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.rollbackClusterUpgrade(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackClusterUpgradeWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.rollbackClusterUpgrade(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rollbackClusterUpgradeWithResponse(RequestOptions requestOptions) {
        return rollbackClusterUpgradeWithResponseAsync(requestOptions).block();
    }

    /**
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomain: String
     * }
     * }</pre>
     *
     * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeClusterUpgradeWithResponseAsync(
            BinaryData resumeClusterUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.resumeClusterUpgrade(
                                this.getHost(), apiVersion, resumeClusterUpgradeDescription, requestOptions, context));
    }

    /**
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomain: String
     * }
     * }</pre>
     *
     * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeClusterUpgradeWithResponseAsync(
            BinaryData resumeClusterUpgradeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.resumeClusterUpgrade(
                this.getHost(), apiVersion, resumeClusterUpgradeDescription, requestOptions, context);
    }

    /**
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomain: String
     * }
     * }</pre>
     *
     * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeClusterUpgradeWithResponse(
            BinaryData resumeClusterUpgradeDescription, RequestOptions requestOptions) {
        return resumeClusterUpgradeWithResponseAsync(resumeClusterUpgradeDescription, requestOptions).block();
    }

    /**
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service
     * Fabric cluster if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterUpgradeWithResponseAsync(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startClusterUpgrade(
                                this.getHost(), apiVersion, startClusterUpgradeDescription, requestOptions, context));
    }

    /**
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service
     * Fabric cluster if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterUpgradeWithResponseAsync(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startClusterUpgrade(
                this.getHost(), apiVersion, startClusterUpgradeDescription, requestOptions, context);
    }

    /**
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service
     * Fabric cluster if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startClusterUpgradeWithResponse(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions) {
        return startClusterUpgradeWithResponseAsync(startClusterUpgradeDescription, requestOptions).block();
    }

    /**
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
     * parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfig: String
     *     healthCheckRetryTimeout: String
     *     healthCheckWaitDurationInSeconds: String
     *     healthCheckStableDurationInSeconds: String
     *     upgradeDomainTimeoutInSeconds: String
     *     upgradeTimeoutInSeconds: String
     *     maxPercentUnhealthyApplications: Integer
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentDeltaUnhealthyNodes: Integer
     *     maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterConfigurationUpgradeWithResponseAsync(
            BinaryData clusterConfigurationUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startClusterConfigurationUpgrade(
                                this.getHost(),
                                apiVersion,
                                clusterConfigurationUpgradeDescription,
                                requestOptions,
                                context));
    }

    /**
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
     * parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfig: String
     *     healthCheckRetryTimeout: String
     *     healthCheckWaitDurationInSeconds: String
     *     healthCheckStableDurationInSeconds: String
     *     upgradeDomainTimeoutInSeconds: String
     *     upgradeTimeoutInSeconds: String
     *     maxPercentUnhealthyApplications: Integer
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentDeltaUnhealthyNodes: Integer
     *     maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterConfigurationUpgradeWithResponseAsync(
            BinaryData clusterConfigurationUpgradeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startClusterConfigurationUpgrade(
                this.getHost(), apiVersion, clusterConfigurationUpgradeDescription, requestOptions, context);
    }

    /**
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
     * parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clusterConfig: String
     *     healthCheckRetryTimeout: String
     *     healthCheckWaitDurationInSeconds: String
     *     healthCheckStableDurationInSeconds: String
     *     upgradeDomainTimeoutInSeconds: String
     *     upgradeTimeoutInSeconds: String
     *     maxPercentUnhealthyApplications: Integer
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentDeltaUnhealthyNodes: Integer
     *     maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     applicationHealthPolicies: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startClusterConfigurationUpgradeWithResponse(
            BinaryData clusterConfigurationUpgradeDescription, RequestOptions requestOptions) {
        return startClusterConfigurationUpgradeWithResponseAsync(clusterConfigurationUpgradeDescription, requestOptions)
                .block();
    }

    /**
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeKind: String(Invalid/Rolling/Rolling_ForceRestart)
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClusterUpgradeWithResponseAsync(
            BinaryData updateClusterUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.updateClusterUpgrade(
                                this.getHost(), apiVersion, updateClusterUpgradeDescription, requestOptions, context));
    }

    /**
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeKind: String(Invalid/Rolling/Rolling_ForceRestart)
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClusterUpgradeWithResponseAsync(
            BinaryData updateClusterUpgradeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.updateClusterUpgrade(
                this.getHost(), apiVersion, updateClusterUpgradeDescription, requestOptions, context);
    }

    /**
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeKind: String(Invalid/Rolling/Rolling_ForceRestart)
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateClusterUpgradeWithResponse(
            BinaryData updateClusterUpgradeDescription, RequestOptions requestOptions) {
        return updateClusterUpgradeWithResponseAsync(updateClusterUpgradeDescription, requestOptions).block();
    }

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be
     * called separately. It provides information needed to set up an Azure Active Directory secured connection with a
     * Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String
     *     metadata: {
     *         authority: String
     *         client: String
     *         cluster: String
     *         login: String
     *         redirect: String
     *         tenant: String
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to
     *     be called separately along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAadMetadataWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getAadMetadata(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be
     * called separately. It provides information needed to set up an Azure Active Directory secured connection with a
     * Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String
     *     metadata: {
     *         authority: String
     *         client: String
     *         cluster: String
     *         login: String
     *         redirect: String
     *         tenant: String
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to
     *     be called separately along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAadMetadataWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getAadMetadata(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be
     * called separately. It provides information needed to set up an Azure Active Directory secured connection with a
     * Service Fabric cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String
     *     metadata: {
     *         authority: String
     *         client: String
     *         cluster: String
     *         login: String
     *         redirect: String
     *         tenant: String
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to
     *     be called separately along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAadMetadataWithResponse(RequestOptions requestOptions) {
        return getAadMetadataWithResponseAsync(requestOptions).block();
    }

    /**
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
     * cluster runtime versions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterVersionWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getClusterVersion(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
     * cluster runtime versions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterVersionWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getClusterVersion(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
     * cluster runtime versions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the cluster version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterVersionWithResponse(RequestOptions requestOptions) {
        return getClusterVersionWithResponseAsync(requestOptions).block();
    }

    /**
     * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity
     * defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lastBalancingStartTimeUtc: String
     *     lastBalancingEndTimeUtc: String
     *     loadMetricInformation: [
     *         {
     *             name: String
     *             isBalancedBefore: Boolean
     *             isBalancedAfter: Boolean
     *             deviationBefore: String
     *             deviationAfter: String
     *             balancingThreshold: String
     *             action: String
     *             activityThreshold: String
     *             clusterCapacity: String
     *             clusterLoad: String
     *             currentClusterLoad: String
     *             clusterRemainingCapacity: String
     *             clusterCapacityRemaining: String
     *             isClusterCapacityViolation: Boolean
     *             nodeBufferPercentage: String
     *             clusterBufferedCapacity: String
     *             bufferedClusterCapacityRemaining: String
     *             clusterRemainingBufferedCapacity: String
     *             minNodeLoadValue: String
     *             minimumNodeLoad: String
     *             minNodeLoadNodeId: {
     *                 id: String
     *             }
     *             maxNodeLoadValue: String
     *             maximumNodeLoad: String
     *             maxNodeLoadNodeId: (recursive schema, see maxNodeLoadNodeId above)
     *             plannedLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load in a Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterLoadWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getClusterLoad(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity
     * defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lastBalancingStartTimeUtc: String
     *     lastBalancingEndTimeUtc: String
     *     loadMetricInformation: [
     *         {
     *             name: String
     *             isBalancedBefore: Boolean
     *             isBalancedAfter: Boolean
     *             deviationBefore: String
     *             deviationAfter: String
     *             balancingThreshold: String
     *             action: String
     *             activityThreshold: String
     *             clusterCapacity: String
     *             clusterLoad: String
     *             currentClusterLoad: String
     *             clusterRemainingCapacity: String
     *             clusterCapacityRemaining: String
     *             isClusterCapacityViolation: Boolean
     *             nodeBufferPercentage: String
     *             clusterBufferedCapacity: String
     *             bufferedClusterCapacityRemaining: String
     *             clusterRemainingBufferedCapacity: String
     *             minNodeLoadValue: String
     *             minimumNodeLoad: String
     *             minNodeLoadNodeId: {
     *                 id: String
     *             }
     *             maxNodeLoadValue: String
     *             maximumNodeLoad: String
     *             maxNodeLoadNodeId: (recursive schema, see maxNodeLoadNodeId above)
     *             plannedLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load in a Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterLoadWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getClusterLoad(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity
     * defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lastBalancingStartTimeUtc: String
     *     lastBalancingEndTimeUtc: String
     *     loadMetricInformation: [
     *         {
     *             name: String
     *             isBalancedBefore: Boolean
     *             isBalancedAfter: Boolean
     *             deviationBefore: String
     *             deviationAfter: String
     *             balancingThreshold: String
     *             action: String
     *             activityThreshold: String
     *             clusterCapacity: String
     *             clusterLoad: String
     *             currentClusterLoad: String
     *             clusterRemainingCapacity: String
     *             clusterCapacityRemaining: String
     *             isClusterCapacityViolation: Boolean
     *             nodeBufferPercentage: String
     *             clusterBufferedCapacity: String
     *             bufferedClusterCapacityRemaining: String
     *             clusterRemainingBufferedCapacity: String
     *             minNodeLoadValue: String
     *             minimumNodeLoad: String
     *             minNodeLoadNodeId: {
     *                 id: String
     *             }
     *             maxNodeLoadValue: String
     *             maximumNodeLoad: String
     *             maxNodeLoadNodeId: (recursive schema, see maxNodeLoadNodeId above)
     *             plannedLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load in a Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterLoadWithResponse(RequestOptions requestOptions) {
        return getClusterLoadWithResponseAsync(requestOptions).block();
    }

    /**
     * If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
     * dropped. If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or
     * dropped.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Enabled</td><td>boolean</td><td>Yes</td><td>The verbosity of service placement health reporting.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> toggleVerboseServicePlacementHealthReportingWithResponseAsync(
            RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.toggleVerboseServicePlacementHealthReporting(
                                this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
     * dropped. If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or
     * dropped.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Enabled</td><td>boolean</td><td>Yes</td><td>The verbosity of service placement health reporting.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> toggleVerboseServicePlacementHealthReportingWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.toggleVerboseServicePlacementHealthReporting(
                this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
     * dropped. If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or
     * dropped.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Enabled</td><td>boolean</td><td>Yes</td><td>The verbosity of service placement health reporting.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> toggleVerboseServicePlacementHealthReportingWithResponse(RequestOptions requestOptions) {
        return toggleVerboseServicePlacementHealthReportingWithResponseAsync(requestOptions).block();
    }

    /**
     * Validate the supplied upgrade parameters and assess the expected impact of a code or configuration version
     * upgrade of a Service Fabric cluster. The upgrade will not be initiated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceHostUpgradeImpact: String(Invalid/None/ServiceHostRestart/UnexpectedServiceHostRestart)
     *     validationDetails: String
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specifies result of validating a cluster upgrade along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> validateClusterUpgradeWithResponseAsync(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "8.2";
        return FluxUtil.withContext(
                context ->
                        service.validateClusterUpgrade(
                                this.getHost(), apiVersion, startClusterUpgradeDescription, requestOptions, context));
    }

    /**
     * Validate the supplied upgrade parameters and assess the expected impact of a code or configuration version
     * upgrade of a Service Fabric cluster. The upgrade will not be initiated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceHostUpgradeImpact: String(Invalid/None/ServiceHostRestart/UnexpectedServiceHostRestart)
     *     validationDetails: String
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specifies result of validating a cluster upgrade along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> validateClusterUpgradeWithResponseAsync(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "8.2";
        return service.validateClusterUpgrade(
                this.getHost(), apiVersion, startClusterUpgradeDescription, requestOptions, context);
    }

    /**
     * Validate the supplied upgrade parameters and assess the expected impact of a code or configuration version
     * upgrade of a Service Fabric cluster. The upgrade will not be initiated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     codeVersion: String
     *     configVersion: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     enableDeltaHealthEvaluation: Boolean
     *     clusterUpgradeHealthPolicy: {
     *         maxPercentDeltaUnhealthyNodes: Integer
     *         maxPercentUpgradeDomainDeltaUnhealthyNodes: Integer
     *     }
     *     applicationHealthPolicyMap: {
     *         applicationHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: {
     *                     considerWarningAsError: Boolean
     *                     maxPercentUnhealthyDeployedApplications: Integer
     *                     defaultServiceTypeHealthPolicy: {
     *                         maxPercentUnhealthyPartitionsPerService: Integer
     *                         maxPercentUnhealthyReplicasPerPartition: Integer
     *                         maxPercentUnhealthyServices: Integer
     *                     }
     *                     serviceTypeHealthPolicyMap: [
     *                         {
     *                             key: String
     *                             value: (recursive schema, see value above)
     *                         }
     *                     ]
     *                 }
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceHostUpgradeImpact: String(Invalid/None/ServiceHostRestart/UnexpectedServiceHostRestart)
     *     validationDetails: String
     * }
     * }</pre>
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specifies result of validating a cluster upgrade along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateClusterUpgradeWithResponse(
            BinaryData startClusterUpgradeDescription, RequestOptions requestOptions) {
        return validateClusterUpgradeWithResponseAsync(startClusterUpgradeDescription, requestOptions).block();
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.3'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>NodeStatusFilter</td><td>String</td><td>No</td><td>Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             ipAddressOrFqdn: String
     *             type: String
     *             codeVersion: String
     *             configVersion: String
     *             nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *             nodeUpTimeInSeconds: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             isSeedNode: Boolean
     *             upgradeDomain: String
     *             faultDomain: String
     *             id: {
     *                 id: String
     *             }
     *             instanceId: String
     *             nodeDeactivationInfo: {
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                 nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *                 nodeDeactivationTask: [
     *                     {
     *                         nodeDeactivationTaskId: {
     *                             id: String
     *                             nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                         }
     *                         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                     }
     *                 ]
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *             }
     *             isStopped: Boolean
     *             nodeDownTimeInSeconds: String
     *             nodeUpAt: String
     *             nodeDownAt: String
     *             nodeTags: [
     *                 String
     *             ]
     *             isNodeByNodeUpgradeInProgress: Boolean
     *             infrastructurePlacementId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of nodes in the cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeInfoListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.3";
        return FluxUtil.withContext(
                context -> service.getNodeInfoList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.3'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>NodeStatusFilter</td><td>String</td><td>No</td><td>Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             ipAddressOrFqdn: String
     *             type: String
     *             codeVersion: String
     *             configVersion: String
     *             nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *             nodeUpTimeInSeconds: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             isSeedNode: Boolean
     *             upgradeDomain: String
     *             faultDomain: String
     *             id: {
     *                 id: String
     *             }
     *             instanceId: String
     *             nodeDeactivationInfo: {
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                 nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *                 nodeDeactivationTask: [
     *                     {
     *                         nodeDeactivationTaskId: {
     *                             id: String
     *                             nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                         }
     *                         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                     }
     *                 ]
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *             }
     *             isStopped: Boolean
     *             nodeDownTimeInSeconds: String
     *             nodeUpAt: String
     *             nodeDownAt: String
     *             nodeTags: [
     *                 String
     *             ]
     *             isNodeByNodeUpgradeInProgress: Boolean
     *             infrastructurePlacementId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of nodes in the cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeInfoListWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.3";
        return service.getNodeInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.3'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>NodeStatusFilter</td><td>String</td><td>No</td><td>Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             ipAddressOrFqdn: String
     *             type: String
     *             codeVersion: String
     *             configVersion: String
     *             nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *             nodeUpTimeInSeconds: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             isSeedNode: Boolean
     *             upgradeDomain: String
     *             faultDomain: String
     *             id: {
     *                 id: String
     *             }
     *             instanceId: String
     *             nodeDeactivationInfo: {
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                 nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *                 nodeDeactivationTask: [
     *                     {
     *                         nodeDeactivationTaskId: {
     *                             id: String
     *                             nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                         }
     *                         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *                     }
     *                 ]
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *             }
     *             isStopped: Boolean
     *             nodeDownTimeInSeconds: String
     *             nodeUpAt: String
     *             nodeDownAt: String
     *             nodeTags: [
     *                 String
     *             ]
     *             isNodeByNodeUpgradeInProgress: Boolean
     *             infrastructurePlacementId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of nodes in the cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeInfoListWithResponse(RequestOptions requestOptions) {
        return getNodeInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     ipAddressOrFqdn: String
     *     type: String
     *     codeVersion: String
     *     configVersion: String
     *     nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *     nodeUpTimeInSeconds: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     isSeedNode: Boolean
     *     upgradeDomain: String
     *     faultDomain: String
     *     id: {
     *         id: String
     *     }
     *     instanceId: String
     *     nodeDeactivationInfo: {
     *         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *         nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *         nodeDeactivationTask: [
     *             {
     *                 nodeDeactivationTaskId: {
     *                     id: String
     *                     nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                 }
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *             }
     *         ]
     *         pendingSafetyChecks: [
     *             {
     *                 safetyCheck: {
     *                 }
     *             }
     *         ]
     *     }
     *     isStopped: Boolean
     *     nodeDownTimeInSeconds: String
     *     nodeUpAt: String
     *     nodeDownAt: String
     *     nodeTags: [
     *         String
     *     ]
     *     isNodeByNodeUpgradeInProgress: Boolean
     *     infrastructurePlacementId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a node in Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeInfoWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getNodeInfo(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     ipAddressOrFqdn: String
     *     type: String
     *     codeVersion: String
     *     configVersion: String
     *     nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *     nodeUpTimeInSeconds: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     isSeedNode: Boolean
     *     upgradeDomain: String
     *     faultDomain: String
     *     id: {
     *         id: String
     *     }
     *     instanceId: String
     *     nodeDeactivationInfo: {
     *         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *         nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *         nodeDeactivationTask: [
     *             {
     *                 nodeDeactivationTaskId: {
     *                     id: String
     *                     nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                 }
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *             }
     *         ]
     *         pendingSafetyChecks: [
     *             {
     *                 safetyCheck: {
     *                 }
     *             }
     *         ]
     *     }
     *     isStopped: Boolean
     *     nodeDownTimeInSeconds: String
     *     nodeUpAt: String
     *     nodeDownAt: String
     *     nodeTags: [
     *         String
     *     ]
     *     isNodeByNodeUpgradeInProgress: Boolean
     *     infrastructurePlacementId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a node in Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeInfoWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNodeInfo(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     ipAddressOrFqdn: String
     *     type: String
     *     codeVersion: String
     *     configVersion: String
     *     nodeStatus: String(Invalid/Up/Down/Enabling/Disabling/Disabled/Unknown/Removed)
     *     nodeUpTimeInSeconds: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     isSeedNode: Boolean
     *     upgradeDomain: String
     *     faultDomain: String
     *     id: {
     *         id: String
     *     }
     *     instanceId: String
     *     nodeDeactivationInfo: {
     *         nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *         nodeDeactivationStatus: String(None/SafetyCheckInProgress/SafetyCheckComplete/Completed)
     *         nodeDeactivationTask: [
     *             {
     *                 nodeDeactivationTaskId: {
     *                     id: String
     *                     nodeDeactivationTaskType: String(Invalid/Infrastructure/Repair/Client)
     *                 }
     *                 nodeDeactivationIntent: String(Invalid/Pause/Restart/RemoveData/RemoveNode)
     *             }
     *         ]
     *         pendingSafetyChecks: [
     *             {
     *                 safetyCheck: {
     *                 }
     *             }
     *         ]
     *     }
     *     isStopped: Boolean
     *     nodeDownTimeInSeconds: String
     *     nodeUpAt: String
     *     nodeDownAt: String
     *     nodeTags: [
     *         String
     *     ]
     *     isNodeByNodeUpgradeInProgress: Boolean
     *     infrastructurePlacementId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a node in Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeInfoWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeInfoWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. If the node that you specify by name does not exist in the health
     * store, this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeHealthWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getNodeHealth(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. If the node that you specify by name does not exist in the health
     * store, this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeHealthWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNodeHealth(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. If the node that you specify by name does not exist in the health
     * store, this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeHealthWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeHealthWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
     * policies used to evaluate the health. If the node that you specify by name does not exist in the health store,
     * this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentUnhealthyApplications: Integer
     *     applicationTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     *     nodeTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeHealthUsingPolicyWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getNodeHealthUsingPolicy(
                                this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
     * policies used to evaluate the health. If the node that you specify by name does not exist in the health store,
     * this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentUnhealthyApplications: Integer
     *     applicationTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     *     nodeTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeHealthUsingPolicyWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNodeHealthUsingPolicy(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
     * policies used to evaluate the health. If the node that you specify by name does not exist in the health store,
     * this returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyNodes: Integer
     *     maxPercentUnhealthyApplications: Integer
     *     applicationTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     *     nodeTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: int
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeHealthUsingPolicyWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeHealthUsingPolicyWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Reports health state of the specified Service Fabric node. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health
     * store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportNodeHealthWithResponseAsync(
            String nodeName, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportNodeHealth(
                                this.getHost(), apiVersion, nodeName, healthInformation, requestOptions, context));
    }

    /**
     * Reports health state of the specified Service Fabric node. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health
     * store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportNodeHealthWithResponseAsync(
            String nodeName, BinaryData healthInformation, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.reportNodeHealth(
                this.getHost(), apiVersion, nodeName, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the specified Service Fabric node. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health
     * store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportNodeHealthWithResponse(
            String nodeName, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportNodeHealthWithResponseAsync(nodeName, healthInformation, requestOptions).block();
    }

    /**
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeName: String
     *     nodeLoadMetricInformation: [
     *         {
     *             name: String
     *             nodeCapacity: String
     *             nodeLoad: String
     *             nodeRemainingCapacity: String
     *             isCapacityViolation: Boolean
     *             nodeBufferedCapacity: String
     *             nodeRemainingBufferedCapacity: String
     *             currentNodeLoad: String
     *             nodeCapacityRemaining: String
     *             bufferedNodeCapacityRemaining: String
     *             plannedNodeLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load on a Service Fabric node along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeLoadInfoWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getNodeLoadInfo(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeName: String
     *     nodeLoadMetricInformation: [
     *         {
     *             name: String
     *             nodeCapacity: String
     *             nodeLoad: String
     *             nodeRemainingCapacity: String
     *             isCapacityViolation: Boolean
     *             nodeBufferedCapacity: String
     *             nodeRemainingBufferedCapacity: String
     *             currentNodeLoad: String
     *             nodeCapacityRemaining: String
     *             bufferedNodeCapacityRemaining: String
     *             plannedNodeLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load on a Service Fabric node along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeLoadInfoWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNodeLoadInfo(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeName: String
     *     nodeLoadMetricInformation: [
     *         {
     *             name: String
     *             nodeCapacity: String
     *             nodeLoad: String
     *             nodeRemainingCapacity: String
     *             isCapacityViolation: Boolean
     *             nodeBufferedCapacity: String
     *             nodeRemainingBufferedCapacity: String
     *             currentNodeLoad: String
     *             nodeCapacityRemaining: String
     *             bufferedNodeCapacityRemaining: String
     *             plannedNodeLoadRemoval: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about load on a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeLoadInfoWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeLoadInfoWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
     * progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated
     * with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be
     * reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not
     * complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still
     * need to be reactivated before services will be placed on that node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deactivationIntent: String(Pause/Restart/RemoveData)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableNodeWithResponseAsync(
            String nodeName, BinaryData deactivationIntentDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.disableNode(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                deactivationIntentDescription,
                                requestOptions,
                                context));
    }

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
     * progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated
     * with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be
     * reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not
     * complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still
     * need to be reactivated before services will be placed on that node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deactivationIntent: String(Pause/Restart/RemoveData)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableNodeWithResponseAsync(
            String nodeName, BinaryData deactivationIntentDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.disableNode(
                this.getHost(), apiVersion, nodeName, deactivationIntentDescription, requestOptions, context);
    }

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
     * progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated
     * with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be
     * reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not
     * complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still
     * need to be reactivated before services will be placed on that node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deactivationIntent: String(Pause/Restart/RemoveData)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableNodeWithResponse(
            String nodeName, BinaryData deactivationIntentDescription, RequestOptions requestOptions) {
        return disableNodeWithResponseAsync(nodeName, deactivationIntentDescription, requestOptions).block();
    }

    /**
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become
     * a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableNodeWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.enableNode(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become
     * a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableNodeWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.enableNode(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become
     * a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableNodeWithResponse(String nodeName, RequestOptions requestOptions) {
        return enableNodeWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a
     * hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be
     * successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that
     * Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the
     * node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5,
     * in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
     * this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service
     * Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of
     * non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more
     * nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to
     * come back up with its state intact, please remove the node from the cluster, see
     * https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeStateWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.removeNodeState(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a
     * hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be
     * successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that
     * Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the
     * node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5,
     * in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
     * this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service
     * Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of
     * non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more
     * nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to
     * come back up with its state intact, please remove the node from the cluster, see
     * https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeStateWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.removeNodeState(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a
     * hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be
     * successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that
     * Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the
     * node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5,
     * in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
     * this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service
     * Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of
     * non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more
     * nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to
     * come back up with its state intact, please remove the node from the cluster, see
     * https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeNodeStateWithResponse(String nodeName, RequestOptions requestOptions) {
        return removeNodeStateWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Restarts a Service Fabric cluster node that is already started.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeInstanceId: String
     *     createFabricDump: String(False/True)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the need to take
     *     dump of the fabric process.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartNodeWithResponseAsync(
            String nodeName, BinaryData restartNodeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.restartNode(
                                this.getHost(), apiVersion, nodeName, restartNodeDescription, requestOptions, context));
    }

    /**
     * Restarts a Service Fabric cluster node that is already started.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeInstanceId: String
     *     createFabricDump: String(False/True)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the need to take
     *     dump of the fabric process.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartNodeWithResponseAsync(
            String nodeName, BinaryData restartNodeDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.restartNode(
                this.getHost(), apiVersion, nodeName, restartNodeDescription, requestOptions, context);
    }

    /**
     * Restarts a Service Fabric cluster node that is already started.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeInstanceId: String
     *     createFabricDump: String(False/True)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the need to take
     *     dump of the fabric process.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restartNodeWithResponse(
            String nodeName, BinaryData restartNodeDescription, RequestOptions requestOptions) {
        return restartNodeWithResponseAsync(nodeName, restartNodeDescription, requestOptions).block();
    }

    /**
     * This api allows removing all existing configuration overrides on specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConfigurationOverridesWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "7.0";
        return FluxUtil.withContext(
                context ->
                        service.removeConfigurationOverrides(
                                this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * This api allows removing all existing configuration overrides on specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConfigurationOverridesWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.0";
        return service.removeConfigurationOverrides(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * This api allows removing all existing configuration overrides on specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeConfigurationOverridesWithResponse(String nodeName, RequestOptions requestOptions) {
        return removeConfigurationOverridesWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * This api allows getting all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list that contains parameters, sections that they belong and their values along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConfigurationOverridesWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "7.0";
        return FluxUtil.withContext(
                context ->
                        service.getConfigurationOverrides(
                                this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * This api allows getting all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list that contains parameters, sections that they belong and their values along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConfigurationOverridesWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.0";
        return service.getConfigurationOverrides(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * This api allows getting all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list that contains parameters, sections that they belong and their values along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getConfigurationOverridesWithResponse(String nodeName, RequestOptions requestOptions) {
        return getConfigurationOverridesWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * This api allows adding all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force adding configuration overrides on specified nodes.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param configParameterOverrideList Description for adding list of configuration overrides.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConfigurationParameterOverridesWithResponseAsync(
            String nodeName, BinaryData configParameterOverrideList, RequestOptions requestOptions) {
        final String apiVersion = "7.0";
        return FluxUtil.withContext(
                context ->
                        service.addConfigurationParameterOverrides(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                configParameterOverrideList,
                                requestOptions,
                                context));
    }

    /**
     * This api allows adding all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force adding configuration overrides on specified nodes.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param configParameterOverrideList Description for adding list of configuration overrides.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConfigurationParameterOverridesWithResponseAsync(
            String nodeName, BinaryData configParameterOverrideList, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.0";
        return service.addConfigurationParameterOverrides(
                this.getHost(), apiVersion, nodeName, configParameterOverrideList, requestOptions, context);
    }

    /**
     * This api allows adding all existing configuration overrides on the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force adding configuration overrides on specified nodes.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         sectionName: String
     *         parameterName: String
     *         parameterValue: String
     *         timeout: String
     *         persistAcrossUpgrade: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param configParameterOverrideList Description for adding list of configuration overrides.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addConfigurationParameterOverridesWithResponse(
            String nodeName, BinaryData configParameterOverrideList, RequestOptions requestOptions) {
        return addConfigurationParameterOverridesWithResponseAsync(
                        nodeName, configParameterOverrideList, requestOptions)
                .block();
    }

    /**
     * This api allows removing set of tags from the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeTagsWithResponseAsync(
            String nodeName, BinaryData nodeTags, RequestOptions requestOptions) {
        final String apiVersion = "7.0";
        return FluxUtil.withContext(
                context ->
                        service.removeNodeTags(
                                this.getHost(), apiVersion, nodeName, nodeTags, requestOptions, context));
    }

    /**
     * This api allows removing set of tags from the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeTagsWithResponseAsync(
            String nodeName, BinaryData nodeTags, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.0";
        return service.removeNodeTags(this.getHost(), apiVersion, nodeName, nodeTags, requestOptions, context);
    }

    /**
     * This api allows removing set of tags from the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeNodeTagsWithResponse(
            String nodeName, BinaryData nodeTags, RequestOptions requestOptions) {
        return removeNodeTagsWithResponseAsync(nodeName, nodeTags, requestOptions).block();
    }

    /**
     * This api allows adding tags to the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addNodeTagsWithResponseAsync(
            String nodeName, BinaryData nodeTags, RequestOptions requestOptions) {
        final String apiVersion = "7.2";
        return FluxUtil.withContext(
                context ->
                        service.addNodeTags(this.getHost(), apiVersion, nodeName, nodeTags, requestOptions, context));
    }

    /**
     * This api allows adding tags to the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addNodeTagsWithResponseAsync(
            String nodeName, BinaryData nodeTags, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.2";
        return service.addNodeTags(this.getHost(), apiVersion, nodeName, nodeTags, requestOptions, context);
    }

    /**
     * This api allows adding tags to the specified node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addNodeTagsWithResponse(String nodeName, BinaryData nodeTags, RequestOptions requestOptions) {
        return addNodeTagsWithResponseAsync(nodeName, nodeTags, requestOptions).block();
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. Each version of an application type is returned as one application type. The
     * response includes the name, version, status, and other details about the application type. This is a paged query,
     * meaning that if not all of the application types fit in a page, one page of results is returned as well as a
     * continuation token, which can be used to get the next page. For example, if there are 10 application types but a
     * page only fits the first three application types, or if max results is set to 3, then three is returned. To
     * access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next
     * query. An empty continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
     * - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationTypeInfoListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getApplicationTypeInfoList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. Each version of an application type is returned as one application type. The
     * response includes the name, version, status, and other details about the application type. This is a paged query,
     * meaning that if not all of the application types fit in a page, one page of results is returned as well as a
     * continuation token, which can be used to get the next page. For example, if there are 10 application types but a
     * page only fits the first three application types, or if max results is set to 3, then three is returned. To
     * access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next
     * query. An empty continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
     * - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationTypeInfoListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationTypeInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. Each version of an application type is returned as one application type. The
     * response includes the name, version, status, and other details about the application type. This is a paged query,
     * meaning that if not all of the application types fit in a page, one page of results is returned as well as a
     * continuation token, which can be used to get the next page. For example, if there are 10 application types but a
     * page only fits the first three application types, or if max results is set to 3, then three is returned. To
     * access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next
     * query. An empty continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
     * - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationTypeInfoListWithResponse(RequestOptions requestOptions) {
        return getApplicationTypeInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. These results are of application types whose name match exactly the one specified
     * as the parameter, and which comply with the given query parameters. All versions of the application type matching
     * the application type name are returned, with each version returned as one application type. The response includes
     * the name, version, status, and other details about the application type. This is a paged query, meaning that if
     * not all of the application types fit in a page, one page of results is returned as well as a continuation token,
     * which can be used to get the next page. For example, if there are 10 application types but a page only fits the
     * first three application types, or if max results is set to 3, then three is returned. To access the rest of the
     * results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
     * continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>No</td><td>The version of the application type.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationTypeInfoListByNameWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationTypeInfoListByName(
                                this.getHost(), apiVersion, applicationTypeName, requestOptions, context));
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. These results are of application types whose name match exactly the one specified
     * as the parameter, and which comply with the given query parameters. All versions of the application type matching
     * the application type name are returned, with each version returned as one application type. The response includes
     * the name, version, status, and other details about the application type. This is a paged query, meaning that if
     * not all of the application types fit in a page, one page of results is returned as well as a continuation token,
     * which can be used to get the next page. For example, if there are 10 application types but a page only fits the
     * first three application types, or if max results is set to 3, then three is returned. To access the rest of the
     * results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
     * continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>No</td><td>The version of the application type.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationTypeInfoListByNameWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationTypeInfoListByName(
                this.getHost(), apiVersion, applicationTypeName, requestOptions, context);
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. These results are of application types whose name match exactly the one specified
     * as the parameter, and which comply with the given query parameters. All versions of the application type matching
     * the application type name are returned, with each version returned as one application type. The response includes
     * the name, version, status, and other details about the application type. This is a paged query, meaning that if
     * not all of the application types fit in a page, one page of results is returned as well as a continuation token,
     * which can be used to get the next page. For example, if there are 10 application types but a page only fits the
     * first three application types, or if max results is set to 3, then three is returned. To access the rest of the
     * results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
     * continuation token is returned if there are no subsequent pages.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>No</td><td>The version of the application type.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             version: String
     *             defaultParameterList: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             status: String(Invalid/Provisioning/Available/Unprovisioning/Failed)
     *             statusDetails: String
     *             applicationTypeDefinitionKind: String(Invalid/ServiceFabricApplicationPackage/Compose)
     *             applicationTypeMetadata: {
     *                 applicationTypeProvisionTimestamp: String
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationTypeInfoListByNameWithResponse(
            String applicationTypeName, RequestOptions requestOptions) {
        return getApplicationTypeInfoListByNameWithResponseAsync(applicationTypeName, requestOptions).block();
    }

    /**
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new
     * applications can be instantiated. The provision operation can be performed either on the application package
     * specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     async: boolean
     * }
     * }</pre>
     *
     * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type
     *     description which supports either image store-based provision or external store-based provision.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionApplicationTypeWithResponseAsync(
            BinaryData provisionApplicationTypeDescriptionBaseRequiredBodyParam, RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context ->
                        service.provisionApplicationType(
                                this.getHost(),
                                apiVersion,
                                provisionApplicationTypeDescriptionBaseRequiredBodyParam,
                                requestOptions,
                                context));
    }

    /**
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new
     * applications can be instantiated. The provision operation can be performed either on the application package
     * specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     async: boolean
     * }
     * }</pre>
     *
     * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type
     *     description which supports either image store-based provision or external store-based provision.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionApplicationTypeWithResponseAsync(
            BinaryData provisionApplicationTypeDescriptionBaseRequiredBodyParam,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.2";
        return service.provisionApplicationType(
                this.getHost(),
                apiVersion,
                provisionApplicationTypeDescriptionBaseRequiredBodyParam,
                requestOptions,
                context);
    }

    /**
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new
     * applications can be instantiated. The provision operation can be performed either on the application package
     * specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     async: boolean
     * }
     * }</pre>
     *
     * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type
     *     description which supports either image store-based provision or external store-based provision.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> provisionApplicationTypeWithResponse(
            BinaryData provisionApplicationTypeDescriptionBaseRequiredBodyParam, RequestOptions requestOptions) {
        return provisionApplicationTypeWithResponseAsync(
                        provisionApplicationTypeDescriptionBaseRequiredBodyParam, requestOptions)
                .block();
    }

    /**
     * This operation can only be performed if all application instances of the application type have been deleted. Once
     * the application type is unregistered, no new application instances can be created for this particular application
     * type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationTypeVersion: String
     *     async: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store
     *     specified during the prior copy operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionApplicationTypeWithResponseAsync(
            String applicationTypeName,
            BinaryData unprovisionApplicationTypeDescriptionInfo,
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.unprovisionApplicationType(
                                this.getHost(),
                                apiVersion,
                                applicationTypeName,
                                unprovisionApplicationTypeDescriptionInfo,
                                requestOptions,
                                context));
    }

    /**
     * This operation can only be performed if all application instances of the application type have been deleted. Once
     * the application type is unregistered, no new application instances can be created for this particular application
     * type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationTypeVersion: String
     *     async: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store
     *     specified during the prior copy operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionApplicationTypeWithResponseAsync(
            String applicationTypeName,
            BinaryData unprovisionApplicationTypeDescriptionInfo,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.unprovisionApplicationType(
                this.getHost(),
                apiVersion,
                applicationTypeName,
                unprovisionApplicationTypeDescriptionInfo,
                requestOptions,
                context);
    }

    /**
     * This operation can only be performed if all application instances of the application type have been deleted. Once
     * the application type is unregistered, no new application instances can be created for this particular application
     * type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationTypeVersion: String
     *     async: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store
     *     specified during the prior copy operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> unprovisionApplicationTypeWithResponse(
            String applicationTypeName,
            BinaryData unprovisionApplicationTypeDescriptionInfo,
            RequestOptions requestOptions) {
        return unprovisionApplicationTypeWithResponseAsync(
                        applicationTypeName, unprovisionApplicationTypeDescriptionInfo, requestOptions)
                .block();
    }

    /**
     * Updates the Arm Metadata for a specific Application Type. Is able to be called immediately after the provision
     * app type API is called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeArmMetadataUpdateDescription The Arm metadata to be associated with a specific application
     *     type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationTypeArmMetadataWithResponseAsync(
            String applicationTypeName,
            BinaryData applicationTypeArmMetadataUpdateDescription,
            RequestOptions requestOptions) {
        final String apiVersion = "9.0";
        return FluxUtil.withContext(
                context ->
                        service.updateApplicationTypeArmMetadata(
                                this.getHost(),
                                applicationTypeName,
                                apiVersion,
                                applicationTypeArmMetadataUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates the Arm Metadata for a specific Application Type. Is able to be called immediately after the provision
     * app type API is called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeArmMetadataUpdateDescription The Arm metadata to be associated with a specific application
     *     type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationTypeArmMetadataWithResponseAsync(
            String applicationTypeName,
            BinaryData applicationTypeArmMetadataUpdateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "9.0";
        return service.updateApplicationTypeArmMetadata(
                this.getHost(),
                applicationTypeName,
                apiVersion,
                applicationTypeArmMetadataUpdateDescription,
                requestOptions,
                context);
    }

    /**
     * Updates the Arm Metadata for a specific Application Type. Is able to be called immediately after the provision
     * app type API is called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeArmMetadataUpdateDescription The Arm metadata to be associated with a specific application
     *     type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateApplicationTypeArmMetadataWithResponse(
            String applicationTypeName,
            BinaryData applicationTypeArmMetadataUpdateDescription,
            RequestOptions requestOptions) {
        return updateApplicationTypeArmMetadataWithResponseAsync(
                        applicationTypeName, applicationTypeArmMetadataUpdateDescription, requestOptions)
                .block();
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type
     * in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeDescription: {
     *             isStateful: Boolean
     *             serviceTypeName: String
     *             placementConstraints: String
     *             loadMetrics: [
     *                 {
     *                     name: String
     *                     weight: String(Zero/Low/Medium/High)
     *                     primaryDefaultLoad: Integer
     *                     secondaryDefaultLoad: Integer
     *                     auxiliaryDefaultLoad: Integer
     *                     defaultLoad: Integer
     *                 }
     *             ]
     *             servicePlacementPolicies: [
     *                 {
     *                 }
     *             ]
     *             extensions: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *         }
     *         serviceManifestName: String
     *         serviceManifestVersion: String
     *         isServiceGroup: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types that are supported by a provisioned application
     *     type in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceTypeInfoListWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceTypeInfoList(
                                this.getHost(), apiVersion, applicationTypeName, requestOptions, context));
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type
     * in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeDescription: {
     *             isStateful: Boolean
     *             serviceTypeName: String
     *             placementConstraints: String
     *             loadMetrics: [
     *                 {
     *                     name: String
     *                     weight: String(Zero/Low/Medium/High)
     *                     primaryDefaultLoad: Integer
     *                     secondaryDefaultLoad: Integer
     *                     auxiliaryDefaultLoad: Integer
     *                     defaultLoad: Integer
     *                 }
     *             ]
     *             servicePlacementPolicies: [
     *                 {
     *                 }
     *             ]
     *             extensions: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *         }
     *         serviceManifestName: String
     *         serviceManifestVersion: String
     *         isServiceGroup: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types that are supported by a provisioned application
     *     type in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceTypeInfoListWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceTypeInfoList(this.getHost(), apiVersion, applicationTypeName, requestOptions, context);
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type
     * in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeDescription: {
     *             isStateful: Boolean
     *             serviceTypeName: String
     *             placementConstraints: String
     *             loadMetrics: [
     *                 {
     *                     name: String
     *                     weight: String(Zero/Low/Medium/High)
     *                     primaryDefaultLoad: Integer
     *                     secondaryDefaultLoad: Integer
     *                     auxiliaryDefaultLoad: Integer
     *                     defaultLoad: Integer
     *                 }
     *             ]
     *             servicePlacementPolicies: [
     *                 {
     *                 }
     *             ]
     *             extensions: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *         }
     *         serviceManifestName: String
     *         serviceManifestVersion: String
     *         isServiceGroup: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types that are supported by a provisioned application
     *     type in a Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceTypeInfoListWithResponse(
            String applicationTypeName, RequestOptions requestOptions) {
        return getServiceTypeInfoListWithResponseAsync(applicationTypeName, requestOptions).block();
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a
     * Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204
     * response is returned if the specified service type is not found in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceTypeDescription: {
     *         isStateful: Boolean
     *         serviceTypeName: String
     *         placementConstraints: String
     *         loadMetrics: [
     *             {
     *                 name: String
     *                 weight: String(Zero/Low/Medium/High)
     *                 primaryDefaultLoad: Integer
     *                 secondaryDefaultLoad: Integer
     *                 auxiliaryDefaultLoad: Integer
     *                 defaultLoad: Integer
     *             }
     *         ]
     *         servicePlacementPolicies: [
     *             {
     *             }
     *         ]
     *         extensions: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *     }
     *     serviceManifestName: String
     *     serviceManifestVersion: String
     *     isServiceGroup: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about a specific service type that is supported by a provisioned application type in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceTypeInfoByNameWithResponseAsync(
            String applicationTypeName, String serviceTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceTypeInfoByName(
                                this.getHost(),
                                apiVersion,
                                applicationTypeName,
                                serviceTypeName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a
     * Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204
     * response is returned if the specified service type is not found in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceTypeDescription: {
     *         isStateful: Boolean
     *         serviceTypeName: String
     *         placementConstraints: String
     *         loadMetrics: [
     *             {
     *                 name: String
     *                 weight: String(Zero/Low/Medium/High)
     *                 primaryDefaultLoad: Integer
     *                 secondaryDefaultLoad: Integer
     *                 auxiliaryDefaultLoad: Integer
     *                 defaultLoad: Integer
     *             }
     *         ]
     *         servicePlacementPolicies: [
     *             {
     *             }
     *         ]
     *         extensions: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *     }
     *     serviceManifestName: String
     *     serviceManifestVersion: String
     *     isServiceGroup: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about a specific service type that is supported by a provisioned application type in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceTypeInfoByNameWithResponseAsync(
            String applicationTypeName, String serviceTypeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceTypeInfoByName(
                this.getHost(), apiVersion, applicationTypeName, serviceTypeName, requestOptions, context);
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a
     * Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204
     * response is returned if the specified service type is not found in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceTypeDescription: {
     *         isStateful: Boolean
     *         serviceTypeName: String
     *         placementConstraints: String
     *         loadMetrics: [
     *             {
     *                 name: String
     *                 weight: String(Zero/Low/Medium/High)
     *                 primaryDefaultLoad: Integer
     *                 secondaryDefaultLoad: Integer
     *                 auxiliaryDefaultLoad: Integer
     *                 defaultLoad: Integer
     *             }
     *         ]
     *         servicePlacementPolicies: [
     *             {
     *             }
     *         ]
     *         extensions: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *     }
     *     serviceManifestName: String
     *     serviceManifestVersion: String
     *     isServiceGroup: Boolean
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about a specific service type that is supported by a provisioned application type in a
     *     Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceTypeInfoByNameWithResponse(
            String applicationTypeName, String serviceTypeName, RequestOptions requestOptions) {
        return getServiceTypeInfoByNameWithResponseAsync(applicationTypeName, serviceTypeName, requestOptions).block();
    }

    /**
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the manifest describing a service type along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceManifestWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceManifest(
                                this.getHost(), apiVersion, applicationTypeName, requestOptions, context));
    }

    /**
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the manifest describing a service type along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceManifestWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceManifest(this.getHost(), apiVersion, applicationTypeName, requestOptions, context);
    }

    /**
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the manifest describing a service type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceManifestWithResponse(
            String applicationTypeName, RequestOptions requestOptions) {
        return getServiceManifestWithResponseAsync(applicationTypeName, requestOptions).block();
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a
     * Service Fabric cluster. The response includes the name of the service type, its registration status, the code
     * package that registered it and activation ID of the service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types from the applications deployed on a node in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceTypeInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServiceTypeInfoList(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a
     * Service Fabric cluster. The response includes the name of the service type, its registration status, the code
     * package that registered it and activation ID of the service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types from the applications deployed on a node in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceTypeInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServiceTypeInfoList(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a
     * Service Fabric cluster. The response includes the name of the service type, its registration status, the code
     * package that registered it and activation ID of the service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about service types from the applications deployed on a node in a
     *     Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServiceTypeInfoListWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedServiceTypeInfoListWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Gets the list containing the information about a specific service type from the applications deployed on a node
     * in a Service Fabric cluster. The response includes the name of the service type, its registration status, the
     * code package that registered it and activation ID of the service package. Each entry represents one activation of
     * a service type, differentiated by the activation ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about a specific service type from the applications deployed on a
     *     node in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceTypeInfoByNameWithResponseAsync(
            String nodeName, String applicationId, String serviceTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServiceTypeInfoByName(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                serviceTypeName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the list containing the information about a specific service type from the applications deployed on a node
     * in a Service Fabric cluster. The response includes the name of the service type, its registration status, the
     * code package that registered it and activation ID of the service package. Each entry represents one activation of
     * a service type, differentiated by the activation ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about a specific service type from the applications deployed on a
     *     node in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceTypeInfoByNameWithResponseAsync(
            String nodeName,
            String applicationId,
            String serviceTypeName,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServiceTypeInfoByName(
                this.getHost(), apiVersion, nodeName, applicationId, serviceTypeName, requestOptions, context);
    }

    /**
     * Gets the list containing the information about a specific service type from the applications deployed on a node
     * in a Service Fabric cluster. The response includes the name of the service type, its registration status, the
     * code package that registered it and activation ID of the service package. Each entry represents one activation of
     * a service type, differentiated by the activation ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         status: String(Invalid/Disabled/Enabled/Registered)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about a specific service type from the applications deployed on a
     *     node in a Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServiceTypeInfoByNameWithResponse(
            String nodeName, String applicationId, String serviceTypeName, RequestOptions requestOptions) {
        return getDeployedServiceTypeInfoByNameWithResponseAsync(
                        nodeName, applicationId, serviceTypeName, requestOptions)
                .block();
    }

    /**
     * Creates a Service Fabric application using the specified description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     parameterList: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     applicationCapacity: {
     *         minimumNodes: Long
     *         maximumNodes: Long
     *         applicationMetrics: [
     *             {
     *                 name: String
     *                 maximumCapacity: Long
     *                 reservationCapacity: Long
     *                 totalApplicationCapacity: Long
     *             }
     *         ]
     *     }
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationDescription Description for creating an application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createApplicationWithResponseAsync(
            BinaryData applicationDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.createApplication(
                                this.getHost(), apiVersion, applicationDescription, requestOptions, context));
    }

    /**
     * Creates a Service Fabric application using the specified description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     parameterList: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     applicationCapacity: {
     *         minimumNodes: Long
     *         maximumNodes: Long
     *         applicationMetrics: [
     *             {
     *                 name: String
     *                 maximumCapacity: Long
     *                 reservationCapacity: Long
     *                 totalApplicationCapacity: Long
     *             }
     *         ]
     *     }
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationDescription Description for creating an application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createApplicationWithResponseAsync(
            BinaryData applicationDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.createApplication(this.getHost(), apiVersion, applicationDescription, requestOptions, context);
    }

    /**
     * Creates a Service Fabric application using the specified description.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     parameterList: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     applicationCapacity: {
     *         minimumNodes: Long
     *         maximumNodes: Long
     *         applicationMetrics: [
     *             {
     *                 name: String
     *                 maximumCapacity: Long
     *                 reservationCapacity: Long
     *                 totalApplicationCapacity: Long
     *             }
     *         ]
     *     }
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationDescription Description for creating an application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createApplicationWithResponse(
            BinaryData applicationDescription, RequestOptions requestOptions) {
        return createApplicationWithResponseAsync(applicationDescription, requestOptions).block();
    }

    /**
     * An application must be created before it can be deleted. Deleting an application will delete all services that
     * are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner
     * and then delete the service. However, if a service is having issues closing the replica gracefully, the delete
     * operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close
     * sequence and forcefully delete the application and all of its services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteApplicationWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.deleteApplication(this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * An application must be created before it can be deleted. Deleting an application will delete all services that
     * are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner
     * and then delete the service. However, if a service is having issues closing the replica gracefully, the delete
     * operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close
     * sequence and forcefully delete the application and all of its services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteApplicationWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteApplication(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * An application must be created before it can be deleted. Deleting an application will delete all services that
     * are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner
     * and then delete the service. However, if a service is having issues closing the replica gracefully, the delete
     * operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close
     * sequence and forcefully delete the application and all of its services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteApplicationWithResponse(String applicationId, RequestOptions requestOptions) {
        return deleteApplicationWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Returns the load information about the application that was created or in the process of being created in the
     * Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
     * minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
     * metric information about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     nodeCount: Long
     *     applicationLoadMetricInformation: [
     *         {
     *             name: String
     *             reservationCapacity: Long
     *             applicationCapacity: Long
     *             applicationLoad: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load Information about a Service Fabric application along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationLoadInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationLoadInfo(
                                this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * Returns the load information about the application that was created or in the process of being created in the
     * Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
     * minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
     * metric information about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     nodeCount: Long
     *     applicationLoadMetricInformation: [
     *         {
     *             name: String
     *             reservationCapacity: Long
     *             applicationCapacity: Long
     *             applicationLoad: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load Information about a Service Fabric application along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationLoadInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationLoadInfo(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * Returns the load information about the application that was created or in the process of being created in the
     * Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
     * minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
     * metric information about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     nodeCount: Long
     *     applicationLoadMetricInformation: [
     *         {
     *             name: String
     *             reservationCapacity: Long
     *             applicationCapacity: Long
     *             applicationLoad: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load Information about a Service Fabric application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationLoadInfoWithResponse(
            String applicationId, RequestOptions requestOptions) {
        return getApplicationLoadInfoWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Gets the information about the applications that were created or in the process of being created in the Service
     * Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and
     * other details about the application. If the applications do not fit in a page, one page of results is returned as
     * well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
     * ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
     * - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ApplicationTypeName</td><td>String</td><td>No</td><td>The application type name used to filter the applications to query for. This value should not contain the application type version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *             parameters: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *             managedApplicationIdentity: {
     *                 tokenServiceEndpoint: String
     *                 managedIdentities: [
     *                     {
     *                         name: String
     *                         principalId: String
     *                     }
     *                 ]
     *             }
     *             applicationMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the applications that were created or in the process of being created in the
     *     Service Fabric cluster and match the specified filters along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationInfoListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.1";
        return FluxUtil.withContext(
                context -> service.getApplicationInfoList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the information about the applications that were created or in the process of being created in the Service
     * Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and
     * other details about the application. If the applications do not fit in a page, one page of results is returned as
     * well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
     * ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
     * - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ApplicationTypeName</td><td>String</td><td>No</td><td>The application type name used to filter the applications to query for. This value should not contain the application type version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *             parameters: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *             managedApplicationIdentity: {
     *                 tokenServiceEndpoint: String
     *                 managedIdentities: [
     *                     {
     *                         name: String
     *                         principalId: String
     *                     }
     *                 ]
     *             }
     *             applicationMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the applications that were created or in the process of being created in the
     *     Service Fabric cluster and match the specified filters along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationInfoListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.1";
        return service.getApplicationInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the information about the applications that were created or in the process of being created in the Service
     * Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and
     * other details about the application. If the applications do not fit in a page, one page of results is returned as
     * well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
     * ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationDefinitionKindFilter</td><td>String</td><td>No</td><td>Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
     * - Default - Default value, which performs the same function as selecting "All". The value is 0.
     * - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
     * - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
     * - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.</td></tr>
     *     <tr><td>ApplicationTypeName</td><td>String</td><td>No</td><td>The application type name used to filter the applications to query for. This value should not contain the application type version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *             parameters: [
     *                 {
     *                     key: String
     *                     value: String
     *                 }
     *             ]
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *             managedApplicationIdentity: {
     *                 tokenServiceEndpoint: String
     *                 managedIdentities: [
     *                     {
     *                         name: String
     *                         principalId: String
     *                     }
     *                 ]
     *             }
     *             applicationMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the applications that were created or in the process of being created in the
     *     Service Fabric cluster and match the specified filters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationInfoListWithResponse(RequestOptions requestOptions) {
        return getApplicationInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * Returns the information about the application that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
     * status, parameters, and other details about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     *     applicationMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric application along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationInfo(this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * Returns the information about the application that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
     * status, parameters, and other details about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     *     applicationMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric application along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationInfo(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * Returns the information about the application that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
     * status, parameters, and other details about the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ExcludeApplicationParameters</td><td>String</td><td>No</td><td>The flag that specifies whether application parameters will be excluded from the result.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Ready/Upgrading/Creating/Deleting/Failed)
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     applicationDefinitionKind: String(Invalid/ServiceFabricApplicationDescription/Compose)
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     *     applicationMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationInfoWithResponse(String applicationId, RequestOptions requestOptions) {
        return getApplicationInfoWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning
     * health state. If the entity is not found in the health store, it will return Error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationHealthWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationHealth(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning
     * health state. If the entity is not found in the health store, it will return Error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationHealthWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationHealth(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning
     * health state. If the entity is not found in the health store, it will return Error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the health of the application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationHealthWithResponse(String applicationId, RequestOptions requestOptions) {
        return getApplicationHealthWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
     * used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationHealthUsingPolicyWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationHealthUsingPolicy(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
     * used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationHealthUsingPolicyWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationHealthUsingPolicy(
                this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
     * used to evaluate the health.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedApplicationsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
     * All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ServicesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the services health state objects returned in the result of services health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     serviceHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceName: String
     *         }
     *     ]
     *     deployedApplicationHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationHealthUsingPolicyWithResponse(
            String applicationId, RequestOptions requestOptions) {
        return getApplicationHealthUsingPolicyWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Reports health state of the specified Service Fabric application. The report must contain the information about
     * the source of the health report and property on which it is reported. The report is sent to a Service Fabric
     * gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected
     * by the health store after extra validation. For example, the health store may reject the report because of an
     * invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get
     * application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportApplicationHealthWithResponseAsync(
            String applicationId, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportApplicationHealth(
                                this.getHost(), apiVersion, applicationId, healthInformation, requestOptions, context));
    }

    /**
     * Reports health state of the specified Service Fabric application. The report must contain the information about
     * the source of the health report and property on which it is reported. The report is sent to a Service Fabric
     * gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected
     * by the health store after extra validation. For example, the health store may reject the report because of an
     * invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get
     * application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportApplicationHealthWithResponseAsync(
            String applicationId, BinaryData healthInformation, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.reportApplicationHealth(
                this.getHost(), apiVersion, applicationId, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the specified Service Fabric application. The report must contain the information about
     * the source of the health report and property on which it is reported. The report is sent to a Service Fabric
     * gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected
     * by the health store after extra validation. For example, the health store may reject the report because of an
     * invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get
     * application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportApplicationHealthWithResponse(
            String applicationId, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportApplicationHealthWithResponseAsync(applicationId, healthInformation, requestOptions).block();
    }

    /**
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
     * valid. Note,
     * [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
     * are not preserved across an application upgrade. In order to preserve current application parameters, the user
     * should get the parameters using [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into
     * the upgrade API call as shown in the example.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     targetApplicationTypeVersion: String
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeDescription Parameters for an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startApplicationUpgradeWithResponseAsync(
            String applicationId, BinaryData applicationUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startApplicationUpgrade(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                applicationUpgradeDescription,
                                requestOptions,
                                context));
    }

    /**
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
     * valid. Note,
     * [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
     * are not preserved across an application upgrade. In order to preserve current application parameters, the user
     * should get the parameters using [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into
     * the upgrade API call as shown in the example.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     targetApplicationTypeVersion: String
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeDescription Parameters for an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startApplicationUpgradeWithResponseAsync(
            String applicationId,
            BinaryData applicationUpgradeDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.startApplicationUpgrade(
                this.getHost(), apiVersion, applicationId, applicationUpgradeDescription, requestOptions, context);
    }

    /**
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
     * valid. Note,
     * [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
     * are not preserved across an application upgrade. In order to preserve current application parameters, the user
     * should get the parameters using [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into
     * the upgrade API call as shown in the example.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     targetApplicationTypeVersion: String
     *     parameters: [
     *         {
     *             key: String
     *             value: String
     *         }
     *     ]
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     instanceCloseDelayDurationInSeconds: Long
     *     managedApplicationIdentity: {
     *         tokenServiceEndpoint: String
     *         managedIdentities: [
     *             {
     *                 name: String
     *                 principalId: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeDescription Parameters for an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startApplicationUpgradeWithResponse(
            String applicationId, BinaryData applicationUpgradeDescription, RequestOptions requestOptions) {
        return startApplicationUpgradeWithResponseAsync(applicationId, applicationUpgradeDescription, requestOptions)
                .block();
    }

    /**
     * Returns information about the state of the latest application upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     targetApplicationTypeVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         name: String
     *         targetApplicationTypeVersion: String
     *         parameters: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         applicationHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyDeployedApplications: Integer
     *             defaultServiceTypeHealthPolicy: {
     *                 maxPercentUnhealthyPartitionsPerService: Integer
     *                 maxPercentUnhealthyReplicasPerPartition: Integer
     *                 maxPercentUnhealthyServices: Integer
     *             }
     *             serviceTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: (recursive schema, see value above)
     *                 }
     *             ]
     *         }
     *         instanceCloseDelayDurationInSeconds: Long
     *         managedApplicationIdentity: {
     *             tokenServiceEndpoint: String
     *             managedIdentities: [
     *                 {
     *                     name: String
     *                     principalId: String
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     upgradeStatusDetails: String
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for an application upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationUpgradeWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationUpgrade(
                                this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * Returns information about the state of the latest application upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     targetApplicationTypeVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         name: String
     *         targetApplicationTypeVersion: String
     *         parameters: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         applicationHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyDeployedApplications: Integer
     *             defaultServiceTypeHealthPolicy: {
     *                 maxPercentUnhealthyPartitionsPerService: Integer
     *                 maxPercentUnhealthyReplicasPerPartition: Integer
     *                 maxPercentUnhealthyServices: Integer
     *             }
     *             serviceTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: (recursive schema, see value above)
     *                 }
     *             ]
     *         }
     *         instanceCloseDelayDurationInSeconds: Long
     *         managedApplicationIdentity: {
     *             tokenServiceEndpoint: String
     *             managedIdentities: [
     *                 {
     *                     name: String
     *                     principalId: String
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     upgradeStatusDetails: String
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for an application upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationUpgradeWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationUpgrade(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * Returns information about the state of the latest application upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     typeName: String
     *     targetApplicationTypeVersion: String
     *     upgradeDomains: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed)
     *         }
     *     ]
     *     upgradeUnits: [
     *         {
     *             name: String
     *             state: String(Invalid/Pending/InProgress/Completed/Failed)
     *         }
     *     ]
     *     upgradeState: String(Invalid/RollingBackInProgress/RollingBackCompleted/RollingForwardPending/RollingForwardInProgress/RollingForwardCompleted/Failed)
     *     nextUpgradeDomain: String
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeDescription: {
     *         name: String
     *         targetApplicationTypeVersion: String
     *         parameters: [
     *             {
     *                 key: String
     *                 value: String
     *             }
     *         ]
     *         upgradeKind: String(Invalid/Rolling)
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         upgradeReplicaSetCheckTimeoutInSeconds: Long
     *         forceRestart: Boolean
     *         sortOrder: String(Invalid/Default/Numeric/Lexicographical/ReverseNumeric/ReverseLexicographical)
     *         monitoringPolicy: {
     *             failureAction: String(Invalid/Rollback/Manual)
     *             healthCheckWaitDurationInMilliseconds: String
     *             healthCheckStableDurationInMilliseconds: String
     *             healthCheckRetryTimeoutInMilliseconds: String
     *             upgradeTimeoutInMilliseconds: String
     *             upgradeDomainTimeoutInMilliseconds: String
     *         }
     *         applicationHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyDeployedApplications: Integer
     *             defaultServiceTypeHealthPolicy: {
     *                 maxPercentUnhealthyPartitionsPerService: Integer
     *                 maxPercentUnhealthyReplicasPerPartition: Integer
     *                 maxPercentUnhealthyServices: Integer
     *             }
     *             serviceTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: (recursive schema, see value above)
     *                 }
     *             ]
     *         }
     *         instanceCloseDelayDurationInSeconds: Long
     *         managedApplicationIdentity: {
     *             tokenServiceEndpoint: String
     *             managedIdentities: [
     *                 {
     *                     name: String
     *                     principalId: String
     *                 }
     *             ]
     *         }
     *     }
     *     upgradeDurationInMilliseconds: String
     *     upgradeDomainDurationInMilliseconds: String
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     currentUpgradeUnitsProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     upgradeStatusDetails: String
     *     isNodeByNode: Boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for an application upgrade along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationUpgradeWithResponse(String applicationId, RequestOptions requestOptions) {
        return getApplicationUpgradeWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
     * application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
     * issues in the application to make progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     upgradeKind: String(Invalid/Rolling)
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeUpdateDescription Parameters for updating an existing application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationUpgradeWithResponseAsync(
            String applicationId, BinaryData applicationUpgradeUpdateDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.updateApplicationUpgrade(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                applicationUpgradeUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
     * application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
     * issues in the application to make progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     upgradeKind: String(Invalid/Rolling)
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeUpdateDescription Parameters for updating an existing application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationUpgradeWithResponseAsync(
            String applicationId,
            BinaryData applicationUpgradeUpdateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.updateApplicationUpgrade(
                this.getHost(),
                apiVersion,
                applicationId,
                applicationUpgradeUpdateDescription,
                requestOptions,
                context);
    }

    /**
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
     * application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
     * issues in the application to make progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     upgradeKind: String(Invalid/Rolling)
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     updateDescription: {
     *         rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *         forceRestart: Boolean
     *         replicaSetCheckTimeoutInMilliseconds: Long
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *         instanceCloseDelayDurationInSeconds: Long
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeUpdateDescription Parameters for updating an existing application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateApplicationUpgradeWithResponse(
            String applicationId, BinaryData applicationUpgradeUpdateDescription, RequestOptions requestOptions) {
        return updateApplicationUpgradeWithResponseAsync(
                        applicationId, applicationUpgradeUpdateDescription, requestOptions)
                .block();
    }

    /**
     * Updates a Service Fabric application instance. The set of properties that can be updated are a subset of the
     * properties that were specified at the time of creating the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     removeApplicationCapacity: Boolean
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     applicationMetrics: [
     *         {
     *             name: String
     *             maximumCapacity: Long
     *             reservationCapacity: Long
     *             totalApplicationCapacity: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpdateDescription Parameters for updating an existing application instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationWithResponseAsync(
            String applicationId, BinaryData applicationUpdateDescription, RequestOptions requestOptions) {
        final String apiVersion = "8.1";
        return FluxUtil.withContext(
                context ->
                        service.updateApplication(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                applicationUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates a Service Fabric application instance. The set of properties that can be updated are a subset of the
     * properties that were specified at the time of creating the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     removeApplicationCapacity: Boolean
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     applicationMetrics: [
     *         {
     *             name: String
     *             maximumCapacity: Long
     *             reservationCapacity: Long
     *             totalApplicationCapacity: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpdateDescription Parameters for updating an existing application instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationWithResponseAsync(
            String applicationId,
            BinaryData applicationUpdateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "8.1";
        return service.updateApplication(
                this.getHost(), apiVersion, applicationId, applicationUpdateDescription, requestOptions, context);
    }

    /**
     * Updates a Service Fabric application instance. The set of properties that can be updated are a subset of the
     * properties that were specified at the time of creating the application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     removeApplicationCapacity: Boolean
     *     minimumNodes: Long
     *     maximumNodes: Long
     *     applicationMetrics: [
     *         {
     *             name: String
     *             maximumCapacity: Long
     *             reservationCapacity: Long
     *             totalApplicationCapacity: Long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpdateDescription Parameters for updating an existing application instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateApplicationWithResponse(
            String applicationId, BinaryData applicationUpdateDescription, RequestOptions requestOptions) {
        return updateApplicationWithResponseAsync(applicationId, applicationUpdateDescription, requestOptions).block();
    }

    /**
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
     * time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
     * this API before proceeding to the next upgrade domain.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomainName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationUpgradeWithResponseAsync(
            String applicationId, BinaryData resumeApplicationUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.resumeApplicationUpgrade(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                resumeApplicationUpgradeDescription,
                                requestOptions,
                                context));
    }

    /**
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
     * time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
     * this API before proceeding to the next upgrade domain.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomainName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationUpgradeWithResponseAsync(
            String applicationId,
            BinaryData resumeApplicationUpgradeDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.resumeApplicationUpgrade(
                this.getHost(),
                apiVersion,
                applicationId,
                resumeApplicationUpgradeDescription,
                requestOptions,
                context);
    }

    /**
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
     * time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
     * this API before proceeding to the next upgrade domain.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     upgradeDomainName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application upgrade.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeApplicationUpgradeWithResponse(
            String applicationId, BinaryData resumeApplicationUpgradeDescription, RequestOptions requestOptions) {
        return resumeApplicationUpgradeWithResponseAsync(
                        applicationId, resumeApplicationUpgradeDescription, requestOptions)
                .block();
    }

    /**
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll
     * back the current in-progress upgrade that is rolling forward to new version. If the application is not currently
     * being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a
     * previous version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackApplicationUpgradeWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.rollbackApplicationUpgrade(
                                this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll
     * back the current in-progress upgrade that is rolling forward to new version. If the application is not currently
     * being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a
     * previous version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackApplicationUpgradeWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.rollbackApplicationUpgrade(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll
     * back the current in-progress upgrade that is rolling forward to new version. If the application is not currently
     * being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a
     * previous version.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rollbackApplicationUpgradeWithResponse(String applicationId, RequestOptions requestOptions) {
        return rollbackApplicationUpgradeWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about
     * deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
     * active, activating, and downloading states. This query requires that the node name corresponds to a node on the
     * cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
     * cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *             workDirectory: String
     *             logDirectory: String
     *             tempDirectory: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of applications deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationInfoListWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.1";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedApplicationInfoList(
                                this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about
     * deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
     * active, activating, and downloading states. This query requires that the node name corresponds to a node on the
     * cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
     * cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *             workDirectory: String
     *             logDirectory: String
     *             tempDirectory: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of applications deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationInfoListWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.1";
        return service.getDeployedApplicationInfoList(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about
     * deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
     * active, activating, and downloading states. This query requires that the node name corresponds to a node on the
     * cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
     * cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             typeVersion: String
     *             status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *             workDirectory: String
     *             logDirectory: String
     *             tempDirectory: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of applications deployed on a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedApplicationInfoListWithResponse(
            String nodeName, RequestOptions requestOptions) {
        return getDeployedApplicationInfoListWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * This query returns system application information if the application ID provided is for system application.
     * Results encompass deployed applications in active, activating, and downloading states. This query requires that
     * the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to
     * any active Service Fabric nodes on the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *     workDirectory: String
     *     logDirectory: String
     *     tempDirectory: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about application deployed on the node along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationInfoWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.1";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedApplicationInfo(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * This query returns system application information if the application ID provided is for system application.
     * Results encompass deployed applications in active, activating, and downloading states. This query requires that
     * the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to
     * any active Service Fabric nodes on the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *     workDirectory: String
     *     logDirectory: String
     *     tempDirectory: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about application deployed on the node along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationInfoWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.1";
        return service.getDeployedApplicationInfo(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * This query returns system application information if the application ID provided is for system application.
     * Results encompass deployed applications in active, activating, and downloading states. This query requires that
     * the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to
     * any active Service Fabric nodes on the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>IncludeHealthState</td><td>String</td><td>No</td><td>Include the health state of an entity.
     * If this parameter is false or not specified, then the health state returned is "Unknown".
     * When set to true, the query goes in parallel to the node and the health system service before the results are merged.
     * As a result, the query is more expensive and may take a longer time.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     typeVersion: String
     *     status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating)
     *     workDirectory: String
     *     logDirectory: String
     *     tempDirectory: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about application deployed on the node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedApplicationInfoWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedApplicationInfoWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. Use
     * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
     * application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationHealthWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedApplicationHealth(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. Use
     * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
     * application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationHealthWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedApplicationHealth(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. Use
     * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
     * application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedApplicationHealthWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedApplicationHealthWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
     * Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override
     * the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
     * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
     * application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node using the specified
     *     policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationHealthUsingPolicyWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedApplicationHealthUsingPolicy(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
     * Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override
     * the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
     * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
     * application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node using the specified
     *     policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedApplicationHealthUsingPolicyWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedApplicationHealthUsingPolicy(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
     * Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override
     * the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
     * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
     * application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>DeployedServicePackagesHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
     * If not specified, all entries are returned.
     * The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
     * For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     nodeName: String
     *     deployedServicePackageHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             applicationName: String
     *             serviceManifestName: String
     *             servicePackageActivationId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of an application deployed on a Service Fabric node using the specified
     *     policy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedApplicationHealthUsingPolicyWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedApplicationHealthUsingPolicyWithResponseAsync(nodeName, applicationId, requestOptions)
                .block();
    }

    /**
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the
     * information about the source of the health report and property on which it is reported. The report is sent to a
     * Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway,
     * but rejected by the health store after extra validation. For example, the health store may reject the report
     * because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the
     * health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedApplicationHealthWithResponseAsync(
            String nodeName, String applicationId, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportDeployedApplicationHealth(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                healthInformation,
                                requestOptions,
                                context));
    }

    /**
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the
     * information about the source of the health report and property on which it is reported. The report is sent to a
     * Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway,
     * but rejected by the health store after extra validation. For example, the health store may reject the report
     * because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the
     * health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedApplicationHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            BinaryData healthInformation,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.reportDeployedApplicationHealth(
                this.getHost(), apiVersion, nodeName, applicationId, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the
     * information about the source of the health report and property on which it is reported. The report is sent to a
     * Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway,
     * but rejected by the health store after extra validation. For example, the health store may reject the report
     * because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the
     * health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportDeployedApplicationHealthWithResponse(
            String nodeName, String applicationId, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportDeployedApplicationHealthWithResponseAsync(
                        nodeName, applicationId, healthInformation, requestOptions)
                .block();
    }

    /**
     * The response contains the application manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the manifest describing an application type registered in a Service Fabric cluster along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationManifestWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationManifest(
                                this.getHost(), apiVersion, applicationTypeName, requestOptions, context));
    }

    /**
     * The response contains the application manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the manifest describing an application type registered in a Service Fabric cluster along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationManifestWithResponseAsync(
            String applicationTypeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationManifest(this.getHost(), apiVersion, applicationTypeName, requestOptions, context);
    }

    /**
     * The response contains the application manifest XML as a string.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ApplicationTypeVersion</td><td>String</td><td>Yes</td><td>The version of the application type.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     manifest: String
     * }
     * }</pre>
     *
     * @param applicationTypeName The name of the application type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the manifest describing an application type registered in a Service Fabric cluster along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationManifestWithResponse(
            String applicationTypeName, RequestOptions requestOptions) {
        return getApplicationManifestWithResponseAsync(applicationTypeName, requestOptions).block();
    }

    /**
     * Updates the Arm Metadata for a specific Application. Is able to be called immediately after the create app API is
     * called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationArmMetadataUpdateDescription The Arm metadata to be associated with a specific application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationArmMetadataWithResponseAsync(
            String applicationId, BinaryData applicationArmMetadataUpdateDescription, RequestOptions requestOptions) {
        final String apiVersion = "9.0";
        return FluxUtil.withContext(
                context ->
                        service.updateApplicationArmMetadata(
                                this.getHost(),
                                applicationId,
                                apiVersion,
                                applicationArmMetadataUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates the Arm Metadata for a specific Application. Is able to be called immediately after the create app API is
     * called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationArmMetadataUpdateDescription The Arm metadata to be associated with a specific application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationArmMetadataWithResponseAsync(
            String applicationId,
            BinaryData applicationArmMetadataUpdateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "9.0";
        return service.updateApplicationArmMetadata(
                this.getHost(),
                applicationId,
                apiVersion,
                applicationArmMetadataUpdateDescription,
                requestOptions,
                context);
    }

    /**
     * Updates the Arm Metadata for a specific Application. Is able to be called immediately after the create app API is
     * called.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationArmMetadataUpdateDescription The Arm metadata to be associated with a specific application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateApplicationArmMetadataWithResponse(
            String applicationId, BinaryData applicationArmMetadataUpdateDescription, RequestOptions requestOptions) {
        return updateApplicationArmMetadataWithResponseAsync(
                        applicationId, applicationArmMetadataUpdateDescription, requestOptions)
                .block();
    }

    /**
     * Returns the information about all services belonging to the application specified by the application ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceTypeName</td><td>String</td><td>No</td><td>The service type name used to filter the services to query for.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             manifestVersion: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *             isServiceGroup: Boolean
     *             serviceMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of services in the cluster for an application along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceInfoListWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceInfoList(this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Returns the information about all services belonging to the application specified by the application ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceTypeName</td><td>String</td><td>No</td><td>The service type name used to filter the services to query for.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             manifestVersion: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *             isServiceGroup: Boolean
     *             serviceMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of services in the cluster for an application along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceInfoListWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceInfoList(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Returns the information about all services belonging to the application specified by the application ID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceTypeName</td><td>String</td><td>No</td><td>The service type name used to filter the services to query for.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             id: String
     *             name: String
     *             typeName: String
     *             manifestVersion: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *             isServiceGroup: Boolean
     *             serviceMetadata: {
     *                 armMetadata: {
     *                     armResourceId: String
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of services in the cluster for an application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceInfoListWithResponse(String applicationId, RequestOptions requestOptions) {
        return getServiceInfoListWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     manifestVersion: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *     isServiceGroup: Boolean
     *     serviceMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric service along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceInfoWithResponseAsync(
            String applicationId, String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceInfo(
                                this.getHost(), applicationId, serviceId, apiVersion, requestOptions, context));
    }

    /**
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     manifestVersion: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *     isServiceGroup: Boolean
     *     serviceMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric service along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceInfoWithResponseAsync(
            String applicationId, String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceInfo(this.getHost(), applicationId, serviceId, apiVersion, requestOptions, context);
    }

    /**
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     typeName: String
     *     manifestVersion: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     serviceStatus: String(Unknown/Active/Upgrading/Deleting/Creating/Failed)
     *     isServiceGroup: Boolean
     *     serviceMetadata: {
     *         armMetadata: {
     *             armResourceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceInfoWithResponse(
            String applicationId, String serviceId, RequestOptions requestOptions) {
        return getServiceInfoWithResponseAsync(applicationId, serviceId, requestOptions).block();
    }

    /**
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is
     * returned if a service with the provided service ID does not exist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the name of the application for the specified service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationNameInfoWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationNameInfo(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is
     * returned if a service with the provided service ID does not exist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the name of the application for the specified service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationNameInfoWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getApplicationNameInfo(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is
     * returned if a service with the provided service ID does not exist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the name of the application for the specified service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationNameInfoWithResponse(String serviceId, RequestOptions requestOptions) {
        return getApplicationNameInfoWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
     * application. The description for creating the service includes partitioning information and optional properties
     * for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceDescription The information necessary to create a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceWithResponseAsync(
            String applicationId, BinaryData serviceDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.createService(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                serviceDescription,
                                requestOptions,
                                context));
    }

    /**
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
     * application. The description for creating the service includes partitioning information and optional properties
     * for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceDescription The information necessary to create a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceWithResponseAsync(
            String applicationId, BinaryData serviceDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.createService(
                this.getHost(), apiVersion, applicationId, serviceDescription, requestOptions, context);
    }

    /**
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
     * application. The description for creating the service includes partitioning information and optional properties
     * for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceDescription The information necessary to create a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createServiceWithResponse(
            String applicationId, BinaryData serviceDescription, RequestOptions requestOptions) {
        return createServiceWithResponseAsync(applicationId, serviceDescription, requestOptions).block();
    }

    /**
     * Creates a Service Fabric service from the service template defined in the application manifest. A service
     * template contains the properties that will be same for the service instance of the same type. The API allows
     * overriding the properties that are usually different for different services of the same service type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceFromTemplateDescription Describes the service that needs to be created from the template defined in
     *     the application manifest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceFromTemplateWithResponseAsync(
            String applicationId, BinaryData serviceFromTemplateDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.createServiceFromTemplate(
                                this.getHost(),
                                apiVersion,
                                applicationId,
                                serviceFromTemplateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Creates a Service Fabric service from the service template defined in the application manifest. A service
     * template contains the properties that will be same for the service instance of the same type. The API allows
     * overriding the properties that are usually different for different services of the same service type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceFromTemplateDescription Describes the service that needs to be created from the template defined in
     *     the application manifest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceFromTemplateWithResponseAsync(
            String applicationId,
            BinaryData serviceFromTemplateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.createServiceFromTemplate(
                this.getHost(), apiVersion, applicationId, serviceFromTemplateDescription, requestOptions, context);
    }

    /**
     * Creates a Service Fabric service from the service template defined in the application manifest. A service
     * template contains the properties that will be same for the service instance of the same type. The API allows
     * overriding the properties that are usually different for different services of the same service type.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceFromTemplateDescription Describes the service that needs to be created from the template defined in
     *     the application manifest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createServiceFromTemplateWithResponse(
            String applicationId, BinaryData serviceFromTemplateDescription, RequestOptions requestOptions) {
        return createServiceFromTemplateWithResponseAsync(applicationId, serviceFromTemplateDescription, requestOptions)
                .block();
    }

    /**
     * A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
     * in a graceful manner and then delete the service. However, if the service is having issues closing the replica
     * gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
     * graceful close sequence and forcefully delete the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteServiceWithResponseAsync(String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.deleteService(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
     * in a graceful manner and then delete the service. However, if the service is having issues closing the replica
     * gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
     * graceful close sequence and forcefully delete the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteServiceWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteService(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
     * in a graceful manner and then delete the service. However, if the service is having issues closing the replica
     * gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
     * graceful close sequence and forcefully delete the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteServiceWithResponse(String serviceId, RequestOptions requestOptions) {
        return deleteServiceWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be
     * updated are a subset of the properties that were specified at the time of creating the service. The current set
     * of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
     * service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
     * running background operation that involves moving the application from one version to another, one upgrade domain
     * at a time, whereas update applies the new properties immediately to the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     loadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     serviceDnsName: String
     *     tagsForPlacement: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsForRunning: (recursive schema, see tagsForRunning above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceUpdateDescription The information necessary to update a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateServiceWithResponseAsync(
            String serviceId, BinaryData serviceUpdateDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.updateService(
                                this.getHost(),
                                apiVersion,
                                serviceId,
                                serviceUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be
     * updated are a subset of the properties that were specified at the time of creating the service. The current set
     * of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
     * service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
     * running background operation that involves moving the application from one version to another, one upgrade domain
     * at a time, whereas update applies the new properties immediately to the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     loadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     serviceDnsName: String
     *     tagsForPlacement: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsForRunning: (recursive schema, see tagsForRunning above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceUpdateDescription The information necessary to update a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateServiceWithResponseAsync(
            String serviceId, BinaryData serviceUpdateDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.updateService(
                this.getHost(), apiVersion, serviceId, serviceUpdateDescription, requestOptions, context);
    }

    /**
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be
     * updated are a subset of the properties that were specified at the time of creating the service. The current set
     * of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
     * service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
     * running background operation that involves moving the application from one version to another, one upgrade domain
     * at a time, whereas update applies the new properties immediately to the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     flags: String
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     loadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     serviceDnsName: String
     *     tagsForPlacement: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsForRunning: (recursive schema, see tagsForRunning above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceUpdateDescription The information necessary to update a service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateServiceWithResponse(
            String serviceId, BinaryData serviceUpdateDescription, RequestOptions requestOptions) {
        return updateServiceWithResponseAsync(serviceId, serviceUpdateDescription, requestOptions).block();
    }

    /**
     * Gets the description of an existing Service Fabric service. A service must be created before its description can
     * be obtained.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the description of an existing Service Fabric service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceDescriptionWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceDescription(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Gets the description of an existing Service Fabric service. A service must be created before its description can
     * be obtained.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the description of an existing Service Fabric service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceDescriptionWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceDescription(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Gets the description of an existing Service Fabric service. A service must be created before its description can
     * be obtained.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applicationName: String
     *     serviceName: String
     *     serviceTypeName: String
     *     initializationData: [
     *         int
     *     ]
     *     partitionDescription: {
     *     }
     *     placementConstraints: String
     *     correlationScheme: [
     *         {
     *             scheme: String(Invalid/Affinity/AlignedAffinity/NonAlignedAffinity)
     *             serviceName: String
     *         }
     *     ]
     *     serviceLoadMetrics: [
     *         {
     *             name: String
     *             weight: String(Zero/Low/Medium/High)
     *             primaryDefaultLoad: Integer
     *             secondaryDefaultLoad: Integer
     *             auxiliaryDefaultLoad: Integer
     *             defaultLoad: Integer
     *         }
     *     ]
     *     servicePlacementPolicies: [
     *         {
     *         }
     *     ]
     *     defaultMoveCost: String(Zero/Low/Medium/High/VeryHigh)
     *     isDefaultMoveCostSpecified: Boolean
     *     servicePackageActivationMode: String(SharedProcess/ExclusiveProcess)
     *     serviceDnsName: String
     *     scalingPolicies: [
     *         {
     *             scalingTrigger: {
     *             }
     *             scalingMechanism: {
     *             }
     *         }
     *     ]
     *     tagsRequiredToPlace: {
     *         count: int
     *         tags: [
     *             String
     *         ]
     *     }
     *     tagsRequiredToRun: (recursive schema, see tagsRequiredToRun above)
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the description of an existing Service Fabric service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceDescriptionWithResponse(String serviceId, RequestOptions requestOptions) {
        return getServiceDescriptionWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     * health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the
     * collection of partitions returned. If you specify a service that does not exist in the health store, this request
     * returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceHealthWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getServiceHealth(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     * health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the
     * collection of partitions returned. If you specify a service that does not exist in the health store, this request
     * returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceHealthWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceHealth(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     * health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the
     * collection of partitions returned. If you specify a service that does not exist in the health store, this request
     * returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceHealthWithResponse(String serviceId, RequestOptions requestOptions) {
        return getServiceHealthWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Gets the health information of the specified service. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions
     * returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceHealthUsingPolicyWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceHealthUsingPolicy(
                                this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Gets the health information of the specified service. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions
     * returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceHealthUsingPolicyWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceHealthUsingPolicy(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Gets the health information of the specified service. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions
     * returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>PartitionsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
     * obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     name: String
     *     partitionHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified service. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceHealthUsingPolicyWithResponse(
            String serviceId, RequestOptions requestOptions) {
        return getServiceHealthUsingPolicyWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Reports health state of the specified Service Fabric service. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportServiceHealthWithResponseAsync(
            String serviceId, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportServiceHealth(
                                this.getHost(), apiVersion, serviceId, healthInformation, requestOptions, context));
    }

    /**
     * Reports health state of the specified Service Fabric service. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportServiceHealthWithResponseAsync(
            String serviceId, BinaryData healthInformation, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.reportServiceHealth(
                this.getHost(), apiVersion, serviceId, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the specified Service Fabric service. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportServiceHealthWithResponse(
            String serviceId, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportServiceHealthWithResponseAsync(serviceId, healthInformation, requestOptions).block();
    }

    /**
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionKeyType</td><td>String</td><td>No</td><td>Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
     * - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
     * - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
     * - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.</td></tr>
     *     <tr><td>PartitionKeyValue</td><td>String</td><td>No</td><td>Partition key. This is required if the partition scheme for the service is Int64Range or Named.
     * This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
     * For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
     * integer in that range. Query service description to see the range or name.</td></tr>
     *     <tr><td>PreviousRspVersion</td><td>String</td><td>No</td><td>The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     partitionInformation: {
     *         id: String
     *     }
     *     endpoints: [
     *         {
     *             kind: String(Invalid/Stateless/StatefulPrimary/StatefulSecondary)
     *             address: String
     *         }
     *     ]
     *     version: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a service partition and its associated endpoints along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> resolveServiceWithResponseAsync(String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.resolveService(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionKeyType</td><td>String</td><td>No</td><td>Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
     * - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
     * - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
     * - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.</td></tr>
     *     <tr><td>PartitionKeyValue</td><td>String</td><td>No</td><td>Partition key. This is required if the partition scheme for the service is Int64Range or Named.
     * This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
     * For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
     * integer in that range. Query service description to see the range or name.</td></tr>
     *     <tr><td>PreviousRspVersion</td><td>String</td><td>No</td><td>The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     partitionInformation: {
     *         id: String
     *     }
     *     endpoints: [
     *         {
     *             kind: String(Invalid/Stateless/StatefulPrimary/StatefulSecondary)
     *             address: String
     *         }
     *     ]
     *     version: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a service partition and its associated endpoints along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> resolveServiceWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.resolveService(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionKeyType</td><td>String</td><td>No</td><td>Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
     * - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
     * - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
     * - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.</td></tr>
     *     <tr><td>PartitionKeyValue</td><td>String</td><td>No</td><td>Partition key. This is required if the partition scheme for the service is Int64Range or Named.
     * This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
     * For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
     * integer in that range. Query service description to see the range or name.</td></tr>
     *     <tr><td>PreviousRspVersion</td><td>String</td><td>No</td><td>The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     partitionInformation: {
     *         id: String
     *     }
     *     endpoints: [
     *         {
     *             kind: String(Invalid/Stateless/StatefulPrimary/StatefulSecondary)
     *             address: String
     *         }
     *     ]
     *     version: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a service partition and its associated endpoints along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> resolveServiceWithResponse(String serviceId, RequestOptions requestOptions) {
        return resolveServiceWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Returns the information about the unplaced replicas of the service. If PartitionId is specified, then result will
     * contain information only about unplaced replicas for that partition. If PartitionId is not specified, then result
     * will contain information about unplaced replicas for all partitions of that service. If OnlyQueryPrimaries is set
     * to true, then result will contain information only about primary replicas, and will ignore unplaced secondary
     * replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>OnlyQueryPrimaries</td><td>String</td><td>No</td><td>Indicates that unplaced replica information will be queries only for primary replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     unplacedReplicaDetails: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains information for an unplaced replica along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUnplacedReplicaInformationWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getUnplacedReplicaInformation(
                                this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * Returns the information about the unplaced replicas of the service. If PartitionId is specified, then result will
     * contain information only about unplaced replicas for that partition. If PartitionId is not specified, then result
     * will contain information about unplaced replicas for all partitions of that service. If OnlyQueryPrimaries is set
     * to true, then result will contain information only about primary replicas, and will ignore unplaced secondary
     * replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>OnlyQueryPrimaries</td><td>String</td><td>No</td><td>Indicates that unplaced replica information will be queries only for primary replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     unplacedReplicaDetails: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains information for an unplaced replica along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUnplacedReplicaInformationWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getUnplacedReplicaInformation(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * Returns the information about the unplaced replicas of the service. If PartitionId is specified, then result will
     * contain information only about unplaced replicas for that partition. If PartitionId is not specified, then result
     * will contain information about unplaced replicas for all partitions of that service. If OnlyQueryPrimaries is set
     * to true, then result will contain information only about primary replicas, and will ignore unplaced secondary
     * replicas.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>OnlyQueryPrimaries</td><td>String</td><td>No</td><td>Indicates that unplaced replica information will be queries only for primary replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     unplacedReplicaDetails: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains information for an unplaced replica along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUnplacedReplicaInformationWithResponse(
            String serviceId, RequestOptions requestOptions) {
        return getUnplacedReplicaInformationWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Updates the Arm Metadata for a specific service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceArmMetadataUpdateDescription The Arm metadata to be associated with a specific service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateServiceArmMetadataWithResponseAsync(
            String serviceId, BinaryData serviceArmMetadataUpdateDescription, RequestOptions requestOptions) {
        final String apiVersion = "9.0";
        return FluxUtil.withContext(
                context ->
                        service.updateServiceArmMetadata(
                                this.getHost(),
                                serviceId,
                                apiVersion,
                                serviceArmMetadataUpdateDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates the Arm Metadata for a specific service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceArmMetadataUpdateDescription The Arm metadata to be associated with a specific service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateServiceArmMetadataWithResponseAsync(
            String serviceId,
            BinaryData serviceArmMetadataUpdateDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "9.0";
        return service.updateServiceArmMetadata(
                this.getHost(), serviceId, apiVersion, serviceArmMetadataUpdateDescription, requestOptions, context);
    }

    /**
     * Updates the Arm Metadata for a specific service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '9.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Force</td><td>String</td><td>No</td><td>Force parameter used to prevent accidental Arm metadata update.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     armResourceId: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceArmMetadataUpdateDescription The Arm metadata to be associated with a specific service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateServiceArmMetadataWithResponse(
            String serviceId, BinaryData serviceArmMetadataUpdateDescription, RequestOptions requestOptions) {
        return updateServiceArmMetadataWithResponseAsync(serviceId, serviceArmMetadataUpdateDescription, requestOptions)
                .block();
    }

    /**
     * Retrieves partitions which are most/least loaded according to specified metric.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>MetricName</td><td>String</td><td>Yes</td><td>Name of the metric based on which to get ordered list of partitions.</td></tr>
     *     <tr><td>ServiceName</td><td>String</td><td>No</td><td>The name of a service.</td></tr>
     *     <tr><td>Ordering</td><td>String</td><td>No</td><td>Ordering of partitions' load.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             serviceName: String
     *             partitionId: String
     *             metricName: String
     *             load: long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents data structure that contains top/least loaded partitions for a certain metric along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadedPartitionInfoListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "8.0";
        return FluxUtil.withContext(
                context -> service.getLoadedPartitionInfoList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Retrieves partitions which are most/least loaded according to specified metric.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>MetricName</td><td>String</td><td>Yes</td><td>Name of the metric based on which to get ordered list of partitions.</td></tr>
     *     <tr><td>ServiceName</td><td>String</td><td>No</td><td>The name of a service.</td></tr>
     *     <tr><td>Ordering</td><td>String</td><td>No</td><td>Ordering of partitions' load.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             serviceName: String
     *             partitionId: String
     *             metricName: String
     *             load: long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents data structure that contains top/least loaded partitions for a certain metric along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadedPartitionInfoListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "8.0";
        return service.getLoadedPartitionInfoList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Retrieves partitions which are most/least loaded according to specified metric.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>MetricName</td><td>String</td><td>Yes</td><td>Name of the metric based on which to get ordered list of partitions.</td></tr>
     *     <tr><td>ServiceName</td><td>String</td><td>No</td><td>The name of a service.</td></tr>
     *     <tr><td>Ordering</td><td>String</td><td>No</td><td>Ordering of partitions' load.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             serviceName: String
     *             partitionId: String
     *             metricName: String
     *             load: long
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents data structure that contains top/least loaded partitions for a certain metric along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLoadedPartitionInfoListWithResponse(RequestOptions requestOptions) {
        return getLoadedPartitionInfoListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
     * health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *             partitionInformation: {
     *                 id: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of partition in the cluster for a service along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionInfoListWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionInfoList(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
     * health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *             partitionInformation: {
     *                 id: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of partition in the cluster for a service along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionInfoListWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionInfoList(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
     * health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *             partitionInformation: {
     *                 id: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of partition in the cluster for a service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionInfoListWithResponse(String serviceId, RequestOptions requestOptions) {
        return getPartitionInfoListWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
     * information, keys supported by the partition, status, health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *     partitionInformation: {
     *         id: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getPartitionInfo(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
     * information, keys supported by the partition, status, health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *     partitionInformation: {
     *         id: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPartitionInfo(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
     * information, keys supported by the partition, status, health, and other details about the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     partitionStatus: String(Invalid/Ready/NotReady/InQuorumLoss/Reconfiguring/Deleting)
     *     partitionInformation: {
     *         id: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionInfoWithResponse(String partitionId, RequestOptions requestOptions) {
        return getPartitionInfoWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist
     * in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return name of the service for the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceNameInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getServiceNameInfo(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist
     * in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return name of the service for the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceNameInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getServiceNameInfo(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist
     * in the cluster.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return name of the service for the specified partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceNameInfoWithResponse(String partitionId, RequestOptions requestOptions) {
        return getServiceNameInfoWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
     * state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If
     * you specify a partition that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the health of a Service Fabric partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionHealthWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionHealth(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
     * state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If
     * you specify a partition that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the health of a Service Fabric partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionHealthWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPartitionHealth(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
     * state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If
     * you specify a partition that does not exist in the health store, this request returns an error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the health of a Service Fabric partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionHealthWithResponse(String partitionId, RequestOptions requestOptions) {
        return getPartitionHealthWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Gets the health information of the specified partition. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState
     * objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
     * evaluate the health. If you specify a partition that does not exist in the health store, this request returns an
     * error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified partition. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter
     *     the collection of ReplicaHealthState objects on the partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionHealthUsingPolicyWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionHealthUsingPolicy(
                                this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * Gets the health information of the specified partition. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState
     * objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
     * evaluate the health. If you specify a partition that does not exist in the health store, this request returns an
     * error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified partition. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter
     *     the collection of ReplicaHealthState objects on the partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionHealthUsingPolicyWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPartitionHealthUsingPolicy(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * Gets the health information of the specified partition. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState
     * objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
     * evaluate the health. If you specify a partition that does not exist in the health store, this request returns an
     * error.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ReplicasHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>ExcludeHealthStatistics</td><td>String</td><td>No</td><td>Indicates whether the health statistics should be returned as part of the query result. False by default.
     * The statistics show the number of children entities in health state Ok, Warning, and Error.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     *     replicaHealthStates: [
     *         {
     *             aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             partitionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health information of the specified partition. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter
     *     the collection of ReplicaHealthState objects on the partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionHealthUsingPolicyWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionHealthUsingPolicyWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetPartitionHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportPartitionHealthWithResponseAsync(
            String partitionId, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportPartitionHealth(
                                this.getHost(), apiVersion, partitionId, healthInformation, requestOptions, context));
    }

    /**
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetPartitionHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportPartitionHealthWithResponseAsync(
            String partitionId, BinaryData healthInformation, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.reportPartitionHealth(
                this.getHost(), apiVersion, partitionId, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetPartitionHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportPartitionHealthWithResponse(
            String partitionId, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportPartitionHealthWithResponseAsync(partitionId, healthInformation, requestOptions).block();
    }

    /**
     * Returns information about the load of a specified partition. The response includes a list of load reports for a
     * Service Fabric partition. Each report includes the load metric name, value, and last reported time in UTC.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partitionId: String
     *     primaryLoadMetricReports: [
     *         {
     *             lastReportedUtc: String
     *             name: String
     *             value: String
     *             currentValue: String
     *         }
     *     ]
     *     secondaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     *     auxiliaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents load information for a partition, which contains the primary, secondary and auxiliary reported
     *     load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for
     *     the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0 along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionLoadInformationWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionLoadInformation(
                                this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * Returns information about the load of a specified partition. The response includes a list of load reports for a
     * Service Fabric partition. Each report includes the load metric name, value, and last reported time in UTC.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partitionId: String
     *     primaryLoadMetricReports: [
     *         {
     *             lastReportedUtc: String
     *             name: String
     *             value: String
     *             currentValue: String
     *         }
     *     ]
     *     secondaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     *     auxiliaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents load information for a partition, which contains the primary, secondary and auxiliary reported
     *     load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for
     *     the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0 along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionLoadInformationWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPartitionLoadInformation(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * Returns information about the load of a specified partition. The response includes a list of load reports for a
     * Service Fabric partition. Each report includes the load metric name, value, and last reported time in UTC.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     partitionId: String
     *     primaryLoadMetricReports: [
     *         {
     *             lastReportedUtc: String
     *             name: String
     *             value: String
     *             currentValue: String
     *         }
     *     ]
     *     secondaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     *     auxiliaryLoadMetricReports: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents load information for a partition, which contains the primary, secondary and auxiliary reported
     *     load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for
     *     the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0 along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionLoadInformationWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionLoadInformationWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetPartitionLoadWithResponseAsync(String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.resetPartitionLoad(this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetPartitionLoadWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.resetPartitionLoad(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetPartitionLoadWithResponse(String partitionId, RequestOptions requestOptions) {
        return resetPartitionLoadWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverPartitionWithResponseAsync(String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.recoverPartition(this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverPartitionWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.recoverPartition(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> recoverPartitionWithResponse(String partitionId, RequestOptions requestOptions) {
        return recoverPartitionWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverServicePartitionsWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.recoverServicePartitions(
                                this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverServicePartitionsWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.recoverServicePartitions(this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> recoverServicePartitionsWithResponse(String serviceId, RequestOptions requestOptions) {
        return recoverServicePartitionsWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverSystemPartitionsWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.recoverSystemPartitions(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverSystemPartitionsWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.recoverSystemPartitions(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> recoverSystemPartitionsWithResponse(RequestOptions requestOptions) {
        return recoverSystemPartitionsWithResponseAsync(requestOptions).block();
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverAllPartitionsWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.recoverAllPartitions(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverAllPartitionsWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.recoverAllPartitions(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> recoverAllPartitionsWithResponse(RequestOptions requestOptions) {
        return recoverAllPartitionsWithResponseAsync(requestOptions).block();
    }

    /**
     * This command moves the primary replica of a partition of a stateful service, respecting all constraints. If
     * NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it). If
     * NodeName parameter is not specified, primary replica will be moved to a random node in the cluster. If
     * IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodeName</td><td>String</td><td>No</td><td>The name of the node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> movePrimaryReplicaWithResponseAsync(String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.5";
        return FluxUtil.withContext(
                context ->
                        service.movePrimaryReplica(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * This command moves the primary replica of a partition of a stateful service, respecting all constraints. If
     * NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it). If
     * NodeName parameter is not specified, primary replica will be moved to a random node in the cluster. If
     * IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodeName</td><td>String</td><td>No</td><td>The name of the node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> movePrimaryReplicaWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.5";
        return service.movePrimaryReplica(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * This command moves the primary replica of a partition of a stateful service, respecting all constraints. If
     * NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it). If
     * NodeName parameter is not specified, primary replica will be moved to a random node in the cluster. If
     * IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>NodeName</td><td>String</td><td>No</td><td>The name of the node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> movePrimaryReplicaWithResponse(String partitionId, RequestOptions requestOptions) {
        return movePrimaryReplicaWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName parameter must be specified to identify the replica that is moved. Source node name must be
     * specified, but new node name can be omitted, and in that case replica is moved to a random node. If
     * IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>Yes</td><td>The name of the source node for secondary replica move.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveSecondaryReplicaWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.5";
        return FluxUtil.withContext(
                context ->
                        service.moveSecondaryReplica(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName parameter must be specified to identify the replica that is moved. Source node name must be
     * specified, but new node name can be omitted, and in that case replica is moved to a random node. If
     * IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>Yes</td><td>The name of the source node for secondary replica move.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveSecondaryReplicaWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.5";
        return service.moveSecondaryReplica(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName parameter must be specified to identify the replica that is moved. Source node name must be
     * specified, but new node name can be omitted, and in that case replica is moved to a random node. If
     * IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
     * constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>Yes</td><td>The name of the source node for secondary replica move.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> moveSecondaryReplicaWithResponse(String partitionId, RequestOptions requestOptions) {
        return moveSecondaryReplicaWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Updates the load value and predicted load value for all the partitions provided for specified metrics.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         partitionId: String
     *         primaryReplicaLoadEntries: [
     *             {
     *                 metricName: String
     *                 currentLoad: Long
     *                 predictedLoad: Long
     *             }
     *         ]
     *         secondaryReplicasOrInstancesLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         secondaryReplicaOrInstanceLoadEntriesPerNode: [
     *             {
     *                 nodeName: String
     *                 replicaOrInstanceLoadEntries: [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         auxiliaryReplicasLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         auxiliaryReplicaLoadEntriesPerNode: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             partitionId: String
     *             partitionErrorCode: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionMetricLoadDescriptionList Description of updating load for list of partitions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of results of the call UpdatePartitionLoad along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updatePartitionLoadWithResponseAsync(
            BinaryData partitionMetricLoadDescriptionList, RequestOptions requestOptions) {
        final String apiVersion = "7.2";
        return FluxUtil.withContext(
                context ->
                        service.updatePartitionLoad(
                                this.getHost(),
                                apiVersion,
                                partitionMetricLoadDescriptionList,
                                requestOptions,
                                context));
    }

    /**
     * Updates the load value and predicted load value for all the partitions provided for specified metrics.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         partitionId: String
     *         primaryReplicaLoadEntries: [
     *             {
     *                 metricName: String
     *                 currentLoad: Long
     *                 predictedLoad: Long
     *             }
     *         ]
     *         secondaryReplicasOrInstancesLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         secondaryReplicaOrInstanceLoadEntriesPerNode: [
     *             {
     *                 nodeName: String
     *                 replicaOrInstanceLoadEntries: [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         auxiliaryReplicasLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         auxiliaryReplicaLoadEntriesPerNode: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             partitionId: String
     *             partitionErrorCode: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionMetricLoadDescriptionList Description of updating load for list of partitions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of results of the call UpdatePartitionLoad along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updatePartitionLoadWithResponseAsync(
            BinaryData partitionMetricLoadDescriptionList, RequestOptions requestOptions, Context context) {
        final String apiVersion = "7.2";
        return service.updatePartitionLoad(
                this.getHost(), apiVersion, partitionMetricLoadDescriptionList, requestOptions, context);
    }

    /**
     * Updates the load value and predicted load value for all the partitions provided for specified metrics.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '7.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         partitionId: String
     *         primaryReplicaLoadEntries: [
     *             {
     *                 metricName: String
     *                 currentLoad: Long
     *                 predictedLoad: Long
     *             }
     *         ]
     *         secondaryReplicasOrInstancesLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         secondaryReplicaOrInstanceLoadEntriesPerNode: [
     *             {
     *                 nodeName: String
     *                 replicaOrInstanceLoadEntries: [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         auxiliaryReplicasLoadEntries: [
     *             (recursive schema, see above)
     *         ]
     *         auxiliaryReplicaLoadEntriesPerNode: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             partitionId: String
     *             partitionErrorCode: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionMetricLoadDescriptionList Description of updating load for list of partitions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of results of the call UpdatePartitionLoad along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updatePartitionLoadWithResponse(
            BinaryData partitionMetricLoadDescriptionList, RequestOptions requestOptions) {
        return updatePartitionLoadWithResponseAsync(partitionMetricLoadDescriptionList, requestOptions).block();
    }

    /**
     * This command moves the instance of a partition of a stateless service, respecting all constraints. Partition id
     * and service name must be specified to be able to move the instance. CurrentNodeName when specified identifies the
     * instance that is moved. If not specified, random instance will be moved New node name can be omitted, and in that
     * case instance is moved to a random node. If IgnoreConstraints parameter is specified and set to true, then
     * instance will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveInstanceWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "8.0";
        return FluxUtil.withContext(
                context ->
                        service.moveInstance(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * This command moves the instance of a partition of a stateless service, respecting all constraints. Partition id
     * and service name must be specified to be able to move the instance. CurrentNodeName when specified identifies the
     * instance that is moved. If not specified, random instance will be moved New node name can be omitted, and in that
     * case instance is moved to a random node. If IgnoreConstraints parameter is specified and set to true, then
     * instance will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveInstanceWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "8.0";
        return service.moveInstance(this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * This command moves the instance of a partition of a stateless service, respecting all constraints. Partition id
     * and service name must be specified to be able to move the instance. CurrentNodeName when specified identifies the
     * instance that is moved. If not specified, random instance will be moved New node name can be omitted, and in that
     * case instance is moved to a random node. If IgnoreConstraints parameter is specified and set to true, then
     * instance will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> moveInstanceWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return moveInstanceWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * This command moves the auxiliary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName can be omitted, and in that case a random auxiliary replica is chosen. NewNodeName can be
     * omitted, and in that case the auxiliary replica is moved to a random node. If IgnoreConstraints parameter is
     * specified and set to true, then auxiliary will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveAuxiliaryReplicaWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "8.1";
        return FluxUtil.withContext(
                context ->
                        service.moveAuxiliaryReplica(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * This command moves the auxiliary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName can be omitted, and in that case a random auxiliary replica is chosen. NewNodeName can be
     * omitted, and in that case the auxiliary replica is moved to a random node. If IgnoreConstraints parameter is
     * specified and set to true, then auxiliary will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveAuxiliaryReplicaWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "8.1";
        return service.moveAuxiliaryReplica(
                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * This command moves the auxiliary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName can be omitted, and in that case a random auxiliary replica is chosen. NewNodeName can be
     * omitted, and in that case the auxiliary replica is moved to a random node. If IgnoreConstraints parameter is
     * specified and set to true, then auxiliary will be moved regardless of the constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '8.1'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>CurrentNodeName</td><td>String</td><td>No</td><td>The name of the source node for instance move. If not specified, instance is moved from a random node.</td></tr>
     *     <tr><td>NewNodeName</td><td>String</td><td>No</td><td>The name of the target node for secondary replica or instance move. If not specified, replica or instance is moved to a random node.</td></tr>
     *     <tr><td>IgnoreConstraints</td><td>String</td><td>No</td><td>Ignore constraints when moving a replica or instance. If this parameter is not specified, all constraints are honored.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> moveAuxiliaryReplicaWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return moveAuxiliaryReplicaWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that
     * run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be
     * running for each repair action to run automatically. These are currently only available in specially-configured
     * Azure Cloud Services.
     *
     * <p>To create a manual repair task, provide the set of impacted node names and the expected impact. When the state
     * of the created repair task changes to approved, you can safely perform repair actions on those nodes.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRepairTaskWithResponseAsync(
            BinaryData repairTask, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.createRepairTask(this.getHost(), apiVersion, repairTask, requestOptions, context));
    }

    /**
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that
     * run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be
     * running for each repair action to run automatically. These are currently only available in specially-configured
     * Azure Cloud Services.
     *
     * <p>To create a manual repair task, provide the set of impacted node names and the expected impact. When the state
     * of the created repair task changes to approved, you can safely perform repair actions on those nodes.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRepairTaskWithResponseAsync(
            BinaryData repairTask, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.createRepairTask(this.getHost(), apiVersion, repairTask, requestOptions, context);
    }

    /**
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that
     * run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be
     * running for each repair action to run automatically. These are currently only available in specially-configured
     * Azure Cloud Services.
     *
     * <p>To create a manual repair task, provide the set of impacted node names and the expected impact. When the state
     * of the created repair task changes to approved, you can safely perform repair actions on those nodes.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRepairTaskWithResponse(BinaryData repairTask, RequestOptions requestOptions) {
        return createRepairTaskWithResponseAsync(repairTask, requestOptions).block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     requestAbort: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskCancelDescription Describes the repair task to be cancelled.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelRepairTaskWithResponseAsync(
            BinaryData repairTaskCancelDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.cancelRepairTask(
                                this.getHost(), apiVersion, repairTaskCancelDescription, requestOptions, context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     requestAbort: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskCancelDescription Describes the repair task to be cancelled.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelRepairTaskWithResponseAsync(
            BinaryData repairTaskCancelDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.cancelRepairTask(
                this.getHost(), apiVersion, repairTaskCancelDescription, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     requestAbort: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskCancelDescription Describes the repair task to be cancelled.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelRepairTaskWithResponse(
            BinaryData repairTaskCancelDescription, RequestOptions requestOptions) {
        return cancelRepairTaskWithResponseAsync(repairTaskCancelDescription, requestOptions).block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskDeleteDescription Describes the repair task to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRepairTaskWithResponseAsync(
            BinaryData repairTaskDeleteDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.deleteRepairTask(
                                this.getHost(), apiVersion, repairTaskDeleteDescription, requestOptions, context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskDeleteDescription Describes the repair task to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRepairTaskWithResponseAsync(
            BinaryData repairTaskDeleteDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteRepairTask(
                this.getHost(), apiVersion, repairTaskDeleteDescription, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskDeleteDescription Describes the repair task to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRepairTaskWithResponse(
            BinaryData repairTaskDeleteDescription, RequestOptions requestOptions) {
        return deleteRepairTaskWithResponseAsync(repairTaskDeleteDescription, requestOptions).block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TaskIdFilter</td><td>String</td><td>No</td><td>The repair task ID prefix to be matched.</td></tr>
     *     <tr><td>StateFilter</td><td>String</td><td>No</td><td>A bitwise-OR of the following values, specifying which task states should be included in the result list.
     *
     * - 1 - Created
     * - 2 - Claimed
     * - 4 - Preparing
     * - 8 - Approved
     * - 16 - Executing
     * - 32 - Restoring
     * - 64 - Completed</td></tr>
     *     <tr><td>ExecutorFilter</td><td>String</td><td>No</td><td>The name of the repair executor whose claimed tasks should be included in the list.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         taskId: String
     *         version: String
     *         description: String
     *         state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *         flags: Integer
     *         action: String
     *         target: {
     *         }
     *         executor: String
     *         executorData: String
     *         impact: {
     *         }
     *         resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *         resultCode: Integer
     *         resultDetails: String
     *         history: {
     *             createdUtcTimestamp: String
     *             claimedUtcTimestamp: String
     *             preparingUtcTimestamp: String
     *             approvedUtcTimestamp: String
     *             executingUtcTimestamp: String
     *             restoringUtcTimestamp: String
     *             completedUtcTimestamp: String
     *             preparingHealthCheckStartUtcTimestamp: String
     *             preparingHealthCheckEndUtcTimestamp: String
     *             restoringHealthCheckStartUtcTimestamp: String
     *             restoringHealthCheckEndUtcTimestamp: String
     *         }
     *         preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         performPreparingHealthCheck: Boolean
     *         performRestoringHealthCheck: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of repair tasks along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRepairTaskListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getRepairTaskList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TaskIdFilter</td><td>String</td><td>No</td><td>The repair task ID prefix to be matched.</td></tr>
     *     <tr><td>StateFilter</td><td>String</td><td>No</td><td>A bitwise-OR of the following values, specifying which task states should be included in the result list.
     *
     * - 1 - Created
     * - 2 - Claimed
     * - 4 - Preparing
     * - 8 - Approved
     * - 16 - Executing
     * - 32 - Restoring
     * - 64 - Completed</td></tr>
     *     <tr><td>ExecutorFilter</td><td>String</td><td>No</td><td>The name of the repair executor whose claimed tasks should be included in the list.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         taskId: String
     *         version: String
     *         description: String
     *         state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *         flags: Integer
     *         action: String
     *         target: {
     *         }
     *         executor: String
     *         executorData: String
     *         impact: {
     *         }
     *         resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *         resultCode: Integer
     *         resultDetails: String
     *         history: {
     *             createdUtcTimestamp: String
     *             claimedUtcTimestamp: String
     *             preparingUtcTimestamp: String
     *             approvedUtcTimestamp: String
     *             executingUtcTimestamp: String
     *             restoringUtcTimestamp: String
     *             completedUtcTimestamp: String
     *             preparingHealthCheckStartUtcTimestamp: String
     *             preparingHealthCheckEndUtcTimestamp: String
     *             restoringHealthCheckStartUtcTimestamp: String
     *             restoringHealthCheckEndUtcTimestamp: String
     *         }
     *         preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         performPreparingHealthCheck: Boolean
     *         performRestoringHealthCheck: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of repair tasks along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRepairTaskListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getRepairTaskList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TaskIdFilter</td><td>String</td><td>No</td><td>The repair task ID prefix to be matched.</td></tr>
     *     <tr><td>StateFilter</td><td>String</td><td>No</td><td>A bitwise-OR of the following values, specifying which task states should be included in the result list.
     *
     * - 1 - Created
     * - 2 - Claimed
     * - 4 - Preparing
     * - 8 - Approved
     * - 16 - Executing
     * - 32 - Restoring
     * - 64 - Completed</td></tr>
     *     <tr><td>ExecutorFilter</td><td>String</td><td>No</td><td>The name of the repair executor whose claimed tasks should be included in the list.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         taskId: String
     *         version: String
     *         description: String
     *         state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *         flags: Integer
     *         action: String
     *         target: {
     *         }
     *         executor: String
     *         executorData: String
     *         impact: {
     *         }
     *         resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *         resultCode: Integer
     *         resultDetails: String
     *         history: {
     *             createdUtcTimestamp: String
     *             claimedUtcTimestamp: String
     *             preparingUtcTimestamp: String
     *             approvedUtcTimestamp: String
     *             executingUtcTimestamp: String
     *             restoringUtcTimestamp: String
     *             completedUtcTimestamp: String
     *             preparingHealthCheckStartUtcTimestamp: String
     *             preparingHealthCheckEndUtcTimestamp: String
     *             restoringHealthCheckStartUtcTimestamp: String
     *             restoringHealthCheckEndUtcTimestamp: String
     *         }
     *         preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *         performPreparingHealthCheck: Boolean
     *         performRestoringHealthCheck: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of repair tasks along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRepairTaskListWithResponse(RequestOptions requestOptions) {
        return getRepairTaskListWithResponseAsync(requestOptions).block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskApproveDescription Describes the repair task to be approved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> forceApproveRepairTaskWithResponseAsync(
            BinaryData repairTaskApproveDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.forceApproveRepairTask(
                                this.getHost(), apiVersion, repairTaskApproveDescription, requestOptions, context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskApproveDescription Describes the repair task to be approved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> forceApproveRepairTaskWithResponseAsync(
            BinaryData repairTaskApproveDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.forceApproveRepairTask(
                this.getHost(), apiVersion, repairTaskApproveDescription, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskApproveDescription Describes the repair task to be approved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> forceApproveRepairTaskWithResponse(
            BinaryData repairTaskApproveDescription, RequestOptions requestOptions) {
        return forceApproveRepairTaskWithResponseAsync(repairTaskApproveDescription, requestOptions).block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateRepairTaskHealthPolicyWithResponseAsync(
            BinaryData repairTaskUpdateHealthPolicyDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.updateRepairTaskHealthPolicy(
                                this.getHost(),
                                apiVersion,
                                repairTaskUpdateHealthPolicyDescription,
                                requestOptions,
                                context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateRepairTaskHealthPolicyWithResponseAsync(
            BinaryData repairTaskUpdateHealthPolicyDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.updateRepairTaskHealthPolicy(
                this.getHost(), apiVersion, repairTaskUpdateHealthPolicyDescription, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateRepairTaskHealthPolicyWithResponse(
            BinaryData repairTaskUpdateHealthPolicyDescription, RequestOptions requestOptions) {
        return updateRepairTaskHealthPolicyWithResponseAsync(repairTaskUpdateHealthPolicyDescription, requestOptions)
                .block();
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateRepairExecutionStateWithResponseAsync(
            BinaryData repairTask, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.updateRepairExecutionState(
                                this.getHost(), apiVersion, repairTask, requestOptions, context));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateRepairExecutionStateWithResponseAsync(
            BinaryData repairTask, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.updateRepairExecutionState(this.getHost(), apiVersion, repairTask, requestOptions, context);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     version: String
     *     description: String
     *     state: String(Invalid/Created/Claimed/Preparing/Approved/Executing/Restoring/Completed)
     *     flags: Integer
     *     action: String
     *     target: {
     *     }
     *     executor: String
     *     executorData: String
     *     impact: {
     *     }
     *     resultStatus: String(Invalid/Succeeded/Cancelled/Interrupted/Failed/Pending)
     *     resultCode: Integer
     *     resultDetails: String
     *     history: {
     *         createdUtcTimestamp: String
     *         claimedUtcTimestamp: String
     *         preparingUtcTimestamp: String
     *         approvedUtcTimestamp: String
     *         executingUtcTimestamp: String
     *         restoringUtcTimestamp: String
     *         completedUtcTimestamp: String
     *         preparingHealthCheckStartUtcTimestamp: String
     *         preparingHealthCheckEndUtcTimestamp: String
     *         restoringHealthCheckStartUtcTimestamp: String
     *         restoringHealthCheckEndUtcTimestamp: String
     *     }
     *     preparingHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     restoringHealthCheckState: String(NotStarted/InProgress/Succeeded/Skipped/TimedOut)
     *     performPreparingHealthCheck: Boolean
     *     performRestoringHealthCheck: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: String
     * }
     * }</pre>
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateRepairExecutionStateWithResponse(
            BinaryData repairTask, RequestOptions requestOptions) {
        return updateRepairExecutionStateWithResponseAsync(repairTask, requestOptions).block();
    }

    /**
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
     * the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             address: String
     *             lastInBuildDurationInSeconds: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of replicas in the cluster for a given partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaInfoListWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getReplicaInfoList(this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
     * the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             address: String
     *             lastInBuildDurationInSeconds: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of replicas in the cluster for a given partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaInfoListWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getReplicaInfoList(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
     * the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             nodeName: String
     *             address: String
     *             lastInBuildDurationInSeconds: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of replicas in the cluster for a given partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getReplicaInfoListWithResponse(String partitionId, RequestOptions requestOptions) {
        return getReplicaInfoListWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeName: String
     *     address: String
     *     lastInBuildDurationInSeconds: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the identity, status, health, node name, uptime, and other details about the replica
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaInfoWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getReplicaInfo(
                                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context));
    }

    /**
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeName: String
     *     address: String
     *     lastInBuildDurationInSeconds: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the identity, status, health, node name, uptime, and other details about the replica
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaInfoWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getReplicaInfo(this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context);
    }

    /**
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     nodeName: String
     *     address: String
     *     lastInBuildDurationInSeconds: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the identity, status, health, node name, uptime, and other details about the replica
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getReplicaInfoWithResponse(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        return getReplicaInfoWithResponseAsync(partitionId, replicaId, requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the replica based on the health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     *     events reported on the replica based on the health state along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaHealthWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getReplicaHealth(
                                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the replica based on the health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     *     events reported on the replica based on the health state along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaHealthWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getReplicaHealth(this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the replica based on the health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     *     events reported on the replica based on the health state along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getReplicaHealthWithResponse(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        return getReplicaHealthWithResponseAsync(partitionId, replicaId, requestOptions).block();
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use
     * EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This
     * API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored
     * while evaluating the health of the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric stateful service replica or stateless service instance. Use
     *     EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     *     state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaHealthUsingPolicyWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getReplicaHealthUsingPolicy(
                                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context));
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use
     * EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This
     * API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored
     * while evaluating the health of the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric stateful service replica or stateless service instance. Use
     *     EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     *     state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReplicaHealthUsingPolicyWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getReplicaHealthUsingPolicy(
                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context);
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use
     * EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This
     * API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored
     * while evaluating the health of the replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health of a Service Fabric stateful service replica or stateless service instance. Use
     *     EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     *     state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getReplicaHealthUsingPolicyWithResponse(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        return getReplicaHealthUsingPolicyWithResponseAsync(partitionId, replicaId, requestOptions).block();
    }

    /**
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceKind</td><td>String</td><td>Yes</td><td>The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportReplicaHealthWithResponseAsync(
            String partitionId, String replicaId, BinaryData healthInformation, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportReplicaHealth(
                                this.getHost(),
                                apiVersion,
                                partitionId,
                                replicaId,
                                healthInformation,
                                requestOptions,
                                context));
    }

    /**
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceKind</td><td>String</td><td>Yes</td><td>The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportReplicaHealthWithResponseAsync(
            String partitionId,
            String replicaId,
            BinaryData healthInformation,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.reportReplicaHealth(
                this.getHost(), apiVersion, partitionId, replicaId, healthInformation, requestOptions, context);
    }

    /**
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceKind</td><td>String</td><td>Yes</td><td>The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportReplicaHealthWithResponse(
            String partitionId, String replicaId, BinaryData healthInformation, RequestOptions requestOptions) {
        return reportReplicaHealthWithResponseAsync(partitionId, replicaId, healthInformation, requestOptions).block();
    }

    /**
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information
     * include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
     * information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
     * replicas matching the specified values for those parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceName: String
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         partitionId: String
     *         replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *         address: String
     *         servicePackageActivationId: String
     *         hostProcessId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about replicas deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServiceReplicaInfoList(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information
     * include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
     * information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
     * replicas matching the specified values for those parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceName: String
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         partitionId: String
     *         replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *         address: String
     *         servicePackageActivationId: String
     *         hostProcessId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about replicas deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServiceReplicaInfoList(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information
     * include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
     * information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
     * replicas matching the specified values for those parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PartitionId</td><td>String</td><td>No</td><td>The identity of the partition.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         serviceName: String
     *         serviceTypeName: String
     *         serviceManifestName: String
     *         codePackageName: String
     *         partitionId: String
     *         replicaStatus: String(Invalid/InBuild/Standby/Ready/Down/Dropped)
     *         address: String
     *         servicePackageActivationId: String
     *         hostProcessId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list containing the information about replicas deployed on a Service Fabric node along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServiceReplicaInfoListWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedServiceReplicaInfoListWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfoWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServiceReplicaDetailInfo(
                                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context));
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfoWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServiceReplicaDetailInfo(
                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context);
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServiceReplicaDetailInfoWithResponse(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        return getDeployedServiceReplicaDetailInfoWithResponseAsync(nodeName, partitionId, replicaId, requestOptions)
                .block();
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfoByPartitionIdWithResponseAsync(
            String nodeName, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServiceReplicaDetailInfoByPartitionId(
                                this.getHost(), apiVersion, nodeName, partitionId, requestOptions, context));
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServiceReplicaDetailInfoByPartitionIdWithResponseAsync(
            String nodeName, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServiceReplicaDetailInfoByPartitionId(
                this.getHost(), apiVersion, nodeName, partitionId, requestOptions, context);
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceName: String
     *     partitionId: String
     *     currentServiceOperation: String(Unknown/None/Open/ChangeRole/Close/Abort)
     *     currentServiceOperationStartTimeUtc: String
     *     reportedLoad: [
     *         {
     *             name: String
     *             value: Integer
     *             currentValue: String
     *             lastReportedUtc: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServiceReplicaDetailInfoByPartitionIdWithResponse(
            String nodeName, String partitionId, RequestOptions requestOptions) {
        return getDeployedServiceReplicaDetailInfoByPartitionIdWithResponseAsync(nodeName, partitionId, requestOptions)
                .block();
    }

    /**
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks
     * performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartReplicaWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.restartReplica(
                                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context));
    }

    /**
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks
     * performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartReplicaWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.restartReplica(
                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context);
    }

    /**
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks
     * performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restartReplicaWithResponse(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        return restartReplicaWithResponseAsync(nodeName, partitionId, replicaId, requestOptions).block();
    }

    /**
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
     * removal closes the replica, transitions the replica to the role None, and then removes all of the state
     * information of the replica from the cluster. This API tests the replica state removal path, and simulates the
     * report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is
     * used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag
     * impacts all other replicas hosted in the same process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeReplicaWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.removeReplica(
                                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context));
    }

    /**
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
     * removal closes the replica, transitions the replica to the role None, and then removes all of the state
     * information of the replica from the cluster. This API tests the replica state removal path, and simulates the
     * report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is
     * used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag
     * impacts all other replicas hosted in the same process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeReplicaWithResponseAsync(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.removeReplica(
                this.getHost(), apiVersion, nodeName, partitionId, replicaId, requestOptions, context);
    }

    /**
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
     * removal closes the replica, transitions the replica to the role None, and then removes all of the state
     * information of the replica from the cluster. This API tests the replica state removal path, and simulates the
     * report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is
     * used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag
     * impacts all other replicas hosted in the same process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ForceRemove</td><td>String</td><td>No</td><td>Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeReplicaWithResponse(
            String nodeName, String partitionId, String replicaId, RequestOptions requestOptions) {
        return removeReplicaWithResponseAsync(nodeName, partitionId, replicaId, requestOptions).block();
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServicePackageInfoList(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServicePackageInfoList(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServicePackageInfoListWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedServicePackageInfoListWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     * These results are of service packages whose name match exactly the service package name specified as the
     * parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageInfoListByNameWithResponseAsync(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServicePackageInfoListByName(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                servicePackageName,
                                requestOptions,
                                context));
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     * These results are of service packages whose name match exactly the service package name specified as the
     * parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageInfoListByNameWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServicePackageInfoListByName(
                this.getHost(), apiVersion, nodeName, applicationId, servicePackageName, requestOptions, context);
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     * These results are of service packages whose name match exactly the service package name specified as the
     * parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         servicePackageActivationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of deployed service package information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServicePackageInfoListByNameWithResponse(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        return getDeployedServicePackageInfoListByNameWithResponseAsync(
                        nodeName, applicationId, servicePackageName, requestOptions)
                .block();
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed service package based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageHealthWithResponseAsync(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServicePackageHealth(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                servicePackageName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed service package based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServicePackageHealth(
                this.getHost(), apiVersion, nodeName, applicationId, servicePackageName, requestOptions, context);
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed service package based on health state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServicePackageHealthWithResponse(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        return getDeployedServicePackageHealthWithResponseAsync(
                        nodeName, applicationId, servicePackageName, requestOptions)
                .block();
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
     * HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy
     * to optionally override the health policies used to evaluate the health. This API only uses
     * 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
     * evaluating the health of the deployed service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageHealthUsingPolicyWithResponseAsync(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedServicePackageHealthUsingPolicy(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                servicePackageName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
     * HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy
     * to optionally override the health policies used to evaluate the health. This API only uses
     * 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
     * evaluating the health of the deployed service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedServicePackageHealthUsingPolicyWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedServicePackageHealthUsingPolicy(
                this.getHost(), apiVersion, nodeName, applicationId, servicePackageName, requestOptions, context);
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
     * HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy
     * to optionally override the health policies used to evaluate the health. This API only uses
     * 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
     * evaluating the health of the deployed service package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>EventsHealthStateFilter</td><td>String</td><td>No</td><td>Allows filtering the collection of HealthEvent objects returned based on health state.
     * The possible values for this parameter include integer value of one of the following health states.
     * Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     * If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *
     * - Default - Default value. Matches any HealthState. The value is zero.
     * - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
     * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
     * - Warning - Filter that matches input with HealthState value Warning. The value is 4.
     * - Error - Filter that matches input with HealthState value Error. The value is 8.
     * - All - Filter that matches input with any HealthState value. The value is 65535.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     considerWarningAsError: Boolean
     *     maxPercentUnhealthyDeployedApplications: Integer
     *     defaultServiceTypeHealthPolicy: {
     *         maxPercentUnhealthyPartitionsPerService: Integer
     *         maxPercentUnhealthyReplicasPerPartition: Integer
     *         maxPercentUnhealthyServices: Integer
     *     }
     *     serviceTypeHealthPolicyMap: [
     *         {
     *             key: String
     *             value: (recursive schema, see value above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     healthEvents: [
     *         {
     *             sourceId: String
     *             property: String
     *             healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *             timeToLiveInMilliSeconds: String
     *             description: String
     *             sequenceNumber: String
     *             removeWhenExpired: Boolean
     *             healthReportId: String
     *             isExpired: Boolean
     *             sourceUtcTimestamp: String
     *             lastModifiedUtcTimestamp: String
     *             lastOkTransitionAt: String
     *             lastWarningTransitionAt: String
     *             lastErrorTransitionAt: String
     *         }
     *     ]
     *     unhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     healthStatistics: {
     *         healthStateCountList: [
     *             {
     *                 entityKind: String(Invalid/Node/Partition/Service/Application/Replica/DeployedApplication/DeployedServicePackage/Cluster)
     *                 healthStateCount: {
     *                     okCount: Long
     *                     warningCount: Long
     *                     errorCount: Long
     *                 }
     *             }
     *         ]
     *     }
     *     applicationName: String
     *     serviceManifestName: String
     *     nodeName: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedServicePackageHealthUsingPolicyWithResponse(
            String nodeName, String applicationId, String servicePackageName, RequestOptions requestOptions) {
        return getDeployedServicePackageHealthUsingPolicyWithResponseAsync(
                        nodeName, applicationId, servicePackageName, requestOptions)
                .block();
    }

    /**
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must
     * contain the information about the source of the health report and property on which it is reported. The report is
     * sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the
     * gateway, but rejected by the health store after extra validation. For example, the health store may reject the
     * report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in
     * the health store, get deployed service package health and check that the report appears in the HealthEvents
     * section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedServicePackageHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            BinaryData healthInformation,
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.reportDeployedServicePackageHealth(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                servicePackageName,
                                healthInformation,
                                requestOptions,
                                context));
    }

    /**
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must
     * contain the information about the source of the health report and property on which it is reported. The report is
     * sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the
     * gateway, but rejected by the health store after extra validation. For example, the health store may reject the
     * report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in
     * the health store, get deployed service package health and check that the report appears in the HealthEvents
     * section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedServicePackageHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            BinaryData healthInformation,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.reportDeployedServicePackageHealth(
                this.getHost(),
                apiVersion,
                nodeName,
                applicationId,
                servicePackageName,
                healthInformation,
                requestOptions,
                context);
    }

    /**
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must
     * contain the information about the source of the health report and property on which it is reported. The report is
     * sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the
     * gateway, but rejected by the health store after extra validation. For example, the health store may reject the
     * report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in
     * the health store, get deployed service package health and check that the report appears in the HealthEvents
     * section.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Immediate</td><td>String</td><td>No</td><td>A flag that indicates whether the report should be sent immediately.
     * A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
     * If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
     * This is useful for critical reports that should be sent as soon as possible.
     * Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
     * If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
     * This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
     * By default, reports are not sent immediately.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sourceId: String
     *     property: String
     *     healthState: String(Invalid/Ok/Warning/Error/Unknown)
     *     timeToLiveInMilliSeconds: String
     *     description: String
     *     sequenceNumber: String
     *     removeWhenExpired: Boolean
     *     healthReportId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reportDeployedServicePackageHealthWithResponse(
            String nodeName,
            String applicationId,
            String servicePackageName,
            BinaryData healthInformation,
            RequestOptions requestOptions) {
        return reportDeployedServicePackageHealthWithResponseAsync(
                        nodeName, applicationId, servicePackageName, healthInformation, requestOptions)
                .block();
    }

    /**
     * This API provides a way to download code packages including the container images on a specific node outside of
     * the normal application deployment and upgrade path. This is useful for the large code packages and container
     * images to be present on the node before the actual application deployment and upgrade, thus significantly
     * reducing the total time required for the deployment or upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     applicationTypeName: String
     *     applicationTypeVersion: String
     *     nodeName: String
     *     packageSharingPolicy: [
     *         {
     *             sharedPackageName: String
     *             packageSharingScope: String(None/All/Code/Config/Data)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deployServicePackageToNodeDescription Describes information for deploying a service package to a Service
     *     Fabric node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deployServicePackageToNodeWithResponseAsync(
            String nodeName, BinaryData deployServicePackageToNodeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.deployServicePackageToNode(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                deployServicePackageToNodeDescription,
                                requestOptions,
                                context));
    }

    /**
     * This API provides a way to download code packages including the container images on a specific node outside of
     * the normal application deployment and upgrade path. This is useful for the large code packages and container
     * images to be present on the node before the actual application deployment and upgrade, thus significantly
     * reducing the total time required for the deployment or upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     applicationTypeName: String
     *     applicationTypeVersion: String
     *     nodeName: String
     *     packageSharingPolicy: [
     *         {
     *             sharedPackageName: String
     *             packageSharingScope: String(None/All/Code/Config/Data)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deployServicePackageToNodeDescription Describes information for deploying a service package to a Service
     *     Fabric node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deployServicePackageToNodeWithResponseAsync(
            String nodeName,
            BinaryData deployServicePackageToNodeDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.deployServicePackageToNode(
                this.getHost(), apiVersion, nodeName, deployServicePackageToNodeDescription, requestOptions, context);
    }

    /**
     * This API provides a way to download code packages including the container images on a specific node outside of
     * the normal application deployment and upgrade path. This is useful for the large code packages and container
     * images to be present on the node before the actual application deployment and upgrade, thus significantly
     * reducing the total time required for the deployment or upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     applicationTypeName: String
     *     applicationTypeVersion: String
     *     nodeName: String
     *     packageSharingPolicy: [
     *         {
     *             sharedPackageName: String
     *             packageSharingScope: String(None/All/Code/Config/Data)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param deployServicePackageToNodeDescription Describes information for deploying a service package to a Service
     *     Fabric node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deployServicePackageToNodeWithResponse(
            String nodeName, BinaryData deployServicePackageToNodeDescription, RequestOptions requestOptions) {
        return deployServicePackageToNodeWithResponseAsync(
                        nodeName, deployServicePackageToNodeDescription, requestOptions)
                .block();
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>No</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         serviceManifestName: String
     *         servicePackageActivationId: String
     *         hostType: String(Invalid/ExeHost/ContainerHost)
     *         hostIsolationMode: String(None/Process/HyperV)
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         runFrequencyInterval: String
     *         setupEntryPoint: {
     *             entryPointLocation: String
     *             processId: String
     *             runAsUserName: String
     *             codePackageEntryPointStatistics: {
     *                 lastExitCode: String
     *                 lastActivationTime: String
     *                 lastExitTime: String
     *                 lastSuccessfulActivationTime: String
     *                 lastSuccessfulExitTime: String
     *                 activationCount: String
     *                 activationFailureCount: String
     *                 continuousActivationFailureCount: String
     *                 exitCount: String
     *                 exitFailureCount: String
     *                 continuousExitFailureCount: String
     *             }
     *             status: String(Invalid/Pending/Starting/Started/Stopping/Stopped)
     *             nextActivationTime: String
     *             instanceId: String
     *             containerId: String
     *         }
     *         mainEntryPoint: (recursive schema, see mainEntryPoint above)
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of code packages deployed on a Service Fabric node for the given application along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedCodePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDeployedCodePackageInfoList(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>No</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         serviceManifestName: String
     *         servicePackageActivationId: String
     *         hostType: String(Invalid/ExeHost/ContainerHost)
     *         hostIsolationMode: String(None/Process/HyperV)
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         runFrequencyInterval: String
     *         setupEntryPoint: {
     *             entryPointLocation: String
     *             processId: String
     *             runAsUserName: String
     *             codePackageEntryPointStatistics: {
     *                 lastExitCode: String
     *                 lastActivationTime: String
     *                 lastExitTime: String
     *                 lastSuccessfulActivationTime: String
     *                 lastSuccessfulExitTime: String
     *                 activationCount: String
     *                 activationFailureCount: String
     *                 continuousActivationFailureCount: String
     *                 exitCount: String
     *                 exitFailureCount: String
     *                 continuousExitFailureCount: String
     *             }
     *             status: String(Invalid/Pending/Starting/Started/Stopping/Stopped)
     *             nextActivationTime: String
     *             instanceId: String
     *             containerId: String
     *         }
     *         mainEntryPoint: (recursive schema, see mainEntryPoint above)
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of code packages deployed on a Service Fabric node for the given application along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeployedCodePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDeployedCodePackageInfoList(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>No</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>No</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         version: String
     *         serviceManifestName: String
     *         servicePackageActivationId: String
     *         hostType: String(Invalid/ExeHost/ContainerHost)
     *         hostIsolationMode: String(None/Process/HyperV)
     *         status: String(Invalid/Downloading/Activating/Active/Upgrading/Deactivating/RanToCompletion/Failed)
     *         runFrequencyInterval: String
     *         setupEntryPoint: {
     *             entryPointLocation: String
     *             processId: String
     *             runAsUserName: String
     *             codePackageEntryPointStatistics: {
     *                 lastExitCode: String
     *                 lastActivationTime: String
     *                 lastExitTime: String
     *                 lastSuccessfulActivationTime: String
     *                 lastSuccessfulExitTime: String
     *                 activationCount: String
     *                 activationFailureCount: String
     *                 continuousActivationFailureCount: String
     *                 exitCount: String
     *                 exitFailureCount: String
     *                 continuousExitFailureCount: String
     *             }
     *             status: String(Invalid/Pending/Starting/Started/Stopping/Stopped)
     *             nextActivationTime: String
     *             instanceId: String
     *             containerId: String
     *         }
     *         mainEntryPoint: (recursive schema, see mainEntryPoint above)
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of code packages deployed on a Service Fabric node for the given application along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeployedCodePackageInfoListWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getDeployedCodePackageInfoListWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process,
     * which will restart all the user service replicas hosted in that process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     servicePackageActivationId: String
     *     codePackageName: String
     *     codePackageInstanceId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to
     *     restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartDeployedCodePackageWithResponseAsync(
            String nodeName,
            String applicationId,
            BinaryData restartDeployedCodePackageDescription,
            RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.restartDeployedCodePackage(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                restartDeployedCodePackageDescription,
                                requestOptions,
                                context));
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process,
     * which will restart all the user service replicas hosted in that process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     servicePackageActivationId: String
     *     codePackageName: String
     *     codePackageInstanceId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to
     *     restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartDeployedCodePackageWithResponseAsync(
            String nodeName,
            String applicationId,
            BinaryData restartDeployedCodePackageDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0";
        return service.restartDeployedCodePackage(
                this.getHost(),
                apiVersion,
                nodeName,
                applicationId,
                restartDeployedCodePackageDescription,
                requestOptions,
                context);
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process,
     * which will restart all the user service replicas hosted in that process.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     serviceManifestName: String
     *     servicePackageActivationId: String
     *     codePackageName: String
     *     codePackageInstanceId: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to
     *     restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restartDeployedCodePackageWithResponse(
            String nodeName,
            String applicationId,
            BinaryData restartDeployedCodePackageDescription,
            RequestOptions requestOptions) {
        return restartDeployedCodePackageWithResponseAsync(
                        nodeName, applicationId, restartDeployedCodePackageDescription, requestOptions)
                .block();
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>Tail</td><td>String</td><td>No</td><td>Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.</td></tr>
     *     <tr><td>Previous</td><td>String</td><td>No</td><td>Specifies whether to get container logs from exited/dead containers of the code package instance.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     content: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container logs for container deployed on a Service Fabric node for the given code package along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getContainerLogsDeployedOnNodeWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context ->
                        service.getContainerLogsDeployedOnNode(
                                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context));
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>Tail</td><td>String</td><td>No</td><td>Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.</td></tr>
     *     <tr><td>Previous</td><td>String</td><td>No</td><td>Specifies whether to get container logs from exited/dead containers of the code package instance.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     content: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container logs for container deployed on a Service Fabric node for the given code package along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getContainerLogsDeployedOnNodeWithResponseAsync(
            String nodeName, String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.getContainerLogsDeployedOnNode(
                this.getHost(), apiVersion, nodeName, applicationId, requestOptions, context);
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>Tail</td><td>String</td><td>No</td><td>Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.</td></tr>
     *     <tr><td>Previous</td><td>String</td><td>No</td><td>Specifies whether to get container logs from exited/dead containers of the code package instance.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     content: String
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container logs for container deployed on a Service Fabric node for the given code package along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getContainerLogsDeployedOnNodeWithResponse(
            String nodeName, String applicationId, RequestOptions requestOptions) {
        return getContainerLogsDeployedOnNodeWithResponseAsync(nodeName, applicationId, requestOptions).block();
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageInstanceId</td><td>String</td><td>Yes</td><td>ID that uniquely identifies a code package instance deployed on a service fabric node.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     httpVerb: String
     *     uriPath: String
     *     contentType: String
     *     body: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerApiResult: {
     *         status: int
     *         contentType: String
     *         contentEncoding: String
     *         body: String
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param containerApiRequestBody Parameters for making container API call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body that wraps container API result along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeContainerApiWithResponseAsync(
            String nodeName, String applicationId, BinaryData containerApiRequestBody, RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context ->
                        service.invokeContainerApi(
                                this.getHost(),
                                apiVersion,
                                nodeName,
                                applicationId,
                                containerApiRequestBody,
                                requestOptions,
                                context));
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageInstanceId</td><td>String</td><td>Yes</td><td>ID that uniquely identifies a code package instance deployed on a service fabric node.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     httpVerb: String
     *     uriPath: String
     *     contentType: String
     *     body: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerApiResult: {
     *         status: int
     *         contentType: String
     *         contentEncoding: String
     *         body: String
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param containerApiRequestBody Parameters for making container API call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body that wraps container API result along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeContainerApiWithResponseAsync(
            String nodeName,
            String applicationId,
            BinaryData containerApiRequestBody,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.2";
        return service.invokeContainerApi(
                this.getHost(), apiVersion, nodeName, applicationId, containerApiRequestBody, requestOptions, context);
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ServiceManifestName</td><td>String</td><td>Yes</td><td>The name of a service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageName</td><td>String</td><td>Yes</td><td>The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.</td></tr>
     *     <tr><td>CodePackageInstanceId</td><td>String</td><td>Yes</td><td>ID that uniquely identifies a code package instance deployed on a service fabric node.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     httpVerb: String
     *     uriPath: String
     *     contentType: String
     *     body: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerApiResult: {
     *         status: int
     *         contentType: String
     *         contentEncoding: String
     *         body: String
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param containerApiRequestBody Parameters for making container API call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body that wraps container API result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invokeContainerApiWithResponse(
            String nodeName, String applicationId, BinaryData containerApiRequestBody, RequestOptions requestOptions) {
        return invokeContainerApiWithResponseAsync(nodeName, applicationId, containerApiRequestBody, requestOptions)
                .block();
    }

    /**
     * Compose is a file format that describes multi-container applications. This API allows deploying container based
     * applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status
     * can be tracked via the `GetComposeDeploymentStatus` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     * }
     * }</pre>
     *
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createComposeDeploymentWithResponseAsync(
            BinaryData createComposeDeploymentDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context ->
                        service.createComposeDeployment(
                                this.getHost(),
                                apiVersion,
                                createComposeDeploymentDescription,
                                requestOptions,
                                context));
    }

    /**
     * Compose is a file format that describes multi-container applications. This API allows deploying container based
     * applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status
     * can be tracked via the `GetComposeDeploymentStatus` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     * }
     * }</pre>
     *
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createComposeDeploymentWithResponseAsync(
            BinaryData createComposeDeploymentDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0-preview";
        return service.createComposeDeployment(
                this.getHost(), apiVersion, createComposeDeploymentDescription, requestOptions, context);
    }

    /**
     * Compose is a file format that describes multi-container applications. This API allows deploying container based
     * applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status
     * can be tracked via the `GetComposeDeploymentStatus` API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     * }
     * }</pre>
     *
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createComposeDeploymentWithResponse(
            BinaryData createComposeDeploymentDescription, RequestOptions requestOptions) {
        return createComposeDeploymentWithResponseAsync(createComposeDeploymentDescription, requestOptions).block();
    }

    /**
     * Returns the status of the compose deployment that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
     * and other details about the deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     applicationName: String
     *     status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *     statusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric compose deployment along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentStatusWithResponseAsync(
            String deploymentName, RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context ->
                        service.getComposeDeploymentStatus(
                                this.getHost(), apiVersion, deploymentName, requestOptions, context));
    }

    /**
     * Returns the status of the compose deployment that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
     * and other details about the deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     applicationName: String
     *     status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *     statusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric compose deployment along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentStatusWithResponseAsync(
            String deploymentName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0-preview";
        return service.getComposeDeploymentStatus(this.getHost(), apiVersion, deploymentName, requestOptions, context);
    }

    /**
     * Returns the status of the compose deployment that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
     * and other details about the deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     applicationName: String
     *     status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *     statusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a Service Fabric compose deployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getComposeDeploymentStatusWithResponse(
            String deploymentName, RequestOptions requestOptions) {
        return getComposeDeploymentStatusWithResponseAsync(deploymentName, requestOptions).block();
    }

    /**
     * Gets the status about the compose deployments that were created or in the process of being created in the Service
     * Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
     * list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
     * can be used to get the next page.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             applicationName: String
     *             status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *             statusDetails: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status about the compose deployments that were created or in the process of being created in the
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentStatusListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context -> service.getComposeDeploymentStatusList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the status about the compose deployments that were created or in the process of being created in the Service
     * Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
     * list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
     * can be used to get the next page.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             applicationName: String
     *             status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *             statusDetails: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status about the compose deployments that were created or in the process of being created in the
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentStatusListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0-preview";
        return service.getComposeDeploymentStatusList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the status about the compose deployments that were created or in the process of being created in the Service
     * Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
     * list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
     * can be used to get the next page.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             applicationName: String
     *             status: String(Invalid/Provisioning/Creating/Ready/Unprovisioning/Deleting/Failed/Upgrading)
     *             statusDetails: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status about the compose deployments that were created or in the process of being created in the
     *     Service Fabric cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getComposeDeploymentStatusListWithResponse(RequestOptions requestOptions) {
        return getComposeDeploymentStatusListWithResponseAsync(requestOptions).block();
    }

    /**
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     applicationName: String
     *     upgradeState: String(Invalid/ProvisioningTarget/RollingForwardInProgress/RollingForwardPending/UnprovisioningCurrent/RollingForwardCompleted/RollingBackInProgress/UnprovisioningTarget/RollingBackCompleted/Failed)
     *     upgradeStatusDetails: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     forceRestart: Boolean
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     targetApplicationTypeVersion: String
     *     upgradeDuration: String
     *     currentUpgradeDomainDuration: String
     *     applicationUnhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     applicationUpgradeStatusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for a compose deployment upgrade along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentUpgradeProgressWithResponseAsync(
            String deploymentName, RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context ->
                        service.getComposeDeploymentUpgradeProgress(
                                this.getHost(), apiVersion, deploymentName, requestOptions, context));
    }

    /**
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     applicationName: String
     *     upgradeState: String(Invalid/ProvisioningTarget/RollingForwardInProgress/RollingForwardPending/UnprovisioningCurrent/RollingForwardCompleted/RollingBackInProgress/UnprovisioningTarget/RollingBackCompleted/Failed)
     *     upgradeStatusDetails: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     forceRestart: Boolean
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     targetApplicationTypeVersion: String
     *     upgradeDuration: String
     *     currentUpgradeDomainDuration: String
     *     applicationUnhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     applicationUpgradeStatusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for a compose deployment upgrade along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getComposeDeploymentUpgradeProgressWithResponseAsync(
            String deploymentName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0-preview";
        return service.getComposeDeploymentUpgradeProgress(
                this.getHost(), apiVersion, deploymentName, requestOptions, context);
    }

    /**
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging
     * application health issues.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     applicationName: String
     *     upgradeState: String(Invalid/ProvisioningTarget/RollingForwardInProgress/RollingForwardPending/UnprovisioningCurrent/RollingForwardCompleted/RollingBackInProgress/UnprovisioningTarget/RollingBackCompleted/Failed)
     *     upgradeStatusDetails: String
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     forceRestart: Boolean
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     *     targetApplicationTypeVersion: String
     *     upgradeDuration: String
     *     currentUpgradeDomainDuration: String
     *     applicationUnhealthyEvaluations: [
     *         {
     *             healthEvaluation: {
     *                 aggregatedHealthState: String(Invalid/Ok/Warning/Error/Unknown)
     *                 description: String
     *             }
     *         }
     *     ]
     *     currentUpgradeDomainProgress: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             {
     *                 nodeName: String
     *                 upgradePhase: String(Invalid/PreUpgradeSafetyCheck/Upgrading/PostUpgradeSafetyCheck)
     *                 pendingSafetyChecks: [
     *                     {
     *                         safetyCheck: {
     *                         }
     *                     }
     *                 ]
     *                 upgradeDuration: String
     *             }
     *         ]
     *     }
     *     startTimestampUtc: String
     *     failureTimestampUtc: String
     *     failureReason: String(None/Interrupted/HealthCheck/UpgradeDomainTimeout/OverallUpgradeTimeout)
     *     upgradeDomainProgressAtFailure: {
     *         domainName: String
     *         nodeUpgradeProgressList: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     applicationUpgradeStatusDetails: String
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the parameters for a compose deployment upgrade along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getComposeDeploymentUpgradeProgressWithResponse(
            String deploymentName, RequestOptions requestOptions) {
        return getComposeDeploymentUpgradeProgressWithResponseAsync(deploymentName, requestOptions).block();
    }

    /**
     * Deletes an existing Service Fabric compose deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeComposeDeploymentWithResponseAsync(
            String deploymentName, RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context ->
                        service.removeComposeDeployment(
                                this.getHost(), apiVersion, deploymentName, requestOptions, context));
    }

    /**
     * Deletes an existing Service Fabric compose deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeComposeDeploymentWithResponseAsync(
            String deploymentName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0-preview";
        return service.removeComposeDeployment(this.getHost(), apiVersion, deploymentName, requestOptions, context);
    }

    /**
     * Deletes an existing Service Fabric compose deployment.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeComposeDeploymentWithResponse(String deploymentName, RequestOptions requestOptions) {
        return removeComposeDeploymentWithResponseAsync(deploymentName, requestOptions).block();
    }

    /**
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName, BinaryData composeDeploymentUpgradeDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0-preview";
        return FluxUtil.withContext(
                context ->
                        service.startComposeDeploymentUpgrade(
                                this.getHost(),
                                apiVersion,
                                deploymentName,
                                composeDeploymentUpgradeDescription,
                                requestOptions,
                                context));
    }

    /**
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName,
            BinaryData composeDeploymentUpgradeDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.0-preview";
        return service.startComposeDeploymentUpgrade(
                this.getHost(),
                apiVersion,
                deploymentName,
                composeDeploymentUpgradeDescription,
                requestOptions,
                context);
    }

    /**
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '"6.0-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentName: String
     *     composeFileContent: String
     *     registryCredential: {
     *         registryUserName: String
     *         registryPassword: String
     *         passwordEncrypted: Boolean
     *     }
     *     upgradeKind: String(Invalid/Rolling)
     *     rollingUpgradeMode: String(Invalid/UnmonitoredAuto/UnmonitoredManual/Monitored/UnmonitoredDeferred)
     *     upgradeReplicaSetCheckTimeoutInSeconds: Long
     *     forceRestart: Boolean
     *     monitoringPolicy: {
     *         failureAction: String(Invalid/Rollback/Manual)
     *         healthCheckWaitDurationInMilliseconds: String
     *         healthCheckStableDurationInMilliseconds: String
     *         healthCheckRetryTimeoutInMilliseconds: String
     *         upgradeTimeoutInMilliseconds: String
     *         upgradeDomainTimeoutInMilliseconds: String
     *     }
     *     applicationHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyDeployedApplications: Integer
     *         defaultServiceTypeHealthPolicy: {
     *             maxPercentUnhealthyPartitionsPerService: Integer
     *             maxPercentUnhealthyReplicasPerPartition: Integer
     *             maxPercentUnhealthyServices: Integer
     *         }
     *         serviceTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: (recursive schema, see value above)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deploymentName The identity of the deployment.
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startComposeDeploymentUpgradeWithResponse(
            String deploymentName, BinaryData composeDeploymentUpgradeDescription, RequestOptions requestOptions) {
        return startComposeDeploymentUpgradeWithResponseAsync(
                        deploymentName, composeDeploymentUpgradeDescription, requestOptions)
                .block();
    }

    /**
     * Rollback a service fabric compose deployment upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startRollbackComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.startRollbackComposeDeploymentUpgrade(
                                this.getHost(),
                                this.getServiceVersion().getVersion(),
                                deploymentName,
                                requestOptions,
                                context));
    }

    /**
     * Rollback a service fabric compose deployment upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startRollbackComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName, RequestOptions requestOptions, Context context) {
        return service.startRollbackComposeDeploymentUpgrade(
                this.getHost(), this.getServiceVersion().getVersion(), deploymentName, requestOptions, context);
    }

    /**
     * Rollback a service fabric compose deployment upgrade.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param deploymentName The identity of the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startRollbackComposeDeploymentUpgradeWithResponse(
            String deploymentName, RequestOptions requestOptions) {
        return startRollbackComposeDeploymentUpgradeWithResponseAsync(deploymentName, requestOptions).block();
    }

    /**
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos
     * and the status of the Chaos Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     chaosParameters: {
     *         timeToRunInSeconds: String
     *         maxClusterStabilizationTimeoutInSeconds: Long
     *         maxConcurrentFaults: Long
     *         enableMoveReplicaFaults: Boolean
     *         waitTimeBetweenFaultsInSeconds: Long
     *         waitTimeBetweenIterationsInSeconds: Long
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         context: {
     *             map: {
     *                 String: String
     *             }
     *         }
     *         chaosTargetFilter: {
     *             nodeTypeInclusionList: [
     *                 String
     *             ]
     *             applicationInclusionList: [
     *                 String
     *             ]
     *         }
     *     }
     *     status: String(Invalid/Running/Stopped)
     *     scheduleStatus: String(Invalid/Stopped/Active/Expired/Pending)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running
     *     Chaos and the status of the Chaos Schedule along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(context -> service.getChaos(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos
     * and the status of the Chaos Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     chaosParameters: {
     *         timeToRunInSeconds: String
     *         maxClusterStabilizationTimeoutInSeconds: Long
     *         maxConcurrentFaults: Long
     *         enableMoveReplicaFaults: Boolean
     *         waitTimeBetweenFaultsInSeconds: Long
     *         waitTimeBetweenIterationsInSeconds: Long
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         context: {
     *             map: {
     *                 String: String
     *             }
     *         }
     *         chaosTargetFilter: {
     *             nodeTypeInclusionList: [
     *                 String
     *             ]
     *             applicationInclusionList: [
     *                 String
     *             ]
     *         }
     *     }
     *     status: String(Invalid/Running/Stopped)
     *     scheduleStatus: String(Invalid/Stopped/Active/Expired/Pending)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running
     *     Chaos and the status of the Chaos Schedule along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.getChaos(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos
     * and the status of the Chaos Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     chaosParameters: {
     *         timeToRunInSeconds: String
     *         maxClusterStabilizationTimeoutInSeconds: Long
     *         maxConcurrentFaults: Long
     *         enableMoveReplicaFaults: Boolean
     *         waitTimeBetweenFaultsInSeconds: Long
     *         waitTimeBetweenIterationsInSeconds: Long
     *         clusterHealthPolicy: {
     *             considerWarningAsError: Boolean
     *             maxPercentUnhealthyNodes: Integer
     *             maxPercentUnhealthyApplications: Integer
     *             applicationTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *             nodeTypeHealthPolicyMap: [
     *                 {
     *                     key: String
     *                     value: int
     *                 }
     *             ]
     *         }
     *         context: {
     *             map: {
     *                 String: String
     *             }
     *         }
     *         chaosTargetFilter: {
     *             nodeTypeInclusionList: [
     *                 String
     *             ]
     *             applicationInclusionList: [
     *                 String
     *             ]
     *         }
     *     }
     *     status: String(Invalid/Running/Stopped)
     *     scheduleStatus: String(Invalid/Stopped/Active/Expired/Pending)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running
     *     Chaos and the status of the Chaos Schedule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getChaosWithResponse(RequestOptions requestOptions) {
        return getChaosWithResponseAsync(requestOptions).block();
    }

    /**
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is
     * already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer
     * to the article [Induce controlled Chaos in Service Fabric
     * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     timeToRunInSeconds: String
     *     maxClusterStabilizationTimeoutInSeconds: Long
     *     maxConcurrentFaults: Long
     *     enableMoveReplicaFaults: Boolean
     *     waitTimeBetweenFaultsInSeconds: Long
     *     waitTimeBetweenIterationsInSeconds: Long
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     context: {
     *         map: {
     *             String: String
     *         }
     *     }
     *     chaosTargetFilter: {
     *         nodeTypeInclusionList: [
     *             String
     *         ]
     *         applicationInclusionList: [
     *             String
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosParameters Describes all the parameters to configure a Chaos run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startChaosWithResponseAsync(BinaryData chaosParameters, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.startChaos(this.getHost(), apiVersion, chaosParameters, requestOptions, context));
    }

    /**
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is
     * already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer
     * to the article [Induce controlled Chaos in Service Fabric
     * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     timeToRunInSeconds: String
     *     maxClusterStabilizationTimeoutInSeconds: Long
     *     maxConcurrentFaults: Long
     *     enableMoveReplicaFaults: Boolean
     *     waitTimeBetweenFaultsInSeconds: Long
     *     waitTimeBetweenIterationsInSeconds: Long
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     context: {
     *         map: {
     *             String: String
     *         }
     *     }
     *     chaosTargetFilter: {
     *         nodeTypeInclusionList: [
     *             String
     *         ]
     *         applicationInclusionList: [
     *             String
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosParameters Describes all the parameters to configure a Chaos run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startChaosWithResponseAsync(
            BinaryData chaosParameters, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startChaos(this.getHost(), apiVersion, chaosParameters, requestOptions, context);
    }

    /**
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is
     * already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer
     * to the article [Induce controlled Chaos in Service Fabric
     * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     timeToRunInSeconds: String
     *     maxClusterStabilizationTimeoutInSeconds: Long
     *     maxConcurrentFaults: Long
     *     enableMoveReplicaFaults: Boolean
     *     waitTimeBetweenFaultsInSeconds: Long
     *     waitTimeBetweenIterationsInSeconds: Long
     *     clusterHealthPolicy: {
     *         considerWarningAsError: Boolean
     *         maxPercentUnhealthyNodes: Integer
     *         maxPercentUnhealthyApplications: Integer
     *         applicationTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *         nodeTypeHealthPolicyMap: [
     *             {
     *                 key: String
     *                 value: int
     *             }
     *         ]
     *     }
     *     context: {
     *         map: {
     *             String: String
     *         }
     *     }
     *     chaosTargetFilter: {
     *         nodeTypeInclusionList: [
     *             String
     *         ]
     *         applicationInclusionList: [
     *             String
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosParameters Describes all the parameters to configure a Chaos run.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startChaosWithResponse(BinaryData chaosParameters, RequestOptions requestOptions) {
        return startChaosWithResponseAsync(chaosParameters, requestOptions).block();
    }

    /**
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
     * current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state
     * and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume
     * scheduling.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopChaosWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(context -> service.stopChaos(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
     * current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state
     * and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume
     * scheduling.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopChaosWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.stopChaos(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
     * current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state
     * and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume
     * scheduling.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> stopChaosWithResponse(RequestOptions requestOptions) {
        return stopChaosWithResponseAsync(requestOptions).block();
    }

    /**
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
     * segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify
     * both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the
     * Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get
     * the next segment you make a call to this API with the continuation token.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     history: [
     *         {
     *             chaosEvent: {
     *                 timeStampUtc: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the list of Chaos events and the continuation token to get the next segment along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosEventsWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context -> service.getChaosEvents(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
     * segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify
     * both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the
     * Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get
     * the next segment you make a call to this API with the continuation token.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     history: [
     *         {
     *             chaosEvent: {
     *                 timeStampUtc: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the list of Chaos events and the continuation token to get the next segment along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosEventsWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.getChaosEvents(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
     * segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify
     * both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the
     * Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get
     * the next segment you make a call to this API with the continuation token.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>No</td><td>The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     history: [
     *         {
     *             chaosEvent: {
     *                 timeStampUtc: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the list of Chaos events and the continuation token to get the next segment along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getChaosEventsWithResponse(RequestOptions requestOptions) {
        return getChaosEventsWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosScheduleWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context -> service.getChaosSchedule(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getChaosScheduleWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.getChaosSchedule(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getChaosScheduleWithResponse(RequestOptions requestOptions) {
        return getChaosScheduleWithResponseAsync(requestOptions).block();
    }

    /**
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the
     * provided version matches the version on the server. When updating the Chaos Schedule, the version on the server
     * is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is
     * running when this call is made, the call will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosSchedule Describes the schedule used by Chaos.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postChaosScheduleWithResponseAsync(
            BinaryData chaosSchedule, RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context ->
                        service.postChaosSchedule(this.getHost(), apiVersion, chaosSchedule, requestOptions, context));
    }

    /**
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the
     * provided version matches the version on the server. When updating the Chaos Schedule, the version on the server
     * is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is
     * running when this call is made, the call will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosSchedule Describes the schedule used by Chaos.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postChaosScheduleWithResponseAsync(
            BinaryData chaosSchedule, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.postChaosSchedule(this.getHost(), apiVersion, chaosSchedule, requestOptions, context);
    }

    /**
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the
     * provided version matches the version on the server. When updating the Chaos Schedule, the version on the server
     * is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is
     * running when this call is made, the call will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     version: Integer
     *     schedule: {
     *         startDate: String
     *         expiryDate: String
     *         chaosParametersDictionary: [
     *             {
     *                 key: String
     *                 value: {
     *                     timeToRunInSeconds: String
     *                     maxClusterStabilizationTimeoutInSeconds: Long
     *                     maxConcurrentFaults: Long
     *                     enableMoveReplicaFaults: Boolean
     *                     waitTimeBetweenFaultsInSeconds: Long
     *                     waitTimeBetweenIterationsInSeconds: Long
     *                     clusterHealthPolicy: {
     *                         considerWarningAsError: Boolean
     *                         maxPercentUnhealthyNodes: Integer
     *                         maxPercentUnhealthyApplications: Integer
     *                         applicationTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                         nodeTypeHealthPolicyMap: [
     *                             {
     *                                 key: String
     *                                 value: int
     *                             }
     *                         ]
     *                     }
     *                     context: {
     *                         map: {
     *                             String: String
     *                         }
     *                     }
     *                     chaosTargetFilter: {
     *                         nodeTypeInclusionList: [
     *                             String
     *                         ]
     *                         applicationInclusionList: [
     *                             String
     *                         ]
     *                     }
     *                 }
     *             }
     *         ]
     *         jobs: [
     *             {
     *                 chaosParameters: String
     *                 days: {
     *                     sunday: Boolean
     *                     monday: Boolean
     *                     tuesday: Boolean
     *                     wednesday: Boolean
     *                     thursday: Boolean
     *                     friday: Boolean
     *                     saturday: Boolean
     *                 }
     *                 times: [
     *                     {
     *                         startTime: {
     *                             hour: Integer
     *                             minute: Integer
     *                         }
     *                         endTime: (recursive schema, see endTime above)
     *                     }
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param chaosSchedule Describes the schedule used by Chaos.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postChaosScheduleWithResponse(BinaryData chaosSchedule, RequestOptions requestOptions) {
        return postChaosScheduleWithResponseAsync(chaosSchedule, requestOptions).block();
    }

    /**
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
     * connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the
     * specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
     * an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
     * uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
     * aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
     * last, to let the image store service know that the folder is complete.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileWithResponseAsync(String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.uploadFile(this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
     * connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the
     * specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
     * an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
     * uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
     * aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
     * last, to let the image store service know that the folder is complete.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.uploadFile(this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
     * connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the
     * specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
     * an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
     * uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
     * aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
     * last, to let the image store service know that the folder is complete.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadFileWithResponse(String contentPath, RequestOptions requestOptions) {
        return uploadFileWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative
     * to the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreContentWithResponseAsync(
            String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.2";
        return FluxUtil.withContext(
                context ->
                        service.getImageStoreContent(this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative
     * to the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreContentWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2";
        return service.getImageStoreContent(this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative
     * to the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreContentWithResponse(String contentPath, RequestOptions requestOptions) {
        return getImageStoreContentWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Deletes existing image store content being found within the given image store relative path. This command can be
     * used to delete uploaded application packages once they are provisioned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreContentWithResponseAsync(
            String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.deleteImageStoreContent(
                                this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Deletes existing image store content being found within the given image store relative path. This command can be
     * used to delete uploaded application packages once they are provisioned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreContentWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteImageStoreContent(this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Deletes existing image store content being found within the given image store relative path. This command can be
     * used to delete uploaded application packages once they are provisioned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteImageStoreContentWithResponse(String contentPath, RequestOptions requestOptions) {
        return deleteImageStoreContentWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Returns the information about the image store content at the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreRootContentWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getImageStoreRootContent(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Returns the information about the image store content at the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreRootContentWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getImageStoreRootContent(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Returns the information about the image store content at the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeFiles: [
     *         {
     *             fileSize: String
     *             fileVersion: {
     *                 versionNumber: String
     *                 epochDataLossNumber: String
     *                 epochConfigurationNumber: String
     *             }
     *             modifiedDate: String
     *             storeRelativePath: String
     *         }
     *     ]
     *     storeFolders: [
     *         {
     *             storeRelativePath: String
     *             fileCount: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the image store content along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreRootContentWithResponse(RequestOptions requestOptions) {
        return getImageStoreRootContentWithResponseAsync(requestOptions).block();
    }

    /**
     * Copies the image store content from the source image store relative path to the destination image store relative
     * path.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     remoteSource: String
     *     remoteDestination: String
     *     skipFiles: [
     *         String
     *     ]
     *     checkMarkFile: Boolean
     * }
     * }</pre>
     *
     * @param imageStoreCopyDescription Describes the copy description for the image store.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> copyImageStoreContentWithResponseAsync(
            BinaryData imageStoreCopyDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.copyImageStoreContent(
                                this.getHost(), apiVersion, imageStoreCopyDescription, requestOptions, context));
    }

    /**
     * Copies the image store content from the source image store relative path to the destination image store relative
     * path.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     remoteSource: String
     *     remoteDestination: String
     *     skipFiles: [
     *         String
     *     ]
     *     checkMarkFile: Boolean
     * }
     * }</pre>
     *
     * @param imageStoreCopyDescription Describes the copy description for the image store.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> copyImageStoreContentWithResponseAsync(
            BinaryData imageStoreCopyDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.copyImageStoreContent(
                this.getHost(), apiVersion, imageStoreCopyDescription, requestOptions, context);
    }

    /**
     * Copies the image store content from the source image store relative path to the destination image store relative
     * path.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     remoteSource: String
     *     remoteDestination: String
     *     skipFiles: [
     *         String
     *     ]
     *     checkMarkFile: Boolean
     * }
     * }</pre>
     *
     * @param imageStoreCopyDescription Describes the copy description for the image store.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> copyImageStoreContentWithResponse(
            BinaryData imageStoreCopyDescription, RequestOptions requestOptions) {
        return copyImageStoreContentWithResponseAsync(imageStoreCopyDescription, requestOptions).block();
    }

    /**
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file
     * chunks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreUploadSessionWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.deleteImageStoreUploadSession(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file
     * chunks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreUploadSessionWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteImageStoreUploadSession(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file
     * chunks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteImageStoreUploadSessionWithResponse(RequestOptions requestOptions) {
        return deleteImageStoreUploadSessionWithResponseAsync(requestOptions).block();
    }

    /**
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
     * upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
     * chunk received.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> commitImageStoreUploadSessionWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.commitImageStoreUploadSession(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
     * upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
     * chunk received.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> commitImageStoreUploadSessionWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.commitImageStoreUploadSession(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
     * upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
     * chunk received.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> commitImageStoreUploadSessionWithResponse(RequestOptions requestOptions) {
        return commitImageStoreUploadSessionWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time
     * during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session identified by the given ID along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreUploadSessionByIdWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getImageStoreUploadSessionById(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time
     * during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session identified by the given ID along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreUploadSessionByIdWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getImageStoreUploadSessionById(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time
     * during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session identified by the given ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreUploadSessionByIdWithResponse(RequestOptions requestOptions) {
        return getImageStoreUploadSessionByIdWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the image store upload session associated with the given image store relative path. User can query the
     * upload session at any time during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session associated with the given image store relative path along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreUploadSessionByPathWithResponseAsync(
            String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getImageStoreUploadSessionByPath(
                                this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Gets the image store upload session associated with the given image store relative path. User can query the
     * upload session at any time during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session associated with the given image store relative path along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreUploadSessionByPathWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getImageStoreUploadSessionByPath(
                this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Gets the image store upload session associated with the given image store relative path. User can query the
     * upload session at any time during uploading.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadSessions: [
     *         {
     *             storeRelativePath: String
     *             sessionId: String
     *             modifiedDate: String
     *             fileSize: String
     *             expectedRanges: [
     *                 {
     *                     startPosition: String
     *                     endPosition: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the image store upload session associated with the given image store relative path along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreUploadSessionByPathWithResponse(
            String contentPath, RequestOptions requestOptions) {
        return getImageStoreUploadSessionByPathWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
     * API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
     * whenever there is a network interruption. Use this option if the file size is large.
     *
     * <p>To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks
     * to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image
     * store relative path already exists, it will be overwritten when the upload session commits.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Range</td><td>String</td><td>Yes</td><td>When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileChunkWithResponseAsync(String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.uploadFileChunk(this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
     * API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
     * whenever there is a network interruption. Use this option if the file size is large.
     *
     * <p>To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks
     * to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image
     * store relative path already exists, it will be overwritten when the upload session commits.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Range</td><td>String</td><td>Yes</td><td>When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileChunkWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.uploadFileChunk(this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
     * API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
     * whenever there is a network interruption. Use this option if the file size is large.
     *
     * <p>To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks
     * to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image
     * store relative path already exists, it will be overwritten when the upload session commits.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>session-id</td><td>String</td><td>Yes</td><td>A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Range</td><td>String</td><td>Yes</td><td>When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.</td></tr>
     * </table>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadFileChunkWithResponse(String contentPath, RequestOptions requestOptions) {
        return uploadFileChunkWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Returns the total size of files at the root and children folders in image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information of a image store folder size along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreRootFolderSizeWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.5";
        return FluxUtil.withContext(
                context -> service.getImageStoreRootFolderSize(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Returns the total size of files at the root and children folders in image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information of a image store folder size along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreRootFolderSizeWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.5";
        return service.getImageStoreRootFolderSize(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Returns the total size of files at the root and children folders in image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information of a image store folder size along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreRootFolderSizeWithResponse(RequestOptions requestOptions) {
        return getImageStoreRootFolderSizeWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
     * the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the total size of file under a image store folder, specified by contentPath along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreFolderSizeWithResponseAsync(
            String contentPath, RequestOptions requestOptions) {
        final String apiVersion = "6.5";
        return FluxUtil.withContext(
                context ->
                        service.getImageStoreFolderSize(
                                this.getHost(), apiVersion, contentPath, requestOptions, context));
    }

    /**
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
     * the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the total size of file under a image store folder, specified by contentPath along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreFolderSizeWithResponseAsync(
            String contentPath, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.5";
        return service.getImageStoreFolderSize(this.getHost(), apiVersion, contentPath, requestOptions, context);
    }

    /**
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
     * the root of the image store.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storeRelativePath: String
     *     folderSize: String
     * }
     * }</pre>
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the total size of file under a image store folder, specified by contentPath along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreFolderSizeWithResponse(String contentPath, RequestOptions requestOptions) {
        return getImageStoreFolderSizeWithResponseAsync(contentPath, requestOptions).block();
    }

    /**
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
     * node it is on, and several categories of the ImageStore's file system usage.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     diskInfo: {
     *         capacity: String
     *         availableSpace: String
     *     }
     *     usedByMetadata: {
     *         usedSpace: String
     *         fileCount: String
     *     }
     *     usedByStaging: (recursive schema, see usedByStaging above)
     *     usedByCopy: (recursive schema, see usedByCopy above)
     *     usedByRegister: (recursive schema, see usedByRegister above)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the ImageStore's resource usage along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreInfoWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.5";
        return FluxUtil.withContext(
                context -> service.getImageStoreInfo(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
     * node it is on, and several categories of the ImageStore's file system usage.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     diskInfo: {
     *         capacity: String
     *         availableSpace: String
     *     }
     *     usedByMetadata: {
     *         usedSpace: String
     *         fileCount: String
     *     }
     *     usedByStaging: (recursive schema, see usedByStaging above)
     *     usedByCopy: (recursive schema, see usedByCopy above)
     *     usedByRegister: (recursive schema, see usedByRegister above)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the ImageStore's resource usage along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImageStoreInfoWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.5";
        return service.getImageStoreInfo(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
     * node it is on, and several categories of the ImageStore's file system usage.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.5'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     diskInfo: {
     *         capacity: String
     *         availableSpace: String
     *     }
     *     usedByMetadata: {
     *         usedSpace: String
     *         fileCount: String
     *     }
     *     usedByStaging: (recursive schema, see usedByStaging above)
     *     usedByCopy: (recursive schema, see usedByCopy above)
     *     usedByRegister: (recursive schema, see usedByRegister above)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the ImageStore's resource usage along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImageStoreInfoWithResponse(RequestOptions requestOptions) {
        return getImageStoreInfoWithResponseAsync(requestOptions).block();
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific commands to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeInfrastructureCommandWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.invokeInfrastructureCommand(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific commands to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeInfrastructureCommandWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.invokeInfrastructureCommand(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific commands to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invokeInfrastructureCommandWithResponse(RequestOptions requestOptions) {
        return invokeInfrastructureCommandWithResponseAsync(requestOptions).block();
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific queries to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeInfrastructureQueryWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.invokeInfrastructureQuery(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific queries to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeInfrastructureQueryWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.invokeInfrastructureQuery(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific queries to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Command</td><td>String</td><td>Yes</td><td>The text of the command to be invoked. The content of the command is infrastructure-specific.</td></tr>
     *     <tr><td>ServiceId</td><td>String</td><td>No</td><td>The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this is a weakly-typed response stream to the client along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invokeInfrastructureQueryWithResponse(RequestOptions requestOptions) {
        return invokeInfrastructureQueryWithResponseAsync(requestOptions).block();
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
     * partition. Actual data loss will depend on the specified DataLossMode.
     *
     * <p>- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but
     * actual data loss depends on the presence of in-flight replication. - FullDataLoss - All replicas are removed
     * hence all data is lost and OnDataLoss is triggered.
     *
     * <p>This API should only be called with a stateful service as the target.
     *
     * <p>Calling this API with a system service as the target is not advised.
     *
     * <p>Note: Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution
     * and clean up internal system state. It will not restore data if the command has progressed far enough to cause
     * data loss.
     *
     * <p>Call the GetDataLossProgress API with the same OperationId to return information on the operation started with
     * this API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>DataLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startDataLossWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startDataLoss(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
     * partition. Actual data loss will depend on the specified DataLossMode.
     *
     * <p>- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but
     * actual data loss depends on the presence of in-flight replication. - FullDataLoss - All replicas are removed
     * hence all data is lost and OnDataLoss is triggered.
     *
     * <p>This API should only be called with a stateful service as the target.
     *
     * <p>Calling this API with a system service as the target is not advised.
     *
     * <p>Note: Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution
     * and clean up internal system state. It will not restore data if the command has progressed far enough to cause
     * data loss.
     *
     * <p>Call the GetDataLossProgress API with the same OperationId to return information on the operation started with
     * this API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>DataLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startDataLossWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startDataLoss(this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
     * partition. Actual data loss will depend on the specified DataLossMode.
     *
     * <p>- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but
     * actual data loss depends on the presence of in-flight replication. - FullDataLoss - All replicas are removed
     * hence all data is lost and OnDataLoss is triggered.
     *
     * <p>This API should only be called with a stateful service as the target.
     *
     * <p>Calling this API with a system service as the target is not advised.
     *
     * <p>Note: Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution
     * and clean up internal system state. It will not restore data if the command has progressed far enough to cause
     * data loss.
     *
     * <p>Call the GetDataLossProgress API with the same OperationId to return information on the operation started with
     * this API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>DataLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startDataLossWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return startDataLossWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeDataLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a data loss operation started with StartDataLoss, using the OperationId along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataLossProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getDataLossProgress(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeDataLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a data loss operation started with StartDataLoss, using the OperationId along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataLossProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getDataLossProgress(this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeDataLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a data loss operation started with StartDataLoss, using the OperationId along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataLossProgressWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return getDataLossProgressWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * This API is useful for a temporary quorum loss situation on your service.
     *
     * <p>Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started
     * with this API.
     *
     * <p>This can only be called on stateful persisted (HasPersistedState==true) services. Do not use this API on
     * stateless services or stateful in-memory only services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>QuorumLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.</td></tr>
     *     <tr><td>QuorumLossDuration</td><td>int</td><td>Yes</td><td>The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startQuorumLossWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startQuorumLoss(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * This API is useful for a temporary quorum loss situation on your service.
     *
     * <p>Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started
     * with this API.
     *
     * <p>This can only be called on stateful persisted (HasPersistedState==true) services. Do not use this API on
     * stateless services or stateful in-memory only services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>QuorumLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.</td></tr>
     *     <tr><td>QuorumLossDuration</td><td>int</td><td>Yes</td><td>The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startQuorumLossWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startQuorumLoss(this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * This API is useful for a temporary quorum loss situation on your service.
     *
     * <p>Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started
     * with this API.
     *
     * <p>This can only be called on stateful persisted (HasPersistedState==true) services. Do not use this API on
     * stateless services or stateful in-memory only services.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>QuorumLossMode</td><td>String</td><td>Yes</td><td>This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.</td></tr>
     *     <tr><td>QuorumLossDuration</td><td>int</td><td>Yes</td><td>The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startQuorumLossWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return startQuorumLossWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeQuorumLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQuorumLossProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getQuorumLossProgress(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeQuorumLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQuorumLossProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getQuorumLossProgress(
                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     invokeQuorumLossResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQuorumLossProgressWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return getQuorumLossProgressWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * This API is useful for testing failover.
     *
     * <p>If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
     *
     * <p>Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>RestartPartitionMode</td><td>String</td><td>Yes</td><td>Describe which partitions to restart.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startPartitionRestartWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.startPartitionRestart(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * This API is useful for testing failover.
     *
     * <p>If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
     *
     * <p>Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>RestartPartitionMode</td><td>String</td><td>Yes</td><td>Describe which partitions to restart.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startPartitionRestartWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startPartitionRestart(
                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * This API is useful for testing failover.
     *
     * <p>If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
     *
     * <p>Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>RestartPartitionMode</td><td>String</td><td>Yes</td><td>Describe which partitions to restart.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startPartitionRestartWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return startPartitionRestartWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     restartPartitionResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionRestartProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionRestartProgress(
                                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context));
    }

    /**
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     restartPartitionResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionRestartProgressWithResponseAsync(
            String serviceId, String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPartitionRestartProgress(
                this.getHost(), apiVersion, serviceId, partitionId, requestOptions, context);
    }

    /**
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     restartPartitionResult: {
     *         errorCode: Integer
     *         selectedPartition: {
     *             serviceName: String
     *             partitionId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionRestartProgressWithResponse(
            String serviceId, String partitionId, RequestOptions requestOptions) {
        return getPartitionRestartProgressWithResponseAsync(serviceId, partitionId, requestOptions).block();
    }

    /**
     * Starts or stops a cluster node. A cluster node is a process, not the OS instance itself. To start a node, pass in
     * "Start" for the NodeTransitionType parameter. To stop a node, pass in "Stop" for the NodeTransitionType
     * parameter. This API starts the operation - when the API returns the node may not have finished transitioning yet.
     * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>NodeTransitionType</td><td>String</td><td>Yes</td><td>Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.</td></tr>
     *     <tr><td>NodeInstanceId</td><td>String</td><td>Yes</td><td>The node instance ID of the target node.  This can be determined through GetNodeInfo API.</td></tr>
     *     <tr><td>StopDurationInSeconds</td><td>int</td><td>Yes</td><td>The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startNodeTransitionWithResponseAsync(String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.startNodeTransition(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Starts or stops a cluster node. A cluster node is a process, not the OS instance itself. To start a node, pass in
     * "Start" for the NodeTransitionType parameter. To stop a node, pass in "Stop" for the NodeTransitionType
     * parameter. This API starts the operation - when the API returns the node may not have finished transitioning yet.
     * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>NodeTransitionType</td><td>String</td><td>Yes</td><td>Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.</td></tr>
     *     <tr><td>NodeInstanceId</td><td>String</td><td>Yes</td><td>The node instance ID of the target node.  This can be determined through GetNodeInfo API.</td></tr>
     *     <tr><td>StopDurationInSeconds</td><td>int</td><td>Yes</td><td>The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startNodeTransitionWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.startNodeTransition(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Starts or stops a cluster node. A cluster node is a process, not the OS instance itself. To start a node, pass in
     * "Start" for the NodeTransitionType parameter. To stop a node, pass in "Stop" for the NodeTransitionType
     * parameter. This API starts the operation - when the API returns the node may not have finished transitioning yet.
     * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>NodeTransitionType</td><td>String</td><td>Yes</td><td>Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.</td></tr>
     *     <tr><td>NodeInstanceId</td><td>String</td><td>Yes</td><td>The node instance ID of the target node.  This can be determined through GetNodeInfo API.</td></tr>
     *     <tr><td>StopDurationInSeconds</td><td>int</td><td>Yes</td><td>The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startNodeTransitionWithResponse(String nodeName, RequestOptions requestOptions) {
        return startNodeTransitionWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     nodeTransitionResult: {
     *         errorCode: Integer
     *         nodeResult: {
     *             nodeName: String
     *             nodeInstanceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of an operation started with StartNodeTransition using the provided OperationId along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeTransitionProgressWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.getNodeTransitionProgress(
                                this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     nodeTransitionResult: {
     *         errorCode: Integer
     *         nodeResult: {
     *             nodeName: String
     *             nodeInstanceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of an operation started with StartNodeTransition using the provided OperationId along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeTransitionProgressWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNodeTransitionProgress(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *     nodeTransitionResult: {
     *         errorCode: Integer
     *         nodeResult: {
     *             nodeName: String
     *             nodeInstanceId: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the progress of an operation started with StartNodeTransition using the provided OperationId along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeTransitionProgressWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeTransitionProgressWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * Gets the list of user-induced fault operations filtered by provided input.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TypeFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationType for user-induced operations.
     *
     * - 65535 - select all
     * - 1 - select PartitionDataLoss.
     * - 2 - select PartitionQuorumLoss.
     * - 4 - select PartitionRestart.
     * - 8 - select NodeTransition.</td></tr>
     *     <tr><td>StateFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationState's for user-induced operations.
     *
     * - 65535 - select All
     * - 1 - select Running
     * - 2 - select RollingBack
     * - 8 - select Completed
     * - 16 - select Faulted
     * - 32 - select Cancelled
     * - 64 - select ForceCancelled</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         operationId: String
     *         state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *         type: String(Invalid/PartitionDataLoss/PartitionQuorumLoss/PartitionRestart/NodeTransition)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of user-induced fault operations filtered by provided input along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaultOperationListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getFaultOperationList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Gets the list of user-induced fault operations filtered by provided input.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TypeFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationType for user-induced operations.
     *
     * - 65535 - select all
     * - 1 - select PartitionDataLoss.
     * - 2 - select PartitionQuorumLoss.
     * - 4 - select PartitionRestart.
     * - 8 - select NodeTransition.</td></tr>
     *     <tr><td>StateFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationState's for user-induced operations.
     *
     * - 65535 - select All
     * - 1 - select Running
     * - 2 - select RollingBack
     * - 8 - select Completed
     * - 16 - select Faulted
     * - 32 - select Cancelled
     * - 64 - select ForceCancelled</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         operationId: String
     *         state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *         type: String(Invalid/PartitionDataLoss/PartitionQuorumLoss/PartitionRestart/NodeTransition)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of user-induced fault operations filtered by provided input along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaultOperationListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getFaultOperationList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Gets the list of user-induced fault operations filtered by provided input.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>TypeFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationType for user-induced operations.
     *
     * - 65535 - select all
     * - 1 - select PartitionDataLoss.
     * - 2 - select PartitionQuorumLoss.
     * - 4 - select PartitionRestart.
     * - 8 - select NodeTransition.</td></tr>
     *     <tr><td>StateFilter</td><td>int</td><td>Yes</td><td>Used to filter on OperationState's for user-induced operations.
     *
     * - 65535 - select All
     * - 1 - select Running
     * - 2 - select RollingBack
     * - 8 - select Completed
     * - 16 - select Faulted
     * - 32 - select Cancelled
     * - 64 - select ForceCancelled</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         operationId: String
     *         state: String(Invalid/Running/RollingBack/Completed/Faulted/Cancelled/ForceCancelled)
     *         type: String(Invalid/PartitionDataLoss/PartitionQuorumLoss/PartitionRestart/NodeTransition)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of user-induced fault operations filtered by provided input along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaultOperationListWithResponse(RequestOptions requestOptions) {
        return getFaultOperationListWithResponseAsync(requestOptions).block();
    }

    /**
     * The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
     * StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
     *
     * <p>If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up. If
     * force is true, the command will be aborted, and some internal state may be left behind. Specifying force as true
     * should be used with care. Calling this API with force set to true is not allowed until this API has already been
     * called on the same test command with force set to false first, or unless the test command already has an
     * OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system
     * will be/is cleaning up internal system state caused by executing the command. It will not restore data if the
     * test command was to cause data loss. For example, if you call StartDataLoss then call this API, the system will
     * only clean up internal state from running the command. It will not restore the target partition's data, if the
     * command progressed far enough to cause data loss.
     *
     * <p>Important note: if this API is invoked with force==true, internal state may be left behind.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>Force</td><td>boolean</td><td>Yes</td><td>Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.cancelOperation(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
     * StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
     *
     * <p>If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up. If
     * force is true, the command will be aborted, and some internal state may be left behind. Specifying force as true
     * should be used with care. Calling this API with force set to true is not allowed until this API has already been
     * called on the same test command with force set to false first, or unless the test command already has an
     * OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system
     * will be/is cleaning up internal system state caused by executing the command. It will not restore data if the
     * test command was to cause data loss. For example, if you call StartDataLoss then call this API, the system will
     * only clean up internal state from running the command. It will not restore the target partition's data, if the
     * command progressed far enough to cause data loss.
     *
     * <p>Important note: if this API is invoked with force==true, internal state may be left behind.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>Force</td><td>boolean</td><td>Yes</td><td>Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.cancelOperation(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
     * StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
     *
     * <p>If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up. If
     * force is true, the command will be aborted, and some internal state may be left behind. Specifying force as true
     * should be used with care. Calling this API with force set to true is not allowed until this API has already been
     * called on the same test command with force set to false first, or unless the test command already has an
     * OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system
     * will be/is cleaning up internal system state caused by executing the command. It will not restore data if the
     * test command was to cause data loss. For example, if you call StartDataLoss then call this API, the system will
     * only clean up internal state from running the command. It will not restore the target partition's data, if the
     * command progressed far enough to cause data loss.
     *
     * <p>Important note: if this API is invoked with force==true, internal state may be left behind.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>OperationId</td><td>String</td><td>Yes</td><td>A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API</td></tr>
     *     <tr><td>Force</td><td>boolean</td><td>Yes</td><td>Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelOperationWithResponse(RequestOptions requestOptions) {
        return cancelOperationWithResponseAsync(requestOptions).block();
    }

    /**
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition
     * for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createBackupPolicyWithResponseAsync(
            BinaryData backupPolicyDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.createBackupPolicy(
                                this.getHost(), apiVersion, backupPolicyDescription, requestOptions, context));
    }

    /**
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition
     * for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createBackupPolicyWithResponseAsync(
            BinaryData backupPolicyDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.createBackupPolicy(this.getHost(), apiVersion, backupPolicyDescription, requestOptions, context);
    }

    /**
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition
     * for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createBackupPolicyWithResponse(
            BinaryData backupPolicyDescription, RequestOptions requestOptions) {
        return createBackupPolicyWithResponseAsync(backupPolicyDescription, requestOptions).block();
    }

    /**
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
     * backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
     * first deleting the mapping.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupPolicyWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.deleteBackupPolicy(
                                this.getHost(), backupPolicyName, apiVersion, requestOptions, context));
    }

    /**
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
     * backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
     * first deleting the mapping.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupPolicyWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.deleteBackupPolicy(this.getHost(), backupPolicyName, apiVersion, requestOptions, context);
    }

    /**
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
     * backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
     * first deleting the mapping.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteBackupPolicyWithResponse(String backupPolicyName, RequestOptions requestOptions) {
        return deleteBackupPolicyWithResponseAsync(backupPolicyName, requestOptions).block();
    }

    /**
     * Get a list of all the backup policies configured.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             autoRestoreOnDataLoss: boolean
     *             maxIncrementalBackups: int
     *             schedule: {
     *             }
     *             storage: {
     *                 friendlyName: String
     *             }
     *             retentionPolicy: {
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all the backup policies configured along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupPolicyListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getBackupPolicyList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * Get a list of all the backup policies configured.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             autoRestoreOnDataLoss: boolean
     *             maxIncrementalBackups: int
     *             schedule: {
     *             }
     *             storage: {
     *                 friendlyName: String
     *             }
     *             retentionPolicy: {
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all the backup policies configured along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupPolicyListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getBackupPolicyList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * Get a list of all the backup policies configured.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             autoRestoreOnDataLoss: boolean
     *             maxIncrementalBackups: int
     *             schedule: {
     *             }
     *             storage: {
     *                 friendlyName: String
     *             }
     *             retentionPolicy: {
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all the backup policies configured along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBackupPolicyListWithResponse(RequestOptions requestOptions) {
        return getBackupPolicyListWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets a particular backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a particular backup policy identified by {backupPolicyName} along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupPolicyByNameWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getBackupPolicyByName(
                                this.getHost(), backupPolicyName, apiVersion, requestOptions, context));
    }

    /**
     * Gets a particular backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a particular backup policy identified by {backupPolicyName} along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupPolicyByNameWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getBackupPolicyByName(this.getHost(), backupPolicyName, apiVersion, requestOptions, context);
    }

    /**
     * Gets a particular backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a particular backup policy identified by {backupPolicyName} along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBackupPolicyByNameWithResponse(
            String backupPolicyName, RequestOptions requestOptions) {
        return getBackupPolicyByNameWithResponseAsync(backupPolicyName, requestOptions).block();
    }

    /**
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backup entities that are being periodically backed along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllEntitiesBackedUpByPolicyWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getAllEntitiesBackedUpByPolicy(
                                this.getHost(), backupPolicyName, apiVersion, requestOptions, context));
    }

    /**
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backup entities that are being periodically backed along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllEntitiesBackedUpByPolicyWithResponseAsync(
            String backupPolicyName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getAllEntitiesBackedUpByPolicy(
                this.getHost(), backupPolicyName, apiVersion, requestOptions, context);
    }

    /**
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backup entities that are being periodically backed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllEntitiesBackedUpByPolicyWithResponse(
            String backupPolicyName, RequestOptions requestOptions) {
        return getAllEntitiesBackedUpByPolicyWithResponseAsync(backupPolicyName, requestOptions).block();
    }

    /**
     * Updates the backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateBackupPolicyWithResponseAsync(
            String backupPolicyName, BinaryData backupPolicyDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.updateBackupPolicy(
                                this.getHost(),
                                backupPolicyName,
                                apiVersion,
                                backupPolicyDescription,
                                requestOptions,
                                context));
    }

    /**
     * Updates the backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateBackupPolicyWithResponseAsync(
            String backupPolicyName,
            BinaryData backupPolicyDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.4";
        return service.updateBackupPolicy(
                this.getHost(), backupPolicyName, apiVersion, backupPolicyDescription, requestOptions, context);
    }

    /**
     * Updates the backup policy identified by {backupPolicyName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ValidateConnection</td><td>String</td><td>No</td><td>Specifies whether to validate the storage connection and credentials before creating or updating the backup policies.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     autoRestoreOnDataLoss: boolean
     *     maxIncrementalBackups: int
     *     schedule: {
     *     }
     *     storage: {
     *         friendlyName: String
     *     }
     *     retentionPolicy: {
     *     }
     * }
     * }</pre>
     *
     * @param backupPolicyName The name of the backup policy.
     * @param backupPolicyDescription Describes the backup policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateBackupPolicyWithResponse(
            String backupPolicyName, BinaryData backupPolicyDescription, RequestOptions requestOptions) {
        return updateBackupPolicyWithResponseAsync(backupPolicyName, backupPolicyDescription, requestOptions).block();
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition
     * is backed up individually as per the specified backup policy description. Note only C# based Reliable Actor and
     * Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableApplicationBackupWithResponseAsync(
            String applicationId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.enableApplicationBackup(
                                this.getHost(),
                                applicationId,
                                apiVersion,
                                enableBackupDescription,
                                requestOptions,
                                context));
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition
     * is backed up individually as per the specified backup policy description. Note only C# based Reliable Actor and
     * Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableApplicationBackupWithResponseAsync(
            String applicationId, BinaryData enableBackupDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.enableApplicationBackup(
                this.getHost(), applicationId, apiVersion, enableBackupDescription, requestOptions, context);
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition
     * is backed up individually as per the specified backup policy description. Note only C# based Reliable Actor and
     * Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableApplicationBackupWithResponse(
            String applicationId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        return enableApplicationBackupWithResponseAsync(applicationId, enableBackupDescription, requestOptions).block();
    }

    /**
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.disableApplicationBackup(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.disableApplicationBackup(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableApplicationBackupWithResponse(String applicationId, RequestOptions requestOptions) {
        return disableApplicationBackupWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Gets the Service Fabric backup configuration information for the application and the services and partitions
     * under this application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the application and the services and partitions
     *     under this application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationBackupConfigurationInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationBackupConfigurationInfo(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Gets the Service Fabric backup configuration information for the application and the services and partitions
     * under this application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the application and the services and partitions
     *     under this application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationBackupConfigurationInfoWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getApplicationBackupConfigurationInfo(
                this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Gets the Service Fabric backup configuration information for the application and the services and partitions
     * under this application.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the application and the services and partitions
     *     under this application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationBackupConfigurationInfoWithResponse(
            String applicationId, RequestOptions requestOptions) {
        return getApplicationBackupConfigurationInfoWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
     * all the backups available at the backup location configured in the backup policy. It also allows filtering of the
     * result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationBackupListWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationBackupList(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
     * all the backups available at the backup location configured in the backup policy. It also allows filtering of the
     * result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationBackupListWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getApplicationBackupList(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
     * all the backups available at the backup location configured in the backup policy. It also allows filtering of the
     * result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationBackupListWithResponse(
            String applicationId, RequestOptions requestOptions) {
        return getApplicationBackupListWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire application's hierarchy. It means all the services and
     * partitions under this application are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.suspendApplicationBackup(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire application's hierarchy. It means all the services and
     * partitions under this application are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.suspendApplicationBackup(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire application's hierarchy. It means all the services and
     * partitions under this application are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> suspendApplicationBackupWithResponse(String applicationId, RequestOptions requestOptions) {
        return suspendApplicationBackupWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
     * currently configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.resumeApplicationBackup(
                                this.getHost(), applicationId, apiVersion, requestOptions, context));
    }

    /**
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
     * currently configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationBackupWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.resumeApplicationBackup(this.getHost(), applicationId, apiVersion, requestOptions, context);
    }

    /**
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
     * currently configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeApplicationBackupWithResponse(String applicationId, RequestOptions requestOptions) {
        return resumeApplicationBackupWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
     * backed up individually as per the specified backup policy description. In case the application, which the service
     * is part of, is already enabled for backup then this operation would override the policy being used to take the
     * periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note
     * only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableServiceBackupWithResponseAsync(
            String serviceId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.enableServiceBackup(
                                this.getHost(),
                                serviceId,
                                apiVersion,
                                enableBackupDescription,
                                requestOptions,
                                context));
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
     * backed up individually as per the specified backup policy description. In case the application, which the service
     * is part of, is already enabled for backup then this operation would override the policy being used to take the
     * periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note
     * only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableServiceBackupWithResponseAsync(
            String serviceId, BinaryData enableBackupDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.enableServiceBackup(
                this.getHost(), serviceId, apiVersion, enableBackupDescription, requestOptions, context);
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
     * backed up individually as per the specified backup policy description. In case the application, which the service
     * is part of, is already enabled for backup then this operation would override the policy being used to take the
     * periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note
     * only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableServiceBackupWithResponse(
            String serviceId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        return enableServiceBackupWithResponseAsync(serviceId, enableBackupDescription, requestOptions).block();
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly
     * enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this
     * service is part of, this service would continue to be periodically backed up as per the policy mapped at the
     * application level.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableServiceBackupWithResponseAsync(String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.disableServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly
     * enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this
     * service is part of, this service would continue to be periodically backed up as per the policy mapped at the
     * application level.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableServiceBackupWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.disableServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly
     * enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this
     * service is part of, this service would continue to be periodically backed up as per the policy mapped at the
     * application level.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableServiceBackupWithResponse(String serviceId, RequestOptions requestOptions) {
        return disableServiceBackupWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the service and the partitions under this service
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceBackupConfigurationInfoWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getServiceBackupConfigurationInfo(
                                this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the service and the partitions under this service
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceBackupConfigurationInfoWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getServiceBackupConfigurationInfo(
                this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             policyName: String
     *             policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *             suspensionInfo: {
     *                 isSuspended: Boolean
     *                 suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric backup configuration information for the service and the partitions under this service
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceBackupConfigurationInfoWithResponse(
            String serviceId, RequestOptions requestOptions) {
        return getServiceBackupConfigurationInfoWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
     * the backups available in the backup store configured in the backup policy. It also allows filtering of the result
     * based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceBackupListWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getServiceBackupList(this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
     * the backups available in the backup store configured in the backup policy. It also allows filtering of the result
     * based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceBackupListWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getServiceBackupList(this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
     * the backups available in the backup store configured in the backup policy. It also allows filtering of the result
     * based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceBackupListWithResponse(String serviceId, RequestOptions requestOptions) {
        return getServiceBackupListWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
     * service are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendServiceBackupWithResponseAsync(String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.suspendServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
     * service are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendServiceBackupWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.suspendServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
     * service are now suspended for backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> suspendServiceBackupWithResponse(String serviceId, RequestOptions requestOptions) {
        return suspendServiceBackupWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
     * configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeServiceBackupWithResponseAsync(String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.resumeServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context));
    }

    /**
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
     * configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeServiceBackupWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.resumeServiceBackup(this.getHost(), serviceId, apiVersion, requestOptions, context);
    }

    /**
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
     * configured for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeServiceBackupWithResponse(String serviceId, RequestOptions requestOptions) {
        return resumeServiceBackupWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
     * policy description. In case the application or service, which is partition is part of, is already enabled for
     * backup then this operation would override the policy being used to take the periodic backup of this partition.
     * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enablePartitionBackupWithResponseAsync(
            String partitionId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.enablePartitionBackup(
                                this.getHost(),
                                partitionId,
                                apiVersion,
                                enableBackupDescription,
                                requestOptions,
                                context));
    }

    /**
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
     * policy description. In case the application or service, which is partition is part of, is already enabled for
     * backup then this operation would override the policy being used to take the periodic backup of this partition.
     * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enablePartitionBackupWithResponseAsync(
            String partitionId, BinaryData enableBackupDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.enablePartitionBackup(
                this.getHost(), partitionId, apiVersion, enableBackupDescription, requestOptions, context);
    }

    /**
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
     * policy description. In case the application or service, which is partition is part of, is already enabled for
     * backup then this operation would override the policy being used to take the periodic backup of this partition.
     * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupPolicyName: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enablePartitionBackupWithResponse(
            String partitionId, BinaryData enableBackupDescription, RequestOptions requestOptions) {
        return enablePartitionBackupWithResponseAsync(partitionId, enableBackupDescription, requestOptions).block();
    }

    /**
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it
     * can be disabled. In case the backup is enabled for the Service Fabric application or service, which this
     * partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the
     * higher level entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disablePartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.disablePartitionBackup(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it
     * can be disabled. In case the backup is enabled for the Service Fabric application or service, which this
     * partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the
     * higher level entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disablePartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.disablePartitionBackup(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it
     * can be disabled. In case the backup is enabled for the Service Fabric application or service, which this
     * partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the
     * higher level entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     cleanBackup: boolean
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disablePartitionBackupWithResponse(String partitionId, RequestOptions requestOptions) {
        return disablePartitionBackupWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     policyName: String
     *     policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *     suspensionInfo: {
     *         isSuspended: Boolean
     *         suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *     }
     *     serviceName: String
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric Backup configuration information for the specified partition along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupConfigurationInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionBackupConfigurationInfo(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     policyName: String
     *     policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *     suspensionInfo: {
     *         isSuspended: Boolean
     *         suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *     }
     *     serviceName: String
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric Backup configuration information for the specified partition along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupConfigurationInfoWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionBackupConfigurationInfo(
                this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     policyName: String
     *     policyInheritedFrom: String(Invalid/Partition/Service/Application)
     *     suspensionInfo: {
     *         isSuspended: Boolean
     *         suspensionInheritedFrom: String(Invalid/Partition/Service/Application)
     *     }
     *     serviceName: String
     *     partitionId: String
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Service Fabric Backup configuration information for the specified partition along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionBackupConfigurationInfoWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionBackupConfigurationInfoWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available
     * in the backup store configured in the backup policy. It also allows filtering of the result based on start and
     * end datetime or just fetching the latest available backup for the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupListWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionBackupList(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available
     * in the backup store configured in the backup policy. It also allows filtering of the result based on start and
     * end datetime or just fetching the latest available backup for the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupListWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionBackupList(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available
     * in the backup store configured in the backup policy. It also allows filtering of the result based on start and
     * end datetime or just fetching the latest available backup for the partition.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>Latest</td><td>String</td><td>No</td><td>Specifies whether to get only the most recent backup available for a partition for the specified time range.</td></tr>
     *     <tr><td>StartDateTimeFilter</td><td>String</td><td>No</td><td>Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.</td></tr>
     *     <tr><td>EndDateTimeFilter</td><td>String</td><td>No</td><td>Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionBackupListWithResponse(String partitionId, RequestOptions requestOptions) {
        return getPartitionBackupListWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendPartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.suspendPartitionBackup(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendPartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.suspendPartitionBackup(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> suspendPartitionBackupWithResponse(String partitionId, RequestOptions requestOptions) {
        return suspendPartitionBackupWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured
     * for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumePartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.resumePartitionBackup(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured
     * for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumePartitionBackupWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.resumePartitionBackup(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured
     * for the same.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumePartitionBackupWithResponse(String partitionId, RequestOptions requestOptions) {
        return resumePartitionBackupWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
     * backed up, then by default the new backup is created at the same backup storage. One can also override the same
     * by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress
     * can be tracked using the GetBackupProgress operation. In case, the operation times out, specify a greater backup
     * timeout value in the query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>BackupTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> backupPartitionWithResponseAsync(String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.backupPartition(this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
     * backed up, then by default the new backup is created at the same backup storage. One can also override the same
     * by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress
     * can be tracked using the GetBackupProgress operation. In case, the operation times out, specify a greater backup
     * timeout value in the query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>BackupTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> backupPartitionWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.backupPartition(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
     * backed up, then by default the new backup is created at the same backup storage. One can also override the same
     * by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress
     * can be tracked using the GetBackupProgress operation. In case, the operation times out, specify a greater backup
     * timeout value in the query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>BackupTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> backupPartitionWithResponse(String partitionId, RequestOptions requestOptions) {
        return backupPartitionWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Returns information about the state of the latest backup along with details or failure reason in case of
     * completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupState: String(Invalid/Accepted/BackupInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     backupId: String
     *     backupLocation: String
     *     epochOfLastBackupRecord: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     lsnOfLastBackupRecord: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a partition's backup along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupProgressWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionBackupProgress(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Returns information about the state of the latest backup along with details or failure reason in case of
     * completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupState: String(Invalid/Accepted/BackupInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     backupId: String
     *     backupLocation: String
     *     epochOfLastBackupRecord: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     lsnOfLastBackupRecord: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a partition's backup along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionBackupProgressWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionBackupProgress(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Returns information about the state of the latest backup along with details or failure reason in case of
     * completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupState: String(Invalid/Accepted/BackupInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     backupId: String
     *     backupLocation: String
     *     epochOfLastBackupRecord: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     lsnOfLastBackupRecord: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a partition's backup along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionBackupProgressWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionBackupProgressWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the
     * partition is already being periodically backed up, then by default the backup point is looked for in the storage
     * specified in backup policy. One can also override the same by specifying the backup storage details as part of
     * the restore partition description in body. Once the restore is initiated, its progress can be tracked using the
     * GetRestoreProgress operation. In case, the operation times out, specify a greater restore timeout value in the
     * query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>RestoreTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupId: String
     *     backupLocation: String
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param restorePartitionDescription Describes the parameters to restore the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restorePartitionWithResponseAsync(
            String partitionId, BinaryData restorePartitionDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.restorePartition(
                                this.getHost(),
                                partitionId,
                                apiVersion,
                                restorePartitionDescription,
                                requestOptions,
                                context));
    }

    /**
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the
     * partition is already being periodically backed up, then by default the backup point is looked for in the storage
     * specified in backup policy. One can also override the same by specifying the backup storage details as part of
     * the restore partition description in body. Once the restore is initiated, its progress can be tracked using the
     * GetRestoreProgress operation. In case, the operation times out, specify a greater restore timeout value in the
     * query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>RestoreTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupId: String
     *     backupLocation: String
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param restorePartitionDescription Describes the parameters to restore the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restorePartitionWithResponseAsync(
            String partitionId,
            BinaryData restorePartitionDescription,
            RequestOptions requestOptions,
            Context context) {
        final String apiVersion = "6.4";
        return service.restorePartition(
                this.getHost(), partitionId, apiVersion, restorePartitionDescription, requestOptions, context);
    }

    /**
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the
     * partition is already being periodically backed up, then by default the backup point is looked for in the storage
     * specified in backup policy. One can also override the same by specifying the backup storage details as part of
     * the restore partition description in body. Once the restore is initiated, its progress can be tracked using the
     * GetRestoreProgress operation. In case, the operation times out, specify a greater restore timeout value in the
     * query parameter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>RestoreTimeout</td><td>String</td><td>No</td><td>Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     backupId: String
     *     backupLocation: String
     *     backupStorage: {
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param restorePartitionDescription Describes the parameters to restore the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restorePartitionWithResponse(
            String partitionId, BinaryData restorePartitionDescription, RequestOptions requestOptions) {
        return restorePartitionWithResponseAsync(partitionId, restorePartitionDescription, requestOptions).block();
    }

    /**
     * Returns information about the state of the latest restore operation along with details or failure reason in case
     * of completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     restoreState: String(Invalid/Accepted/RestoreInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     restoredEpoch: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     restoredLsn: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a restore operation on a partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionRestoreProgressWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionRestoreProgress(
                                this.getHost(), partitionId, apiVersion, requestOptions, context));
    }

    /**
     * Returns information about the state of the latest restore operation along with details or failure reason in case
     * of completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     restoreState: String(Invalid/Accepted/RestoreInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     restoredEpoch: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     restoredLsn: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a restore operation on a partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionRestoreProgressWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionRestoreProgress(this.getHost(), partitionId, apiVersion, requestOptions, context);
    }

    /**
     * Returns information about the state of the latest restore operation along with details or failure reason in case
     * of completion.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     restoreState: String(Invalid/Accepted/RestoreInProgress/Success/Failure/Timeout)
     *     timeStampUtc: String
     *     restoredEpoch: {
     *         configurationVersion: String
     *         dataLossVersion: String
     *     }
     *     restoredLsn: String
     *     failureError: {
     *         code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *         message: String
     *     }
     * }
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describes the progress of a restore operation on a partition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionRestoreProgressWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionRestoreProgressWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
     * specified backup location (FileShare or Azure Blob Storage).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startDateTimeFilter: String
     *     endDateTimeFilter: String
     *     latest: Boolean
     *     storage: {
     *         friendlyName: String
     *     }
     *     backupEntity: {
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for
     *     enumerating backups.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups available for the specified backed up entity (Application, Service or Partition) at
     *     the specified backup location (FileShare or Azure Blob Storage) along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupsFromBackupLocationWithResponseAsync(
            BinaryData getBackupByStorageQueryDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getBackupsFromBackupLocation(
                                this.getHost(),
                                apiVersion,
                                getBackupByStorageQueryDescription,
                                requestOptions,
                                context));
    }

    /**
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
     * specified backup location (FileShare or Azure Blob Storage).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startDateTimeFilter: String
     *     endDateTimeFilter: String
     *     latest: Boolean
     *     storage: {
     *         friendlyName: String
     *     }
     *     backupEntity: {
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for
     *     enumerating backups.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups available for the specified backed up entity (Application, Service or Partition) at
     *     the specified backup location (FileShare or Azure Blob Storage) along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBackupsFromBackupLocationWithResponseAsync(
            BinaryData getBackupByStorageQueryDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getBackupsFromBackupLocation(
                this.getHost(), apiVersion, getBackupByStorageQueryDescription, requestOptions, context);
    }

    /**
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
     * specified backup location (FileShare or Azure Blob Storage).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>MaxResults</td><td>String</td><td>No</td><td>The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startDateTimeFilter: String
     *     endDateTimeFilter: String
     *     latest: Boolean
     *     storage: {
     *         friendlyName: String
     *     }
     *     backupEntity: {
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             backupId: String
     *             backupChainId: String
     *             applicationName: String
     *             serviceName: String
     *             partitionInformation: {
     *                 id: String
     *             }
     *             backupLocation: String
     *             backupType: String(Invalid/Full/Incremental)
     *             epochOfLastBackupRecord: {
     *                 configurationVersion: String
     *                 dataLossVersion: String
     *             }
     *             lsnOfLastBackupRecord: String
     *             creationTimeUtc: String
     *             serviceManifestVersion: String
     *             failureError: {
     *                 code: String(FABRIC_E_INVALID_PARTITION_KEY/FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR/FABRIC_E_INVALID_ADDRESS/FABRIC_E_APPLICATION_NOT_UPGRADING/FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR/FABRIC_E_FABRIC_NOT_UPGRADING/FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR/FABRIC_E_INVALID_CONFIGURATION/FABRIC_E_INVALID_NAME_URI/FABRIC_E_PATH_TOO_LONG/FABRIC_E_KEY_TOO_LARGE/FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED/FABRIC_E_INVALID_ATOMIC_GROUP/FABRIC_E_VALUE_EMPTY/FABRIC_E_NODE_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_NOT_FOUND/FABRIC_E_APPLICATION_NOT_FOUND/FABRIC_E_SERVICE_TYPE_NOT_FOUND/FABRIC_E_SERVICE_DOES_NOT_EXIST/FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND/FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND/FABRIC_E_PARTITION_NOT_FOUND/FABRIC_E_REPLICA_DOES_NOT_EXIST/FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST/FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND/FABRIC_E_DIRECTORY_NOT_FOUND/FABRIC_E_FABRIC_VERSION_NOT_FOUND/FABRIC_E_FILE_NOT_FOUND/FABRIC_E_NAME_DOES_NOT_EXIST/FABRIC_E_PROPERTY_DOES_NOT_EXIST/FABRIC_E_ENUMERATION_COMPLETED/FABRIC_E_SERVICE_MANIFEST_NOT_FOUND/FABRIC_E_KEY_NOT_FOUND/FABRIC_E_HEALTH_ENTITY_NOT_FOUND/FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_EXISTS/FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION/FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS/FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS/FABRIC_E_SERVICE_ALREADY_EXISTS/FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS/FABRIC_E_APPLICATION_TYPE_IN_USE/FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION/FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS/FABRIC_E_FABRIC_VERSION_IN_USE/FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS/FABRIC_E_NAME_ALREADY_EXISTS/FABRIC_E_NAME_NOT_EMPTY/FABRIC_E_PROPERTY_CHECK_FAILED/FABRIC_E_SERVICE_METADATA_MISMATCH/FABRIC_E_SERVICE_TYPE_MISMATCH/FABRIC_E_HEALTH_STALE_REPORT/FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED/FABRIC_E_NODE_HAS_NOT_STOPPED_YET/FABRIC_E_INSTANCE_ID_MISMATCH/FABRIC_E_VALUE_TOO_LARGE/FABRIC_E_NO_WRITE_QUORUM/FABRIC_E_NOT_PRIMARY/FABRIC_E_NOT_READY/FABRIC_E_RECONFIGURATION_PENDING/FABRIC_E_SERVICE_OFFLINE/E_ABORT/FABRIC_E_COMMUNICATION_ERROR/FABRIC_E_OPERATION_NOT_COMPLETE/FABRIC_E_TIMEOUT/FABRIC_E_NODE_IS_UP/E_FAIL/FABRIC_E_BACKUP_IS_ENABLED/FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH/FABRIC_E_INVALID_FOR_STATELESS_SERVICES/FABRIC_E_BACKUP_NOT_ENABLED/FABRIC_E_BACKUP_POLICY_NOT_EXISTING/FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING/FABRIC_E_BACKUP_IN_PROGRESS/FABRIC_E_RESTORE_IN_PROGRESS/FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING/FABRIC_E_INVALID_SERVICE_SCALING_POLICY/E_INVALIDARG/FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS/FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND/FABRIC_E_VOLUME_ALREADY_EXISTS/FABRIC_E_VOLUME_NOT_FOUND/SerializationError/FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR/FABRIC_E_CERTIFICATE_NOT_FOUND)
     *                 message: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for
     *     enumerating backups.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of backups available for the specified backed up entity (Application, Service or Partition) at
     *     the specified backup location (FileShare or Azure Blob Storage) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBackupsFromBackupLocationWithResponse(
            BinaryData getBackupByStorageQueryDescription, RequestOptions requestOptions) {
        return getBackupsFromBackupLocationWithResponseAsync(getBackupByStorageQueryDescription, requestOptions)
                .block();
    }

    /**
     * Creates the specified Service Fabric name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     * }
     * }</pre>
     *
     * @param nameDescription Describes the Service Fabric name to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createNameWithResponseAsync(BinaryData nameDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.createName(this.getHost(), apiVersion, nameDescription, requestOptions, context));
    }

    /**
     * Creates the specified Service Fabric name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     * }
     * }</pre>
     *
     * @param nameDescription Describes the Service Fabric name to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createNameWithResponseAsync(
            BinaryData nameDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.createName(this.getHost(), apiVersion, nameDescription, requestOptions, context);
    }

    /**
     * Creates the specified Service Fabric name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     * }
     * }</pre>
     *
     * @param nameDescription Describes the Service Fabric name to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createNameWithResponse(BinaryData nameDescription, RequestOptions requestOptions) {
        return createNameWithResponseAsync(nameDescription, requestOptions).block();
    }

    /**
     * Returns whether the specified Service Fabric name exists.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getNameExistsInfoWithResponseAsync(String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getNameExistsInfo(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * Returns whether the specified Service Fabric name exists.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getNameExistsInfoWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getNameExistsInfo(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * Returns whether the specified Service Fabric name exists.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getNameExistsInfoWithResponse(String nameId, RequestOptions requestOptions) {
        return getNameExistsInfoWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
     * child properties will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteNameWithResponseAsync(String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.deleteName(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
     * child properties will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteNameWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteName(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
     * child properties will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNameWithResponse(String nameId, RequestOptions requestOptions) {
        return deleteNameWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
     * results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
     * doesn't exist will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Recursive</td><td>String</td><td>No</td><td>Allows specifying that the search performed should be recursive.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     subNames: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged list of Service Fabric names along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSubNameInfoListWithResponseAsync(
            String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getSubNameInfoList(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
     * results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
     * doesn't exist will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Recursive</td><td>String</td><td>No</td><td>Allows specifying that the search performed should be recursive.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     subNames: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged list of Service Fabric names along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSubNameInfoListWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getSubNameInfoList(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
     * results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
     * doesn't exist will fail.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>Recursive</td><td>String</td><td>No</td><td>Allows specifying that the search performed should be recursive.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     subNames: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged list of Service Fabric names along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSubNameInfoListWithResponse(String nameId, RequestOptions requestOptions) {
        return getSubNameInfoListWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets
     * the information about these properties in a paged list. The information includes name, value, and metadata about
     * each of the properties.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>IncludeValues</td><td>String</td><td>No</td><td>Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     properties: [
     *         {
     *             name: String
     *             value: {
     *             }
     *             metadata: {
     *                 typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *                 customTypeId: String
     *                 parent: String
     *                 sizeInBytes: Integer
     *                 lastModifiedUtcTimestamp: String
     *                 sequenceNumber: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paged list of Service Fabric properties under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPropertyInfoListWithResponseAsync(
            String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getPropertyInfoList(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets
     * the information about these properties in a paged list. The information includes name, value, and metadata about
     * each of the properties.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>IncludeValues</td><td>String</td><td>No</td><td>Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     properties: [
     *         {
     *             name: String
     *             value: {
     *             }
     *             metadata: {
     *                 typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *                 customTypeId: String
     *                 parent: String
     *                 sizeInBytes: Integer
     *                 lastModifiedUtcTimestamp: String
     *                 sequenceNumber: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paged list of Service Fabric properties under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPropertyInfoListWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPropertyInfoList(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets
     * the information about these properties in a paged list. The information includes name, value, and metadata about
     * each of the properties.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>IncludeValues</td><td>String</td><td>No</td><td>Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.</td></tr>
     *     <tr><td>ContinuationToken</td><td>String</td><td>No</td><td>The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     isConsistent: Boolean
     *     properties: [
     *         {
     *             name: String
     *             value: {
     *             }
     *             metadata: {
     *                 typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *                 customTypeId: String
     *                 parent: String
     *                 sizeInBytes: Integer
     *                 lastModifiedUtcTimestamp: String
     *                 sequenceNumber: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paged list of Service Fabric properties under a given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPropertyInfoListWithResponse(String nameId, RequestOptions requestOptions) {
        return getPropertyInfoListWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     propertyName: String
     *     customTypeId: String
     *     value: {
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyDescription Describes the Service Fabric property to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putPropertyWithResponseAsync(
            String nameId, BinaryData propertyDescription, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.putProperty(
                                this.getHost(), apiVersion, nameId, propertyDescription, requestOptions, context));
    }

    /**
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     propertyName: String
     *     customTypeId: String
     *     value: {
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyDescription Describes the Service Fabric property to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putPropertyWithResponseAsync(
            String nameId, BinaryData propertyDescription, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.putProperty(this.getHost(), apiVersion, nameId, propertyDescription, requestOptions, context);
    }

    /**
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     propertyName: String
     *     customTypeId: String
     *     value: {
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyDescription Describes the Service Fabric property to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putPropertyWithResponse(
            String nameId, BinaryData propertyDescription, RequestOptions requestOptions) {
        return putPropertyWithResponseAsync(nameId, propertyDescription, requestOptions).block();
    }

    /**
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     value: {
     *     }
     *     metadata: {
     *         typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *         customTypeId: String
     *         parent: String
     *         sizeInBytes: Integer
     *         lastModifiedUtcTimestamp: String
     *         sequenceNumber: String
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified Service Fabric property under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPropertyInfoWithResponseAsync(String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.getPropertyInfo(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     value: {
     *     }
     *     metadata: {
     *         typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *         customTypeId: String
     *         parent: String
     *         sizeInBytes: Integer
     *         lastModifiedUtcTimestamp: String
     *         sequenceNumber: String
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified Service Fabric property under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPropertyInfoWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.getPropertyInfo(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     value: {
     *     }
     *     metadata: {
     *         typeId: String(Invalid/Binary/Int64/Double/String/Guid)
     *         customTypeId: String
     *         parent: String
     *         sizeInBytes: Integer
     *         lastModifiedUtcTimestamp: String
     *         sequenceNumber: String
     *     }
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified Service Fabric property under a given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPropertyInfoWithResponse(String nameId, RequestOptions requestOptions) {
        return getPropertyInfoWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be
     * deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePropertyWithResponseAsync(String nameId, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context -> service.deleteProperty(this.getHost(), apiVersion, nameId, requestOptions, context));
    }

    /**
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be
     * deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePropertyWithResponseAsync(
            String nameId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.deleteProperty(this.getHost(), apiVersion, nameId, requestOptions, context);
    }

    /**
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be
     * deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>PropertyName</td><td>String</td><td>Yes</td><td>Specifies the name of the property to get.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePropertyWithResponse(String nameId, RequestOptions requestOptions) {
        return deletePropertyWithResponseAsync(nameId, requestOptions).block();
    }

    /**
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operations: [
     *         {
     *             propertyName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @return derived from PropertyBatchInfo along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitPropertyBatchWithResponseAsync(
            String nameId, BinaryData propertyBatchDescriptionList, RequestOptions requestOptions) {
        final String apiVersion = "6.0";
        return FluxUtil.withContext(
                context ->
                        service.submitPropertyBatch(
                                this.getHost(),
                                apiVersion,
                                nameId,
                                propertyBatchDescriptionList,
                                requestOptions,
                                context));
    }

    /**
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operations: [
     *         {
     *             propertyName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @return derived from PropertyBatchInfo along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitPropertyBatchWithResponseAsync(
            String nameId, BinaryData propertyBatchDescriptionList, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.0";
        return service.submitPropertyBatch(
                this.getHost(), apiVersion, nameId, propertyBatchDescriptionList, requestOptions, context);
    }

    /**
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.0'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operations: [
     *         {
     *             propertyName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @return derived from PropertyBatchInfo along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitPropertyBatchWithResponse(
            String nameId, BinaryData propertyBatchDescriptionList, RequestOptions requestOptions) {
        return submitPropertyBatchWithResponseAsync(nameId, propertyBatchDescriptionList, requestOptions).block();
    }

    /**
     * The response is list of ClusterEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ClusterEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getClusterEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of ClusterEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ClusterEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClusterEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getClusterEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of ClusterEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ClusterEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClusterEventListWithResponse(RequestOptions requestOptions) {
        return getClusterEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of ContainerInstanceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ContainerInstanceEvent objects along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getContainersEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.2-preview";
        return FluxUtil.withContext(
                context -> service.getContainersEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of ContainerInstanceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ContainerInstanceEvent objects along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getContainersEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.2-preview";
        return service.getContainersEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of ContainerInstanceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.2-preview'.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ContainerInstanceEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getContainersEventListWithResponse(RequestOptions requestOptions) {
        return getContainersEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeEventListWithResponseAsync(
            String nodeName, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getNodeEventList(this.getHost(), apiVersion, nodeName, requestOptions, context));
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodeEventListWithResponseAsync(
            String nodeName, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getNodeEventList(this.getHost(), apiVersion, nodeName, requestOptions, context);
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param nodeName The name of the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeEventListWithResponse(String nodeName, RequestOptions requestOptions) {
        return getNodeEventListWithResponseAsync(nodeName, requestOptions).block();
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodesEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getNodesEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNodesEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getNodesEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         nodeName: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of NodeEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodesEventListWithResponse(RequestOptions requestOptions) {
        return getNodesEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationEventListWithResponseAsync(
            String applicationId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getApplicationEventList(
                                this.getHost(), apiVersion, applicationId, requestOptions, context));
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationEventListWithResponseAsync(
            String applicationId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getApplicationEventList(this.getHost(), apiVersion, applicationId, requestOptions, context);
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationEventListWithResponse(
            String applicationId, RequestOptions requestOptions) {
        return getApplicationEventListWithResponseAsync(applicationId, requestOptions).block();
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationsEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getApplicationsEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getApplicationsEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getApplicationsEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         applicationId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ApplicationEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationsEventListWithResponse(RequestOptions requestOptions) {
        return getApplicationsEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceEventListWithResponseAsync(
            String serviceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getServiceEventList(this.getHost(), apiVersion, serviceId, requestOptions, context));
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceEventListWithResponseAsync(
            String serviceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getServiceEventList(this.getHost(), apiVersion, serviceId, requestOptions, context);
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceEventListWithResponse(String serviceId, RequestOptions requestOptions) {
        return getServiceEventListWithResponseAsync(serviceId, requestOptions).block();
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServicesEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getServicesEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServicesEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getServicesEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         serviceId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ServiceEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServicesEventListWithResponse(RequestOptions requestOptions) {
        return getServicesEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionEventListWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionEventList(
                                this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionEventListWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionEventList(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionEventListWithResponse(String partitionId, RequestOptions requestOptions) {
        return getPartitionEventListWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionsEventListWithResponseAsync(RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context -> service.getPartitionsEventList(this.getHost(), apiVersion, requestOptions, context));
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionsEventListWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionsEventList(this.getHost(), apiVersion, requestOptions, context);
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of PartitionEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionsEventListWithResponse(RequestOptions requestOptions) {
        return getPartitionsEventListWithResponseAsync(requestOptions).block();
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionReplicaEventListWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionReplicaEventList(
                                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context));
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionReplicaEventListWithResponseAsync(
            String partitionId, String replicaId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionReplicaEventList(
                this.getHost(), apiVersion, partitionId, replicaId, requestOptions, context);
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionReplicaEventListWithResponse(
            String partitionId, String replicaId, RequestOptions requestOptions) {
        return getPartitionReplicaEventListWithResponseAsync(partitionId, replicaId, requestOptions).block();
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionReplicasEventListWithResponseAsync(
            String partitionId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getPartitionReplicasEventList(
                                this.getHost(), apiVersion, partitionId, requestOptions, context));
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPartitionReplicasEventListWithResponseAsync(
            String partitionId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getPartitionReplicasEventList(this.getHost(), apiVersion, partitionId, requestOptions, context);
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     *     <tr><td>StartTimeUtc</td><td>String</td><td>Yes</td><td>The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EndTimeUtc</td><td>String</td><td>Yes</td><td>The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</td></tr>
     *     <tr><td>EventsTypesFilter</td><td>String</td><td>No</td><td>This is a comma separated string specifying the types of FabricEvents that should only be included in the response.</td></tr>
     *     <tr><td>ExcludeAnalysisEvents</td><td>String</td><td>No</td><td>This param disables the retrieval of AnalysisEvents if true is passed.</td></tr>
     *     <tr><td>SkipCorrelationLookup</td><td>String</td><td>No</td><td>This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *         partitionId: String
     *         replicaId: long
     *     }
     * ]
     * }</pre>
     *
     * @param partitionId The identity of the partition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of ReplicaEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPartitionReplicasEventListWithResponse(
            String partitionId, RequestOptions requestOptions) {
        return getPartitionReplicasEventListWithResponseAsync(partitionId, requestOptions).block();
    }

    /**
     * The response is list of FabricEvents.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param eventInstanceId The EventInstanceId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of FabricEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCorrelatedEventListWithResponseAsync(
            String eventInstanceId, RequestOptions requestOptions) {
        final String apiVersion = "6.4";
        return FluxUtil.withContext(
                context ->
                        service.getCorrelatedEventList(
                                this.getHost(), apiVersion, eventInstanceId, requestOptions, context));
    }

    /**
     * The response is list of FabricEvents.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param eventInstanceId The EventInstanceId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of FabricEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCorrelatedEventListWithResponseAsync(
            String eventInstanceId, RequestOptions requestOptions, Context context) {
        final String apiVersion = "6.4";
        return service.getCorrelatedEventList(this.getHost(), apiVersion, eventInstanceId, requestOptions, context);
    }

    /**
     * The response is list of FabricEvents.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>The version of the API. This parameter is required and its value must be '6.4'.
     *
     * Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
     *
     * Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.</td></tr>
     *     <tr><td>timeout</td><td>String</td><td>No</td><td>The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         eventInstanceId: String
     *         category: String
     *         timeStamp: String
     *         hasCorrelatedEvents: Boolean
     *     }
     * ]
     * }</pre>
     *
     * @param eventInstanceId The EventInstanceId.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of FabricEvent objects along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCorrelatedEventListWithResponse(
            String eventInstanceId, RequestOptions requestOptions) {
        return getCorrelatedEventListWithResponseAsync(eventInstanceId, requestOptions).block();
    }
}
