// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MeshSecretValues. */
public final class MeshSecretValuesImpl {
    /** The proxy service used to perform REST calls. */
    private final MeshSecretValuesService service;

    /** The service client containing this operation class. */
    private final ServiceFabricClientAPIsClientImpl client;

    /**
     * Initializes an instance of MeshSecretValuesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MeshSecretValuesImpl(ServiceFabricClientAPIsClientImpl client) {
        this.service =
                RestProxy.create(
                        MeshSecretValuesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricClientAPIsMeshSecretValues to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricClientA")
    private interface MeshSecretValuesService {
        @Put("/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addValue(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
                @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
                @BodyParam("application/json") BinaryData secretValueResourceDescription,
                RequestOptions requestOptions,
                Context context);

        @Get("/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
                @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
                RequestOptions requestOptions,
                Context context);

        @Delete("/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
                @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Resources/Secrets/{secretResourceName}/values")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
                RequestOptions requestOptions,
                Context context);

        @Post("/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> show(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
                @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a value of a secret resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addValueWithResponseAsync(
            String secretResourceName,
            String secretValueResourceName,
            BinaryData secretValueResourceDescription,
            RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addValue(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                secretResourceName,
                                secretValueResourceName,
                                secretValueResourceDescription,
                                requestOptions,
                                context));
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a value of a secret resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addValueWithResponseAsync(
            String secretResourceName,
            String secretValueResourceName,
            BinaryData secretValueResourceDescription,
            RequestOptions requestOptions,
            Context context) {
        return service.addValue(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                secretResourceName,
                secretValueResourceName,
                secretValueResourceDescription,
                requestOptions,
                context);
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type describes a value of a secret resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addValueWithResponse(
            String secretResourceName,
            String secretValueResourceName,
            BinaryData secretValueResourceDescription,
            RequestOptions requestOptions) {
        return addValueWithResponseAsync(
                        secretResourceName, secretValueResourceName, secretValueResourceDescription, requestOptions)
                .block();
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified named secret value resources along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                secretResourceName,
                                secretValueResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified named secret value resources along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions, Context context) {
        return service.get(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                secretResourceName,
                secretValueResourceName,
                requestOptions,
                context);
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     properties: {
     *         value: String
     *     }
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the specified named secret value resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return getWithResponseAsync(secretResourceName, secretValueResourceName, requestOptions).block();
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.delete(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                secretResourceName,
                                secretValueResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions, Context context) {
        return service.delete(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                secretResourceName,
                secretValueResourceName,
                requestOptions,
                context);
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return deleteWithResponseAsync(secretResourceName, secretValueResourceName, requestOptions).block();
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 value: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about all secret value resources of the specified secret resource along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(String secretResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.list(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                secretResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 value: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about all secret value resources of the specified secret resource along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(
            String secretResourceName, RequestOptions requestOptions, Context context) {
        return service.list(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                secretResourceName,
                requestOptions,
                context);
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             name: String
     *             properties: {
     *                 value: String
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about all secret value resources of the specified secret resource along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(String secretResourceName, RequestOptions requestOptions) {
        return listWithResponseAsync(secretResourceName, requestOptions).block();
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: String
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type represents the unencrypted value of the secret along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> showWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.show(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                secretResourceName,
                                secretValueResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: String
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type represents the unencrypted value of the secret along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> showWithResponseAsync(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions, Context context) {
        return service.show(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                secretResourceName,
                secretValueResourceName,
                requestOptions,
                context);
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: String
     * }
     * }</pre>
     *
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return this type represents the unencrypted value of the secret along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> showWithResponse(
            String secretResourceName, String secretValueResourceName, RequestOptions requestOptions) {
        return showWithResponseAsync(secretResourceName, secretValueResourceName, requestOptions).block();
    }
}
