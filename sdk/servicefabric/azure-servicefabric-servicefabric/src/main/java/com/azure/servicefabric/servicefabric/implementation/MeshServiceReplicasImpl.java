// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MeshServiceReplicas. */
public final class MeshServiceReplicasImpl {
    /** The proxy service used to perform REST calls. */
    private final MeshServiceReplicasService service;

    /** The service client containing this operation class. */
    private final ServiceFabricClientAPIsClientImpl client;

    /**
     * Initializes an instance of MeshServiceReplicasImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MeshServiceReplicasImpl(ServiceFabricClientAPIsClientImpl client) {
        this.service =
                RestProxy.create(
                        MeshServiceReplicasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricClientAPIsMeshServiceReplicas to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricClientA")
    private interface MeshServiceReplicasService {
        @Get("/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationResourceName", encoded = true) String applicationResourceName,
                @PathParam(value = "serviceResourceName", encoded = true) String serviceResourceName,
                @PathParam(value = "replicaName", encoded = true) String replicaName,
                RequestOptions requestOptions,
                Context context);

        @Get("/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationResourceName", encoded = true) String applicationResourceName,
                @PathParam(value = "serviceResourceName", encoded = true) String serviceResourceName,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets the information about the service replica with the given name. The information include the description and
     * other properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     osType: String(Linux/Windows)
     *     codePackages: [
     *         {
     *             name: String
     *             image: String
     *             imageRegistryCredential: {
     *                 server: String
     *                 username: String
     *                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                 password: String
     *             }
     *             entryPoint: String
     *             commands: [
     *                 String
     *             ]
     *             environmentVariables: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             settings: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             labels: [
     *                 {
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             endpoints: [
     *                 {
     *                     name: String
     *                     port: Integer
     *                 }
     *             ]
     *             resources: {
     *                 requests: {
     *                     memoryInGB: double
     *                     cpu: double
     *                 }
     *                 limits: {
     *                     memoryInGB: Double
     *                     cpu: Double
     *                 }
     *             }
     *             volumeRefs: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                 }
     *             ]
     *             volumes: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                     creationParameters: {
     *                         description: String
     *                     }
     *                 }
     *             ]
     *             diagnostics: {
     *                 enabled: Boolean
     *                 sinkRefs: [
     *                     String
     *                 ]
     *             }
     *             reliableCollectionsRefs: [
     *                 {
     *                     name: String
     *                     doNotPersistState: Boolean
     *                 }
     *             ]
     *             instanceView: {
     *                 restartCount: Integer
     *                 currentState: {
     *                     state: String
     *                     startTime: String
     *                     exitCode: String
     *                     finishTime: String
     *                     detailStatus: String
     *                 }
     *                 previousState: (recursive schema, see previousState above)
     *                 events: [
     *                     {
     *                         name: String
     *                         count: Integer
     *                         firstTimestamp: String
     *                         lastTimestamp: String
     *                         message: String
     *                         type: String
     *                     }
     *                 ]
     *             }
     *             livenessProbe: [
     *                 {
     *                     initialDelaySeconds: Integer
     *                     periodSeconds: Integer
     *                     timeoutSeconds: Integer
     *                     successThreshold: Integer
     *                     failureThreshold: Integer
     *                     exec: {
     *                         command: String
     *                     }
     *                     httpGet: {
     *                         port: int
     *                         path: String
     *                         host: String
     *                         httpHeaders: [
     *                             {
     *                                 name: String
     *                                 value: String
     *                             }
     *                         ]
     *                         scheme: String(http/https)
     *                     }
     *                     tcpSocket: {
     *                         port: int
     *                     }
     *                 }
     *             ]
     *             readinessProbe: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     networkRefs: [
     *         {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *     ]
     *     diagnostics: (recursive schema, see diagnostics above)
     *     replicaName: String
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the service replica with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String applicationResourceName,
            String serviceResourceName,
            String replicaName,
            RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                applicationResourceName,
                                serviceResourceName,
                                replicaName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about the service replica with the given name. The information include the description and
     * other properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     osType: String(Linux/Windows)
     *     codePackages: [
     *         {
     *             name: String
     *             image: String
     *             imageRegistryCredential: {
     *                 server: String
     *                 username: String
     *                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                 password: String
     *             }
     *             entryPoint: String
     *             commands: [
     *                 String
     *             ]
     *             environmentVariables: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             settings: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             labels: [
     *                 {
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             endpoints: [
     *                 {
     *                     name: String
     *                     port: Integer
     *                 }
     *             ]
     *             resources: {
     *                 requests: {
     *                     memoryInGB: double
     *                     cpu: double
     *                 }
     *                 limits: {
     *                     memoryInGB: Double
     *                     cpu: Double
     *                 }
     *             }
     *             volumeRefs: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                 }
     *             ]
     *             volumes: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                     creationParameters: {
     *                         description: String
     *                     }
     *                 }
     *             ]
     *             diagnostics: {
     *                 enabled: Boolean
     *                 sinkRefs: [
     *                     String
     *                 ]
     *             }
     *             reliableCollectionsRefs: [
     *                 {
     *                     name: String
     *                     doNotPersistState: Boolean
     *                 }
     *             ]
     *             instanceView: {
     *                 restartCount: Integer
     *                 currentState: {
     *                     state: String
     *                     startTime: String
     *                     exitCode: String
     *                     finishTime: String
     *                     detailStatus: String
     *                 }
     *                 previousState: (recursive schema, see previousState above)
     *                 events: [
     *                     {
     *                         name: String
     *                         count: Integer
     *                         firstTimestamp: String
     *                         lastTimestamp: String
     *                         message: String
     *                         type: String
     *                     }
     *                 ]
     *             }
     *             livenessProbe: [
     *                 {
     *                     initialDelaySeconds: Integer
     *                     periodSeconds: Integer
     *                     timeoutSeconds: Integer
     *                     successThreshold: Integer
     *                     failureThreshold: Integer
     *                     exec: {
     *                         command: String
     *                     }
     *                     httpGet: {
     *                         port: int
     *                         path: String
     *                         host: String
     *                         httpHeaders: [
     *                             {
     *                                 name: String
     *                                 value: String
     *                             }
     *                         ]
     *                         scheme: String(http/https)
     *                     }
     *                     tcpSocket: {
     *                         port: int
     *                     }
     *                 }
     *             ]
     *             readinessProbe: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     networkRefs: [
     *         {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *     ]
     *     diagnostics: (recursive schema, see diagnostics above)
     *     replicaName: String
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the service replica with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String applicationResourceName,
            String serviceResourceName,
            String replicaName,
            RequestOptions requestOptions,
            Context context) {
        return service.get(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                applicationResourceName,
                serviceResourceName,
                replicaName,
                requestOptions,
                context);
    }

    /**
     * Gets the information about the service replica with the given name. The information include the description and
     * other properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     osType: String(Linux/Windows)
     *     codePackages: [
     *         {
     *             name: String
     *             image: String
     *             imageRegistryCredential: {
     *                 server: String
     *                 username: String
     *                 passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                 password: String
     *             }
     *             entryPoint: String
     *             commands: [
     *                 String
     *             ]
     *             environmentVariables: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             settings: [
     *                 {
     *                     type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             labels: [
     *                 {
     *                     name: String
     *                     value: String
     *                 }
     *             ]
     *             endpoints: [
     *                 {
     *                     name: String
     *                     port: Integer
     *                 }
     *             ]
     *             resources: {
     *                 requests: {
     *                     memoryInGB: double
     *                     cpu: double
     *                 }
     *                 limits: {
     *                     memoryInGB: Double
     *                     cpu: Double
     *                 }
     *             }
     *             volumeRefs: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                 }
     *             ]
     *             volumes: [
     *                 {
     *                     name: String
     *                     readOnly: Boolean
     *                     destinationPath: String
     *                     creationParameters: {
     *                         description: String
     *                     }
     *                 }
     *             ]
     *             diagnostics: {
     *                 enabled: Boolean
     *                 sinkRefs: [
     *                     String
     *                 ]
     *             }
     *             reliableCollectionsRefs: [
     *                 {
     *                     name: String
     *                     doNotPersistState: Boolean
     *                 }
     *             ]
     *             instanceView: {
     *                 restartCount: Integer
     *                 currentState: {
     *                     state: String
     *                     startTime: String
     *                     exitCode: String
     *                     finishTime: String
     *                     detailStatus: String
     *                 }
     *                 previousState: (recursive schema, see previousState above)
     *                 events: [
     *                     {
     *                         name: String
     *                         count: Integer
     *                         firstTimestamp: String
     *                         lastTimestamp: String
     *                         message: String
     *                         type: String
     *                     }
     *                 ]
     *             }
     *             livenessProbe: [
     *                 {
     *                     initialDelaySeconds: Integer
     *                     periodSeconds: Integer
     *                     timeoutSeconds: Integer
     *                     successThreshold: Integer
     *                     failureThreshold: Integer
     *                     exec: {
     *                         command: String
     *                     }
     *                     httpGet: {
     *                         port: int
     *                         path: String
     *                         host: String
     *                         httpHeaders: [
     *                             {
     *                                 name: String
     *                                 value: String
     *                             }
     *                         ]
     *                         scheme: String(http/https)
     *                     }
     *                     tcpSocket: {
     *                         port: int
     *                     }
     *                 }
     *             ]
     *             readinessProbe: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     networkRefs: [
     *         {
     *             name: String
     *             endpointRefs: [
     *                 {
     *                     name: String
     *                 }
     *             ]
     *         }
     *     ]
     *     diagnostics: (recursive schema, see diagnostics above)
     *     replicaName: String
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about the service replica with the given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(
            String applicationResourceName,
            String serviceResourceName,
            String replicaName,
            RequestOptions requestOptions) {
        return getWithResponseAsync(applicationResourceName, serviceResourceName, replicaName, requestOptions).block();
    }

    /**
     * Gets the information about all replicas of a service. The information include the description and other
     * properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             osType: String(Linux/Windows)
     *             codePackages: [
     *                 {
     *                     name: String
     *                     image: String
     *                     imageRegistryCredential: {
     *                         server: String
     *                         username: String
     *                         passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                         password: String
     *                     }
     *                     entryPoint: String
     *                     commands: [
     *                         String
     *                     ]
     *                     environmentVariables: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     settings: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     labels: [
     *                         {
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     endpoints: [
     *                         {
     *                             name: String
     *                             port: Integer
     *                         }
     *                     ]
     *                     resources: {
     *                         requests: {
     *                             memoryInGB: double
     *                             cpu: double
     *                         }
     *                         limits: {
     *                             memoryInGB: Double
     *                             cpu: Double
     *                         }
     *                     }
     *                     volumeRefs: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                         }
     *                     ]
     *                     volumes: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                             creationParameters: {
     *                                 description: String
     *                             }
     *                         }
     *                     ]
     *                     diagnostics: {
     *                         enabled: Boolean
     *                         sinkRefs: [
     *                             String
     *                         ]
     *                     }
     *                     reliableCollectionsRefs: [
     *                         {
     *                             name: String
     *                             doNotPersistState: Boolean
     *                         }
     *                     ]
     *                     instanceView: {
     *                         restartCount: Integer
     *                         currentState: {
     *                             state: String
     *                             startTime: String
     *                             exitCode: String
     *                             finishTime: String
     *                             detailStatus: String
     *                         }
     *                         previousState: (recursive schema, see previousState above)
     *                         events: [
     *                             {
     *                                 name: String
     *                                 count: Integer
     *                                 firstTimestamp: String
     *                                 lastTimestamp: String
     *                                 message: String
     *                                 type: String
     *                             }
     *                         ]
     *                     }
     *                     livenessProbe: [
     *                         {
     *                             initialDelaySeconds: Integer
     *                             periodSeconds: Integer
     *                             timeoutSeconds: Integer
     *                             successThreshold: Integer
     *                             failureThreshold: Integer
     *                             exec: {
     *                                 command: String
     *                             }
     *                             httpGet: {
     *                                 port: int
     *                                 path: String
     *                                 host: String
     *                                 httpHeaders: [
     *                                     {
     *                                         name: String
     *                                         value: String
     *                                     }
     *                                 ]
     *                                 scheme: String(http/https)
     *                             }
     *                             tcpSocket: {
     *                                 port: int
     *                             }
     *                         }
     *                     ]
     *                     readinessProbe: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             networkRefs: [
     *                 {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *             ]
     *             diagnostics: (recursive schema, see diagnostics above)
     *             replicaName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all replicas of a service along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(
            String applicationResourceName, String serviceResourceName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.list(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                applicationResourceName,
                                serviceResourceName,
                                requestOptions,
                                context));
    }

    /**
     * Gets the information about all replicas of a service. The information include the description and other
     * properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             osType: String(Linux/Windows)
     *             codePackages: [
     *                 {
     *                     name: String
     *                     image: String
     *                     imageRegistryCredential: {
     *                         server: String
     *                         username: String
     *                         passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                         password: String
     *                     }
     *                     entryPoint: String
     *                     commands: [
     *                         String
     *                     ]
     *                     environmentVariables: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     settings: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     labels: [
     *                         {
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     endpoints: [
     *                         {
     *                             name: String
     *                             port: Integer
     *                         }
     *                     ]
     *                     resources: {
     *                         requests: {
     *                             memoryInGB: double
     *                             cpu: double
     *                         }
     *                         limits: {
     *                             memoryInGB: Double
     *                             cpu: Double
     *                         }
     *                     }
     *                     volumeRefs: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                         }
     *                     ]
     *                     volumes: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                             creationParameters: {
     *                                 description: String
     *                             }
     *                         }
     *                     ]
     *                     diagnostics: {
     *                         enabled: Boolean
     *                         sinkRefs: [
     *                             String
     *                         ]
     *                     }
     *                     reliableCollectionsRefs: [
     *                         {
     *                             name: String
     *                             doNotPersistState: Boolean
     *                         }
     *                     ]
     *                     instanceView: {
     *                         restartCount: Integer
     *                         currentState: {
     *                             state: String
     *                             startTime: String
     *                             exitCode: String
     *                             finishTime: String
     *                             detailStatus: String
     *                         }
     *                         previousState: (recursive schema, see previousState above)
     *                         events: [
     *                             {
     *                                 name: String
     *                                 count: Integer
     *                                 firstTimestamp: String
     *                                 lastTimestamp: String
     *                                 message: String
     *                                 type: String
     *                             }
     *                         ]
     *                     }
     *                     livenessProbe: [
     *                         {
     *                             initialDelaySeconds: Integer
     *                             periodSeconds: Integer
     *                             timeoutSeconds: Integer
     *                             successThreshold: Integer
     *                             failureThreshold: Integer
     *                             exec: {
     *                                 command: String
     *                             }
     *                             httpGet: {
     *                                 port: int
     *                                 path: String
     *                                 host: String
     *                                 httpHeaders: [
     *                                     {
     *                                         name: String
     *                                         value: String
     *                                     }
     *                                 ]
     *                                 scheme: String(http/https)
     *                             }
     *                             tcpSocket: {
     *                                 port: int
     *                             }
     *                         }
     *                     ]
     *                     readinessProbe: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             networkRefs: [
     *                 {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *             ]
     *             diagnostics: (recursive schema, see diagnostics above)
     *             replicaName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all replicas of a service along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(
            String applicationResourceName,
            String serviceResourceName,
            RequestOptions requestOptions,
            Context context) {
        return service.list(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                applicationResourceName,
                serviceResourceName,
                requestOptions,
                context);
    }

    /**
     * Gets the information about all replicas of a service. The information include the description and other
     * properties of the service replica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     continuationToken: String
     *     items: [
     *         {
     *             osType: String(Linux/Windows)
     *             codePackages: [
     *                 {
     *                     name: String
     *                     image: String
     *                     imageRegistryCredential: {
     *                         server: String
     *                         username: String
     *                         passwordType: String(ClearText/KeyVaultReference/SecretValueReference)
     *                         password: String
     *                     }
     *                     entryPoint: String
     *                     commands: [
     *                         String
     *                     ]
     *                     environmentVariables: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     settings: [
     *                         {
     *                             type: String(ClearText/KeyVaultReference/SecretValueReference)
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     labels: [
     *                         {
     *                             name: String
     *                             value: String
     *                         }
     *                     ]
     *                     endpoints: [
     *                         {
     *                             name: String
     *                             port: Integer
     *                         }
     *                     ]
     *                     resources: {
     *                         requests: {
     *                             memoryInGB: double
     *                             cpu: double
     *                         }
     *                         limits: {
     *                             memoryInGB: Double
     *                             cpu: Double
     *                         }
     *                     }
     *                     volumeRefs: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                         }
     *                     ]
     *                     volumes: [
     *                         {
     *                             name: String
     *                             readOnly: Boolean
     *                             destinationPath: String
     *                             creationParameters: {
     *                                 description: String
     *                             }
     *                         }
     *                     ]
     *                     diagnostics: {
     *                         enabled: Boolean
     *                         sinkRefs: [
     *                             String
     *                         ]
     *                     }
     *                     reliableCollectionsRefs: [
     *                         {
     *                             name: String
     *                             doNotPersistState: Boolean
     *                         }
     *                     ]
     *                     instanceView: {
     *                         restartCount: Integer
     *                         currentState: {
     *                             state: String
     *                             startTime: String
     *                             exitCode: String
     *                             finishTime: String
     *                             detailStatus: String
     *                         }
     *                         previousState: (recursive schema, see previousState above)
     *                         events: [
     *                             {
     *                                 name: String
     *                                 count: Integer
     *                                 firstTimestamp: String
     *                                 lastTimestamp: String
     *                                 message: String
     *                                 type: String
     *                             }
     *                         ]
     *                     }
     *                     livenessProbe: [
     *                         {
     *                             initialDelaySeconds: Integer
     *                             periodSeconds: Integer
     *                             timeoutSeconds: Integer
     *                             successThreshold: Integer
     *                             failureThreshold: Integer
     *                             exec: {
     *                                 command: String
     *                             }
     *                             httpGet: {
     *                                 port: int
     *                                 path: String
     *                                 host: String
     *                                 httpHeaders: [
     *                                     {
     *                                         name: String
     *                                         value: String
     *                                     }
     *                                 ]
     *                                 scheme: String(http/https)
     *                             }
     *                             tcpSocket: {
     *                                 port: int
     *                             }
     *                         }
     *                     ]
     *                     readinessProbe: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             networkRefs: [
     *                 {
     *                     name: String
     *                     endpointRefs: [
     *                         {
     *                             name: String
     *                         }
     *                     ]
     *                 }
     *             ]
     *             diagnostics: (recursive schema, see diagnostics above)
     *             replicaName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the information about all replicas of a service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(
            String applicationResourceName, String serviceResourceName, RequestOptions requestOptions) {
        return listWithResponseAsync(applicationResourceName, serviceResourceName, requestOptions).block();
    }
}
