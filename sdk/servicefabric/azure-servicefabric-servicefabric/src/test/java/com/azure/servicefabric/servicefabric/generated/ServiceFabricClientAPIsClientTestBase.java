// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.servicefabric.servicefabric.generated;

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.servicefabric.servicefabric.MeshApplicationClient;
import com.azure.servicefabric.servicefabric.MeshApplicationClientBuilder;
import com.azure.servicefabric.servicefabric.MeshCodePackageClient;
import com.azure.servicefabric.servicefabric.MeshCodePackageClientBuilder;
import com.azure.servicefabric.servicefabric.MeshGatewayClient;
import com.azure.servicefabric.servicefabric.MeshGatewayClientBuilder;
import com.azure.servicefabric.servicefabric.MeshNetworkClient;
import com.azure.servicefabric.servicefabric.MeshNetworkClientBuilder;
import com.azure.servicefabric.servicefabric.MeshSecretClient;
import com.azure.servicefabric.servicefabric.MeshSecretClientBuilder;
import com.azure.servicefabric.servicefabric.MeshSecretValueClient;
import com.azure.servicefabric.servicefabric.MeshSecretValueClientBuilder;
import com.azure.servicefabric.servicefabric.MeshServiceClient;
import com.azure.servicefabric.servicefabric.MeshServiceClientBuilder;
import com.azure.servicefabric.servicefabric.MeshServiceReplicaClient;
import com.azure.servicefabric.servicefabric.MeshServiceReplicaClientBuilder;
import com.azure.servicefabric.servicefabric.MeshVolumeClient;
import com.azure.servicefabric.servicefabric.MeshVolumeClientBuilder;
import com.azure.servicefabric.servicefabric.ServiceFabricClientAPIsClient;
import com.azure.servicefabric.servicefabric.ServiceFabricClientAPIsClientBuilder;
import com.azure.servicefabric.servicefabric.implementation.models.HostOptions;

class ServiceFabricClientAPIsClientTestBase extends TestBase {
    protected ServiceFabricClientAPIsClient serviceFabricClientAPIsClient;

    protected MeshSecretClient meshSecretClient;

    protected MeshSecretValueClient meshSecretValueClient;

    protected MeshVolumeClient meshVolumeClient;

    protected MeshNetworkClient meshNetworkClient;

    protected MeshApplicationClient meshApplicationClient;

    protected MeshServiceClient meshServiceClient;

    protected MeshCodePackageClient meshCodePackageClient;

    protected MeshServiceReplicaClient meshServiceReplicaClient;

    protected MeshGatewayClient meshGatewayClient;

    @Override
    protected void beforeTest() {
        ServiceFabricClientAPIsClientBuilder serviceFabricClientAPIsClientbuilder =
                new ServiceFabricClientAPIsClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            serviceFabricClientAPIsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            serviceFabricClientAPIsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        serviceFabricClientAPIsClient = serviceFabricClientAPIsClientbuilder.buildClient();

        MeshSecretClientBuilder meshSecretClientbuilder =
                new MeshSecretClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshSecretClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshSecretClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshSecretClient = meshSecretClientbuilder.buildClient();

        MeshSecretValueClientBuilder meshSecretValueClientbuilder =
                new MeshSecretValueClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshSecretValueClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshSecretValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshSecretValueClient = meshSecretValueClientbuilder.buildClient();

        MeshVolumeClientBuilder meshVolumeClientbuilder =
                new MeshVolumeClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshVolumeClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshVolumeClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshVolumeClient = meshVolumeClientbuilder.buildClient();

        MeshNetworkClientBuilder meshNetworkClientbuilder =
                new MeshNetworkClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshNetworkClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshNetworkClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshNetworkClient = meshNetworkClientbuilder.buildClient();

        MeshApplicationClientBuilder meshApplicationClientbuilder =
                new MeshApplicationClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshApplicationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshApplicationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshApplicationClient = meshApplicationClientbuilder.buildClient();

        MeshServiceClientBuilder meshServiceClientbuilder =
                new MeshServiceClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshServiceClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshServiceClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshServiceClient = meshServiceClientbuilder.buildClient();

        MeshCodePackageClientBuilder meshCodePackageClientbuilder =
                new MeshCodePackageClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshCodePackageClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshCodePackageClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshCodePackageClient = meshCodePackageClientbuilder.buildClient();

        MeshServiceReplicaClientBuilder meshServiceReplicaClientbuilder =
                new MeshServiceReplicaClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshServiceReplicaClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshServiceReplicaClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshServiceReplicaClient = meshServiceReplicaClientbuilder.buildClient();

        MeshGatewayClientBuilder meshGatewayClientbuilder =
                new MeshGatewayClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", HostOptions.HTTP_LOCALHOST19080))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            meshGatewayClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            meshGatewayClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        meshGatewayClient = meshGatewayClientbuilder.buildClient();
    }
}
