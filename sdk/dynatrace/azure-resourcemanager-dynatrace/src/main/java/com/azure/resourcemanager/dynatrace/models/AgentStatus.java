// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of resource that has Dynatrace agent installed through the Azure Dynatrace resource.
 */
@Fluent
public final class AgentStatus implements JsonSerializable<AgentStatus> {
    /*
     * The ARM id of the resource.
     */
    private String id;

    /*
     * The type of Azure resource.
     */
    private String resourceType;

    /*
     * Resource Id of the associated Dynatrace monitor resource.
     */
    private String dynatraceResourceId;

    /*
     * Environment Id of the associated Dynatrace monitor resource.
     */
    private String dynatraceEnvironmentId;

    /**
     * Creates an instance of AgentStatus class.
     */
    public AgentStatus() {
    }

    /**
     * Get the id property: The ARM id of the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ARM id of the resource.
     * 
     * @param id the id value to set.
     * @return the AgentStatus object itself.
     */
    public AgentStatus withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the resourceType property: The type of Azure resource.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The type of Azure resource.
     * 
     * @param resourceType the resourceType value to set.
     * @return the AgentStatus object itself.
     */
    public AgentStatus withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the dynatraceResourceId property: Resource Id of the associated Dynatrace monitor resource.
     * 
     * @return the dynatraceResourceId value.
     */
    public String dynatraceResourceId() {
        return this.dynatraceResourceId;
    }

    /**
     * Set the dynatraceResourceId property: Resource Id of the associated Dynatrace monitor resource.
     * 
     * @param dynatraceResourceId the dynatraceResourceId value to set.
     * @return the AgentStatus object itself.
     */
    public AgentStatus withDynatraceResourceId(String dynatraceResourceId) {
        this.dynatraceResourceId = dynatraceResourceId;
        return this;
    }

    /**
     * Get the dynatraceEnvironmentId property: Environment Id of the associated Dynatrace monitor resource.
     * 
     * @return the dynatraceEnvironmentId value.
     */
    public String dynatraceEnvironmentId() {
        return this.dynatraceEnvironmentId;
    }

    /**
     * Set the dynatraceEnvironmentId property: Environment Id of the associated Dynatrace monitor resource.
     * 
     * @param dynatraceEnvironmentId the dynatraceEnvironmentId value to set.
     * @return the AgentStatus object itself.
     */
    public AgentStatus withDynatraceEnvironmentId(String dynatraceEnvironmentId) {
        this.dynatraceEnvironmentId = dynatraceEnvironmentId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("dynatraceResourceId", this.dynatraceResourceId);
        jsonWriter.writeStringField("dynatraceEnvironmentId", this.dynatraceEnvironmentId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentStatus.
     */
    public static AgentStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentStatus deserializedAgentStatus = new AgentStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAgentStatus.id = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedAgentStatus.resourceType = reader.getString();
                } else if ("dynatraceResourceId".equals(fieldName)) {
                    deserializedAgentStatus.dynatraceResourceId = reader.getString();
                } else if ("dynatraceEnvironmentId".equals(fieldName)) {
                    deserializedAgentStatus.dynatraceEnvironmentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentStatus;
        });
    }
}
