// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request for getting metric status for given monitored resource Ids.
 */
@Fluent
public final class MetricStatusRequest implements JsonSerializable<MetricStatusRequest> {
    /*
     * List of azure resource Id of monitored resources for which we get the metric status
     */
    private List<String> monitoredResourceIds;

    /**
     * Creates an instance of MetricStatusRequest class.
     */
    public MetricStatusRequest() {
    }

    /**
     * Get the monitoredResourceIds property: List of azure resource Id of monitored resources for which we get the
     * metric status.
     * 
     * @return the monitoredResourceIds value.
     */
    public List<String> monitoredResourceIds() {
        return this.monitoredResourceIds;
    }

    /**
     * Set the monitoredResourceIds property: List of azure resource Id of monitored resources for which we get the
     * metric status.
     * 
     * @param monitoredResourceIds the monitoredResourceIds value to set.
     * @return the MetricStatusRequest object itself.
     */
    public MetricStatusRequest withMonitoredResourceIds(List<String> monitoredResourceIds) {
        this.monitoredResourceIds = monitoredResourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("monitoredResourceIds", this.monitoredResourceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricStatusRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricStatusRequest.
     */
    public static MetricStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricStatusRequest deserializedMetricStatusRequest = new MetricStatusRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monitoredResourceIds".equals(fieldName)) {
                    List<String> monitoredResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetricStatusRequest.monitoredResourceIds = monitoredResourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricStatusRequest;
        });
    }
}
