// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The billing plan properties for the upgrade plan call.
 */
@Fluent
public final class UpgradePlanRequest implements JsonSerializable<UpgradePlanRequest> {
    /*
     * The new Billing plan information.
     */
    private PlanData planData;

    /**
     * Creates an instance of UpgradePlanRequest class.
     */
    public UpgradePlanRequest() {
    }

    /**
     * Get the planData property: The new Billing plan information.
     * 
     * @return the planData value.
     */
    public PlanData planData() {
        return this.planData;
    }

    /**
     * Set the planData property: The new Billing plan information.
     * 
     * @param planData the planData value to set.
     * @return the UpgradePlanRequest object itself.
     */
    public UpgradePlanRequest withPlanData(PlanData planData) {
        this.planData = planData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planData() != null) {
            planData().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("planData", this.planData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradePlanRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradePlanRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpgradePlanRequest.
     */
    public static UpgradePlanRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradePlanRequest deserializedUpgradePlanRequest = new UpgradePlanRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("planData".equals(fieldName)) {
                    deserializedUpgradePlanRequest.planData = PlanData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpgradePlanRequest;
        });
    }
}
