// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request for updating resources given in list according to action.
 */
@Fluent
public final class AgentStatusRequest implements JsonSerializable<AgentStatusRequest> {
    /*
     * The list of resources.
     */
    private List<AgentStatus> agentStatusList;

    /*
     * Install/Uninstall action.
     */
    private Action action;

    /**
     * Creates an instance of AgentStatusRequest class.
     */
    public AgentStatusRequest() {
    }

    /**
     * Get the agentStatusList property: The list of resources.
     * 
     * @return the agentStatusList value.
     */
    public List<AgentStatus> agentStatusList() {
        return this.agentStatusList;
    }

    /**
     * Set the agentStatusList property: The list of resources.
     * 
     * @param agentStatusList the agentStatusList value to set.
     * @return the AgentStatusRequest object itself.
     */
    public AgentStatusRequest withAgentStatusList(List<AgentStatus> agentStatusList) {
        this.agentStatusList = agentStatusList;
        return this;
    }

    /**
     * Get the action property: Install/Uninstall action.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: Install/Uninstall action.
     * 
     * @param action the action value to set.
     * @return the AgentStatusRequest object itself.
     */
    public AgentStatusRequest withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (agentStatusList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property agentStatusList in model AgentStatusRequest"));
        } else {
            agentStatusList().forEach(e -> e.validate());
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model AgentStatusRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgentStatusRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("agentStatusList", this.agentStatusList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentStatusRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentStatusRequest.
     */
    public static AgentStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentStatusRequest deserializedAgentStatusRequest = new AgentStatusRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agentStatusList".equals(fieldName)) {
                    List<AgentStatus> agentStatusList = reader.readArray(reader1 -> AgentStatus.fromJson(reader1));
                    deserializedAgentStatusRequest.agentStatusList = agentStatusList;
                } else if ("action".equals(fieldName)) {
                    deserializedAgentStatusRequest.action = Action.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentStatusRequest;
        });
    }
}
