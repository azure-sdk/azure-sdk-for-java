// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dynatrace.fluent.MonitoredSubscriptionsClient;
import com.azure.resourcemanager.dynatrace.fluent.models.MonitoredSubscriptionPropertiesInner;
import com.azure.resourcemanager.dynatrace.models.MonitoredSubscriptionProperties;
import com.azure.resourcemanager.dynatrace.models.MonitoredSubscriptions;

public final class MonitoredSubscriptionsImpl implements MonitoredSubscriptions {
    private static final ClientLogger LOGGER = new ClientLogger(MonitoredSubscriptionsImpl.class);

    private final MonitoredSubscriptionsClient innerClient;

    private final com.azure.resourcemanager.dynatrace.DynatraceManager serviceManager;

    public MonitoredSubscriptionsImpl(MonitoredSubscriptionsClient innerClient,
        com.azure.resourcemanager.dynatrace.DynatraceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MonitoredSubscriptionProperties> list(String resourceGroupName, String monitorName) {
        PagedIterable<MonitoredSubscriptionPropertiesInner> inner
            = this.serviceClient().list(resourceGroupName, monitorName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MonitoredSubscriptionPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<MonitoredSubscriptionProperties> list(String resourceGroupName, String monitorName,
        Context context) {
        PagedIterable<MonitoredSubscriptionPropertiesInner> inner
            = this.serviceClient().list(resourceGroupName, monitorName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MonitoredSubscriptionPropertiesImpl(inner1, this.manager()));
    }

    public Response<MonitoredSubscriptionProperties> getWithResponse(String resourceGroupName, String monitorName,
        Context context) {
        Response<MonitoredSubscriptionPropertiesInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, monitorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MonitoredSubscriptionPropertiesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MonitoredSubscriptionProperties get(String resourceGroupName, String monitorName) {
        MonitoredSubscriptionPropertiesInner inner = this.serviceClient().get(resourceGroupName, monitorName);
        if (inner != null) {
            return new MonitoredSubscriptionPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoredSubscriptionProperties createOrUpdate(String resourceGroupName, String monitorName) {
        MonitoredSubscriptionPropertiesInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, monitorName);
        if (inner != null) {
            return new MonitoredSubscriptionPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoredSubscriptionProperties createOrUpdate(String resourceGroupName, String monitorName,
        MonitoredSubscriptionPropertiesInner body, Context context) {
        MonitoredSubscriptionPropertiesInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, monitorName, body, context);
        if (inner != null) {
            return new MonitoredSubscriptionPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoredSubscriptionProperties update(String resourceGroupName, String monitorName) {
        MonitoredSubscriptionPropertiesInner inner = this.serviceClient().update(resourceGroupName, monitorName);
        if (inner != null) {
            return new MonitoredSubscriptionPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoredSubscriptionProperties update(String resourceGroupName, String monitorName,
        MonitoredSubscriptionPropertiesInner body, Context context) {
        MonitoredSubscriptionPropertiesInner inner
            = this.serviceClient().update(resourceGroupName, monitorName, body, context);
        if (inner != null) {
            return new MonitoredSubscriptionPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String monitorName) {
        this.serviceClient().delete(resourceGroupName, monitorName);
    }

    public void delete(String resourceGroupName, String monitorName, Context context) {
        this.serviceClient().delete(resourceGroupName, monitorName, context);
    }

    private MonitoredSubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dynatrace.DynatraceManager manager() {
        return this.serviceManager;
    }
}
