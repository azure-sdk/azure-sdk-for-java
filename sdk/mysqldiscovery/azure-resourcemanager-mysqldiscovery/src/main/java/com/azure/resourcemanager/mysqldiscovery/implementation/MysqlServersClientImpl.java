// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mysqldiscovery.fluent.MysqlServersClient;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MysqlServerInner;
import com.azure.resourcemanager.mysqldiscovery.models.MysqlServerList;
import com.azure.resourcemanager.mysqldiscovery.models.MysqlServerResourcePatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MysqlServersClient.
 */
public final class MysqlServersClientImpl implements MysqlServersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MysqlServersService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureApiForMysqlDiscoveryImpl client;

    /**
     * Initializes an instance of MysqlServersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MysqlServersClientImpl(AzureApiForMysqlDiscoveryImpl client) {
        this.service
            = RestProxy.create(MysqlServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureApiForMysqlDiscoveryMysqlServers to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureApiForMysqlDisc")
    public interface MysqlServersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MysqlServerList>> listBySite(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MysqlServerInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MysqlServerInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @BodyParam("application/json") MysqlServerInner resource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName,
            @BodyParam("application/json") MysqlServerResourcePatch properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MysqlServerList>> listBySiteNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MysqlServerInner>> listBySiteSinglePageAsync(String resourceGroupName, String siteName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySite(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, siteName, accept, context))
            .<PagedResponse<MysqlServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MysqlServerInner>> listBySiteSinglePageAsync(String resourceGroupName, String siteName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySite(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MysqlServerInner> listBySiteAsync(String resourceGroupName, String siteName) {
        return new PagedFlux<>(() -> listBySiteSinglePageAsync(resourceGroupName, siteName),
            nextLink -> listBySiteNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MysqlServerInner> listBySiteAsync(String resourceGroupName, String siteName, Context context) {
        return new PagedFlux<>(() -> listBySiteSinglePageAsync(resourceGroupName, siteName, context),
            nextLink -> listBySiteNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MysqlServerInner> listBySite(String resourceGroupName, String siteName) {
        return new PagedIterable<>(listBySiteAsync(resourceGroupName, siteName));
    }

    /**
     * Lists the MysqlServers resource in MysqlSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MysqlServerInner> listBySite(String resourceGroupName, String siteName, Context context) {
        return new PagedIterable<>(listBySiteAsync(resourceGroupName, siteName, context));
    }

    /**
     * Gets the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServers resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MysqlServerInner>> getWithResponseAsync(String resourceGroupName, String siteName,
        String serverName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, siteName, serverName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServers resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MysqlServerInner>> getWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, siteName, serverName, accept, context);
    }

    /**
     * Gets the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServers resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MysqlServerInner> getAsync(String resourceGroupName, String siteName, String serverName) {
        return getWithResponseAsync(resourceGroupName, siteName, serverName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServers resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MysqlServerInner> getWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, siteName, serverName, context).block();
    }

    /**
     * Gets the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServers resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MysqlServerInner get(String resourceGroupName, String siteName, String serverName) {
        return getWithResponse(resourceGroupName, siteName, serverName, Context.NONE).getValue();
    }

    /**
     * Puts the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param resource The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MysqlServerInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MysqlServerInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, siteName, serverName, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Puts the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param resource The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MysqlServerInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MysqlServerInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, siteName, serverName, resource, accept, context);
    }

    /**
     * Puts the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param resource The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MysqlServerInner> createOrUpdateAsync(String resourceGroupName, String siteName, String serverName,
        MysqlServerInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, siteName, serverName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Puts the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param resource The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MysqlServerInner> createOrUpdateWithResponse(String resourceGroupName, String siteName,
        String serverName, MysqlServerInner resource, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, siteName, serverName, resource, context).block();
    }

    /**
     * Puts the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param resource The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MysqlServerInner createOrUpdate(String resourceGroupName, String siteName, String serverName,
        MysqlServerInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, siteName, serverName, resource, Context.NONE).getValue();
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MysqlServerResourcePatch properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, siteName, serverName, properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MysqlServerResourcePatch properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, siteName, serverName, properties, accept, context);
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MysqlServerInner>, MysqlServerInner> beginUpdateAsync(String resourceGroupName,
        String siteName, String serverName, MysqlServerResourcePatch properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, siteName, serverName, properties);
        return this.client.<MysqlServerInner, MysqlServerInner>getLroResult(mono, this.client.getHttpPipeline(),
            MysqlServerInner.class, MysqlServerInner.class, this.client.getContext());
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MysqlServerInner>, MysqlServerInner> beginUpdateAsync(String resourceGroupName,
        String siteName, String serverName, MysqlServerResourcePatch properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, siteName, serverName, properties, context);
        return this.client.<MysqlServerInner, MysqlServerInner>getLroResult(mono, this.client.getHttpPipeline(),
            MysqlServerInner.class, MysqlServerInner.class, context);
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MysqlServerInner>, MysqlServerInner> beginUpdate(String resourceGroupName,
        String siteName, String serverName, MysqlServerResourcePatch properties) {
        return this.beginUpdateAsync(resourceGroupName, siteName, serverName, properties).getSyncPoller();
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MysqlServerInner>, MysqlServerInner> beginUpdate(String resourceGroupName,
        String siteName, String serverName, MysqlServerResourcePatch properties, Context context) {
        return this.beginUpdateAsync(resourceGroupName, siteName, serverName, properties, context).getSyncPoller();
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MysqlServerInner> updateAsync(String resourceGroupName, String siteName, String serverName,
        MysqlServerResourcePatch properties) {
        return beginUpdateAsync(resourceGroupName, siteName, serverName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MysqlServerInner> updateAsync(String resourceGroupName, String siteName, String serverName,
        MysqlServerResourcePatch properties, Context context) {
        return beginUpdateAsync(resourceGroupName, siteName, serverName, properties, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MysqlServerInner update(String resourceGroupName, String siteName, String serverName,
        MysqlServerResourcePatch properties) {
        return updateAsync(resourceGroupName, siteName, serverName, properties).block();
    }

    /**
     * Patch the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MysqlServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MysqlServerInner update(String resourceGroupName, String siteName, String serverName,
        MysqlServerResourcePatch properties, Context context) {
        return updateAsync(resourceGroupName, siteName, serverName, properties, context).block();
    }

    /**
     * Deletes the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String siteName, String serverName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, siteName, serverName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String siteName, String serverName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, siteName, serverName, accept, context);
    }

    /**
     * Deletes the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String siteName, String serverName) {
        return deleteWithResponseAsync(resourceGroupName, siteName, serverName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        return deleteWithResponseAsync(resourceGroupName, siteName, serverName, context).block();
    }

    /**
     * Deletes the MysqlServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String siteName, String serverName) {
        deleteWithResponse(resourceGroupName, siteName, serverName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MysqlServerInner>> listBySiteNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySiteNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MysqlServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MysqlServerInner>> listBySiteNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySiteNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
