// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlSiteInner;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlSitesResourcePatch;

/**
 * An instance of this class provides access to all the operations defined in MySqlSitesClient.
 */
public interface MySqlSitesClient {
    /**
     * Lists the MySQLSites resource in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Sites as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MySqlSiteInner> list();

    /**
     * Lists the MySQLSites resource in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Sites as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MySqlSiteInner> list(Context context);

    /**
     * Lists the MySQLSites resource in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Sites as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MySqlSiteInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists the MySQLSites resource in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Sites as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MySqlSiteInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSites resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MySqlSiteInner> getByResourceGroupWithResponse(String resourceGroupName, String siteName, Context context);

    /**
     * Gets the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSites resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MySqlSiteInner getByResourceGroup(String resourceGroupName, String siteName);

    /**
     * Puts the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param body The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MySqlSiteInner>, MySqlSiteInner> beginCreateOrUpdate(String resourceGroupName,
        String siteName, MySqlSiteInner body);

    /**
     * Puts the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param body The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MySqlSiteInner>, MySqlSiteInner> beginCreateOrUpdate(String resourceGroupName,
        String siteName, MySqlSiteInner body, Context context);

    /**
     * Puts the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param body The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MySqlSiteInner createOrUpdate(String resourceGroupName, String siteName, MySqlSiteInner body);

    /**
     * Puts the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param body The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MySqlSiteInner createOrUpdate(String resourceGroupName, String siteName, MySqlSiteInner body, Context context);

    /**
     * Patch the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MySqlSiteInner>, MySqlSiteInner> beginUpdate(String resourceGroupName, String siteName,
        MySqlSitesResourcePatch properties);

    /**
     * Patch the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MySqlSiteInner>, MySqlSiteInner> beginUpdate(String resourceGroupName, String siteName,
        MySqlSitesResourcePatch properties, Context context);

    /**
     * Patch the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param properties Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MySqlSiteInner update(String resourceGroupName, String siteName, MySqlSitesResourcePatch properties);

    /**
     * Patch the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param properties Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLSite resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MySqlSiteInner update(String resourceGroupName, String siteName, MySqlSitesResourcePatch properties,
        Context context);

    /**
     * Deletes the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String siteName, Context context);

    /**
     * Deletes the MySQLSites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String siteName);

    /**
     * Trigger Refresh Refresh action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginTriggerRefresh(String resourceGroupName, String siteName);

    /**
     * Trigger Refresh Refresh action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginTriggerRefresh(String resourceGroupName, String siteName, Context context);

    /**
     * Trigger Refresh Refresh action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void triggerRefresh(String resourceGroupName, String siteName);

    /**
     * Trigger Refresh Refresh action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void triggerRefresh(String resourceGroupName, String siteName, Context context);
}
