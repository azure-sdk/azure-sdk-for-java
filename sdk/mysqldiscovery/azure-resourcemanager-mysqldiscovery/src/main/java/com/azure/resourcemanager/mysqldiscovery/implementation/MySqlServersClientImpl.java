// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mysqldiscovery.fluent.MySqlServersClient;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlServerInner;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServerList;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServerResourcePatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MySqlServersClient.
 */
public final class MySqlServersClientImpl implements MySqlServersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MySqlServersService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureApiForMySqlDiscoveryImpl client;

    /**
     * Initializes an instance of MySqlServersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MySqlServersClientImpl(AzureApiForMySqlDiscoveryImpl client) {
        this.service
            = RestProxy.create(MySqlServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureApiForMySqlDiscoveryMySqlServers to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureApiForMySqlDisc")
    public interface MySqlServersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MySqlServerList>> listBySite(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MySqlServerInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MySqlServerInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MySqlServerInner body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MySqlServerResourcePatch body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName,
            @PathParam("serverName") String serverName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MySqlServerList>> listBySiteNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MySqlServerInner>> listBySiteSinglePageAsync(String resourceGroupName, String siteName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySite(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<MySqlServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MySqlServerInner>> listBySiteSinglePageAsync(String resourceGroupName, String siteName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySite(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, siteName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MySqlServerInner> listBySiteAsync(String resourceGroupName, String siteName) {
        return new PagedFlux<>(() -> listBySiteSinglePageAsync(resourceGroupName, siteName),
            nextLink -> listBySiteNextSinglePageAsync(nextLink));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MySqlServerInner> listBySiteAsync(String resourceGroupName, String siteName, Context context) {
        return new PagedFlux<>(() -> listBySiteSinglePageAsync(resourceGroupName, siteName, context),
            nextLink -> listBySiteNextSinglePageAsync(nextLink, context));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MySqlServerInner> listBySite(String resourceGroupName, String siteName) {
        return new PagedIterable<>(listBySiteAsync(resourceGroupName, siteName));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Lists the MySQLServers resource in MySQLSites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MySqlServerInner> listBySite(String resourceGroupName, String siteName, Context context) {
        return new PagedIterable<>(listBySiteAsync(resourceGroupName, siteName, context));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Gets the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServers resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MySqlServerInner>> getWithResponseAsync(String resourceGroupName, String siteName,
        String serverName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, serverName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Gets the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServers resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MySqlServerInner>> getWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, siteName,
            serverName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Gets the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServers resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MySqlServerInner> getAsync(String resourceGroupName, String siteName, String serverName) {
        return getWithResponseAsync(resourceGroupName, siteName, serverName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Gets the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServers resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MySqlServerInner> getWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, siteName, serverName, context).block();
    }

    /**
     * Implements MySQLServers GET method.
     * 
     * Gets the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServers resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MySqlServerInner get(String resourceGroupName, String siteName, String serverName) {
        return getWithResponse(resourceGroupName, siteName, serverName, Context.NONE).getValue();
    }

    /**
     * Implements MySQLServers PUT method.
     * 
     * Puts the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MySqlServerInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MySqlServerInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, serverName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements MySQLServers PUT method.
     * 
     * Puts the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MySqlServerInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MySqlServerInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            siteName, serverName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Implements MySQLServers PUT method.
     * 
     * Puts the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MySqlServerInner> createOrUpdateAsync(String resourceGroupName, String siteName, String serverName,
        MySqlServerInner body) {
        return createOrUpdateWithResponseAsync(resourceGroupName, siteName, serverName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Implements MySQLServers PUT method.
     * 
     * Puts the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body The machines to add to the assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MySqlServerInner> createOrUpdateWithResponse(String resourceGroupName, String siteName,
        String serverName, MySqlServerInner body, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, siteName, serverName, body, context).block();
    }

    /**
     * Implements MySQLServers PUT method.
     * 
     * Puts the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body The machines to add to the assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MySqlServerInner createOrUpdate(String resourceGroupName, String siteName, String serverName,
        MySqlServerInner body) {
        return createOrUpdateWithResponse(resourceGroupName, siteName, serverName, body, Context.NONE).getValue();
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MySqlServerResourcePatch body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, serverName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String siteName,
        String serverName, MySqlServerResourcePatch body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, siteName,
            serverName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MySqlServerInner>, MySqlServerInner> beginUpdateAsync(String resourceGroupName,
        String siteName, String serverName, MySqlServerResourcePatch body) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, siteName, serverName, body);
        return this.client.<MySqlServerInner, MySqlServerInner>getLroResult(mono, this.client.getHttpPipeline(),
            MySqlServerInner.class, MySqlServerInner.class, this.client.getContext());
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MySqlServerInner>, MySqlServerInner> beginUpdateAsync(String resourceGroupName,
        String siteName, String serverName, MySqlServerResourcePatch body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, siteName, serverName, body, context);
        return this.client.<MySqlServerInner, MySqlServerInner>getLroResult(mono, this.client.getHttpPipeline(),
            MySqlServerInner.class, MySqlServerInner.class, context);
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MySqlServerInner>, MySqlServerInner> beginUpdate(String resourceGroupName,
        String siteName, String serverName, MySqlServerResourcePatch body) {
        return this.beginUpdateAsync(resourceGroupName, siteName, serverName, body).getSyncPoller();
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MySqlServerInner>, MySqlServerInner> beginUpdate(String resourceGroupName,
        String siteName, String serverName, MySqlServerResourcePatch body, Context context) {
        return this.beginUpdateAsync(resourceGroupName, siteName, serverName, body, context).getSyncPoller();
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MySqlServerInner> updateAsync(String resourceGroupName, String siteName, String serverName,
        MySqlServerResourcePatch body) {
        return beginUpdateAsync(resourceGroupName, siteName, serverName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MySqlServerInner> updateAsync(String resourceGroupName, String siteName, String serverName,
        MySqlServerResourcePatch body, Context context) {
        return beginUpdateAsync(resourceGroupName, siteName, serverName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MySqlServerInner update(String resourceGroupName, String siteName, String serverName,
        MySqlServerResourcePatch body) {
        return updateAsync(resourceGroupName, siteName, serverName, body).block();
    }

    /**
     * Implements MySQLServers PATCH method.
     * 
     * Patch the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param body Clouds patch payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MySQLServer resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MySqlServerInner update(String resourceGroupName, String siteName, String serverName,
        MySqlServerResourcePatch body, Context context) {
        return updateAsync(resourceGroupName, siteName, serverName, body, context).block();
    }

    /**
     * Implements MySQLServers DELETE method.
     * 
     * Deletes the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String siteName, String serverName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, siteName, serverName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements MySQLServers DELETE method.
     * 
     * Deletes the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String siteName, String serverName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, siteName,
            serverName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Implements MySQLServers DELETE method.
     * 
     * Deletes the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String siteName, String serverName) {
        return deleteWithResponseAsync(resourceGroupName, siteName, serverName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Implements MySQLServers DELETE method.
     * 
     * Deletes the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        return deleteWithResponseAsync(resourceGroupName, siteName, serverName, context).block();
    }

    /**
     * Implements MySQLServers DELETE method.
     * 
     * Deletes the MySQLServers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The name of Site.
     * @param serverName The name of Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String siteName, String serverName) {
        deleteWithResponse(resourceGroupName, siteName, serverName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MySqlServerInner>> listBySiteNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySiteNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MySqlServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Servers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MySqlServerInner>> listBySiteNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySiteNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
