// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Error summaries properties.
 */
@Fluent
public final class ErrorSummariesProperties implements JsonSerializable<ErrorSummariesProperties> {
    /*
     * The number of affected objects.
     */
    private Long affectedObjectsCount;

    /*
     * The list of errors.
     */
    private List<Error> errors;

    /*
     * Gets or sets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ErrorSummariesProperties class.
     */
    public ErrorSummariesProperties() {
    }

    /**
     * Get the affectedObjectsCount property: The number of affected objects.
     * 
     * @return the affectedObjectsCount value.
     */
    public Long affectedObjectsCount() {
        return this.affectedObjectsCount;
    }

    /**
     * Set the affectedObjectsCount property: The number of affected objects.
     * 
     * @param affectedObjectsCount the affectedObjectsCount value to set.
     * @return the ErrorSummariesProperties object itself.
     */
    public ErrorSummariesProperties withAffectedObjectsCount(Long affectedObjectsCount) {
        this.affectedObjectsCount = affectedObjectsCount;
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the ErrorSummariesProperties object itself.
     */
    public ErrorSummariesProperties withErrors(List<Error> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("affectedObjectsCount", this.affectedObjectsCount);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorSummariesProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorSummariesProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorSummariesProperties.
     */
    public static ErrorSummariesProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorSummariesProperties deserializedErrorSummariesProperties = new ErrorSummariesProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("affectedObjectsCount".equals(fieldName)) {
                    deserializedErrorSummariesProperties.affectedObjectsCount = reader.getNullable(JsonReader::getLong);
                } else if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedErrorSummariesProperties.errors = errors;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedErrorSummariesProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorSummariesProperties;
        });
    }
}
