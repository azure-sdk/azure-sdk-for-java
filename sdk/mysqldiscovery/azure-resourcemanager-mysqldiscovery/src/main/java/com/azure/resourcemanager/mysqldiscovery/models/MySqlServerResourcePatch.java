// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlServerProperties;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

/**
 * Object containing tags updates for patch operations.
 */
@Fluent
public final class MySqlServerResourcePatch implements JsonSerializable<MySqlServerResourcePatch> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The MySQLServer resource definition.
     */
    private MySqlServerProperties innerProperties;

    /**
     * Creates an instance of MySqlServerResourcePatch class.
     */
    public MySqlServerResourcePatch() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The MySQLServer resource definition.
     * 
     * @return the innerProperties value.
     */
    private MySqlServerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the hostname property: The Server IP/host name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.innerProperties() == null ? null : this.innerProperties().hostname();
    }

    /**
     * Set the hostname property: The Server IP/host name.
     * 
     * @param hostname the hostname value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withHostname(String hostname) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withHostname(hostname);
        return this;
    }

    /**
     * Get the hostIp property: The Server IP/host name.
     * 
     * @return the hostIp value.
     */
    public List<String> hostIp() {
        return this.innerProperties() == null ? null : this.innerProperties().hostIp();
    }

    /**
     * Set the hostIp property: The Server IP/host name.
     * 
     * @param hostIp the hostIp value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withHostIp(List<String> hostIp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withHostIp(hostIp);
        return this;
    }

    /**
     * Get the machineId property: discovery Machine Id.
     * 
     * @return the machineId value.
     */
    public String machineId() {
        return this.innerProperties() == null ? null : this.innerProperties().machineId();
    }

    /**
     * Set the machineId property: discovery Machine Id.
     * 
     * @param machineId the machineId value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withMachineId(String machineId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withMachineId(machineId);
        return this;
    }

    /**
     * Get the portNumber property: MySQL Server port number.
     * 
     * @return the portNumber value.
     */
    public String portNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().portNumber();
    }

    /**
     * Set the portNumber property: MySQL Server port number.
     * 
     * @param portNumber the portNumber value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withPortNumber(String portNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withPortNumber(portNumber);
        return this;
    }

    /**
     * Get the mysqlVersion property: The mysql server version.
     * 
     * @return the mysqlVersion value.
     */
    public String mysqlVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().mysqlVersion();
    }

    /**
     * Set the mysqlVersion property: The mysql server version.
     * 
     * @param mysqlVersion the mysqlVersion value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withMysqlVersion(String mysqlVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withMysqlVersion(mysqlVersion);
        return this;
    }

    /**
     * Get the numberOfDatabase property: The number of database.
     * 
     * @return the numberOfDatabase value.
     */
    public Long numberOfDatabase() {
        return this.innerProperties() == null ? null : this.innerProperties().numberOfDatabase();
    }

    /**
     * Set the numberOfDatabase property: The number of database.
     * 
     * @param numberOfDatabase the numberOfDatabase value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withNumberOfDatabase(Long numberOfDatabase) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withNumberOfDatabase(numberOfDatabase);
        return this;
    }

    /**
     * Get the supportStatus property: mysql version support status.
     * 
     * @return the supportStatus value.
     */
    public SupportStatus supportStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().supportStatus();
    }

    /**
     * Set the supportStatus property: mysql version support status.
     * 
     * @param supportStatus the supportStatus value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withSupportStatus(SupportStatus supportStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withSupportStatus(supportStatus);
        return this;
    }

    /**
     * Get the edition property: mysql server edition.
     * 
     * @return the edition value.
     */
    public Edition edition() {
        return this.innerProperties() == null ? null : this.innerProperties().edition();
    }

    /**
     * Set the edition property: mysql server edition.
     * 
     * @param edition the edition value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withEdition(Edition edition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withEdition(edition);
        return this;
    }

    /**
     * Get the supportEndIn property: Time when mysql version support end.
     * 
     * @return the supportEndIn value.
     */
    public LocalDate supportEndIn() {
        return this.innerProperties() == null ? null : this.innerProperties().supportEndIn();
    }

    /**
     * Set the supportEndIn property: Time when mysql version support end.
     * 
     * @param supportEndIn the supportEndIn value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withSupportEndIn(LocalDate supportEndIn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withSupportEndIn(supportEndIn);
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withErrors(List<Error> errors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withErrors(errors);
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: Gets or sets the provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the labels property: Resource labels.
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.innerProperties() == null ? null : this.innerProperties().labels();
    }

    /**
     * Set the labels property: Resource labels.
     * 
     * @param labels the labels value to set.
     * @return the MySqlServerResourcePatch object itself.
     */
    public MySqlServerResourcePatch withLabels(Map<String, String> labels) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MySqlServerProperties();
        }
        this.innerProperties().withLabels(labels);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MySqlServerResourcePatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MySqlServerResourcePatch if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MySqlServerResourcePatch.
     */
    public static MySqlServerResourcePatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MySqlServerResourcePatch deserializedMySqlServerResourcePatch = new MySqlServerResourcePatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMySqlServerResourcePatch.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    deserializedMySqlServerResourcePatch.innerProperties = MySqlServerProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMySqlServerResourcePatch;
        });
    }
}
