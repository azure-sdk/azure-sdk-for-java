// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlServerInner;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServer;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServerProperties;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServerResourcePatch;
import java.util.Collections;
import java.util.Map;

public final class MySqlServerImpl implements MySqlServer, MySqlServer.Definition, MySqlServer.Update {
    private MySqlServerInner innerObject;

    private final com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public MySqlServerProperties properties() {
        return this.innerModel().properties();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MySqlServerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String siteName;

    private String serverName;

    private MySqlServerResourcePatch updateProperties;

    public MySqlServerImpl withExistingMySQLSite(String resourceGroupName, String siteName) {
        this.resourceGroupName = resourceGroupName;
        this.siteName = siteName;
        return this;
    }

    public MySqlServer create() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .createOrUpdateWithResponse(resourceGroupName, siteName, serverName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public MySqlServer create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .createOrUpdateWithResponse(resourceGroupName, siteName, serverName, this.innerModel(), context)
            .getValue();
        return this;
    }

    MySqlServerImpl(String name, com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = new MySqlServerInner();
        this.serviceManager = serviceManager;
        this.serverName = name;
    }

    public MySqlServerImpl update() {
        this.updateProperties = new MySqlServerResourcePatch();
        return this;
    }

    public MySqlServer apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .update(resourceGroupName, siteName, serverName, updateProperties, Context.NONE);
        return this;
    }

    public MySqlServer apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .update(resourceGroupName, siteName, serverName, updateProperties, context);
        return this;
    }

    MySqlServerImpl(MySqlServerInner innerObject,
        com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.siteName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "MySQLSites");
        this.serverName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "MySQLServers");
    }

    public MySqlServer refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .getWithResponse(resourceGroupName, siteName, serverName, Context.NONE)
            .getValue();
        return this;
    }

    public MySqlServer refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlServers()
            .getWithResponse(resourceGroupName, siteName, serverName, context)
            .getValue();
        return this;
    }

    public MySqlServerImpl withProperties(MySqlServerProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateProperties.withProperties(properties);
            return this;
        }
    }

    public MySqlServerImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
