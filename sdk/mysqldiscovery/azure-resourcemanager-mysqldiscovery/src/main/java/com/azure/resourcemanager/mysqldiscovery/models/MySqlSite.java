// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlSiteInner;
import java.util.Map;

/**
 * An immutable client-side representation of MySqlSite.
 */
public interface MySqlSite {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the extendedLocation property: The extended location.
     * 
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the masterSiteId property: The mapped master Site Id.
     * 
     * @return the masterSiteId value.
     */
    String masterSiteId();

    /**
     * Gets the migrateProjectId property: The mapped migrate project Id.
     * 
     * @return the migrateProjectId value.
     */
    String migrateProjectId();

    /**
     * Gets the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlSiteInner object.
     * 
     * @return the inner object.
     */
    MySqlSiteInner innerModel();

    /**
     * The entirety of the MySqlSite definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithExtendedLocation, DefinitionStages.WithMasterSiteId,
        DefinitionStages.WithMigrateProjectId, DefinitionStages.WithCreate {
    }

    /**
     * The MySqlSite definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the MySqlSite definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the MySqlSite definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithExtendedLocation withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify extendedLocation.
         */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: The extended location..
             * 
             * @param extendedLocation The extended location.
             * @return the next definition stage.
             */
            WithMasterSiteId withExtendedLocation(ExtendedLocation extendedLocation);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify masterSiteId.
         */
        interface WithMasterSiteId {
            /**
             * Specifies the masterSiteId property: The mapped master Site Id..
             * 
             * @param masterSiteId The mapped master Site Id.
             * @return the next definition stage.
             */
            WithMigrateProjectId withMasterSiteId(String masterSiteId);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify migrateProjectId.
         */
        interface WithMigrateProjectId {
            /**
             * Specifies the migrateProjectId property: The mapped migrate project Id..
             * 
             * @param migrateProjectId The mapped migrate project Id.
             * @return the next definition stage.
             */
            WithCreate withMigrateProjectId(String migrateProjectId);
        }

        /**
         * The stage of the MySqlSite definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithProvisioningState {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            MySqlSite create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            MySqlSite create(Context context);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the MySqlSite definition allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Gets or sets the provisioning state..
             * 
             * @param provisioningState Gets or sets the provisioning state.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }
    }

    /**
     * Begins update for the MySqlSite resource.
     * 
     * @return the stage of resource update.
     */
    MySqlSite.Update update();

    /**
     * The template for MySqlSite update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithMasterSiteId, UpdateStages.WithMigrateProjectId,
        UpdateStages.WithProvisioningState {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        MySqlSite apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        MySqlSite apply(Context context);
    }

    /**
     * The MySqlSite update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the MySqlSite update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the MySqlSite update allowing to specify masterSiteId.
         */
        interface WithMasterSiteId {
            /**
             * Specifies the masterSiteId property: The mapped master Site Id..
             * 
             * @param masterSiteId The mapped master Site Id.
             * @return the next definition stage.
             */
            Update withMasterSiteId(String masterSiteId);
        }

        /**
         * The stage of the MySqlSite update allowing to specify migrateProjectId.
         */
        interface WithMigrateProjectId {
            /**
             * Specifies the migrateProjectId property: The mapped migrate project Id..
             * 
             * @param migrateProjectId The mapped migrate project Id.
             * @return the next definition stage.
             */
            Update withMigrateProjectId(String migrateProjectId);
        }

        /**
         * The stage of the MySqlSite update allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Gets or sets the provisioning state..
             * 
             * @param provisioningState Gets or sets the provisioning state.
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    MySqlSite refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    MySqlSite refresh(Context context);

    /**
     * Implements Refresh POST method.
     * 
     * Trigger Refresh Refresh action.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void triggerRefresh();

    /**
     * Implements Refresh POST method.
     * 
     * Trigger Refresh Refresh action.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void triggerRefresh(Context context);
}
