// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqldiscovery.models.ProvisioningState;
import java.io.IOException;

/**
 * MySQL Site properties.
 */
@Fluent
public final class MySqlSiteProperties implements JsonSerializable<MySqlSiteProperties> {
    /*
     * The mapped master Site Id.
     */
    private String masterSiteId;

    /*
     * The mapped migrate project Id.
     */
    private String migrateProjectId;

    /*
     * Gets or sets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of MySqlSiteProperties class.
     */
    public MySqlSiteProperties() {
    }

    /**
     * Get the masterSiteId property: The mapped master Site Id.
     * 
     * @return the masterSiteId value.
     */
    public String masterSiteId() {
        return this.masterSiteId;
    }

    /**
     * Set the masterSiteId property: The mapped master Site Id.
     * 
     * @param masterSiteId the masterSiteId value to set.
     * @return the MySqlSiteProperties object itself.
     */
    public MySqlSiteProperties withMasterSiteId(String masterSiteId) {
        this.masterSiteId = masterSiteId;
        return this;
    }

    /**
     * Get the migrateProjectId property: The mapped migrate project Id.
     * 
     * @return the migrateProjectId value.
     */
    public String migrateProjectId() {
        return this.migrateProjectId;
    }

    /**
     * Set the migrateProjectId property: The mapped migrate project Id.
     * 
     * @param migrateProjectId the migrateProjectId value to set.
     * @return the MySqlSiteProperties object itself.
     */
    public MySqlSiteProperties withMigrateProjectId(String migrateProjectId) {
        this.migrateProjectId = migrateProjectId;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets the provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the MySqlSiteProperties object itself.
     */
    public MySqlSiteProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (masterSiteId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property masterSiteId in model MySqlSiteProperties"));
        }
        if (migrateProjectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property migrateProjectId in model MySqlSiteProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MySqlSiteProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("masterSiteId", this.masterSiteId);
        jsonWriter.writeStringField("migrateProjectId", this.migrateProjectId);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MySqlSiteProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MySqlSiteProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MySqlSiteProperties.
     */
    public static MySqlSiteProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MySqlSiteProperties deserializedMySqlSiteProperties = new MySqlSiteProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("masterSiteId".equals(fieldName)) {
                    deserializedMySqlSiteProperties.masterSiteId = reader.getString();
                } else if ("migrateProjectId".equals(fieldName)) {
                    deserializedMySqlSiteProperties.migrateProjectId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMySqlSiteProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMySqlSiteProperties;
        });
    }
}
