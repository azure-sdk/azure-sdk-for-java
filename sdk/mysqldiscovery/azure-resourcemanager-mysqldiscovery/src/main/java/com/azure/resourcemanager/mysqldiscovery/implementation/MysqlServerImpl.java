// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MysqlServerInner;
import com.azure.resourcemanager.mysqldiscovery.models.MysqlServer;
import com.azure.resourcemanager.mysqldiscovery.models.MysqlServerProperties;
import com.azure.resourcemanager.mysqldiscovery.models.MysqlServerResourcePatch;
import com.azure.resourcemanager.mysqldiscovery.models.Tag;
import java.util.Collections;
import java.util.List;

public final class MysqlServerImpl implements MysqlServer, MysqlServer.Definition, MysqlServer.Update {
    private MysqlServerInner innerObject;

    private final com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public MysqlServerProperties properties() {
        return this.innerModel().properties();
    }

    public List<Tag> tags() {
        List<Tag> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MysqlServerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String siteName;

    private String serverName;

    private MysqlServerResourcePatch updateProperties;

    public MysqlServerImpl withExistingMySQLSite(String resourceGroupName, String siteName) {
        this.resourceGroupName = resourceGroupName;
        this.siteName = siteName;
        return this;
    }

    public MysqlServer create() {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .createOrUpdateWithResponse(resourceGroupName, siteName, serverName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public MysqlServer create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .createOrUpdateWithResponse(resourceGroupName, siteName, serverName, this.innerModel(), context)
            .getValue();
        return this;
    }

    MysqlServerImpl(String name, com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = new MysqlServerInner();
        this.serviceManager = serviceManager;
        this.serverName = name;
    }

    public MysqlServerImpl update() {
        this.updateProperties = new MysqlServerResourcePatch();
        return this;
    }

    public MysqlServer apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .update(resourceGroupName, siteName, serverName, updateProperties, Context.NONE);
        return this;
    }

    public MysqlServer apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .update(resourceGroupName, siteName, serverName, updateProperties, context);
        return this;
    }

    MysqlServerImpl(MysqlServerInner innerObject,
        com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.siteName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "MySQLSites");
        this.serverName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "MySQLServers");
    }

    public MysqlServer refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .getWithResponse(resourceGroupName, siteName, serverName, Context.NONE)
            .getValue();
        return this;
    }

    public MysqlServer refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMysqlServers()
            .getWithResponse(resourceGroupName, siteName, serverName, context)
            .getValue();
        return this;
    }

    public MysqlServerImpl withProperties(MysqlServerProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateProperties.withProperties(properties);
            return this;
        }
    }

    public MysqlServerImpl withTags(List<Tag> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
