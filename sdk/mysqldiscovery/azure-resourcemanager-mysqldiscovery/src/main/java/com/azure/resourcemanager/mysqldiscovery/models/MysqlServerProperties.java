// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

/**
 * Mysql Server properties.
 */
@Fluent
public final class MysqlServerProperties implements JsonSerializable<MysqlServerProperties> {
    /*
     * The Server IP/host name.
     */
    private String hostname;

    /*
     * The Server IP/host name.
     */
    private List<String> hostIp;

    /*
     * discovery Machine Id
     */
    private String machineId;

    /*
     * Mysql Server port number
     */
    private String portNumber;

    /*
     * The Mysql server version.
     */
    private String mysqlVersion;

    /*
     * The number of database.
     */
    private Long numberOfDatabase;

    /*
     * Mysql version support status.
     */
    private SupportStatus supportStatus;

    /*
     * Mysql server edition.
     */
    private Edition edition;

    /*
     * Time when Mysql version support end.
     */
    private LocalDate supportEndIn;

    /*
     * The list of errors.
     */
    private List<Error> errors;

    /*
     * Gets or sets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Resource labels.
     */
    private List<Tag> labels;

    /**
     * Creates an instance of MysqlServerProperties class.
     */
    public MysqlServerProperties() {
    }

    /**
     * Get the hostname property: The Server IP/host name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The Server IP/host name.
     * 
     * @param hostname the hostname value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the hostIp property: The Server IP/host name.
     * 
     * @return the hostIp value.
     */
    public List<String> hostIp() {
        return this.hostIp;
    }

    /**
     * Set the hostIp property: The Server IP/host name.
     * 
     * @param hostIp the hostIp value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withHostIp(List<String> hostIp) {
        this.hostIp = hostIp;
        return this;
    }

    /**
     * Get the machineId property: discovery Machine Id.
     * 
     * @return the machineId value.
     */
    public String machineId() {
        return this.machineId;
    }

    /**
     * Set the machineId property: discovery Machine Id.
     * 
     * @param machineId the machineId value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withMachineId(String machineId) {
        this.machineId = machineId;
        return this;
    }

    /**
     * Get the portNumber property: Mysql Server port number.
     * 
     * @return the portNumber value.
     */
    public String portNumber() {
        return this.portNumber;
    }

    /**
     * Set the portNumber property: Mysql Server port number.
     * 
     * @param portNumber the portNumber value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withPortNumber(String portNumber) {
        this.portNumber = portNumber;
        return this;
    }

    /**
     * Get the mysqlVersion property: The Mysql server version.
     * 
     * @return the mysqlVersion value.
     */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }

    /**
     * Set the mysqlVersion property: The Mysql server version.
     * 
     * @param mysqlVersion the mysqlVersion value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withMysqlVersion(String mysqlVersion) {
        this.mysqlVersion = mysqlVersion;
        return this;
    }

    /**
     * Get the numberOfDatabase property: The number of database.
     * 
     * @return the numberOfDatabase value.
     */
    public Long numberOfDatabase() {
        return this.numberOfDatabase;
    }

    /**
     * Set the numberOfDatabase property: The number of database.
     * 
     * @param numberOfDatabase the numberOfDatabase value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withNumberOfDatabase(Long numberOfDatabase) {
        this.numberOfDatabase = numberOfDatabase;
        return this;
    }

    /**
     * Get the supportStatus property: Mysql version support status.
     * 
     * @return the supportStatus value.
     */
    public SupportStatus supportStatus() {
        return this.supportStatus;
    }

    /**
     * Set the supportStatus property: Mysql version support status.
     * 
     * @param supportStatus the supportStatus value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withSupportStatus(SupportStatus supportStatus) {
        this.supportStatus = supportStatus;
        return this;
    }

    /**
     * Get the edition property: Mysql server edition.
     * 
     * @return the edition value.
     */
    public Edition edition() {
        return this.edition;
    }

    /**
     * Set the edition property: Mysql server edition.
     * 
     * @param edition the edition value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withEdition(Edition edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the supportEndIn property: Time when Mysql version support end.
     * 
     * @return the supportEndIn value.
     */
    public LocalDate supportEndIn() {
        return this.supportEndIn;
    }

    /**
     * Set the supportEndIn property: Time when Mysql version support end.
     * 
     * @param supportEndIn the supportEndIn value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withSupportEndIn(LocalDate supportEndIn) {
        this.supportEndIn = supportEndIn;
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withErrors(List<Error> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the labels property: Resource labels.
     * 
     * @return the labels value.
     */
    public List<Tag> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Resource labels.
     * 
     * @param labels the labels value to set.
     * @return the MysqlServerProperties object itself.
     */
    public MysqlServerProperties withLabels(List<Tag> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostname() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property hostname in model MysqlServerProperties"));
        }
        if (portNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property portNumber in model MysqlServerProperties"));
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (labels() != null) {
            labels().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MysqlServerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("portNumber", this.portNumber);
        jsonWriter.writeArrayField("hostIp", this.hostIp, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("machineId", this.machineId);
        jsonWriter.writeStringField("MysqlVersion", this.mysqlVersion);
        jsonWriter.writeNumberField("numberOfDatabase", this.numberOfDatabase);
        jsonWriter.writeStringField("supportStatus", this.supportStatus == null ? null : this.supportStatus.toString());
        jsonWriter.writeStringField("edition", this.edition == null ? null : this.edition.toString());
        jsonWriter.writeStringField("supportEndIn", Objects.toString(this.supportEndIn, null));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MysqlServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MysqlServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MysqlServerProperties.
     */
    public static MysqlServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MysqlServerProperties deserializedMysqlServerProperties = new MysqlServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedMysqlServerProperties.hostname = reader.getString();
                } else if ("portNumber".equals(fieldName)) {
                    deserializedMysqlServerProperties.portNumber = reader.getString();
                } else if ("hostIp".equals(fieldName)) {
                    List<String> hostIp = reader.readArray(reader1 -> reader1.getString());
                    deserializedMysqlServerProperties.hostIp = hostIp;
                } else if ("machineId".equals(fieldName)) {
                    deserializedMysqlServerProperties.machineId = reader.getString();
                } else if ("MysqlVersion".equals(fieldName)) {
                    deserializedMysqlServerProperties.mysqlVersion = reader.getString();
                } else if ("numberOfDatabase".equals(fieldName)) {
                    deserializedMysqlServerProperties.numberOfDatabase = reader.getNullable(JsonReader::getLong);
                } else if ("supportStatus".equals(fieldName)) {
                    deserializedMysqlServerProperties.supportStatus = SupportStatus.fromString(reader.getString());
                } else if ("edition".equals(fieldName)) {
                    deserializedMysqlServerProperties.edition = Edition.fromString(reader.getString());
                } else if ("supportEndIn".equals(fieldName)) {
                    deserializedMysqlServerProperties.supportEndIn
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedMysqlServerProperties.errors = errors;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMysqlServerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("labels".equals(fieldName)) {
                    List<Tag> labels = reader.readArray(reader1 -> Tag.fromJson(reader1));
                    deserializedMysqlServerProperties.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMysqlServerProperties;
        });
    }
}
