// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mysqldiscovery.fluent.MySqlServersClient;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlServerInner;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServer;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlServers;

public final class MySqlServersImpl implements MySqlServers {
    private static final ClientLogger LOGGER = new ClientLogger(MySqlServersImpl.class);

    private final MySqlServersClient innerClient;

    private final com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager;

    public MySqlServersImpl(MySqlServersClient innerClient,
        com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MySqlServer> getWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        Response<MySqlServerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, siteName, serverName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MySqlServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MySqlServer get(String resourceGroupName, String siteName, String serverName) {
        MySqlServerInner inner = this.serviceClient().get(resourceGroupName, siteName, serverName);
        if (inner != null) {
            return new MySqlServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String siteName, String serverName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, siteName, serverName, context);
    }

    public void delete(String resourceGroupName, String siteName, String serverName) {
        this.serviceClient().delete(resourceGroupName, siteName, serverName);
    }

    public PagedIterable<MySqlServer> listBySite(String resourceGroupName, String siteName) {
        PagedIterable<MySqlServerInner> inner = this.serviceClient().listBySite(resourceGroupName, siteName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MySqlServerImpl(inner1, this.manager()));
    }

    public PagedIterable<MySqlServer> listBySite(String resourceGroupName, String siteName, Context context) {
        PagedIterable<MySqlServerInner> inner = this.serviceClient().listBySite(resourceGroupName, siteName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MySqlServerImpl(inner1, this.manager()));
    }

    public MySqlServer getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLSites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLSites'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLServers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, siteName, serverName, Context.NONE).getValue();
    }

    public Response<MySqlServer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLSites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLSites'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLServers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, siteName, serverName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLSites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLSites'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLServers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLServers'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, siteName, serverName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLSites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLSites'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "MySQLServers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'MySQLServers'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, siteName, serverName, context);
    }

    private MySqlServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager manager() {
        return this.serviceManager;
    }

    public MySqlServerImpl define(String name) {
        return new MySqlServerImpl(name, this.manager());
    }
}
