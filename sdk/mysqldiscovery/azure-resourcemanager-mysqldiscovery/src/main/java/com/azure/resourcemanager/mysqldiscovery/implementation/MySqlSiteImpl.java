// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqldiscovery.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mysqldiscovery.fluent.models.MySqlSiteInner;
import com.azure.resourcemanager.mysqldiscovery.models.ExtendedLocation;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlSite;
import com.azure.resourcemanager.mysqldiscovery.models.MySqlSitesResourcePatch;
import com.azure.resourcemanager.mysqldiscovery.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class MySqlSiteImpl implements MySqlSite, MySqlSite.Definition, MySqlSite.Update {
    private MySqlSiteInner innerObject;

    private final com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String masterSiteId() {
        return this.innerModel().masterSiteId();
    }

    public String migrateProjectId() {
        return this.innerModel().migrateProjectId();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MySqlSiteInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String siteName;

    private MySqlSitesResourcePatch updateBody;

    public MySqlSiteImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MySqlSite create() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlSites()
            .createOrUpdate(resourceGroupName, siteName, this.innerModel(), Context.NONE);
        return this;
    }

    public MySqlSite create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlSites()
            .createOrUpdate(resourceGroupName, siteName, this.innerModel(), context);
        return this;
    }

    MySqlSiteImpl(String name, com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = new MySqlSiteInner();
        this.serviceManager = serviceManager;
        this.siteName = name;
    }

    public MySqlSiteImpl update() {
        this.updateBody = new MySqlSitesResourcePatch();
        return this;
    }

    public MySqlSite apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlSites()
            .update(resourceGroupName, siteName, updateBody, Context.NONE);
        return this;
    }

    public MySqlSite apply(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getMySqlSites().update(resourceGroupName, siteName, updateBody, context);
        return this;
    }

    MySqlSiteImpl(MySqlSiteInner innerObject,
        com.azure.resourcemanager.mysqldiscovery.MysqldiscoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.siteName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "MySQLSites");
    }

    public MySqlSite refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlSites()
            .getByResourceGroupWithResponse(resourceGroupName, siteName, Context.NONE)
            .getValue();
        return this;
    }

    public MySqlSite refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMySqlSites()
            .getByResourceGroupWithResponse(resourceGroupName, siteName, context)
            .getValue();
        return this;
    }

    public void triggerRefresh() {
        serviceManager.mySqlSites().triggerRefresh(resourceGroupName, siteName);
    }

    public void triggerRefresh(Context context) {
        serviceManager.mySqlSites().triggerRefresh(resourceGroupName, siteName, context);
    }

    public MySqlSiteImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MySqlSiteImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MySqlSiteImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public MySqlSiteImpl withMasterSiteId(String masterSiteId) {
        if (isInCreateMode()) {
            this.innerModel().withMasterSiteId(masterSiteId);
            return this;
        } else {
            this.updateBody.withMasterSiteId(masterSiteId);
            return this;
        }
    }

    public MySqlSiteImpl withMigrateProjectId(String migrateProjectId) {
        if (isInCreateMode()) {
            this.innerModel().withMigrateProjectId(migrateProjectId);
            return this;
        } else {
            this.updateBody.withMigrateProjectId(migrateProjectId);
            return this;
        }
    }

    public MySqlSiteImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public MySqlSiteImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateBody.withProvisioningState(provisioningState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
