// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windfall.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.windfall.fluent.models.WindfallDeploymentInner;
import com.azure.resourcemanager.windfall.models.ProvisioningState;
import com.azure.resourcemanager.windfall.models.WindfallDeployment;
import com.azure.resourcemanager.windfall.models.WindfallDeploymentUpdate;
import java.util.Collections;
import java.util.Map;

public final class WindfallDeploymentImpl
    implements WindfallDeployment, WindfallDeployment.Definition, WindfallDeployment.Update {
    private WindfallDeploymentInner innerObject;

    private final com.azure.resourcemanager.windfall.WindfallManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String property1() {
        return this.innerModel().property1();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WindfallDeploymentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.windfall.WindfallManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String windfallDeploymentName;

    private WindfallDeploymentUpdate updateProperties;

    public WindfallDeploymentImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public WindfallDeployment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .createOrUpdate(resourceGroupName, windfallDeploymentName, this.innerModel(), Context.NONE);
        return this;
    }

    public WindfallDeployment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .createOrUpdate(resourceGroupName, windfallDeploymentName, this.innerModel(), context);
        return this;
    }

    WindfallDeploymentImpl(String name, com.azure.resourcemanager.windfall.WindfallManager serviceManager) {
        this.innerObject = new WindfallDeploymentInner();
        this.serviceManager = serviceManager;
        this.windfallDeploymentName = name;
    }

    public WindfallDeploymentImpl update() {
        this.updateProperties = new WindfallDeploymentUpdate();
        return this;
    }

    public WindfallDeployment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .updateWithResponse(resourceGroupName, windfallDeploymentName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public WindfallDeployment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .updateWithResponse(resourceGroupName, windfallDeploymentName, updateProperties, context)
                .getValue();
        return this;
    }

    WindfallDeploymentImpl(
        WindfallDeploymentInner innerObject, com.azure.resourcemanager.windfall.WindfallManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.windfallDeploymentName = Utils.getValueFromIdByName(innerObject.id(), "WindfallDeployments");
    }

    public WindfallDeployment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .getByResourceGroupWithResponse(resourceGroupName, windfallDeploymentName, Context.NONE)
                .getValue();
        return this;
    }

    public WindfallDeployment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWindfallDeployments()
                .getByResourceGroupWithResponse(resourceGroupName, windfallDeploymentName, context)
                .getValue();
        return this;
    }

    public WindfallDeploymentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public WindfallDeploymentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public WindfallDeploymentImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public WindfallDeploymentImpl withProperty1(String property1) {
        this.innerModel().withProperty1(property1);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
