// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windfall.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of WindfallDeployments. */
public interface WindfallDeployments {
    /**
     * List WindfallDeployment resources by subscription ID.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WindfallDeployment> list();

    /**
     * List WindfallDeployment resources by subscription ID.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WindfallDeployment> list(Context context);

    /**
     * List WindfallDeployment resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WindfallDeployment> listByResourceGroup(String resourceGroupName);

    /**
     * List WindfallDeployment resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WindfallDeployment> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment along with {@link Response}.
     */
    Response<WindfallDeployment> getByResourceGroupWithResponse(
        String resourceGroupName, String windfallDeploymentName, Context context);

    /**
     * Get a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment.
     */
    WindfallDeployment getByResourceGroup(String resourceGroupName, String windfallDeploymentName);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String windfallDeploymentName);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String windfallDeploymentName, Context context);

    /**
     * Get a WindfallDeployment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment along with {@link Response}.
     */
    WindfallDeployment getById(String id);

    /**
     * Get a WindfallDeployment.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment along with {@link Response}.
     */
    Response<WindfallDeployment> getByIdWithResponse(String id, Context context);

    /**
     * Delete a WindfallDeployment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a WindfallDeployment.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new WindfallDeployment resource.
     *
     * @param name resource name.
     * @return the first stage of the new WindfallDeployment definition.
     */
    WindfallDeployment.DefinitionStages.Blank define(String name);
}
