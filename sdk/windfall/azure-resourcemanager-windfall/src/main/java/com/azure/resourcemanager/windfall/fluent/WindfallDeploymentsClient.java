// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windfall.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.windfall.fluent.models.WindfallDeploymentInner;
import com.azure.resourcemanager.windfall.models.WindfallDeploymentUpdate;

/** An instance of this class provides access to all the operations defined in WindfallDeploymentsClient. */
public interface WindfallDeploymentsClient {
    /**
     * List WindfallDeployment resources by subscription ID.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WindfallDeploymentInner> list();

    /**
     * List WindfallDeployment resources by subscription ID.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WindfallDeploymentInner> list(Context context);

    /**
     * List WindfallDeployment resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WindfallDeploymentInner> listByResourceGroup(String resourceGroupName);

    /**
     * List WindfallDeployment resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WindfallDeployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WindfallDeploymentInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WindfallDeploymentInner> getByResourceGroupWithResponse(
        String resourceGroupName, String windfallDeploymentName, Context context);

    /**
     * Get a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WindfallDeploymentInner getByResourceGroup(String resourceGroupName, String windfallDeploymentName);

    /**
     * Create a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a WindfallDeployment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WindfallDeploymentInner>, WindfallDeploymentInner> beginCreateOrUpdate(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentInner resource);

    /**
     * Create a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a WindfallDeployment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WindfallDeploymentInner>, WindfallDeploymentInner> beginCreateOrUpdate(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentInner resource, Context context);

    /**
     * Create a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WindfallDeploymentInner createOrUpdate(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentInner resource);

    /**
     * Create a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WindfallDeploymentInner createOrUpdate(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentInner resource, Context context);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String windfallDeploymentName);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String windfallDeploymentName, Context context);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String windfallDeploymentName);

    /**
     * Delete a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String windfallDeploymentName, Context context);

    /**
     * Update a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WindfallDeploymentInner> updateWithResponse(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentUpdate properties, Context context);

    /**
     * Update a WindfallDeployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param windfallDeploymentName Unique identifier for this Windfall deployment.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WindfallDeployment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WindfallDeploymentInner update(
        String resourceGroupName, String windfallDeploymentName, WindfallDeploymentUpdate properties);
}
