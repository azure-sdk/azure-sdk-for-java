// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.microsoftplaywrighttesting.implementation.AccessTokensImpl;
import com.azure.developer.microsoftplaywrighttesting.models.AccessToken;

/**
 * Initializes a new instance of the synchronous AuthManagerClient type.
 */
@ServiceClient(builder = AuthManagerClientBuilder.class)
public final class AccessTokensClient {
    @Generated
    private final AccessTokensImpl serviceClient;

    /**
     * Initializes an instance of AccessTokensClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AccessTokensClient(AccessTokensImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }</pre>
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model of an access-token linked to an account along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String accountId, String accessTokenId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(accountId, accessTokenId, resource, requestOptions);
    }

    /**
     * Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }</pre>
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an access-token for the account with given access-token id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String accountId, String accessTokenId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(accountId, accessTokenId, requestOptions);
    }

    /**
     * Deletes an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String accountId, String accessTokenId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(accountId, accessTokenId, requestOptions);
    }

    /**
     * Lists access-tokens for the given account id. Authorization required is Bearer JWT Access token provided by
     * EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     jwtToken: String (Optional)
     *     createdAt: OffsetDateTime (Required)
     *     expiryAt: OffsetDateTime (Required)
     *     state: String(Active/Expired) (Required)
     * }
     * }</pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AccessToken items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.list(accountId, requestOptions);
    }

    /**
     * Validates access-token provided in authorization header for the given account id. Authorization required is
     * Bearer JWT Access token provided by MPT service.
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> validateWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.validateWithResponse(accountId, requestOptions);
    }

    /**
     * Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model of an access-token linked to an account.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessToken create(String accountId, String accessTokenId, AccessToken resource) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(accountId, accessTokenId, BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(AccessToken.class);
    }

    /**
     * Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access-token for the account with given access-token id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessToken get(String accountId, String accessTokenId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(accountId, accessTokenId, requestOptions).getValue().toObject(AccessToken.class);
    }

    /**
     * Deletes an access-token for the account with given access-token id. Authorization required is Bearer JWT Access
     * token provided by EntraID.
     * 
     * @param accountId The account id.
     * @param accessTokenId The access-token id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String accountId, String accessTokenId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(accountId, accessTokenId, requestOptions).getValue();
    }

    /**
     * Lists access-tokens for the given account id. Authorization required is Bearer JWT Access token provided by
     * EntraID.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of AccessToken items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AccessToken> list(String accountId) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(accountId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(AccessToken.class));
    }

    /**
     * Validates access-token provided in authorization header for the given account id. Authorization required is
     * Bearer JWT Access token provided by MPT service.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void validate(String accountId) {
        // Generated convenience method for validateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        validateWithResponse(accountId, requestOptions).getValue();
    }
}
