// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Model representing a test results URL.
 */
@Immutable
public final class TestResultsUrl implements JsonSerializable<TestResultsUrl> {
    /*
     * URL for accessing test results.
     */
    @Generated
    private final String url;

    /*
     * Creation timestamp of the test results URL- RFC 3339 literal format
     */
    @Generated
    private final OffsetDateTime createdAt;

    /*
     * Expiration timestamp of the test results URL- RFC 3339 literal format
     */
    @Generated
    private final OffsetDateTime expiresAt;

    /*
     * Access level for the test results URL.
     */
    @Generated
    private final AccessLevel accessLevel;

    /**
     * Creates an instance of TestResultsUrl class.
     * 
     * @param url the url value to set.
     * @param createdAt the createdAt value to set.
     * @param expiresAt the expiresAt value to set.
     * @param accessLevel the accessLevel value to set.
     */
    @Generated
    private TestResultsUrl(String url, OffsetDateTime createdAt, OffsetDateTime expiresAt, AccessLevel accessLevel) {
        this.url = url;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.accessLevel = accessLevel;
    }

    /**
     * Get the url property: URL for accessing test results.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the createdAt property: Creation timestamp of the test results URL- RFC 3339 literal format.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the expiresAt property: Expiration timestamp of the test results URL- RFC 3339 literal format.
     * 
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Get the accessLevel property: Access level for the test results URL.
     * 
     * @return the accessLevel value.
     */
    @Generated
    public AccessLevel getAccessLevel() {
        return this.accessLevel;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("expiresAt",
            this.expiresAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiresAt));
        jsonWriter.writeStringField("accessLevel", this.accessLevel == null ? null : this.accessLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestResultsUrl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestResultsUrl if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestResultsUrl.
     */
    @Generated
    public static TestResultsUrl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String url = null;
            OffsetDateTime createdAt = null;
            OffsetDateTime expiresAt = null;
            AccessLevel accessLevel = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiresAt".equals(fieldName)) {
                    expiresAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("accessLevel".equals(fieldName)) {
                    accessLevel = AccessLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TestResultsUrl(url, createdAt, expiresAt, accessLevel);
        });
    }
}
