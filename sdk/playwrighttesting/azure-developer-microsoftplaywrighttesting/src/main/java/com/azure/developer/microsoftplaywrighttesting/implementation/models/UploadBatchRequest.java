// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.developer.microsoftplaywrighttesting.models.TestResultDetails;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The UploadBatchRequest model.
 */
@Immutable
public final class UploadBatchRequest implements JsonSerializable<UploadBatchRequest> {
    /*
     * List of test results.
     */
    @Generated
    private final List<TestResultDetails> values;

    /**
     * Creates an instance of UploadBatchRequest class.
     * 
     * @param values the values value to set.
     */
    @Generated
    public UploadBatchRequest(List<TestResultDetails> values) {
        this.values = values;
    }

    /**
     * Get the values property: List of test results.
     * 
     * @return the values value.
     */
    @Generated
    public List<TestResultDetails> getValues() {
        return this.values;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadBatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadBatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UploadBatchRequest.
     */
    @Generated
    public static UploadBatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<TestResultDetails> values = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("values".equals(fieldName)) {
                    values = reader.readArray(reader1 -> TestResultDetails.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new UploadBatchRequest(values);
        });
    }
}
