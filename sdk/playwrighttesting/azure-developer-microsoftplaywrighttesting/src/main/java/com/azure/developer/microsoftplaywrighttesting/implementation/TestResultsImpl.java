// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.developer.microsoftplaywrighttesting.MicrosoftPlaywrightTestingServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TestResults.
 */
public final class TestResultsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TestResultsService service;

    /**
     * The service client containing this operation class.
     */
    private final ReportingClientImpl client;

    /**
     * Initializes an instance of TestResultsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TestResultsImpl(ReportingClientImpl client) {
        this.service
            = RestProxy.create(TestResultsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlaywrightTestingServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ReportingClientTestResults to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ReportingClientTestR")
    public interface TestResultsService {
        @Post("/accounts/{accountId}/test-results:uploadBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> uploadBatch(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @QueryParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData uploadBatchRequest,
            RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-results:uploadBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> uploadBatchSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @QueryParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData uploadBatchRequest,
            RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-results")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-results")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-results:resultsStats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> computeResultsStats(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-results:resultsStats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> computeResultsStatsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Upload Test Results.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Required): [
     *          (Required){
     *             testExecutionId: String (Required)
     *             testId: String (Required)
     *             testCombinationId: String (Required)
     *             runId: String (Required)
     *             shardId: int (Required)
     *             accountId: String (Required)
     *             suiteId: String (Required)
     *             testTitle: String (Required)
     *             suiteTitle: String (Required)
     *             fileName: String (Required)
     *             lineNumber: int (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             webTestConfig (Optional): {
     *                 jobName: String (Required)
     *                 projectName: String (Required)
     *                 browserType: String(Chromium/Webkit/Firefox) (Required)
     *                 os: String(Windows/Linux/Mac) (Required)
     *             }
     *             ciConfig (Optional): {
     *                 ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *                 branch: String (Optional)
     *                 author: String (Optional)
     *                 commitId: String (Optional)
     *                 revisionUrl: String (Optional)
     *             }
     *             durationInMs: long (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Optional): [
     *                 String(Image/Video/Trace) (Optional)
     *             ]
     *             previousRetries (Optional): [
     *                  (Optional){
     *                     testExecutionId: String (Required)
     *                     retryCount: int (Required)
     *                     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *                     durationInMs: Duration (Required)
     *                     startTime: OffsetDateTime (Required)
     *                     attachmentsMetadata (Required): [
     *                         String(Image/Video/Trace) (Required)
     *                     ]
     *                     artifactsPath: String (Optional)
     *                 }
     *             ]
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *             annotations (Optional): [
     *                 String (Optional)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *,
     * [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     * @param uploadBatchRequest The uploadBatchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadBatchWithResponseAsync(String accountId, String testRunId,
        BinaryData uploadBatchRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.uploadBatch(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                accountId, testRunId, contentType, accept, uploadBatchRequest, requestOptions, context));
    }

    /**
     * Upload Test Results.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Required): [
     *          (Required){
     *             testExecutionId: String (Required)
     *             testId: String (Required)
     *             testCombinationId: String (Required)
     *             runId: String (Required)
     *             shardId: int (Required)
     *             accountId: String (Required)
     *             suiteId: String (Required)
     *             testTitle: String (Required)
     *             suiteTitle: String (Required)
     *             fileName: String (Required)
     *             lineNumber: int (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             webTestConfig (Optional): {
     *                 jobName: String (Required)
     *                 projectName: String (Required)
     *                 browserType: String(Chromium/Webkit/Firefox) (Required)
     *                 os: String(Windows/Linux/Mac) (Required)
     *             }
     *             ciConfig (Optional): {
     *                 ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *                 branch: String (Optional)
     *                 author: String (Optional)
     *                 commitId: String (Optional)
     *                 revisionUrl: String (Optional)
     *             }
     *             durationInMs: long (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Optional): [
     *                 String(Image/Video/Trace) (Optional)
     *             ]
     *             previousRetries (Optional): [
     *                  (Optional){
     *                     testExecutionId: String (Required)
     *                     retryCount: int (Required)
     *                     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *                     durationInMs: Duration (Required)
     *                     startTime: OffsetDateTime (Required)
     *                     attachmentsMetadata (Required): [
     *                         String(Image/Video/Trace) (Required)
     *                     ]
     *                     artifactsPath: String (Optional)
     *                 }
     *             ]
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *             annotations (Optional): [
     *                 String (Optional)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *,
     * [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     * @param uploadBatchRequest The uploadBatchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadBatchWithResponse(String accountId, String testRunId, BinaryData uploadBatchRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.uploadBatchSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accountId, testRunId, contentType, accept, uploadBatchRequest, requestOptions, Context.NONE);
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSinglePageAsync(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(String accountId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePageAsync(accountId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSinglePage(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String accountId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePage(accountId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Get Test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag, status
     * with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     skipped: int (Required)
     *     all: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag,
     * status with in operator along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> computeResultsStatsWithResponseAsync(String accountId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.computeResultsStats(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context));
    }

    /**
     * Get Test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag, status
     * with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     skipped: int (Required)
     *     all: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag,
     * status with in operator along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeResultsStatsWithResponse(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.computeResultsStatsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accountId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
