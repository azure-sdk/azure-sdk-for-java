// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Summary of previous retries.
 */
@Immutable
public final class PreviousRetrySummary implements JsonSerializable<PreviousRetrySummary> {
    /*
     * Identifier of the test execution.
     */
    @Generated
    private final String testExecutionId;

    /*
     * Number of retryCount attempts.
     */
    @Generated
    private final int retryCount;

    /*
     * Status of the test execution.
     */
    @Generated
    private final TestStatus status;

    /*
     * Duration of the test execution.
     */
    @Generated
    private final Duration durationInMs;

    /*
     * Start time of the test execution- RFC 3339 literal format
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * Metadata related to attachments.
     */
    @Generated
    private final List<AttachmentKind> attachmentsMetadata;

    /*
     * List of artifacts paths.
     */
    @Generated
    private String artifactsPath;

    /**
     * Creates an instance of PreviousRetrySummary class.
     * 
     * @param testExecutionId the testExecutionId value to set.
     * @param retryCount the retryCount value to set.
     * @param status the status value to set.
     * @param durationInMs the durationInMs value to set.
     * @param startTime the startTime value to set.
     * @param attachmentsMetadata the attachmentsMetadata value to set.
     */
    @Generated
    private PreviousRetrySummary(String testExecutionId, int retryCount, TestStatus status, Duration durationInMs,
        OffsetDateTime startTime, List<AttachmentKind> attachmentsMetadata) {
        this.testExecutionId = testExecutionId;
        this.retryCount = retryCount;
        this.status = status;
        this.durationInMs = durationInMs;
        this.startTime = startTime;
        this.attachmentsMetadata = attachmentsMetadata;
    }

    /**
     * Get the testExecutionId property: Identifier of the test execution.
     * 
     * @return the testExecutionId value.
     */
    @Generated
    public String getTestExecutionId() {
        return this.testExecutionId;
    }

    /**
     * Get the retryCount property: Number of retryCount attempts.
     * 
     * @return the retryCount value.
     */
    @Generated
    public int getRetryCount() {
        return this.retryCount;
    }

    /**
     * Get the status property: Status of the test execution.
     * 
     * @return the status value.
     */
    @Generated
    public TestStatus getStatus() {
        return this.status;
    }

    /**
     * Get the durationInMs property: Duration of the test execution.
     * 
     * @return the durationInMs value.
     */
    @Generated
    public Duration getDurationInMs() {
        return this.durationInMs;
    }

    /**
     * Get the startTime property: Start time of the test execution- RFC 3339 literal format.
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the attachmentsMetadata property: Metadata related to attachments.
     * 
     * @return the attachmentsMetadata value.
     */
    @Generated
    public List<AttachmentKind> getAttachmentsMetadata() {
        return this.attachmentsMetadata;
    }

    /**
     * Get the artifactsPath property: List of artifacts paths.
     * 
     * @return the artifactsPath value.
     */
    @Generated
    public String getArtifactsPath() {
        return this.artifactsPath;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("testExecutionId", this.testExecutionId);
        jsonWriter.writeIntField("retryCount", this.retryCount);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("durationInMs", CoreUtils.durationToStringWithDays(this.durationInMs));
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeArrayField("attachmentsMetadata", this.attachmentsMetadata,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PreviousRetrySummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PreviousRetrySummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PreviousRetrySummary.
     */
    @Generated
    public static PreviousRetrySummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String testExecutionId = null;
            int retryCount = 0;
            TestStatus status = null;
            Duration durationInMs = null;
            OffsetDateTime startTime = null;
            List<AttachmentKind> attachmentsMetadata = null;
            String artifactsPath = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testExecutionId".equals(fieldName)) {
                    testExecutionId = reader.getString();
                } else if ("retryCount".equals(fieldName)) {
                    retryCount = reader.getInt();
                } else if ("status".equals(fieldName)) {
                    status = TestStatus.fromString(reader.getString());
                } else if ("durationInMs".equals(fieldName)) {
                    durationInMs = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("attachmentsMetadata".equals(fieldName)) {
                    attachmentsMetadata = reader.readArray(reader1 -> AttachmentKind.fromString(reader1.getString()));
                } else if ("artifactsPath".equals(fieldName)) {
                    artifactsPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            PreviousRetrySummary deserializedPreviousRetrySummary = new PreviousRetrySummary(testExecutionId,
                retryCount, status, durationInMs, startTime, attachmentsMetadata);
            deserializedPreviousRetrySummary.artifactsPath = artifactsPath;

            return deserializedPreviousRetrySummary;
        });
    }
}
