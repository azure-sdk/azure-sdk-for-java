// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration details for the web test.
 */
@Immutable
public final class WebTestConfig implements JsonSerializable<WebTestConfig> {
    /*
     * Name of the CI job running the test. All unicode characters except ASCII control characters, special characters
     * (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or
     * start with period (.).
     */
    @Generated
    private final String jobName;

    /*
     * Name of the Playwright project.All unicode characters except ASCII control characters, special Git characters (^,
     * ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start
     * with period (.).
     */
    @Generated
    private final String projectName;

    /*
     * Name of the browser.
     */
    @Generated
    private final BrowserType browserType;

    /*
     * Operating system where the browser is hosted.
     */
    @Generated
    private final OsType os;

    /**
     * Creates an instance of WebTestConfig class.
     * 
     * @param jobName the jobName value to set.
     * @param projectName the projectName value to set.
     * @param browserType the browserType value to set.
     * @param os the os value to set.
     */
    @Generated
    public WebTestConfig(String jobName, String projectName, BrowserType browserType, OsType os) {
        this.jobName = jobName;
        this.projectName = projectName;
        this.browserType = browserType;
        this.os = os;
    }

    /**
     * Get the jobName property: Name of the CI job running the test. All unicode characters except ASCII control
     * characters, special characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the jobName value.
     */
    @Generated
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Get the projectName property: Name of the Playwright project.All unicode characters except ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the projectName value.
     */
    @Generated
    public String getProjectName() {
        return this.projectName;
    }

    /**
     * Get the browserType property: Name of the browser.
     * 
     * @return the browserType value.
     */
    @Generated
    public BrowserType getBrowserType() {
        return this.browserType;
    }

    /**
     * Get the os property: Operating system where the browser is hosted.
     * 
     * @return the os value.
     */
    @Generated
    public OsType getOs() {
        return this.os;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobName", this.jobName);
        jsonWriter.writeStringField("projectName", this.projectName);
        jsonWriter.writeStringField("browserType", this.browserType == null ? null : this.browserType.toString());
        jsonWriter.writeStringField("os", this.os == null ? null : this.os.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTestConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTestConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebTestConfig.
     */
    @Generated
    public static WebTestConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String jobName = null;
            String projectName = null;
            BrowserType browserType = null;
            OsType os = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobName".equals(fieldName)) {
                    jobName = reader.getString();
                } else if ("projectName".equals(fieldName)) {
                    projectName = reader.getString();
                } else if ("browserType".equals(fieldName)) {
                    browserType = BrowserType.fromString(reader.getString());
                } else if ("os".equals(fieldName)) {
                    os = OsType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new WebTestConfig(jobName, projectName, browserType, os);
        });
    }
}
