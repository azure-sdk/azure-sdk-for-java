// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.developer.microsoftplaywrighttesting.MicrosoftPlaywrightTestingServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TestRuns.
 */
public final class TestRunsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TestRunsService service;

    /**
     * The service client containing this operation class.
     */
    private final ReportingClientImpl client;

    /**
     * Initializes an instance of TestRunsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TestRunsImpl(ReportingClientImpl client) {
        this.service = RestProxy.create(TestRunsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlaywrightTestingServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ReportingClientTestRuns to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ReportingClientTestR")
    public interface TestRunsService {
        @Patch("/accounts/{accountId}/test-runs/{testRunId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Patch("/accounts/{accountId}/test-runs/{testRunId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-runs/{testRunId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-runs/{testRunId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/test-runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs/{testRunId}:createArtifactsUploadBaseUrl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createArtifactsUploadBaseUrl(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs/{testRunId}:createArtifactsUploadBaseUrl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createArtifactsUploadBaseUrlSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs/{testRunId}:updateShardExecutionStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateShardExecutionStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateShardExecutionStatusRequest, RequestOptions requestOptions,
            Context context);

        @Post("/accounts/{accountId}/test-runs/{testRunId}:updateShardExecutionStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateShardExecutionStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @PathParam("testRunId") String testRunId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData updateShardExecutionStatusRequest, RequestOptions requestOptions,
            Context context);

        @Post("/accounts/{accountId}/test-runs:accountRunStats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> computeAccountRunStats(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs:accountRunStats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> computeAccountRunStatsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs:metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> computeMetadata(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/accounts/{accountId}/test-runs:metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> computeMetadataSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Creates or updates a testrun.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model representing detailed information about a test run along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(String accountId, String testRunId,
        BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                accountId, testRunId, contentType, accept, resource, requestOptions, context));
    }

    /**
     * Creates or updates a testrun.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model representing detailed information about a test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String accountId, String testRunId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accountId, testRunId, contentType, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Gets a test run.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a test run along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String accountId, String testRunId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, testRunId, accept, requestOptions, context));
    }

    /**
     * Gets a test run.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String accountId, String testRunId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accountId,
            testRunId, accept, requestOptions, Context.NONE);
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSinglePageAsync(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(String accountId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePageAsync(accountId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSinglePage(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String accountId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listSinglePage(accountId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Get TestResults Upload Url.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     url: String (Required)
     *     createdAt: OffsetDateTime (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testResults Upload Url along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createArtifactsUploadBaseUrlWithResponseAsync(String accountId, String testRunId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createArtifactsUploadBaseUrl(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, testRunId, accept, requestOptions, context));
    }

    /**
     * Get TestResults Upload Url.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     url: String (Required)
     *     createdAt: OffsetDateTime (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testResults Upload Url along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createArtifactsUploadBaseUrlWithResponse(String accountId, String testRunId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createArtifactsUploadBaseUrlSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, testRunId, accept, requestOptions, Context.NONE);
    }

    /**
     * Resource action operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     shardId: int (Required)
     *     summary (Required): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         uploadMetadata (Optional): {
     *             testResultsCount: int (Required)
     *             totalAttachmentsCount: int (Required)
     *             totalAttachmentsSize: long (Required)
     *         }
     *     }
     *     workersCount: int (Required)
     *     uploadCompleted: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param updateShardExecutionStatusRequest The updateShardExecutionStatusRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateShardExecutionStatusWithResponseAsync(String accountId, String testRunId,
        BinaryData updateShardExecutionStatusRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateShardExecutionStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, testRunId, contentType, accept,
            updateShardExecutionStatusRequest, requestOptions, context));
    }

    /**
     * Resource action operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     shardId: int (Required)
     *     summary (Required): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         uploadMetadata (Optional): {
     *             testResultsCount: int (Required)
     *             totalAttachmentsCount: int (Required)
     *             totalAttachmentsSize: long (Required)
     *         }
     *     }
     *     workersCount: int (Required)
     *     uploadCompleted: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param updateShardExecutionStatusRequest The updateShardExecutionStatusRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateShardExecutionStatusWithResponse(String accountId, String testRunId,
        BinaryData updateShardExecutionStatusRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateShardExecutionStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, testRunId, contentType, accept,
            updateShardExecutionStatusRequest, requestOptions, Context.NONE);
    }

    /**
     * Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     all: int (Required)
     *     cloudExecutionRuns: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> computeAccountRunStatsWithResponseAsync(String accountId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.computeAccountRunStats(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context));
    }

    /**
     * Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     all: int (Required)
     *     cloudExecutionRuns: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeAccountRunStatsWithResponse(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.computeAccountRunStatsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get TestRuns metadata for all runs in an account.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     branches (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRuns metadata for all runs in an account along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> computeMetadataWithResponseAsync(String accountId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.computeMetadata(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context));
    }

    /**
     * Get TestRuns metadata for all runs in an account.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     branches (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRuns metadata for all runs in an account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeMetadataWithResponse(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.computeMetadataSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accountId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
