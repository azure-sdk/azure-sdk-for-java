// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An account is a parent resource for most of the other service resources. It's directly mapped to an Azure resource.
 */
@Immutable
public final class Account implements JsonSerializable<Account> {
    /*
     * The account id.
     */
    @Generated
    private String id;

    /*
     * The fully-qualified Azure resource id for the account.
     */
    @Generated
    private String resourceId;

    /*
     * The account name.
     */
    @Generated
    private String name;

    /*
     * The state of account - Active | Inactive
     */
    @Generated
    private AccountState state;

    /*
     * The Azure subscription id for the account.
     */
    @Generated
    private String subscriptionId;

    /*
     * The Azure subscription state - Registered | Unregistered | Warned | Suspended | Deleted
     */
    @Generated
    private SubscriptionState subscriptionState;

    /*
     * The Azure tenant id of the account.
     */
    @Generated
    private String tenantId;

    /*
     * The account resource location in Azure, for eg. eastus, southeastasia.
     */
    @Generated
    private String location;

    /*
     * This property sets the connection region for Playwright client workers to cloud-hosted browsers. If enabled,
     * workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to
     * browsers in the Azure region in which the workspace was initially created.
     */
    @Generated
    private EnablementStatus regionalAffinity;

    /*
     * When enabled, Playwright client workers can connect to cloud-hosted browsers. This can increase the number of
     * parallel workers for a test run, significantly minimizing test completion durations.
     */
    @Generated
    private EnablementStatus scalableExecution;

    /*
     * When enabled, this feature allows the workspace to upload and display test results, including artifacts like
     * traces and screenshots, in the Playwright portal. This enables faster and more efficient troubleshooting.
     */
    @Generated
    private EnablementStatus reporting;

    /*
     * When enabled, this feature allows the workspace to use local auth (through service access token) for executing
     * operations.
     */
    @Generated
    private EnablementStatus localAuth;

    /**
     * Creates an instance of Account class.
     */
    @Generated
    private Account() {
    }

    /**
     * Get the id property: The account id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the resourceId property: The fully-qualified Azure resource id for the account.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the name property: The account name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the state property: The state of account - Active | Inactive.
     * 
     * @return the state value.
     */
    @Generated
    public AccountState getState() {
        return this.state;
    }

    /**
     * Get the subscriptionId property: The Azure subscription id for the account.
     * 
     * @return the subscriptionId value.
     */
    @Generated
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the subscriptionState property: The Azure subscription state - Registered | Unregistered | Warned | Suspended
     * | Deleted.
     * 
     * @return the subscriptionState value.
     */
    @Generated
    public SubscriptionState getSubscriptionState() {
        return this.subscriptionState;
    }

    /**
     * Get the tenantId property: The Azure tenant id of the account.
     * 
     * @return the tenantId value.
     */
    @Generated
    public String getTenantId() {
        return this.tenantId;
    }

    /**
     * Get the location property: The account resource location in Azure, for eg. eastus, southeastasia.
     * 
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the regionalAffinity property: This property sets the connection region for Playwright client workers to
     * cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower
     * latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially
     * created.
     * 
     * @return the regionalAffinity value.
     */
    @Generated
    public EnablementStatus getRegionalAffinity() {
        return this.regionalAffinity;
    }

    /**
     * Get the scalableExecution property: When enabled, Playwright client workers can connect to cloud-hosted browsers.
     * This can increase the number of parallel workers for a test run, significantly minimizing test completion
     * durations.
     * 
     * @return the scalableExecution value.
     */
    @Generated
    public EnablementStatus getScalableExecution() {
        return this.scalableExecution;
    }

    /**
     * Get the reporting property: When enabled, this feature allows the workspace to upload and display test results,
     * including artifacts like traces and screenshots, in the Playwright portal. This enables faster and more efficient
     * troubleshooting.
     * 
     * @return the reporting value.
     */
    @Generated
    public EnablementStatus getReporting() {
        return this.reporting;
    }

    /**
     * Get the localAuth property: When enabled, this feature allows the workspace to use local auth (through service
     * access token) for executing operations.
     * 
     * @return the localAuth value.
     */
    @Generated
    public EnablementStatus getLocalAuth() {
        return this.localAuth;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Account from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Account if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Account.
     */
    @Generated
    public static Account fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Account deserializedAccount = new Account();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAccount.id = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedAccount.resourceId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAccount.name = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAccount.state = AccountState.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedAccount.subscriptionId = reader.getString();
                } else if ("subscriptionState".equals(fieldName)) {
                    deserializedAccount.subscriptionState = SubscriptionState.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAccount.tenantId = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAccount.location = reader.getString();
                } else if ("regionalAffinity".equals(fieldName)) {
                    deserializedAccount.regionalAffinity = EnablementStatus.fromString(reader.getString());
                } else if ("scalableExecution".equals(fieldName)) {
                    deserializedAccount.scalableExecution = EnablementStatus.fromString(reader.getString());
                } else if ("reporting".equals(fieldName)) {
                    deserializedAccount.reporting = EnablementStatus.fromString(reader.getString());
                } else if ("localAuth".equals(fieldName)) {
                    deserializedAccount.localAuth = EnablementStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccount;
        });
    }
}
