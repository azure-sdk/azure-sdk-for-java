// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.microsoftplaywrighttesting.implementation.TestResultsImpl;
import com.azure.developer.microsoftplaywrighttesting.implementation.models.UploadBatchRequest;
import com.azure.developer.microsoftplaywrighttesting.models.ResultsStats;
import com.azure.developer.microsoftplaywrighttesting.models.TestResultDetails;
import java.util.List;

/**
 * Initializes a new instance of the synchronous ReportingClient type.
 */
@ServiceClient(builder = ReportingClientBuilder.class)
public final class TestResultsClient {
    @Generated
    private final TestResultsImpl serviceClient;

    /**
     * Initializes an instance of TestResultsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestResultsClient(TestResultsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Upload Test Results.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Required): [
     *          (Required){
     *             testExecutionId: String (Required)
     *             testId: String (Required)
     *             testCombinationId: String (Required)
     *             runId: String (Required)
     *             shardId: int (Required)
     *             accountId: String (Required)
     *             suiteId: String (Required)
     *             testTitle: String (Required)
     *             suiteTitle: String (Required)
     *             fileName: String (Required)
     *             lineNumber: int (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             webTestConfig (Optional): {
     *                 jobName: String (Required)
     *                 projectName: String (Required)
     *                 browserType: String(Chromium/Webkit/Firefox) (Required)
     *                 os: String(Windows/Linux/Mac) (Required)
     *             }
     *             ciConfig (Optional): {
     *                 ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *                 branch: String (Optional)
     *                 author: String (Optional)
     *                 commitId: String (Optional)
     *                 revisionUrl: String (Optional)
     *             }
     *             durationInMs: long (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Optional): [
     *                 String(Image/Video/Trace) (Optional)
     *             ]
     *             previousRetries (Optional): [
     *                  (Optional){
     *                     testExecutionId: String (Required)
     *                     retryCount: int (Required)
     *                     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *                     durationInMs: Duration (Required)
     *                     startTime: OffsetDateTime (Required)
     *                     attachmentsMetadata (Required): [
     *                         String(Image/Video/Trace) (Required)
     *                     ]
     *                     artifactsPath: String (Optional)
     *                 }
     *             ]
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *             annotations (Optional): [
     *                 String (Optional)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *,
     * [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     * @param uploadBatchRequest The uploadBatchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadBatchWithResponse(String accountId, String testRunId, BinaryData uploadBatchRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.uploadBatchWithResponse(accountId, testRunId, uploadBatchRequest, requestOptions);
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testExecutionId: String (Required)
     *     testId: String (Required)
     *     testCombinationId: String (Required)
     *     runId: String (Required)
     *     shardId: int (Required)
     *     accountId: String (Required)
     *     suiteId: String (Required)
     *     testTitle: String (Required)
     *     suiteTitle: String (Required)
     *     fileName: String (Required)
     *     lineNumber: int (Required)
     *     retryCount: int (Required)
     *     status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *     webTestConfig (Optional): {
     *         jobName: String (Required)
     *         projectName: String (Required)
     *         browserType: String(Chromium/Webkit/Firefox) (Required)
     *         os: String(Windows/Linux/Mac) (Required)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     durationInMs: long (Required)
     *     startTime: OffsetDateTime (Required)
     *     attachmentsMetadata (Optional): [
     *         String(Image/Video/Trace) (Optional)
     *     ]
     *     previousRetries (Optional): [
     *          (Optional){
     *             testExecutionId: String (Required)
     *             retryCount: int (Required)
     *             status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *             durationInMs: Duration (Required)
     *             startTime: OffsetDateTime (Required)
     *             attachmentsMetadata (Required): [
     *                 String(Image/Video/Trace) (Required)
     *             ]
     *             artifactsPath: String (Optional)
     *         }
     *     ]
     *     tags (Optional): [
     *         String (Optional)
     *     ]
     *     annotations (Optional): [
     *         String (Optional)
     *     ]
     *     artifactsPath: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestResultDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.list(accountId, requestOptions);
    }

    /**
     * Get Test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag, status
     * with in operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     skipped: int (Required)
     *     all: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag,
     * status with in operator along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeResultsStatsWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.computeResultsStatsWithResponse(accountId, requestOptions);
    }

    /**
     * Upload Test Results.
     * 
     * @param accountId The account id.
     * @param testRunId All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *,
     * [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     * @param values List of test results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void uploadBatch(String accountId, String testRunId, List<TestResultDetails> values) {
        // Generated convenience method for uploadBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UploadBatchRequest uploadBatchRequestObj = new UploadBatchRequest(values);
        BinaryData uploadBatchRequest = BinaryData.fromObject(uploadBatchRequestObj);
        uploadBatchWithResponse(accountId, testRunId, uploadBatchRequest, requestOptions).getValue();
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * 
     * @param accountId The account id.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestResultDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestResultDetails> list(String accountId, Integer top, Integer skip, String filter) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return serviceClient.list(accountId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TestResultDetails.class));
    }

    /**
     * List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator , project, jobname
     * tag, status with in operator.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestResultDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestResultDetails> list(String accountId) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(accountId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TestResultDetails.class));
    }

    /**
     * Get Test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag, status
     * with in operator.
     * 
     * @param accountId The account id.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag,
     * status with in operator.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResultsStats computeResultsStats(String accountId, Integer top, Integer skip, Integer maxPageSize,
        String filter) {
        // Generated convenience method for computeResultsStatsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return computeResultsStatsWithResponse(accountId, requestOptions).getValue().toObject(ResultsStats.class);
    }

    /**
     * Get Test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag, status
     * with in operator.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Results summary.Supported filters are runid,testTitle with eq operator , project, jobname tag,
     * status with in operator.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResultsStats computeResultsStats(String accountId) {
        // Generated convenience method for computeResultsStatsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return computeResultsStatsWithResponse(accountId, requestOptions).getValue().toObject(ResultsStats.class);
    }
}
