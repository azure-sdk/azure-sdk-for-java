// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Model representing continuous integration (CI) configuration.
 */
@Fluent
public final class CiConfig implements JsonSerializable<CiConfig> {
    /*
     * Name of the CI provider. GitHub | Azure DevOps | Default
     */
    @Generated
    private CiProviderName ciProviderName;

    /*
     * Branch name in the source code repository. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     */
    @Generated
    private String branch;

    /*
     * Author of the commit triggering the test run. All unicode characters except ASCII control characters, special Git
     * characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash
     * (/) or start with period (.).
     */
    @Generated
    private String author;

    /*
     * ID of the commit triggering the test run. This is the SHA-1 hash
     */
    @Generated
    private String commitId;

    /*
     * URL linking to the revision details. Should be a valid Url. Allowed characters- alphanumeric characters (A-Z,
     * a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward slashes (/) for hierarchy. Special
     * characters must be URL-encoded.
     */
    @Generated
    private String revisionUrl;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setCiConfigAccessor(new JsonMergePatchHelper.CiConfigAccessor() {
            @Override
            public CiConfig prepareModelForJsonMergePatch(CiConfig model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(CiConfig model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of CiConfig class.
     */
    @Generated
    public CiConfig() {
    }

    /**
     * Get the ciProviderName property: Name of the CI provider. GitHub | Azure DevOps | Default.
     * 
     * @return the ciProviderName value.
     */
    @Generated
    public CiProviderName getCiProviderName() {
        return this.ciProviderName;
    }

    /**
     * Set the ciProviderName property: Name of the CI provider. GitHub | Azure DevOps | Default.
     * 
     * @param ciProviderName the ciProviderName value to set.
     * @return the CiConfig object itself.
     */
    @Generated
    public CiConfig setCiProviderName(CiProviderName ciProviderName) {
        this.ciProviderName = ciProviderName;
        this.updatedProperties.add("ciProviderName");
        return this;
    }

    /**
     * Get the branch property: Branch name in the source code repository. All unicode characters except spaces, ASCII
     * control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     * (//), or start/end with a slash (/) or start with period (.).
     * 
     * @return the branch value.
     */
    @Generated
    public String getBranch() {
        return this.branch;
    }

    /**
     * Set the branch property: Branch name in the source code repository. All unicode characters except spaces, ASCII
     * control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     * (//), or start/end with a slash (/) or start with period (.).
     * 
     * @param branch the branch value to set.
     * @return the CiConfig object itself.
     */
    @Generated
    public CiConfig setBranch(String branch) {
        this.branch = branch;
        this.updatedProperties.add("branch");
        return this;
    }

    /**
     * Get the author property: Author of the commit triggering the test run. All unicode characters except ASCII
     * control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     * (//), or start/end with a slash (/) or start with period (.).
     * 
     * @return the author value.
     */
    @Generated
    public String getAuthor() {
        return this.author;
    }

    /**
     * Set the author property: Author of the commit triggering the test run. All unicode characters except ASCII
     * control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     * (//), or start/end with a slash (/) or start with period (.).
     * 
     * @param author the author value to set.
     * @return the CiConfig object itself.
     */
    @Generated
    public CiConfig setAuthor(String author) {
        this.author = author;
        this.updatedProperties.add("author");
        return this;
    }

    /**
     * Get the commitId property: ID of the commit triggering the test run. This is the SHA-1 hash.
     * 
     * @return the commitId value.
     */
    @Generated
    public String getCommitId() {
        return this.commitId;
    }

    /**
     * Set the commitId property: ID of the commit triggering the test run. This is the SHA-1 hash.
     * 
     * @param commitId the commitId value to set.
     * @return the CiConfig object itself.
     */
    @Generated
    public CiConfig setCommitId(String commitId) {
        this.commitId = commitId;
        this.updatedProperties.add("commitId");
        return this;
    }

    /**
     * Get the revisionUrl property: URL linking to the revision details. Should be a valid Url. Allowed characters-
     * alphanumeric characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward
     * slashes (/) for hierarchy. Special characters must be URL-encoded.
     * 
     * @return the revisionUrl value.
     */
    @Generated
    public String getRevisionUrl() {
        return this.revisionUrl;
    }

    /**
     * Set the revisionUrl property: URL linking to the revision details. Should be a valid Url. Allowed characters-
     * alphanumeric characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward
     * slashes (/) for hierarchy. Special characters must be URL-encoded.
     * 
     * @param revisionUrl the revisionUrl value to set.
     * @return the CiConfig object itself.
     */
    @Generated
    public CiConfig setRevisionUrl(String revisionUrl) {
        this.revisionUrl = revisionUrl;
        this.updatedProperties.add("revisionUrl");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("ciProviderName",
                this.ciProviderName == null ? null : this.ciProviderName.toString());
            jsonWriter.writeStringField("branch", this.branch);
            jsonWriter.writeStringField("author", this.author);
            jsonWriter.writeStringField("commitId", this.commitId);
            jsonWriter.writeStringField("revisionUrl", this.revisionUrl);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("ciProviderName")) {
            if (this.ciProviderName == null) {
                jsonWriter.writeNullField("ciProviderName");
            } else {
                jsonWriter.writeStringField("ciProviderName", this.ciProviderName.toString());
            }
        }
        if (updatedProperties.contains("branch")) {
            if (this.branch == null) {
                jsonWriter.writeNullField("branch");
            } else {
                jsonWriter.writeStringField("branch", this.branch);
            }
        }
        if (updatedProperties.contains("author")) {
            if (this.author == null) {
                jsonWriter.writeNullField("author");
            } else {
                jsonWriter.writeStringField("author", this.author);
            }
        }
        if (updatedProperties.contains("commitId")) {
            if (this.commitId == null) {
                jsonWriter.writeNullField("commitId");
            } else {
                jsonWriter.writeStringField("commitId", this.commitId);
            }
        }
        if (updatedProperties.contains("revisionUrl")) {
            if (this.revisionUrl == null) {
                jsonWriter.writeNullField("revisionUrl");
            } else {
                jsonWriter.writeStringField("revisionUrl", this.revisionUrl);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CiConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CiConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CiConfig.
     */
    @Generated
    public static CiConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CiConfig deserializedCiConfig = new CiConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ciProviderName".equals(fieldName)) {
                    deserializedCiConfig.ciProviderName = CiProviderName.fromString(reader.getString());
                } else if ("branch".equals(fieldName)) {
                    deserializedCiConfig.branch = reader.getString();
                } else if ("author".equals(fieldName)) {
                    deserializedCiConfig.author = reader.getString();
                } else if ("commitId".equals(fieldName)) {
                    deserializedCiConfig.commitId = reader.getString();
                } else if ("revisionUrl".equals(fieldName)) {
                    deserializedCiConfig.revisionUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCiConfig;
        });
    }
}
