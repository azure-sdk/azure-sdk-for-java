// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Metadata for testruns/builds.
 */
@Immutable
public final class TestRunsMetadata implements JsonSerializable<TestRunsMetadata> {
    /*
     * List of CI branches for a testrun, All unicode characters except ASCII control characters, special Git characters
     * (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or
     * start with period (.).
     */
    @Generated
    private final List<String> branches;

    /**
     * Creates an instance of TestRunsMetadata class.
     * 
     * @param branches the branches value to set.
     */
    @Generated
    private TestRunsMetadata(List<String> branches) {
        this.branches = branches;
    }

    /**
     * Get the branches property: List of CI branches for a testrun, All unicode characters except ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the branches value.
     */
    @Generated
    public List<String> getBranches() {
        return this.branches;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("branches", this.branches, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunsMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunsMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestRunsMetadata.
     */
    @Generated
    public static TestRunsMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> branches = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("branches".equals(fieldName)) {
                    branches = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TestRunsMetadata(branches);
        });
    }
}
