// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model representing upload metadata.
 */
@Immutable
public final class UploadMetadata implements JsonSerializable<UploadMetadata> {
    /*
     * Total number of test results uploaded.
     */
    @Generated
    private final int testResultsCount;

    /*
     * Total number of attachments uploaded.
     */
    @Generated
    private final int totalAttachmentsCount;

    /*
     * Total size of attachments uploaded in Bytes.
     */
    @Generated
    private final long totalAttachmentsSize;

    /**
     * Creates an instance of UploadMetadata class.
     * 
     * @param testResultsCount the testResultsCount value to set.
     * @param totalAttachmentsCount the totalAttachmentsCount value to set.
     * @param totalAttachmentsSize the totalAttachmentsSize value to set.
     */
    @Generated
    public UploadMetadata(int testResultsCount, int totalAttachmentsCount, long totalAttachmentsSize) {
        this.testResultsCount = testResultsCount;
        this.totalAttachmentsCount = totalAttachmentsCount;
        this.totalAttachmentsSize = totalAttachmentsSize;
    }

    /**
     * Get the testResultsCount property: Total number of test results uploaded.
     * 
     * @return the testResultsCount value.
     */
    @Generated
    public int getTestResultsCount() {
        return this.testResultsCount;
    }

    /**
     * Get the totalAttachmentsCount property: Total number of attachments uploaded.
     * 
     * @return the totalAttachmentsCount value.
     */
    @Generated
    public int getTotalAttachmentsCount() {
        return this.totalAttachmentsCount;
    }

    /**
     * Get the totalAttachmentsSize property: Total size of attachments uploaded in Bytes.
     * 
     * @return the totalAttachmentsSize value.
     */
    @Generated
    public long getTotalAttachmentsSize() {
        return this.totalAttachmentsSize;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("testResultsCount", this.testResultsCount);
        jsonWriter.writeIntField("totalAttachmentsCount", this.totalAttachmentsCount);
        jsonWriter.writeLongField("totalAttachmentsSize", this.totalAttachmentsSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UploadMetadata.
     */
    @Generated
    public static UploadMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int testResultsCount = 0;
            int totalAttachmentsCount = 0;
            long totalAttachmentsSize = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testResultsCount".equals(fieldName)) {
                    testResultsCount = reader.getInt();
                } else if ("totalAttachmentsCount".equals(fieldName)) {
                    totalAttachmentsCount = reader.getInt();
                } else if ("totalAttachmentsSize".equals(fieldName)) {
                    totalAttachmentsSize = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new UploadMetadata(testResultsCount, totalAttachmentsCount, totalAttachmentsSize);
        });
    }
}
