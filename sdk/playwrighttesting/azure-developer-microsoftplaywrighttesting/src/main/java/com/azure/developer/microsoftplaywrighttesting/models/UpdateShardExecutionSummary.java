// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Model to update shard result.
 */
@Fluent
public final class UpdateShardExecutionSummary implements JsonSerializable<UpdateShardExecutionSummary> {
    /*
     * Start time of the test run in datetime(RFC 3339 literal format).
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * End time of the test run.
     */
    @Generated
    private final OffsetDateTime endTime;

    /*
     * Metadata related to test run uploads.
     */
    @Generated
    private UploadMetadata uploadMetadata;

    /**
     * Creates an instance of UpdateShardExecutionSummary class.
     * 
     * @param startTime the startTime value to set.
     * @param endTime the endTime value to set.
     */
    @Generated
    public UpdateShardExecutionSummary(OffsetDateTime startTime, OffsetDateTime endTime) {
        this.startTime = startTime;
        this.endTime = endTime;
    }

    /**
     * Get the startTime property: Start time of the test run in datetime(RFC 3339 literal format).
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the test run.
     * 
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the uploadMetadata property: Metadata related to test run uploads.
     * 
     * @return the uploadMetadata value.
     */
    @Generated
    public UploadMetadata getUploadMetadata() {
        return this.uploadMetadata;
    }

    /**
     * Set the uploadMetadata property: Metadata related to test run uploads.
     * 
     * @param uploadMetadata the uploadMetadata value to set.
     * @return the UpdateShardExecutionSummary object itself.
     */
    @Generated
    public UpdateShardExecutionSummary setUploadMetadata(UploadMetadata uploadMetadata) {
        this.uploadMetadata = uploadMetadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("uploadMetadata", this.uploadMetadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateShardExecutionSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateShardExecutionSummary if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateShardExecutionSummary.
     */
    @Generated
    public static UpdateShardExecutionSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            UploadMetadata uploadMetadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("uploadMetadata".equals(fieldName)) {
                    uploadMetadata = UploadMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            UpdateShardExecutionSummary deserializedUpdateShardExecutionSummary
                = new UpdateShardExecutionSummary(startTime, endTime);
            deserializedUpdateShardExecutionSummary.uploadMetadata = uploadMetadata;

            return deserializedUpdateShardExecutionSummary;
        });
    }
}
