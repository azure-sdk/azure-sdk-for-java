// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.microsoftplaywrighttesting.implementation.AccountsImpl;
import com.azure.developer.microsoftplaywrighttesting.models.Account;
import com.azure.developer.microsoftplaywrighttesting.models.OS;

/**
 * Initializes a new instance of the synchronous AuthManagerClient type.
 */
@ServiceClient(builder = AuthManagerClientBuilder.class)
public final class AccountsClient {
    @Generated
    private final AccountsImpl serviceClient;

    /**
     * Initializes an instance of AccountsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AccountsClient(AccountsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get details of the ARM resource mapped to an account for the given accountId. Authorization required is Bearer
     * JWT Access token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     resourceId: String (Required)
     *     name: String (Required)
     *     state: String(Active/Inactive) (Required)
     *     subscriptionId: String (Required)
     *     subscriptionState: String(Registered/Warned/Suspended/Deleted/Unregistered) (Required)
     *     tenantId: String (Required)
     *     location: String (Required)
     *     regionalAffinity: String(Enabled/Disabled) (Optional)
     *     scalableExecution: String(Enabled/Disabled) (Optional)
     *     reporting: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the ARM resource mapped to an account for the given accountId along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(accountId, requestOptions);
    }

    /**
     * Gets remote browsers corresponding to given accountId and redirects the client for running MPT tests.
     * Authorization required is Bearer JWT Access token provided by EntraID or MPT Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The run id provided by client for corresponding remote test
     * run.</td></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote test runs. Allowed values:
     * "linux", "windows".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given accountId and redirects the client for running MPT tests along
     * with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getBrowsersWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.getBrowsersWithResponse(accountId, requestOptions);
    }

    /**
     * Get details of the ARM resource mapped to an account for the given accountId. Authorization required is Bearer
     * JWT Access token provided by EntraID.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the ARM resource mapped to an account for the given accountId.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Account get(String accountId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(accountId, requestOptions).getValue().toObject(Account.class);
    }

    /**
     * Gets remote browsers corresponding to given accountId and redirects the client for running MPT tests.
     * Authorization required is Bearer JWT Access token provided by EntraID or MPT Service.
     * 
     * @param accountId The account id.
     * @param runId The run id provided by client for corresponding remote test run.
     * @param os The os provided by client for remote test runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getBrowsers(String accountId, String runId, OS os) {
        // Generated convenience method for getBrowsersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (runId != null) {
            requestOptions.addQueryParam("runId", runId, false);
        }
        if (os != null) {
            requestOptions.addQueryParam("os", os.toString(), false);
        }
        getBrowsersWithResponse(accountId, requestOptions).getValue();
    }

    /**
     * Gets remote browsers corresponding to given accountId and redirects the client for running MPT tests.
     * Authorization required is Bearer JWT Access token provided by EntraID or MPT Service.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getBrowsers(String accountId) {
        // Generated convenience method for getBrowsersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getBrowsersWithResponse(accountId, requestOptions).getValue();
    }
}
