// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Model representing a shard. Learn about Playwright sharding here: https://playwright.dev/docs/test-sharding.
 */
@Fluent
public final class ShardDetails implements JsonSerializable<ShardDetails> {
    /*
     * Total number of shards.
     */
    @Generated
    private int total;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setShardDetailsAccessor(new JsonMergePatchHelper.ShardDetailsAccessor() {
            @Override
            public ShardDetails prepareModelForJsonMergePatch(ShardDetails model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ShardDetails model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of ShardDetails class.
     */
    @Generated
    public ShardDetails() {
    }

    /**
     * Get the total property: Total number of shards.
     * 
     * @return the total value.
     */
    @Generated
    public int getTotal() {
        return this.total;
    }

    /**
     * Set the total property: Total number of shards.
     * <p>Required when create the resource.</p>
     * 
     * @param total the total value to set.
     * @return the ShardDetails object itself.
     */
    @Generated
    public ShardDetails setTotal(int total) {
        this.total = total;
        this.updatedProperties.add("total");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeIntField("total", this.total);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("total")) {
            jsonWriter.writeIntField("total", this.total);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShardDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShardDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ShardDetails.
     */
    @Generated
    public static ShardDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShardDetails deserializedShardDetails = new ShardDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("total".equals(fieldName)) {
                    deserializedShardDetails.total = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShardDetails;
        });
    }
}
