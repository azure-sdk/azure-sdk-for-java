// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.developer.microsoftplaywrighttesting.MicrosoftPlaywrightTestingServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Accounts.
 */
public final class AccountsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AccountsService service;

    /**
     * The service client containing this operation class.
     */
    private final AuthManagerClientImpl client;

    /**
     * Initializes an instance of AccountsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AccountsImpl(AuthManagerClientImpl client) {
        this.service = RestProxy.create(AccountsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MicrosoftPlaywrightTestingServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AuthManagerClientAccounts to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AuthManagerClientAcc")
    public interface AccountsService {
        @Get("/accounts/{accountId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/browsers")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getBrowsers(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/accounts/{accountId}/browsers")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getBrowsersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("accountId") String accountId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer
     * JWT Access token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     resourceId: String (Required)
     *     name: String (Required)
     *     state: String(Active/Inactive) (Required)
     *     subscriptionId: String (Required)
     *     subscriptionState: String(Registered/Warned/Suspended/Deleted/Unregistered) (Required)
     *     tenantId: String (Required)
     *     location: String (Required)
     *     regionalAffinity: String(Enabled/Disabled) (Optional)
     *     scalableExecution: String(Enabled/Disabled) (Optional)
     *     reporting: String(Enabled/Disabled) (Optional)
     *     localAuth: String(Enabled/Disabled) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Azure resource mapped to an account for the given account id along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context));
    }

    /**
     * Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer
     * JWT Access token provided by EntraID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     resourceId: String (Required)
     *     name: String (Required)
     *     state: String(Active/Inactive) (Required)
     *     subscriptionId: String (Required)
     *     subscriptionState: String(Registered/Warned/Suspended/Deleted/Unregistered) (Required)
     *     tenantId: String (Required)
     *     location: String (Required)
     *     regionalAffinity: String(Enabled/Disabled) (Optional)
     *     scalableExecution: String(Enabled/Disabled) (Optional)
     *     reporting: String(Enabled/Disabled) (Optional)
     *     localAuth: String(Enabled/Disabled) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Azure resource mapped to an account for the given account id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accountId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests.
     * Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The run id provided by client for corresponding remote test
     * run.</td></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote test runs. Allowed values:
     * "Linux", "Windows".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given account id and redirects the client for running Playwright tests
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getBrowsersWithResponseAsync(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBrowsers(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accountId, accept, requestOptions, context));
    }

    /**
     * Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests.
     * Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>runId</td><td>String</td><td>No</td><td>The run id provided by client for corresponding remote test
     * run.</td></tr>
     * <tr><td>os</td><td>String</td><td>No</td><td>The os provided by client for remote test runs. Allowed values:
     * "Linux", "Windows".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return remote browsers corresponding to given account id and redirects the client for running Playwright tests
     * along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getBrowsersWithResponse(String accountId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getBrowsersSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accountId, accept, requestOptions, Context.NONE);
    }
}
