// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.microsoftplaywrighttesting.models.UpdateShardExecutionSummary;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UpdateShardExecutionStatusRequest model.
 */
@Fluent
public final class UpdateShardExecutionStatusRequest implements JsonSerializable<UpdateShardExecutionStatusRequest> {
    /*
     * Shard Id for the shard- indexed 1,2,3 etc.
     */
    @Generated
    private final int shardId;

    /*
     * Summary of the test run shard.
     */
    @Generated
    private final UpdateShardExecutionSummary summary;

    /*
     * number of workers used by playwright client.
     */
    @Generated
    private final int workersCount;

    /*
     * Flag indicating if upload is completed for the shard.
     */
    @Generated
    private Boolean uploadCompleted;

    /**
     * Creates an instance of UpdateShardExecutionStatusRequest class.
     * 
     * @param shardId the shardId value to set.
     * @param summary the summary value to set.
     * @param workersCount the workersCount value to set.
     */
    @Generated
    public UpdateShardExecutionStatusRequest(int shardId, UpdateShardExecutionSummary summary, int workersCount) {
        this.shardId = shardId;
        this.summary = summary;
        this.workersCount = workersCount;
    }

    /**
     * Get the shardId property: Shard Id for the shard- indexed 1,2,3 etc.
     * 
     * @return the shardId value.
     */
    @Generated
    public int getShardId() {
        return this.shardId;
    }

    /**
     * Get the summary property: Summary of the test run shard.
     * 
     * @return the summary value.
     */
    @Generated
    public UpdateShardExecutionSummary getSummary() {
        return this.summary;
    }

    /**
     * Get the workersCount property: number of workers used by playwright client.
     * 
     * @return the workersCount value.
     */
    @Generated
    public int getWorkersCount() {
        return this.workersCount;
    }

    /**
     * Get the uploadCompleted property: Flag indicating if upload is completed for the shard.
     * 
     * @return the uploadCompleted value.
     */
    @Generated
    public Boolean isUploadCompleted() {
        return this.uploadCompleted;
    }

    /**
     * Set the uploadCompleted property: Flag indicating if upload is completed for the shard.
     * 
     * @param uploadCompleted the uploadCompleted value to set.
     * @return the UpdateShardExecutionStatusRequest object itself.
     */
    @Generated
    public UpdateShardExecutionStatusRequest setUploadCompleted(Boolean uploadCompleted) {
        this.uploadCompleted = uploadCompleted;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("shardId", this.shardId);
        jsonWriter.writeJsonField("summary", this.summary);
        jsonWriter.writeIntField("workersCount", this.workersCount);
        jsonWriter.writeBooleanField("uploadCompleted", this.uploadCompleted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateShardExecutionStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateShardExecutionStatusRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateShardExecutionStatusRequest.
     */
    @Generated
    public static UpdateShardExecutionStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int shardId = 0;
            UpdateShardExecutionSummary summary = null;
            int workersCount = 0;
            Boolean uploadCompleted = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("shardId".equals(fieldName)) {
                    shardId = reader.getInt();
                } else if ("summary".equals(fieldName)) {
                    summary = UpdateShardExecutionSummary.fromJson(reader);
                } else if ("workersCount".equals(fieldName)) {
                    workersCount = reader.getInt();
                } else if ("uploadCompleted".equals(fieldName)) {
                    uploadCompleted = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            UpdateShardExecutionStatusRequest deserializedUpdateShardExecutionStatusRequest
                = new UpdateShardExecutionStatusRequest(shardId, summary, workersCount);
            deserializedUpdateShardExecutionStatusRequest.uploadCompleted = uploadCompleted;

            return deserializedUpdateShardExecutionStatusRequest;
        });
    }
}
