// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model representing summary information about a test run.
 */
@Immutable
public final class CloudRunSummary implements JsonSerializable<CloudRunSummary> {
    /*
     * Status of the test run. Allowed values: RUNNING | CLIENT_COMPLETE | SERVER_COMPLETE
     */
    @Generated
    private final TestRunStatus serverStatus;

    /*
     * Billable time for the test run. Available after testRun Ends
     */
    @Generated
    private Integer billableTimeInMs;

    /*
     * Total time taken for the test run.
     */
    @Generated
    private Integer totalTimeInMs;

    /*
     * Number of browser sessions used in the test run.
     */
    @Generated
    private Integer browserSessionsCount;

    /*
     * Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel browser limit for
     * the workspace.
     */
    @Generated
    private final boolean browserQuotaExceeded;

    /**
     * Creates an instance of CloudRunSummary class.
     * 
     * @param serverStatus the serverStatus value to set.
     * @param browserQuotaExceeded the browserQuotaExceeded value to set.
     */
    @Generated
    private CloudRunSummary(TestRunStatus serverStatus, boolean browserQuotaExceeded) {
        this.serverStatus = serverStatus;
        this.browserQuotaExceeded = browserQuotaExceeded;
    }

    /**
     * Get the serverStatus property: Status of the test run. Allowed values: RUNNING | CLIENT_COMPLETE |
     * SERVER_COMPLETE.
     * 
     * @return the serverStatus value.
     */
    @Generated
    public TestRunStatus getServerStatus() {
        return this.serverStatus;
    }

    /**
     * Get the billableTimeInMs property: Billable time for the test run. Available after testRun Ends.
     * 
     * @return the billableTimeInMs value.
     */
    @Generated
    public Integer getBillableTimeInMs() {
        return this.billableTimeInMs;
    }

    /**
     * Get the totalTimeInMs property: Total time taken for the test run.
     * 
     * @return the totalTimeInMs value.
     */
    @Generated
    public Integer getTotalTimeInMs() {
        return this.totalTimeInMs;
    }

    /**
     * Get the browserSessionsCount property: Number of browser sessions used in the test run.
     * 
     * @return the browserSessionsCount value.
     */
    @Generated
    public Integer getBrowserSessionsCount() {
        return this.browserSessionsCount;
    }

    /**
     * Get the browserQuotaExceeded property: Flag indicating whether the test run was throttled due to reaching the
     * maximum allowed parallel browser limit for the workspace.
     * 
     * @return the browserQuotaExceeded value.
     */
    @Generated
    public boolean isBrowserQuotaExceeded() {
        return this.browserQuotaExceeded;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverStatus", this.serverStatus == null ? null : this.serverStatus.toString());
        jsonWriter.writeBooleanField("browserQuotaExceeded", this.browserQuotaExceeded);
        jsonWriter.writeNumberField("billableTimeInMs", this.billableTimeInMs);
        jsonWriter.writeNumberField("totalTimeInMs", this.totalTimeInMs);
        jsonWriter.writeNumberField("browserSessionsCount", this.browserSessionsCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudRunSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudRunSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CloudRunSummary.
     */
    @Generated
    public static CloudRunSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunStatus serverStatus = null;
            boolean browserQuotaExceeded = false;
            Integer billableTimeInMs = null;
            Integer totalTimeInMs = null;
            Integer browserSessionsCount = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverStatus".equals(fieldName)) {
                    serverStatus = TestRunStatus.fromString(reader.getString());
                } else if ("browserQuotaExceeded".equals(fieldName)) {
                    browserQuotaExceeded = reader.getBoolean();
                } else if ("billableTimeInMs".equals(fieldName)) {
                    billableTimeInMs = reader.getNullable(JsonReader::getInt);
                } else if ("totalTimeInMs".equals(fieldName)) {
                    totalTimeInMs = reader.getNullable(JsonReader::getInt);
                } else if ("browserSessionsCount".equals(fieldName)) {
                    browserSessionsCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            CloudRunSummary deserializedCloudRunSummary = new CloudRunSummary(serverStatus, browserQuotaExceeded);
            deserializedCloudRunSummary.billableTimeInMs = billableTimeInMs;
            deserializedCloudRunSummary.totalTimeInMs = totalTimeInMs;
            deserializedCloudRunSummary.browserSessionsCount = browserSessionsCount;

            return deserializedCloudRunSummary;
        });
    }
}
