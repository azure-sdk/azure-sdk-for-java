// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Details of a single test result.
 */
@Fluent
public final class TestResultDetails implements JsonSerializable<TestResultDetails> {
    /*
     * Identifier of the test execution. Should be a guid
     */
    @Generated
    private String testExecutionId;

    /*
     * Identifier of the test.
     */
    @Generated
    private final String testId;

    /*
     * Identifier of the test combination.This is SHA-1 hash
     */
    @Generated
    private final String testCombinationId;

    /*
     * Identifier of the test run.
     */
    @Generated
    private String runId;

    /*
     * Identifier of the shard.
     */
    @Generated
    private final int shardId;

    /*
     * Identifier of the account.
     */
    @Generated
    private String accountId;

    /*
     * Identifier of the suite.
     */
    @Generated
    private final String suiteId;

    /*
     * Title of the test. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *,
     * [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     */
    @Generated
    private final String testTitle;

    /*
     * Title of the suite. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?,
     * *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     * (.).
     */
    @Generated
    private final String suiteTitle;

    /*
     * Name of the file- subject to constraints of OS and programming language
     */
    @Generated
    private final String fileName;

    /*
     * Line number.
     */
    @Generated
    private final int lineNumber;

    /*
     * Number of retryCount attempts. Max retryCount is 100, after which testresults metadata will not be stored
     */
    @Generated
    private final int retryCount;

    /*
     * Status of the test result. While uploading results, a single test execution status can't be Flaky
     */
    @Generated
    private final TestStatus status;

    /*
     * Configuration for the web test.
     */
    @Generated
    private WebTestConfig webTestConfig;

    /*
     * Continuous integration configuration.
     */
    @Generated
    private CiConfig ciConfig;

    /*
     * Duration of the test execution in milliseconds.
     */
    @Generated
    private final long durationInMs;

    /*
     * Start time of the test execution.- (RFC 3339 literal format)
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as applicable
     */
    @Generated
    private List<AttachmentKind> attachmentsMetadata;

    /*
     * Previous retry summaries. While uploading results, each retry is uploaded separately.However, all the retries of
     * a test gets grouped on the server side and can be retrieved as a single entity using GET API.
     */
    @Generated
    private List<PreviousRetrySummary> previousRetries;

    /*
     * List of tags associated with the test result. All unicode characters except ASCII control characters, special
     * characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash
     * (/) or start with period (.).
     */
    @Generated
    private List<String> tags;

    /*
     * List of annotations (https://playwright.dev/docs/test-annotations).All unicode characters except ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     */
    @Generated
    private List<String> annotations;

    /*
     * Relative path in storage for all the artifacts of this test. contain only lowercase letters, numbers, and
     * hyphens, and cannot start or end with a hyphen or contain consecutive hyphens
     */
    @Generated
    private String artifactsPath;

    /**
     * Creates an instance of TestResultDetails class.
     * 
     * @param testId the testId value to set.
     * @param testCombinationId the testCombinationId value to set.
     * @param shardId the shardId value to set.
     * @param suiteId the suiteId value to set.
     * @param testTitle the testTitle value to set.
     * @param suiteTitle the suiteTitle value to set.
     * @param fileName the fileName value to set.
     * @param lineNumber the lineNumber value to set.
     * @param retryCount the retryCount value to set.
     * @param status the status value to set.
     * @param durationInMs the durationInMs value to set.
     * @param startTime the startTime value to set.
     */
    @Generated
    public TestResultDetails(String testId, String testCombinationId, int shardId, String suiteId, String testTitle,
        String suiteTitle, String fileName, int lineNumber, int retryCount, TestStatus status, long durationInMs,
        OffsetDateTime startTime) {
        this.testId = testId;
        this.testCombinationId = testCombinationId;
        this.shardId = shardId;
        this.suiteId = suiteId;
        this.testTitle = testTitle;
        this.suiteTitle = suiteTitle;
        this.fileName = fileName;
        this.lineNumber = lineNumber;
        this.retryCount = retryCount;
        this.status = status;
        this.durationInMs = durationInMs;
        this.startTime = startTime;
    }

    /**
     * Get the testExecutionId property: Identifier of the test execution. Should be a guid.
     * 
     * @return the testExecutionId value.
     */
    @Generated
    public String getTestExecutionId() {
        return this.testExecutionId;
    }

    /**
     * Get the testId property: Identifier of the test.
     * 
     * @return the testId value.
     */
    @Generated
    public String getTestId() {
        return this.testId;
    }

    /**
     * Get the testCombinationId property: Identifier of the test combination.This is SHA-1 hash.
     * 
     * @return the testCombinationId value.
     */
    @Generated
    public String getTestCombinationId() {
        return this.testCombinationId;
    }

    /**
     * Get the runId property: Identifier of the test run.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the shardId property: Identifier of the shard.
     * 
     * @return the shardId value.
     */
    @Generated
    public int getShardId() {
        return this.shardId;
    }

    /**
     * Get the accountId property: Identifier of the account.
     * 
     * @return the accountId value.
     */
    @Generated
    public String getAccountId() {
        return this.accountId;
    }

    /**
     * Get the suiteId property: Identifier of the suite.
     * 
     * @return the suiteId value.
     */
    @Generated
    public String getSuiteId() {
        return this.suiteId;
    }

    /**
     * Get the testTitle property: Title of the test. All unicode characters except ASCII control characters, special
     * Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a
     * slash (/) or start with period (.).
     * 
     * @return the testTitle value.
     */
    @Generated
    public String getTestTitle() {
        return this.testTitle;
    }

    /**
     * Get the suiteTitle property: Title of the suite. All unicode characters except ASCII control characters, special
     * Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a
     * slash (/) or start with period (.).
     * 
     * @return the suiteTitle value.
     */
    @Generated
    public String getSuiteTitle() {
        return this.suiteTitle;
    }

    /**
     * Get the fileName property: Name of the file- subject to constraints of OS and programming language.
     * 
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Get the lineNumber property: Line number.
     * 
     * @return the lineNumber value.
     */
    @Generated
    public int getLineNumber() {
        return this.lineNumber;
    }

    /**
     * Get the retryCount property: Number of retryCount attempts. Max retryCount is 100, after which testresults
     * metadata will not be stored.
     * 
     * @return the retryCount value.
     */
    @Generated
    public int getRetryCount() {
        return this.retryCount;
    }

    /**
     * Get the status property: Status of the test result. While uploading results, a single test execution status can't
     * be Flaky.
     * 
     * @return the status value.
     */
    @Generated
    public TestStatus getStatus() {
        return this.status;
    }

    /**
     * Get the webTestConfig property: Configuration for the web test.
     * 
     * @return the webTestConfig value.
     */
    @Generated
    public WebTestConfig getWebTestConfig() {
        return this.webTestConfig;
    }

    /**
     * Set the webTestConfig property: Configuration for the web test.
     * 
     * @param webTestConfig the webTestConfig value to set.
     * @return the TestResultDetails object itself.
     */
    @Generated
    public TestResultDetails setWebTestConfig(WebTestConfig webTestConfig) {
        this.webTestConfig = webTestConfig;
        return this;
    }

    /**
     * Get the ciConfig property: Continuous integration configuration.
     * 
     * @return the ciConfig value.
     */
    @Generated
    public CiConfig getCiConfig() {
        return this.ciConfig;
    }

    /**
     * Get the durationInMs property: Duration of the test execution in milliseconds.
     * 
     * @return the durationInMs value.
     */
    @Generated
    public long getDurationInMs() {
        return this.durationInMs;
    }

    /**
     * Get the startTime property: Start time of the test execution.- (RFC 3339 literal format).
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the attachmentsMetadata property: Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as
     * applicable.
     * 
     * @return the attachmentsMetadata value.
     */
    @Generated
    public List<AttachmentKind> getAttachmentsMetadata() {
        return this.attachmentsMetadata;
    }

    /**
     * Set the attachmentsMetadata property: Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as
     * applicable.
     * 
     * @param attachmentsMetadata the attachmentsMetadata value to set.
     * @return the TestResultDetails object itself.
     */
    @Generated
    public TestResultDetails setAttachmentsMetadata(List<AttachmentKind> attachmentsMetadata) {
        this.attachmentsMetadata = attachmentsMetadata;
        return this;
    }

    /**
     * Get the previousRetries property: Previous retry summaries. While uploading results, each retry is uploaded
     * separately.However, all the retries of a test gets grouped on the server side and can be retrieved as a single
     * entity using GET API.
     * 
     * @return the previousRetries value.
     */
    @Generated
    public List<PreviousRetrySummary> getPreviousRetries() {
        return this.previousRetries;
    }

    /**
     * Get the tags property: List of tags associated with the test result. All unicode characters except ASCII control
     * characters, special characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the tags value.
     */
    @Generated
    public List<String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: List of tags associated with the test result. All unicode characters except ASCII control
     * characters, special characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @param tags the tags value to set.
     * @return the TestResultDetails object itself.
     */
    @Generated
    public TestResultDetails setTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the annotations property: List of annotations (https://playwright.dev/docs/test-annotations).All unicode
     * characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..),
     * multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.).
     * 
     * @return the annotations value.
     */
    @Generated
    public List<String> getAnnotations() {
        return this.annotations;
    }

    /**
     * Set the annotations property: List of annotations (https://playwright.dev/docs/test-annotations).All unicode
     * characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..),
     * multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.).
     * 
     * @param annotations the annotations value to set.
     * @return the TestResultDetails object itself.
     */
    @Generated
    public TestResultDetails setAnnotations(List<String> annotations) {
        this.annotations = annotations;
        return this;
    }

    /**
     * Get the artifactsPath property: Relative path in storage for all the artifacts of this test. contain only
     * lowercase letters, numbers, and hyphens, and cannot start or end with a hyphen or contain consecutive hyphens.
     * 
     * @return the artifactsPath value.
     */
    @Generated
    public String getArtifactsPath() {
        return this.artifactsPath;
    }

    /**
     * Set the artifactsPath property: Relative path in storage for all the artifacts of this test. contain only
     * lowercase letters, numbers, and hyphens, and cannot start or end with a hyphen or contain consecutive hyphens.
     * 
     * @param artifactsPath the artifactsPath value to set.
     * @return the TestResultDetails object itself.
     */
    @Generated
    public TestResultDetails setArtifactsPath(String artifactsPath) {
        this.artifactsPath = artifactsPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("testId", this.testId);
        jsonWriter.writeStringField("testCombinationId", this.testCombinationId);
        jsonWriter.writeIntField("shardId", this.shardId);
        jsonWriter.writeStringField("suiteId", this.suiteId);
        jsonWriter.writeStringField("testTitle", this.testTitle);
        jsonWriter.writeStringField("suiteTitle", this.suiteTitle);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeIntField("lineNumber", this.lineNumber);
        jsonWriter.writeIntField("retryCount", this.retryCount);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeLongField("durationInMs", this.durationInMs);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeJsonField("webTestConfig", this.webTestConfig);
        jsonWriter.writeArrayField("attachmentsMetadata", this.attachmentsMetadata,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("annotations", this.annotations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("artifactsPath", this.artifactsPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestResultDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestResultDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestResultDetails.
     */
    @Generated
    public static TestResultDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String testExecutionId = null;
            String testId = null;
            String testCombinationId = null;
            String runId = null;
            int shardId = 0;
            String accountId = null;
            String suiteId = null;
            String testTitle = null;
            String suiteTitle = null;
            String fileName = null;
            int lineNumber = 0;
            int retryCount = 0;
            TestStatus status = null;
            long durationInMs = 0L;
            OffsetDateTime startTime = null;
            WebTestConfig webTestConfig = null;
            CiConfig ciConfig = null;
            List<AttachmentKind> attachmentsMetadata = null;
            List<PreviousRetrySummary> previousRetries = null;
            List<String> tags = null;
            List<String> annotations = null;
            String artifactsPath = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testExecutionId".equals(fieldName)) {
                    testExecutionId = reader.getString();
                } else if ("testId".equals(fieldName)) {
                    testId = reader.getString();
                } else if ("testCombinationId".equals(fieldName)) {
                    testCombinationId = reader.getString();
                } else if ("runId".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("shardId".equals(fieldName)) {
                    shardId = reader.getInt();
                } else if ("accountId".equals(fieldName)) {
                    accountId = reader.getString();
                } else if ("suiteId".equals(fieldName)) {
                    suiteId = reader.getString();
                } else if ("testTitle".equals(fieldName)) {
                    testTitle = reader.getString();
                } else if ("suiteTitle".equals(fieldName)) {
                    suiteTitle = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    fileName = reader.getString();
                } else if ("lineNumber".equals(fieldName)) {
                    lineNumber = reader.getInt();
                } else if ("retryCount".equals(fieldName)) {
                    retryCount = reader.getInt();
                } else if ("status".equals(fieldName)) {
                    status = TestStatus.fromString(reader.getString());
                } else if ("durationInMs".equals(fieldName)) {
                    durationInMs = reader.getLong();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("webTestConfig".equals(fieldName)) {
                    webTestConfig = WebTestConfig.fromJson(reader);
                } else if ("ciConfig".equals(fieldName)) {
                    ciConfig = CiConfig.fromJson(reader);
                } else if ("attachmentsMetadata".equals(fieldName)) {
                    attachmentsMetadata = reader.readArray(reader1 -> AttachmentKind.fromString(reader1.getString()));
                } else if ("previousRetries".equals(fieldName)) {
                    previousRetries = reader.readArray(reader1 -> PreviousRetrySummary.fromJson(reader1));
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readArray(reader1 -> reader1.getString());
                } else if ("annotations".equals(fieldName)) {
                    annotations = reader.readArray(reader1 -> reader1.getString());
                } else if ("artifactsPath".equals(fieldName)) {
                    artifactsPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TestResultDetails deserializedTestResultDetails = new TestResultDetails(testId, testCombinationId, shardId,
                suiteId, testTitle, suiteTitle, fileName, lineNumber, retryCount, status, durationInMs, startTime);
            deserializedTestResultDetails.testExecutionId = testExecutionId;
            deserializedTestResultDetails.runId = runId;
            deserializedTestResultDetails.accountId = accountId;
            deserializedTestResultDetails.webTestConfig = webTestConfig;
            deserializedTestResultDetails.ciConfig = ciConfig;
            deserializedTestResultDetails.attachmentsMetadata = attachmentsMetadata;
            deserializedTestResultDetails.previousRetries = previousRetries;
            deserializedTestResultDetails.tags = tags;
            deserializedTestResultDetails.annotations = annotations;
            deserializedTestResultDetails.artifactsPath = artifactsPath;

            return deserializedTestResultDetails;
        });
    }
}
