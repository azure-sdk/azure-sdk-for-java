// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Summary statistics of testresults in a run.
 */
@Immutable
public final class ResultsStats implements JsonSerializable<ResultsStats> {
    /*
     * Passed test-results within a run
     */
    @Generated
    private final int passed;

    /*
     * Failed tests within a run
     */
    @Generated
    private final int failed;

    /*
     * Flaky tests within a run
     */
    @Generated
    private final int flaky;

    /*
     * Skipped tests within a run
     */
    @Generated
    private final int skipped;

    /*
     * Total tests within a run
     */
    @Generated
    private final int all;

    /**
     * Creates an instance of ResultsStats class.
     * 
     * @param passed the passed value to set.
     * @param failed the failed value to set.
     * @param flaky the flaky value to set.
     * @param skipped the skipped value to set.
     * @param all the all value to set.
     */
    @Generated
    private ResultsStats(int passed, int failed, int flaky, int skipped, int all) {
        this.passed = passed;
        this.failed = failed;
        this.flaky = flaky;
        this.skipped = skipped;
        this.all = all;
    }

    /**
     * Get the passed property: Passed test-results within a run.
     * 
     * @return the passed value.
     */
    @Generated
    public int getPassed() {
        return this.passed;
    }

    /**
     * Get the failed property: Failed tests within a run.
     * 
     * @return the failed value.
     */
    @Generated
    public int getFailed() {
        return this.failed;
    }

    /**
     * Get the flaky property: Flaky tests within a run.
     * 
     * @return the flaky value.
     */
    @Generated
    public int getFlaky() {
        return this.flaky;
    }

    /**
     * Get the skipped property: Skipped tests within a run.
     * 
     * @return the skipped value.
     */
    @Generated
    public int getSkipped() {
        return this.skipped;
    }

    /**
     * Get the all property: Total tests within a run.
     * 
     * @return the all value.
     */
    @Generated
    public int getAll() {
        return this.all;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("passed", this.passed);
        jsonWriter.writeIntField("failed", this.failed);
        jsonWriter.writeIntField("flaky", this.flaky);
        jsonWriter.writeIntField("skipped", this.skipped);
        jsonWriter.writeIntField("all", this.all);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResultsStats from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResultsStats if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResultsStats.
     */
    @Generated
    public static ResultsStats fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int passed = 0;
            int failed = 0;
            int flaky = 0;
            int skipped = 0;
            int all = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("passed".equals(fieldName)) {
                    passed = reader.getInt();
                } else if ("failed".equals(fieldName)) {
                    failed = reader.getInt();
                } else if ("flaky".equals(fieldName)) {
                    flaky = reader.getInt();
                } else if ("skipped".equals(fieldName)) {
                    skipped = reader.getInt();
                } else if ("all".equals(fieldName)) {
                    all = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new ResultsStats(passed, failed, flaky, skipped, all);
        });
    }
}
