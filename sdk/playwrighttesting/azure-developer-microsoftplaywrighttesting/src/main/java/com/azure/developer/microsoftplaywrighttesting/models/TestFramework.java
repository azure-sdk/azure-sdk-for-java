// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Model representing a test framework.
 */
@Fluent
public final class TestFramework implements JsonSerializable<TestFramework> {
    /*
     * Name of the test framework. Supported Frameworks are Playwright
     */
    @Generated
    private TestFrameworkName name;

    /*
     * Version of the test framework.
     */
    @Generated
    private String version;

    /*
     * Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT
     */
    @Generated
    private RunnerType runnerType;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestFrameworkAccessor(new JsonMergePatchHelper.TestFrameworkAccessor() {
            @Override
            public TestFramework prepareModelForJsonMergePatch(TestFramework model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestFramework model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestFramework class.
     */
    @Generated
    public TestFramework() {
    }

    /**
     * Get the name property: Name of the test framework. Supported Frameworks are Playwright.
     * 
     * @return the name value.
     */
    @Generated
    public TestFrameworkName getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the test framework. Supported Frameworks are Playwright.
     * <p>Required when create the resource.</p>
     * 
     * @param name the name value to set.
     * @return the TestFramework object itself.
     */
    @Generated
    public TestFramework setName(TestFrameworkName name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the version property: Version of the test framework.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Set the version property: Version of the test framework.
     * <p>Required when create the resource.</p>
     * 
     * @param version the version value to set.
     * @return the TestFramework object itself.
     */
    @Generated
    public TestFramework setVersion(String version) {
        this.version = version;
        this.updatedProperties.add("version");
        return this;
    }

    /**
     * Get the runnerType property: Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT.
     * 
     * @return the runnerType value.
     */
    @Generated
    public RunnerType getRunnerType() {
        return this.runnerType;
    }

    /**
     * Set the runnerType property: Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT.
     * <p>Required when create the resource.</p>
     * 
     * @param runnerType the runnerType value to set.
     * @return the TestFramework object itself.
     */
    @Generated
    public TestFramework setRunnerType(RunnerType runnerType) {
        this.runnerType = runnerType;
        this.updatedProperties.add("runnerType");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name == null ? null : this.name.toString());
            jsonWriter.writeStringField("version", this.version);
            jsonWriter.writeStringField("runnerType", this.runnerType == null ? null : this.runnerType.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name.toString());
            }
        }
        if (updatedProperties.contains("version")) {
            if (this.version == null) {
                jsonWriter.writeNullField("version");
            } else {
                jsonWriter.writeStringField("version", this.version);
            }
        }
        if (updatedProperties.contains("runnerType")) {
            if (this.runnerType == null) {
                jsonWriter.writeNullField("runnerType");
            } else {
                jsonWriter.writeStringField("runnerType", this.runnerType.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestFramework from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestFramework if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestFramework.
     */
    @Generated
    public static TestFramework fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestFramework deserializedTestFramework = new TestFramework();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedTestFramework.name = TestFrameworkName.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedTestFramework.version = reader.getString();
                } else if ("runnerType".equals(fieldName)) {
                    deserializedTestFramework.runnerType = RunnerType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestFramework;
        });
    }
}
