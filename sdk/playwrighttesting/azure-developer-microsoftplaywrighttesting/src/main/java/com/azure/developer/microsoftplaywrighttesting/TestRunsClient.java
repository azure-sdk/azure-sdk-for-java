// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.developer.microsoftplaywrighttesting.implementation.TestRunsImpl;
import com.azure.developer.microsoftplaywrighttesting.implementation.models.UpdateShardExecutionStatusRequest;
import com.azure.developer.microsoftplaywrighttesting.models.AccountTestRunStats;
import com.azure.developer.microsoftplaywrighttesting.models.TestResultsUrl;
import com.azure.developer.microsoftplaywrighttesting.models.TestRun;
import com.azure.developer.microsoftplaywrighttesting.models.TestRunsMetadata;
import com.azure.developer.microsoftplaywrighttesting.models.UpdateShardExecutionSummary;

/**
 * Initializes a new instance of the synchronous ReportingClient type.
 */
@ServiceClient(builder = ReportingClientBuilder.class)
public final class TestRunsClient {
    @Generated
    private final TestRunsImpl serviceClient;

    /**
     * Initializes an instance of TestRunsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestRunsClient(TestRunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a testrun.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model representing detailed information about a test run along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String accountId, String testRunId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(accountId, testRunId, resource, requestOptions);
    }

    /**
     * Gets a test run.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a test run along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String accountId, String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(accountId, testRunId, requestOptions);
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     creationTime: OffsetDateTime (Optional, Required on create)
     *     creatorId: String (Required)
     *     creatorName: String (Required)
     *     cloudRunSummary (Optional): {
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         billableTimeInMs: Integer (Optional)
     *         totalTimeInMs: Integer (Optional)
     *         browserSessionsCount: Integer (Optional)
     *         browserQuotaExceeded: boolean (Required)
     *     }
     *     cloudReportSummary (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         serverStatus: String(Running/ClientComplete/ServerComplete) (Required)
     *         totalTestsCount: Integer (Optional)
     *         passedTestsCount: Integer (Optional)
     *         failedTestsCount: Integer (Optional)
     *         skippedTestsCount: Integer (Optional)
     *         flakyTestsCount: Integer (Optional)
     *         status: String(Passed/Failed/Skipped/Flaky/Interrupted/TimedOut) (Required)
     *         jobs (Optional): [
     *             String (Optional)
     *         ]
     *         projects (Optional): [
     *             String (Optional)
     *         ]
     *         tags (Optional): [
     *             String (Optional)
     *         ]
     *         workersCount: Integer (Optional)
     *     }
     *     ciConfig (Optional): {
     *         ciProviderName: String(GitHub/Azure DevOps/Default) (Optional)
     *         branch: String (Optional)
     *         author: String (Optional)
     *         commitId: String (Optional)
     *         revisionUrl: String (Optional)
     *     }
     *     testRunConfig (Optional): {
     *         retryCount: Integer (Optional)
     *         repeatEach: Integer (Optional)
     *         testFramework (Optional): {
     *             name: String(Playwright) (Optional, Required on create)
     *             version: String (Optional, Required on create)
     *             runnerType: String(MsTest/Nunit/Playwright) (Optional, Required on create)
     *         }
     *         shardDetails (Optional): {
     *             total: int (Optional, Required on create)
     *         }
     *         timeoutInMs: long (Optional, Required on create)
     *         testType: String (Optional)
     *         testSdkLanguage: String(JavaScript/TypeScript/CSharp) (Optional, Required on create)
     *         servicePackageVersion: String (Optional)
     *     }
     *     testResultsUrl (Optional): {
     *         url: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         expiresAt: OffsetDateTime (Required)
     *         accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     *     }
     *     cloudRunEnabled: boolean (Required)
     *     cloudReportingEnabled: boolean (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestRun items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.list(accountId, requestOptions);
    }

    /**
     * Get TestResults Upload Url.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     url: String (Required)
     *     createdAt: OffsetDateTime (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     accessLevel: String(Read/Write/ReadWrite/ReadAddCreateWrite) (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testResults Upload Url along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createArtifactsUploadBaseUrlWithResponse(String accountId, String testRunId,
        RequestOptions requestOptions) {
        return this.serviceClient.createArtifactsUploadBaseUrlWithResponse(accountId, testRunId, requestOptions);
    }

    /**
     * Resource action operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     shardId: int (Required)
     *     summary (Required): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         uploadMetadata (Optional): {
     *             testResultsCount: int (Required)
     *             totalAttachmentsCount: int (Required)
     *             totalAttachmentsSize: long (Required)
     *         }
     *     }
     *     workersCount: int (Required)
     *     uploadCompleted: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param updateShardExecutionStatusRequest The updateShardExecutionStatusRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateShardExecutionStatusWithResponse(String accountId, String testRunId,
        BinaryData updateShardExecutionStatusRequest, RequestOptions requestOptions) {
        return this.serviceClient.updateShardExecutionStatusWithResponse(accountId, testRunId,
            updateShardExecutionStatusRequest, requestOptions);
    }

    /**
     * Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passed: int (Required)
     *     failed: int (Required)
     *     flaky: int (Required)
     *     all: int (Required)
     *     cloudExecutionRuns: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeAccountRunStatsWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.computeAccountRunStatsWithResponse(accountId, requestOptions);
    }

    /**
     * Get TestRuns metadata for all runs in an account.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     branches (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param accountId The account id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return testRuns metadata for all runs in an account along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> computeMetadataWithResponse(String accountId, RequestOptions requestOptions) {
        return this.serviceClient.computeMetadataWithResponse(accountId, requestOptions);
    }

    /**
     * Creates or updates a testrun.
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model representing detailed information about a test run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRun createOrUpdate(String accountId, String testRunId, TestRun resource) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestRunAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getTestRunAccessor().prepareModelForJsonMergePatch(resource, false);
        return createOrUpdateWithResponse(accountId, testRunId, resourceInBinaryData, requestOptions).getValue()
            .toObject(TestRun.class);
    }

    /**
     * Gets a test run.
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a test run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRun get(String accountId, String testRunId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(accountId, testRunId, requestOptions).getValue().toObject(TestRun.class);
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * 
     * @param accountId The account id.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestRun items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestRun> list(String accountId, Integer top, Integer skip, String filter) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return serviceClient.list(accountId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TestRun.class));
    }

    /**
     * List test runs. Supported filters are triggeredAt with operator ge, status and branch with in operator,
     * displayName with eq operator.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestRun items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestRun> list(String accountId) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(accountId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TestRun.class));
    }

    /**
     * Get TestResults Upload Url.
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return testResults Upload Url.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestResultsUrl createArtifactsUploadBaseUrl(String accountId, String testRunId) {
        // Generated convenience method for createArtifactsUploadBaseUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createArtifactsUploadBaseUrlWithResponse(accountId, testRunId, requestOptions).getValue()
            .toObject(TestResultsUrl.class);
    }

    /**
     * Resource action operation template.
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param shardId Shard Id for the shard- indexed 1,2,3 etc.
     * @param summary Summary of the test run shard.
     * @param workersCount number of workers used by playwright client.
     * @param uploadCompleted Flag indicating if upload is completed for the shard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateShardExecutionStatus(String accountId, String testRunId, int shardId,
        UpdateShardExecutionSummary summary, int workersCount, Boolean uploadCompleted) {
        // Generated convenience method for updateShardExecutionStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateShardExecutionStatusRequest updateShardExecutionStatusRequestObj
            = new UpdateShardExecutionStatusRequest(shardId, summary, workersCount).setUploadCompleted(uploadCompleted);
        BinaryData updateShardExecutionStatusRequest = BinaryData.fromObject(updateShardExecutionStatusRequestObj);
        updateShardExecutionStatusWithResponse(accountId, testRunId, updateShardExecutionStatusRequest, requestOptions)
            .getValue();
    }

    /**
     * Resource action operation template.
     * 
     * @param accountId The account id.
     * @param testRunId Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     * special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end
     * with a slash (/) or start with period (.).
     * @param shardId Shard Id for the shard- indexed 1,2,3 etc.
     * @param summary Summary of the test run shard.
     * @param workersCount number of workers used by playwright client.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateShardExecutionStatus(String accountId, String testRunId, int shardId,
        UpdateShardExecutionSummary summary, int workersCount) {
        // Generated convenience method for updateShardExecutionStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateShardExecutionStatusRequest updateShardExecutionStatusRequestObj
            = new UpdateShardExecutionStatusRequest(shardId, summary, workersCount);
        BinaryData updateShardExecutionStatusRequest = BinaryData.fromObject(updateShardExecutionStatusRequestObj);
        updateShardExecutionStatusWithResponse(accountId, testRunId, updateShardExecutionStatusRequest, requestOptions)
            .getValue();
    }

    /**
     * Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     * 
     * @param accountId The account id.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return testRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccountTestRunStats computeAccountRunStats(String accountId, Integer top, Integer skip, Integer maxPageSize,
        String filter) {
        // Generated convenience method for computeAccountRunStatsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return computeAccountRunStatsWithResponse(accountId, requestOptions).getValue()
            .toObject(AccountTestRunStats.class);
    }

    /**
     * Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return testRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch
     * with in operator, displayName with eq operator.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccountTestRunStats computeAccountRunStats(String accountId) {
        // Generated convenience method for computeAccountRunStatsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return computeAccountRunStatsWithResponse(accountId, requestOptions).getValue()
            .toObject(AccountTestRunStats.class);
    }

    /**
     * Get TestRuns metadata for all runs in an account.
     * 
     * @param accountId The account id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return testRuns metadata for all runs in an account.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRunsMetadata computeMetadata(String accountId) {
        // Generated convenience method for computeMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return computeMetadataWithResponse(accountId, requestOptions).getValue().toObject(TestRunsMetadata.class);
    }
}
