// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Model representing client configuration.
 */
@Fluent
public final class TestRunConfig implements JsonSerializable<TestRunConfig> {
    /*
     * Number of retry attempts.
     */
    @Generated
    private Integer retryCount;

    /*
     * Interval between repeated test runs.
     */
    @Generated
    private Integer repeatEach;

    /*
     * Details of the test framework used.
     */
    @Generated
    private TestFramework testFramework;

    /*
     * Details of the shards used in the test.
     */
    @Generated
    private ShardDetails shardDetails;

    /*
     * Timeout duration for test execution.
     */
    @Generated
    private long timeoutInMs;

    /*
     * Type of test being executed (default: WebTest).
     */
    @Generated
    private String testType;

    /*
     * Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'
     */
    @Generated
    private TestSdkLanguage testSdkLanguage;

    /*
     * Version of the reporter package.
     */
    @Generated
    private String servicePackageVersion;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestRunConfigAccessor(new JsonMergePatchHelper.TestRunConfigAccessor() {
            @Override
            public TestRunConfig prepareModelForJsonMergePatch(TestRunConfig model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestRunConfig model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestRunConfig class.
     */
    @Generated
    public TestRunConfig() {
    }

    /**
     * Get the retryCount property: Number of retry attempts.
     * 
     * @return the retryCount value.
     */
    @Generated
    public Integer getRetryCount() {
        return this.retryCount;
    }

    /**
     * Set the retryCount property: Number of retry attempts.
     * 
     * @param retryCount the retryCount value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        this.updatedProperties.add("retryCount");
        return this;
    }

    /**
     * Get the repeatEach property: Interval between repeated test runs.
     * 
     * @return the repeatEach value.
     */
    @Generated
    public Integer getRepeatEach() {
        return this.repeatEach;
    }

    /**
     * Set the repeatEach property: Interval between repeated test runs.
     * 
     * @param repeatEach the repeatEach value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setRepeatEach(Integer repeatEach) {
        this.repeatEach = repeatEach;
        this.updatedProperties.add("repeatEach");
        return this;
    }

    /**
     * Get the testFramework property: Details of the test framework used.
     * 
     * @return the testFramework value.
     */
    @Generated
    public TestFramework getTestFramework() {
        return this.testFramework;
    }

    /**
     * Set the testFramework property: Details of the test framework used.
     * 
     * @param testFramework the testFramework value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setTestFramework(TestFramework testFramework) {
        this.testFramework = testFramework;
        this.updatedProperties.add("testFramework");
        return this;
    }

    /**
     * Get the shardDetails property: Details of the shards used in the test.
     * 
     * @return the shardDetails value.
     */
    @Generated
    public ShardDetails getShardDetails() {
        return this.shardDetails;
    }

    /**
     * Set the shardDetails property: Details of the shards used in the test.
     * 
     * @param shardDetails the shardDetails value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setShardDetails(ShardDetails shardDetails) {
        this.shardDetails = shardDetails;
        this.updatedProperties.add("shardDetails");
        return this;
    }

    /**
     * Get the timeoutInMs property: Timeout duration for test execution.
     * 
     * @return the timeoutInMs value.
     */
    @Generated
    public long getTimeoutInMs() {
        return this.timeoutInMs;
    }

    /**
     * Set the timeoutInMs property: Timeout duration for test execution.
     * <p>Required when create the resource.</p>
     * 
     * @param timeoutInMs the timeoutInMs value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setTimeoutInMs(long timeoutInMs) {
        this.timeoutInMs = timeoutInMs;
        this.updatedProperties.add("timeoutInMs");
        return this;
    }

    /**
     * Get the testType property: Type of test being executed (default: WebTest).
     * 
     * @return the testType value.
     */
    @Generated
    public String getTestType() {
        return this.testType;
    }

    /**
     * Set the testType property: Type of test being executed (default: WebTest).
     * 
     * @param testType the testType value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setTestType(String testType) {
        this.testType = testType;
        this.updatedProperties.add("testType");
        return this;
    }

    /**
     * Get the testSdkLanguage property: Programming language used for the test SDK. Supported languages are
     * 'JavaScript', 'TypeScript', 'Csharp'.
     * 
     * @return the testSdkLanguage value.
     */
    @Generated
    public TestSdkLanguage getTestSdkLanguage() {
        return this.testSdkLanguage;
    }

    /**
     * Set the testSdkLanguage property: Programming language used for the test SDK. Supported languages are
     * 'JavaScript', 'TypeScript', 'Csharp'.
     * <p>Required when create the resource.</p>
     * 
     * @param testSdkLanguage the testSdkLanguage value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setTestSdkLanguage(TestSdkLanguage testSdkLanguage) {
        this.testSdkLanguage = testSdkLanguage;
        this.updatedProperties.add("testSdkLanguage");
        return this;
    }

    /**
     * Get the servicePackageVersion property: Version of the reporter package.
     * 
     * @return the servicePackageVersion value.
     */
    @Generated
    public String getServicePackageVersion() {
        return this.servicePackageVersion;
    }

    /**
     * Set the servicePackageVersion property: Version of the reporter package.
     * 
     * @param servicePackageVersion the servicePackageVersion value to set.
     * @return the TestRunConfig object itself.
     */
    @Generated
    public TestRunConfig setServicePackageVersion(String servicePackageVersion) {
        this.servicePackageVersion = servicePackageVersion;
        this.updatedProperties.add("servicePackageVersion");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("retryCount", this.retryCount);
            jsonWriter.writeNumberField("repeatEach", this.repeatEach);
            jsonWriter.writeJsonField("testFramework", this.testFramework);
            jsonWriter.writeJsonField("shardDetails", this.shardDetails);
            jsonWriter.writeLongField("timeoutInMs", this.timeoutInMs);
            jsonWriter.writeStringField("testType", this.testType);
            jsonWriter.writeStringField("testSdkLanguage",
                this.testSdkLanguage == null ? null : this.testSdkLanguage.toString());
            jsonWriter.writeStringField("servicePackageVersion", this.servicePackageVersion);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("retryCount")) {
            if (this.retryCount == null) {
                jsonWriter.writeNullField("retryCount");
            } else {
                jsonWriter.writeNumberField("retryCount", this.retryCount);
            }
        }
        if (updatedProperties.contains("repeatEach")) {
            if (this.repeatEach == null) {
                jsonWriter.writeNullField("repeatEach");
            } else {
                jsonWriter.writeNumberField("repeatEach", this.repeatEach);
            }
        }
        if (updatedProperties.contains("testFramework")) {
            if (this.testFramework == null) {
                jsonWriter.writeNullField("testFramework");
            } else {
                JsonMergePatchHelper.getTestFrameworkAccessor().prepareModelForJsonMergePatch(this.testFramework, true);
                jsonWriter.writeJsonField("testFramework", this.testFramework);
                JsonMergePatchHelper.getTestFrameworkAccessor()
                    .prepareModelForJsonMergePatch(this.testFramework, false);
            }
        }
        if (updatedProperties.contains("shardDetails")) {
            if (this.shardDetails == null) {
                jsonWriter.writeNullField("shardDetails");
            } else {
                JsonMergePatchHelper.getShardDetailsAccessor().prepareModelForJsonMergePatch(this.shardDetails, true);
                jsonWriter.writeJsonField("shardDetails", this.shardDetails);
                JsonMergePatchHelper.getShardDetailsAccessor().prepareModelForJsonMergePatch(this.shardDetails, false);
            }
        }
        if (updatedProperties.contains("timeoutInMs")) {
            jsonWriter.writeLongField("timeoutInMs", this.timeoutInMs);
        }
        if (updatedProperties.contains("testType")) {
            if (this.testType == null) {
                jsonWriter.writeNullField("testType");
            } else {
                jsonWriter.writeStringField("testType", this.testType);
            }
        }
        if (updatedProperties.contains("testSdkLanguage")) {
            if (this.testSdkLanguage == null) {
                jsonWriter.writeNullField("testSdkLanguage");
            } else {
                jsonWriter.writeStringField("testSdkLanguage", this.testSdkLanguage.toString());
            }
        }
        if (updatedProperties.contains("servicePackageVersion")) {
            if (this.servicePackageVersion == null) {
                jsonWriter.writeNullField("servicePackageVersion");
            } else {
                jsonWriter.writeStringField("servicePackageVersion", this.servicePackageVersion);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunConfig.
     */
    @Generated
    public static TestRunConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunConfig deserializedTestRunConfig = new TestRunConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retryCount".equals(fieldName)) {
                    deserializedTestRunConfig.retryCount = reader.getNullable(JsonReader::getInt);
                } else if ("repeatEach".equals(fieldName)) {
                    deserializedTestRunConfig.repeatEach = reader.getNullable(JsonReader::getInt);
                } else if ("testFramework".equals(fieldName)) {
                    deserializedTestRunConfig.testFramework = TestFramework.fromJson(reader);
                } else if ("shardDetails".equals(fieldName)) {
                    deserializedTestRunConfig.shardDetails = ShardDetails.fromJson(reader);
                } else if ("timeoutInMs".equals(fieldName)) {
                    deserializedTestRunConfig.timeoutInMs = reader.getLong();
                } else if ("testType".equals(fieldName)) {
                    deserializedTestRunConfig.testType = reader.getString();
                } else if ("testSdkLanguage".equals(fieldName)) {
                    deserializedTestRunConfig.testSdkLanguage = TestSdkLanguage.fromString(reader.getString());
                } else if ("servicePackageVersion".equals(fieldName)) {
                    deserializedTestRunConfig.servicePackageVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunConfig;
        });
    }
}
