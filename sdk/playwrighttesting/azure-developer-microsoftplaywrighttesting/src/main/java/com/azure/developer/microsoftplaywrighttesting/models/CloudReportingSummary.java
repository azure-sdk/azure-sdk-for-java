// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Model representing summary of test run results.
 */
@Immutable
public final class CloudReportingSummary implements JsonSerializable<CloudReportingSummary> {
    /*
     * Start time of the test run in datetime(RFC 3339 literal format).
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * End time of the test run.
     */
    @Generated
    private final OffsetDateTime endTime;

    /*
     * Processing Status of the testresults on the Server Side.
     */
    @Generated
    private final TestRunStatus serverStatus;

    /*
     * Total number of tests executed
     */
    @Generated
    private Integer totalTestsCount;

    /*
     * Number of tests that passed.
     */
    @Generated
    private Integer passedTestsCount;

    /*
     * Number of tests that failed.
     */
    @Generated
    private Integer failedTestsCount;

    /*
     * Number of tests that were skipped.
     */
    @Generated
    private Integer skippedTestsCount;

    /*
     * Number of tests that were flaky (passed on retry).
     */
    @Generated
    private Integer flakyTestsCount;

    /*
     * Status of the test run
     */
    @Generated
    private TestStatus status;

    /*
     * List of CI jobs associated with the test run.
     */
    @Generated
    private List<String> jobs;

    /*
     * List of Playwright projects (https://playwright.dev/docs/test-projects) associated with the test run.
     */
    @Generated
    private List<String> projects;

    /*
     * List of tags associated with the test run.
     */
    @Generated
    private List<String> tags;

    /*
     * Number of worker instances.
     */
    @Generated
    private Integer workersCount;

    /**
     * Creates an instance of CloudReportingSummary class.
     * 
     * @param startTime the startTime value to set.
     * @param endTime the endTime value to set.
     * @param serverStatus the serverStatus value to set.
     */
    @Generated
    private CloudReportingSummary(OffsetDateTime startTime, OffsetDateTime endTime, TestRunStatus serverStatus) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.serverStatus = serverStatus;
    }

    /**
     * Get the startTime property: Start time of the test run in datetime(RFC 3339 literal format).
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the test run.
     * 
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the serverStatus property: Processing Status of the testresults on the Server Side.
     * 
     * @return the serverStatus value.
     */
    @Generated
    public TestRunStatus getServerStatus() {
        return this.serverStatus;
    }

    /**
     * Get the totalTestsCount property: Total number of tests executed.
     * 
     * @return the totalTestsCount value.
     */
    @Generated
    public Integer getTotalTestsCount() {
        return this.totalTestsCount;
    }

    /**
     * Get the passedTestsCount property: Number of tests that passed.
     * 
     * @return the passedTestsCount value.
     */
    @Generated
    public Integer getPassedTestsCount() {
        return this.passedTestsCount;
    }

    /**
     * Get the failedTestsCount property: Number of tests that failed.
     * 
     * @return the failedTestsCount value.
     */
    @Generated
    public Integer getFailedTestsCount() {
        return this.failedTestsCount;
    }

    /**
     * Get the skippedTestsCount property: Number of tests that were skipped.
     * 
     * @return the skippedTestsCount value.
     */
    @Generated
    public Integer getSkippedTestsCount() {
        return this.skippedTestsCount;
    }

    /**
     * Get the flakyTestsCount property: Number of tests that were flaky (passed on retry).
     * 
     * @return the flakyTestsCount value.
     */
    @Generated
    public Integer getFlakyTestsCount() {
        return this.flakyTestsCount;
    }

    /**
     * Get the status property: Status of the test run.
     * 
     * @return the status value.
     */
    @Generated
    public TestStatus getStatus() {
        return this.status;
    }

    /**
     * Get the jobs property: List of CI jobs associated with the test run.
     * 
     * @return the jobs value.
     */
    @Generated
    public List<String> getJobs() {
        return this.jobs;
    }

    /**
     * Get the projects property: List of Playwright projects (https://playwright.dev/docs/test-projects) associated
     * with the test run.
     * 
     * @return the projects value.
     */
    @Generated
    public List<String> getProjects() {
        return this.projects;
    }

    /**
     * Get the tags property: List of tags associated with the test run.
     * 
     * @return the tags value.
     */
    @Generated
    public List<String> getTags() {
        return this.tags;
    }

    /**
     * Get the workersCount property: Number of worker instances.
     * 
     * @return the workersCount value.
     */
    @Generated
    public Integer getWorkersCount() {
        return this.workersCount;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("serverStatus", this.serverStatus == null ? null : this.serverStatus.toString());
        jsonWriter.writeNumberField("workersCount", this.workersCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudReportingSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudReportingSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CloudReportingSummary.
     */
    @Generated
    public static CloudReportingSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            TestRunStatus serverStatus = null;
            TestStatus status = null;
            Integer totalTestsCount = null;
            Integer passedTestsCount = null;
            Integer failedTestsCount = null;
            Integer skippedTestsCount = null;
            Integer flakyTestsCount = null;
            List<String> jobs = null;
            List<String> projects = null;
            List<String> tags = null;
            Integer workersCount = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serverStatus".equals(fieldName)) {
                    serverStatus = TestRunStatus.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    status = TestStatus.fromString(reader.getString());
                } else if ("totalTestsCount".equals(fieldName)) {
                    totalTestsCount = reader.getNullable(JsonReader::getInt);
                } else if ("passedTestsCount".equals(fieldName)) {
                    passedTestsCount = reader.getNullable(JsonReader::getInt);
                } else if ("failedTestsCount".equals(fieldName)) {
                    failedTestsCount = reader.getNullable(JsonReader::getInt);
                } else if ("skippedTestsCount".equals(fieldName)) {
                    skippedTestsCount = reader.getNullable(JsonReader::getInt);
                } else if ("flakyTestsCount".equals(fieldName)) {
                    flakyTestsCount = reader.getNullable(JsonReader::getInt);
                } else if ("jobs".equals(fieldName)) {
                    jobs = reader.readArray(reader1 -> reader1.getString());
                } else if ("projects".equals(fieldName)) {
                    projects = reader.readArray(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readArray(reader1 -> reader1.getString());
                } else if ("workersCount".equals(fieldName)) {
                    workersCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            CloudReportingSummary deserializedCloudReportingSummary
                = new CloudReportingSummary(startTime, endTime, serverStatus);
            deserializedCloudReportingSummary.status = status;
            deserializedCloudReportingSummary.totalTestsCount = totalTestsCount;
            deserializedCloudReportingSummary.passedTestsCount = passedTestsCount;
            deserializedCloudReportingSummary.failedTestsCount = failedTestsCount;
            deserializedCloudReportingSummary.skippedTestsCount = skippedTestsCount;
            deserializedCloudReportingSummary.flakyTestsCount = flakyTestsCount;
            deserializedCloudReportingSummary.jobs = jobs;
            deserializedCloudReportingSummary.projects = projects;
            deserializedCloudReportingSummary.tags = tags;
            deserializedCloudReportingSummary.workersCount = workersCount;

            return deserializedCloudReportingSummary;
        });
    }
}
