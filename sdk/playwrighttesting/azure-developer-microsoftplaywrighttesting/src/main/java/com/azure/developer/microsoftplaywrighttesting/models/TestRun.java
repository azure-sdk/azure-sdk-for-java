// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.microsoftplaywrighttesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 * Model representing detailed information about a test run.
 */
@Fluent
public final class TestRun implements JsonSerializable<TestRun> {
    /*
     * Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git
     * characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash
     * (/) or start with period (.)
     */
    @Generated
    private String testRunId;

    /*
     * Display name of the test run All unicode characters except ASCII control characters, special Git characters (^,
     * ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start
     * with period (.).
     */
    @Generated
    private String displayName;

    /*
     * Creation time of the test run -RFC 3339 literal format
     */
    @Generated
    private OffsetDateTime creationTime;

    /*
     * Creator's identifier. It's the Id referred in the access/Entra token
     */
    @Generated
    private String creatorId;

    /*
     * Creator's name.
     */
    @Generated
    private String creatorName;

    /*
     * Summary of the Cloud executed run. Only available if cloud run is enabled
     */
    @Generated
    private CloudRunSummary cloudRunSummary;

    /*
     * Summary of reports uploaded on cloud. Only available if cloud reporting is enabled
     */
    @Generated
    private CloudReportingSummary cloudReportSummary;

    /*
     * Continuous integration configuration.
     */
    @Generated
    private CiConfig ciConfig;

    /*
     * Client configuration for the test run.
     */
    @Generated
    private TestRunConfig testRunConfig;

    /*
     * URL for accessing test results.
     */
    @Generated
    private TestResultsUrl testResultsUrl;

    /*
     * Flag indicating if cloud run is enabled.
     */
    @Generated
    private boolean cloudRunEnabled;

    /*
     * Must be set to true when users want to use Reporting Feature
     */
    @Generated
    private boolean cloudReportingEnabled;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestRunAccessor(new JsonMergePatchHelper.TestRunAccessor() {
            @Override
            public TestRun prepareModelForJsonMergePatch(TestRun model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestRun model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestRun class.
     */
    @Generated
    public TestRun() {
    }

    /**
     * Get the testRunId property: Identifier of the test run. All unicode characters except spaces, ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the testRunId value.
     */
    @Generated
    public String getTestRunId() {
        return this.testRunId;
    }

    /**
     * Get the displayName property: Display name of the test run All unicode characters except ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the test run All unicode characters except ASCII control
     * characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     * start/end with a slash (/) or start with period (.).
     * <p>Required when create the resource.</p>
     * 
     * @param displayName the displayName value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the creationTime property: Creation time of the test run -RFC 3339 literal format.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Creation time of the test run -RFC 3339 literal format.
     * <p>Required when create the resource.</p>
     * 
     * @param creationTime the creationTime value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        this.updatedProperties.add("creationTime");
        return this;
    }

    /**
     * Get the creatorId property: Creator's identifier. It's the Id referred in the access/Entra token.
     * 
     * @return the creatorId value.
     */
    @Generated
    public String getCreatorId() {
        return this.creatorId;
    }

    /**
     * Get the creatorName property: Creator's name.
     * 
     * @return the creatorName value.
     */
    @Generated
    public String getCreatorName() {
        return this.creatorName;
    }

    /**
     * Get the cloudRunSummary property: Summary of the Cloud executed run. Only available if cloud run is enabled.
     * 
     * @return the cloudRunSummary value.
     */
    @Generated
    public CloudRunSummary getCloudRunSummary() {
        return this.cloudRunSummary;
    }

    /**
     * Get the cloudReportSummary property: Summary of reports uploaded on cloud. Only available if cloud reporting is
     * enabled.
     * 
     * @return the cloudReportSummary value.
     */
    @Generated
    public CloudReportingSummary getCloudReportSummary() {
        return this.cloudReportSummary;
    }

    /**
     * Get the ciConfig property: Continuous integration configuration.
     * 
     * @return the ciConfig value.
     */
    @Generated
    public CiConfig getCiConfig() {
        return this.ciConfig;
    }

    /**
     * Set the ciConfig property: Continuous integration configuration.
     * 
     * @param ciConfig the ciConfig value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setCiConfig(CiConfig ciConfig) {
        this.ciConfig = ciConfig;
        this.updatedProperties.add("ciConfig");
        return this;
    }

    /**
     * Get the testRunConfig property: Client configuration for the test run.
     * 
     * @return the testRunConfig value.
     */
    @Generated
    public TestRunConfig getTestRunConfig() {
        return this.testRunConfig;
    }

    /**
     * Set the testRunConfig property: Client configuration for the test run.
     * 
     * @param testRunConfig the testRunConfig value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setTestRunConfig(TestRunConfig testRunConfig) {
        this.testRunConfig = testRunConfig;
        this.updatedProperties.add("testRunConfig");
        return this;
    }

    /**
     * Get the testResultsUrl property: URL for accessing test results.
     * 
     * @return the testResultsUrl value.
     */
    @Generated
    public TestResultsUrl getTestResultsUrl() {
        return this.testResultsUrl;
    }

    /**
     * Get the cloudRunEnabled property: Flag indicating if cloud run is enabled.
     * 
     * @return the cloudRunEnabled value.
     */
    @Generated
    public boolean isCloudRunEnabled() {
        return this.cloudRunEnabled;
    }

    /**
     * Get the cloudReportingEnabled property: Must be set to true when users want to use Reporting Feature.
     * 
     * @return the cloudReportingEnabled value.
     */
    @Generated
    public boolean isCloudReportingEnabled() {
        return this.cloudReportingEnabled;
    }

    /**
     * Set the cloudReportingEnabled property: Must be set to true when users want to use Reporting Feature.
     * <p>Required when create the resource.</p>
     * 
     * @param cloudReportingEnabled the cloudReportingEnabled value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setCloudReportingEnabled(boolean cloudReportingEnabled) {
        this.cloudReportingEnabled = cloudReportingEnabled;
        this.updatedProperties.add("cloudReportingEnabled");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("creationTime",
                this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
            jsonWriter.writeJsonField("ciConfig", this.ciConfig);
            jsonWriter.writeJsonField("testRunConfig", this.testRunConfig);
            jsonWriter.writeBooleanField("cloudReportingEnabled", this.cloudReportingEnabled);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("creationTime")) {
            if (this.creationTime == null) {
                jsonWriter.writeNullField("creationTime");
            } else {
                jsonWriter.writeStringField("creationTime",
                    this.creationTime == null
                        ? null
                        : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
            }
        }
        if (updatedProperties.contains("ciConfig")) {
            if (this.ciConfig == null) {
                jsonWriter.writeNullField("ciConfig");
            } else {
                JsonMergePatchHelper.getCiConfigAccessor().prepareModelForJsonMergePatch(this.ciConfig, true);
                jsonWriter.writeJsonField("ciConfig", this.ciConfig);
                JsonMergePatchHelper.getCiConfigAccessor().prepareModelForJsonMergePatch(this.ciConfig, false);
            }
        }
        if (updatedProperties.contains("testRunConfig")) {
            if (this.testRunConfig == null) {
                jsonWriter.writeNullField("testRunConfig");
            } else {
                JsonMergePatchHelper.getTestRunConfigAccessor().prepareModelForJsonMergePatch(this.testRunConfig, true);
                jsonWriter.writeJsonField("testRunConfig", this.testRunConfig);
                JsonMergePatchHelper.getTestRunConfigAccessor()
                    .prepareModelForJsonMergePatch(this.testRunConfig, false);
            }
        }
        if (updatedProperties.contains("cloudReportingEnabled")) {
            jsonWriter.writeBooleanField("cloudReportingEnabled", this.cloudReportingEnabled);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRun if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestRun.
     */
    @Generated
    public static TestRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRun deserializedTestRun = new TestRun();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testRunId".equals(fieldName)) {
                    deserializedTestRun.testRunId = reader.getString();
                } else if ("creatorId".equals(fieldName)) {
                    deserializedTestRun.creatorId = reader.getString();
                } else if ("creatorName".equals(fieldName)) {
                    deserializedTestRun.creatorName = reader.getString();
                } else if ("cloudRunEnabled".equals(fieldName)) {
                    deserializedTestRun.cloudRunEnabled = reader.getBoolean();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTestRun.displayName = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    deserializedTestRun.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("cloudRunSummary".equals(fieldName)) {
                    deserializedTestRun.cloudRunSummary = CloudRunSummary.fromJson(reader);
                } else if ("cloudReportSummary".equals(fieldName)) {
                    deserializedTestRun.cloudReportSummary = CloudReportingSummary.fromJson(reader);
                } else if ("ciConfig".equals(fieldName)) {
                    deserializedTestRun.ciConfig = CiConfig.fromJson(reader);
                } else if ("testRunConfig".equals(fieldName)) {
                    deserializedTestRun.testRunConfig = TestRunConfig.fromJson(reader);
                } else if ("testResultsUrl".equals(fieldName)) {
                    deserializedTestRun.testResultsUrl = TestResultsUrl.fromJson(reader);
                } else if ("cloudReportingEnabled".equals(fieldName)) {
                    deserializedTestRun.cloudReportingEnabled = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRun;
        });
    }
}
