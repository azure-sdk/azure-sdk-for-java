// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Model of an access-token linked to an account.
 */
@Immutable
public final class AccessToken implements JsonSerializable<AccessToken> {
    /*
     * The access-token id.
     */
    @Generated
    private String id;

    /*
     * The access-token name.
     */
    @Generated
    private final String name;

    /*
     * The access-token value in JWT format.
     */
    @Generated
    private String jwtToken;

    /*
     * The access-token createdAt utcDateTime.
     */
    @Generated
    private OffsetDateTime createdAt;

    /*
     * The access-token expiryAt utcDateTime.
     */
    @Generated
    private final OffsetDateTime expiryAt;

    /*
     * The access-token state - Active | Expired.
     */
    @Generated
    private AccessTokenState state;

    /**
     * Creates an instance of AccessToken class.
     * 
     * @param name the name value to set.
     * @param expiryAt the expiryAt value to set.
     */
    @Generated
    public AccessToken(String name, OffsetDateTime expiryAt) {
        this.name = name;
        this.expiryAt = expiryAt;
    }

    /**
     * Get the id property: The access-token id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The access-token name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the jwtToken property: The access-token value in JWT format.
     * 
     * @return the jwtToken value.
     */
    @Generated
    public String getJwtToken() {
        return this.jwtToken;
    }

    /**
     * Get the createdAt property: The access-token createdAt utcDateTime.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the expiryAt property: The access-token expiryAt utcDateTime.
     * 
     * @return the expiryAt value.
     */
    @Generated
    public OffsetDateTime getExpiryAt() {
        return this.expiryAt;
    }

    /**
     * Get the state property: The access-token state - Active | Expired.
     * 
     * @return the state value.
     */
    @Generated
    public AccessTokenState getState() {
        return this.state;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("expiryAt",
            this.expiryAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessToken if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccessToken.
     */
    @Generated
    public static AccessToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            OffsetDateTime createdAt = null;
            OffsetDateTime expiryAt = null;
            AccessTokenState state = null;
            String jwtToken = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryAt".equals(fieldName)) {
                    expiryAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    state = AccessTokenState.fromString(reader.getString());
                } else if ("jwtToken".equals(fieldName)) {
                    jwtToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AccessToken deserializedAccessToken = new AccessToken(name, expiryAt);
            deserializedAccessToken.id = id;
            deserializedAccessToken.createdAt = createdAt;
            deserializedAccessToken.state = state;
            deserializedAccessToken.jwtToken = jwtToken;

            return deserializedAccessToken;
        });
    }
}
