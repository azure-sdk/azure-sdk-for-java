// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.microsoftplaywrighttesting.implementation;

import com.azure.developer.microsoftplaywrighttesting.models.CiConfig;
import com.azure.developer.microsoftplaywrighttesting.models.ShardDetails;
import com.azure.developer.microsoftplaywrighttesting.models.TestFramework;
import com.azure.developer.microsoftplaywrighttesting.models.TestRun;
import com.azure.developer.microsoftplaywrighttesting.models.TestRunConfig;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static TestRunAccessor testRunAccessor;

    public interface TestRunAccessor {
        TestRun prepareModelForJsonMergePatch(TestRun testRun, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRun testRun);
    }

    public static void setTestRunAccessor(TestRunAccessor accessor) {
        testRunAccessor = accessor;
    }

    public static TestRunAccessor getTestRunAccessor() {
        return testRunAccessor;
    }

    private static CiConfigAccessor ciConfigAccessor;

    public interface CiConfigAccessor {
        CiConfig prepareModelForJsonMergePatch(CiConfig ciConfig, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(CiConfig ciConfig);
    }

    public static void setCiConfigAccessor(CiConfigAccessor accessor) {
        ciConfigAccessor = accessor;
    }

    public static CiConfigAccessor getCiConfigAccessor() {
        return ciConfigAccessor;
    }

    private static TestRunConfigAccessor testRunConfigAccessor;

    public interface TestRunConfigAccessor {
        TestRunConfig prepareModelForJsonMergePatch(TestRunConfig testRunConfig, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunConfig testRunConfig);
    }

    public static void setTestRunConfigAccessor(TestRunConfigAccessor accessor) {
        testRunConfigAccessor = accessor;
    }

    public static TestRunConfigAccessor getTestRunConfigAccessor() {
        return testRunConfigAccessor;
    }

    private static TestFrameworkAccessor testFrameworkAccessor;

    public interface TestFrameworkAccessor {
        TestFramework prepareModelForJsonMergePatch(TestFramework testFramework, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestFramework testFramework);
    }

    public static void setTestFrameworkAccessor(TestFrameworkAccessor accessor) {
        testFrameworkAccessor = accessor;
    }

    public static TestFrameworkAccessor getTestFrameworkAccessor() {
        return testFrameworkAccessor;
    }

    private static ShardDetailsAccessor shardDetailsAccessor;

    public interface ShardDetailsAccessor {
        ShardDetails prepareModelForJsonMergePatch(ShardDetails shardDetails, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ShardDetails shardDetails);
    }

    public static void setShardDetailsAccessor(ShardDetailsAccessor accessor) {
        shardDetailsAccessor = accessor;
    }

    public static ShardDetailsAccessor getShardDetailsAccessor() {
        return shardDetailsAccessor;
    }
}
