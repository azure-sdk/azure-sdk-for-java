// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Build details of the repository associated with the workflow.
 */
@Fluent
public final class Build implements JsonSerializable<Build> {
    /*
     * Path to the Dockerfile within the repository.
     */
    private String dockerfile;

    /*
     * Path to Dockerfile Build Context within the repository.
     */
    private String dockerBuildContext;

    /**
     * Creates an instance of Build class.
     */
    public Build() {
    }

    /**
     * Get the dockerfile property: Path to the Dockerfile within the repository.
     * 
     * @return the dockerfile value.
     */
    public String dockerfile() {
        return this.dockerfile;
    }

    /**
     * Set the dockerfile property: Path to the Dockerfile within the repository.
     * 
     * @param dockerfile the dockerfile value to set.
     * @return the Build object itself.
     */
    public Build withDockerfile(String dockerfile) {
        this.dockerfile = dockerfile;
        return this;
    }

    /**
     * Get the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     * 
     * @return the dockerBuildContext value.
     */
    public String dockerBuildContext() {
        return this.dockerBuildContext;
    }

    /**
     * Set the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     * 
     * @param dockerBuildContext the dockerBuildContext value to set.
     * @return the Build object itself.
     */
    public Build withDockerBuildContext(String dockerBuildContext) {
        this.dockerBuildContext = dockerBuildContext;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dockerfile", this.dockerfile);
        jsonWriter.writeStringField("dockerBuildContext", this.dockerBuildContext);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Build from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Build if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Build.
     */
    public static Build fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Build deserializedBuild = new Build();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dockerfile".equals(fieldName)) {
                    deserializedBuild.dockerfile = reader.getString();
                } else if ("dockerBuildContext".equals(fieldName)) {
                    deserializedBuild.dockerBuildContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBuild;
        });
    }
}
