// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameter for the template.
 */
@Fluent
public final class Parameter implements JsonSerializable<Parameter> {
    /*
     * The paramater name.
     */
    private String name;

    /*
     * Description of what the paramater is used for.
     */
    private String description;

    /*
     * The type of the template parameter.
     */
    private ParameterType parameterType;

    /*
     * The type of the template parameter.
     */
    private ParameterKind parameterKind;

    /*
     * Whether the parameter is required.
     */
    private Boolean required;

    /*
     * A reference to a default parameter value or a reference parameter to take the value from.
     */
    private ParameterDefault defaultProperty;

    /**
     * Creates an instance of Parameter class.
     */
    public Parameter() {
    }

    /**
     * Get the name property: The paramater name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The paramater name.
     * 
     * @param name the name value to set.
     * @return the Parameter object itself.
     */
    public Parameter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: Description of what the paramater is used for.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of what the paramater is used for.
     * 
     * @param description the description value to set.
     * @return the Parameter object itself.
     */
    public Parameter withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the parameterType property: The type of the template parameter.
     * 
     * @return the parameterType value.
     */
    public ParameterType parameterType() {
        return this.parameterType;
    }

    /**
     * Get the parameterKind property: The type of the template parameter.
     * 
     * @return the parameterKind value.
     */
    public ParameterKind parameterKind() {
        return this.parameterKind;
    }

    /**
     * Get the required property: Whether the parameter is required.
     * 
     * @return the required value.
     */
    public Boolean required() {
        return this.required;
    }

    /**
     * Set the required property: Whether the parameter is required.
     * 
     * @param required the required value to set.
     * @return the Parameter object itself.
     */
    public Parameter withRequired(Boolean required) {
        this.required = required;
        return this;
    }

    /**
     * Get the defaultProperty property: A reference to a default parameter value or a reference parameter to take the
     * value from.
     * 
     * @return the defaultProperty value.
     */
    public ParameterDefault defaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: A reference to a default parameter value or a reference parameter to take the
     * value from.
     * 
     * @param defaultProperty the defaultProperty value to set.
     * @return the Parameter object itself.
     */
    public Parameter withDefaultProperty(ParameterDefault defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultProperty() != null) {
            defaultProperty().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("required", this.required);
        jsonWriter.writeJsonField("default", this.defaultProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Parameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Parameter if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Parameter.
     */
    public static Parameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Parameter deserializedParameter = new Parameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedParameter.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedParameter.description = reader.getString();
                } else if ("parameterType".equals(fieldName)) {
                    deserializedParameter.parameterType = ParameterType.fromString(reader.getString());
                } else if ("parameterKind".equals(fieldName)) {
                    deserializedParameter.parameterKind = ParameterKind.fromString(reader.getString());
                } else if ("required".equals(fieldName)) {
                    deserializedParameter.required = reader.getNullable(JsonReader::getBoolean);
                } else if ("default".equals(fieldName)) {
                    deserializedParameter.defaultProperty = ParameterDefault.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParameter;
        });
    }
}
