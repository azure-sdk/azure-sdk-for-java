// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the GitHub repository and credentials associated with the workflow.
 */
@Fluent
public final class GitHubProviderProfile implements JsonSerializable<GitHubProviderProfile> {
    /*
     * Details of the GitHub repository associated with the workflow.
     */
    private GitHubRepository repository;

    /*
     * The fields needed for OIDC with GitHub.
     */
    private OidcCredentials oidcCredentials;

    /**
     * Creates an instance of GitHubProviderProfile class.
     */
    public GitHubProviderProfile() {
    }

    /**
     * Get the repository property: Details of the GitHub repository associated with the workflow.
     * 
     * @return the repository value.
     */
    public GitHubRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Details of the GitHub repository associated with the workflow.
     * 
     * @param repository the repository value to set.
     * @return the GitHubProviderProfile object itself.
     */
    public GitHubProviderProfile withRepository(GitHubRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the oidcCredentials property: The fields needed for OIDC with GitHub.
     * 
     * @return the oidcCredentials value.
     */
    public OidcCredentials oidcCredentials() {
        return this.oidcCredentials;
    }

    /**
     * Set the oidcCredentials property: The fields needed for OIDC with GitHub.
     * 
     * @param oidcCredentials the oidcCredentials value to set.
     * @return the GitHubProviderProfile object itself.
     */
    public GitHubProviderProfile withOidcCredentials(OidcCredentials oidcCredentials) {
        this.oidcCredentials = oidcCredentials;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repository() != null) {
            repository().validate();
        }
        if (oidcCredentials() != null) {
            oidcCredentials().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("repository", this.repository);
        jsonWriter.writeJsonField("oidcCredentials", this.oidcCredentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubProviderProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubProviderProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitHubProviderProfile.
     */
    public static GitHubProviderProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubProviderProfile deserializedGitHubProviderProfile = new GitHubProviderProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repository".equals(fieldName)) {
                    deserializedGitHubProviderProfile.repository = GitHubRepository.fromJson(reader);
                } else if ("oidcCredentials".equals(fieldName)) {
                    deserializedGitHubProviderProfile.oidcCredentials = OidcCredentials.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubProviderProfile;
        });
    }
}
