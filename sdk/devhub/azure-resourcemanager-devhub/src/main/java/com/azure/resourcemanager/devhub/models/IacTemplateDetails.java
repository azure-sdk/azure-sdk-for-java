// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IacTemplateDetails model.
 */
@Fluent
public final class IacTemplateDetails implements JsonSerializable<IacTemplateDetails> {
    /*
     * The name of the products.
     */
    private String productName;

    /*
     * Count of the product
     */
    private Integer count;

    /*
     * Naming convention of this product
     */
    private String namingConvention;

    /**
     * Creates an instance of IacTemplateDetails class.
     */
    public IacTemplateDetails() {
    }

    /**
     * Get the productName property: The name of the products.
     * 
     * @return the productName value.
     */
    public String productName() {
        return this.productName;
    }

    /**
     * Set the productName property: The name of the products.
     * 
     * @param productName the productName value to set.
     * @return the IacTemplateDetails object itself.
     */
    public IacTemplateDetails withProductName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * Get the count property: Count of the product.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Count of the product.
     * 
     * @param count the count value to set.
     * @return the IacTemplateDetails object itself.
     */
    public IacTemplateDetails withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the namingConvention property: Naming convention of this product.
     * 
     * @return the namingConvention value.
     */
    public String namingConvention() {
        return this.namingConvention;
    }

    /**
     * Set the namingConvention property: Naming convention of this product.
     * 
     * @param namingConvention the namingConvention value to set.
     * @return the IacTemplateDetails object itself.
     */
    public IacTemplateDetails withNamingConvention(String namingConvention) {
        this.namingConvention = namingConvention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productName", this.productName);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("namingConvention", this.namingConvention);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IacTemplateDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IacTemplateDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IacTemplateDetails.
     */
    public static IacTemplateDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IacTemplateDetails deserializedIacTemplateDetails = new IacTemplateDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productName".equals(fieldName)) {
                    deserializedIacTemplateDetails.productName = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedIacTemplateDetails.count = reader.getNullable(JsonReader::getInt);
                } else if ("namingConvention".equals(fieldName)) {
                    deserializedIacTemplateDetails.namingConvention = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIacTemplateDetails;
        });
    }
}
