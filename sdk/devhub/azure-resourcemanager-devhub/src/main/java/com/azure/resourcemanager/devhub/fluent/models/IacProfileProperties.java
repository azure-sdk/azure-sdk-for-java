// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devhub.models.AuthorizationStatus;
import com.azure.resourcemanager.devhub.models.IacTemplateProperties;
import com.azure.resourcemanager.devhub.models.PullRequestStatus;
import com.azure.resourcemanager.devhub.models.StageProperties;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a IacProfile.
 */
@Fluent
public final class IacProfileProperties implements JsonSerializable<IacProfileProperties> {
    /*
     * GitHub Profile of a IacProfile
     */
    private IacGitHubProfile innerGithubProfile;

    /*
     * Terraform Profile of a IacProfile
     */
    private TerraformProfile innerTerraformProfile;

    /*
     * The stages property.
     */
    private List<StageProperties> stages;

    /*
     * The templates property.
     */
    private List<IacTemplateProperties> templates;

    /**
     * Creates an instance of IacProfileProperties class.
     */
    public IacProfileProperties() {
    }

    /**
     * Get the innerGithubProfile property: GitHub Profile of a IacProfile.
     * 
     * @return the innerGithubProfile value.
     */
    private IacGitHubProfile innerGithubProfile() {
        return this.innerGithubProfile;
    }

    /**
     * Get the innerTerraformProfile property: Terraform Profile of a IacProfile.
     * 
     * @return the innerTerraformProfile value.
     */
    private TerraformProfile innerTerraformProfile() {
        return this.innerTerraformProfile;
    }

    /**
     * Get the stages property: The stages property.
     * 
     * @return the stages value.
     */
    public List<StageProperties> stages() {
        return this.stages;
    }

    /**
     * Set the stages property: The stages property.
     * 
     * @param stages the stages value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withStages(List<StageProperties> stages) {
        this.stages = stages;
        return this;
    }

    /**
     * Get the templates property: The templates property.
     * 
     * @return the templates value.
     */
    public List<IacTemplateProperties> templates() {
        return this.templates;
    }

    /**
     * Set the templates property: The templates property.
     * 
     * @param templates the templates value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withTemplates(List<IacTemplateProperties> templates) {
        this.templates = templates;
        return this;
    }

    /**
     * Get the repositoryName property: Repository Name.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().repositoryName();
    }

    /**
     * Set the repositoryName property: Repository Name.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withRepositoryName(String repositoryName) {
        if (this.innerGithubProfile() == null) {
            this.innerGithubProfile = new IacGitHubProfile();
        }
        this.innerGithubProfile().withRepositoryName(repositoryName);
        return this;
    }

    /**
     * Get the repositoryMainBranch property: Repository Main Branch.
     * 
     * @return the repositoryMainBranch value.
     */
    public String repositoryMainBranch() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().repositoryMainBranch();
    }

    /**
     * Set the repositoryMainBranch property: Repository Main Branch.
     * 
     * @param repositoryMainBranch the repositoryMainBranch value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withRepositoryMainBranch(String repositoryMainBranch) {
        if (this.innerGithubProfile() == null) {
            this.innerGithubProfile = new IacGitHubProfile();
        }
        this.innerGithubProfile().withRepositoryMainBranch(repositoryMainBranch);
        return this;
    }

    /**
     * Get the repositoryOwner property: Repository Owner.
     * 
     * @return the repositoryOwner value.
     */
    public String repositoryOwner() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().repositoryOwner();
    }

    /**
     * Set the repositoryOwner property: Repository Owner.
     * 
     * @param repositoryOwner the repositoryOwner value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withRepositoryOwner(String repositoryOwner) {
        if (this.innerGithubProfile() == null) {
            this.innerGithubProfile = new IacGitHubProfile();
        }
        this.innerGithubProfile().withRepositoryOwner(repositoryOwner);
        return this;
    }

    /**
     * Get the authStatus property: Determines the authorization status of requests.
     * 
     * @return the authStatus value.
     */
    public AuthorizationStatus authStatus() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().authStatus();
    }

    /**
     * Get the pullNumber property: The number associated with the submitted pull request.
     * 
     * @return the pullNumber value.
     */
    public Integer pullNumber() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().pullNumber();
    }

    /**
     * Get the prStatus property: The status of the Pull Request submitted against the users repository.
     * 
     * @return the prStatus value.
     */
    public PullRequestStatus prStatus() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().prStatus();
    }

    /**
     * Get the branchName property: Repository Branch Name.
     * 
     * @return the branchName value.
     */
    public String branchName() {
        return this.innerGithubProfile() == null ? null : this.innerGithubProfile().branchName();
    }

    /**
     * Set the branchName property: Repository Branch Name.
     * 
     * @param branchName the branchName value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withBranchName(String branchName) {
        if (this.innerGithubProfile() == null) {
            this.innerGithubProfile = new IacGitHubProfile();
        }
        this.innerGithubProfile().withBranchName(branchName);
        return this;
    }

    /**
     * Get the storageAccountSubscription property: Terraform Storage Account Subscription.
     * 
     * @return the storageAccountSubscription value.
     */
    public String storageAccountSubscription() {
        return this.innerTerraformProfile() == null ? null : this.innerTerraformProfile().storageAccountSubscription();
    }

    /**
     * Set the storageAccountSubscription property: Terraform Storage Account Subscription.
     * 
     * @param storageAccountSubscription the storageAccountSubscription value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withStorageAccountSubscription(String storageAccountSubscription) {
        if (this.innerTerraformProfile() == null) {
            this.innerTerraformProfile = new TerraformProfile();
        }
        this.innerTerraformProfile().withStorageAccountSubscription(storageAccountSubscription);
        return this;
    }

    /**
     * Get the storageAccountResourceGroup property: Terraform Storage Account Resource Group.
     * 
     * @return the storageAccountResourceGroup value.
     */
    public String storageAccountResourceGroup() {
        return this.innerTerraformProfile() == null ? null : this.innerTerraformProfile().storageAccountResourceGroup();
    }

    /**
     * Set the storageAccountResourceGroup property: Terraform Storage Account Resource Group.
     * 
     * @param storageAccountResourceGroup the storageAccountResourceGroup value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withStorageAccountResourceGroup(String storageAccountResourceGroup) {
        if (this.innerTerraformProfile() == null) {
            this.innerTerraformProfile = new TerraformProfile();
        }
        this.innerTerraformProfile().withStorageAccountResourceGroup(storageAccountResourceGroup);
        return this;
    }

    /**
     * Get the storageAccountName property: Terraform Storage Account Name.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.innerTerraformProfile() == null ? null : this.innerTerraformProfile().storageAccountName();
    }

    /**
     * Set the storageAccountName property: Terraform Storage Account Name.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withStorageAccountName(String storageAccountName) {
        if (this.innerTerraformProfile() == null) {
            this.innerTerraformProfile = new TerraformProfile();
        }
        this.innerTerraformProfile().withStorageAccountName(storageAccountName);
        return this;
    }

    /**
     * Get the storageContainerName property: Terraform Container Name.
     * 
     * @return the storageContainerName value.
     */
    public String storageContainerName() {
        return this.innerTerraformProfile() == null ? null : this.innerTerraformProfile().storageContainerName();
    }

    /**
     * Set the storageContainerName property: Terraform Container Name.
     * 
     * @param storageContainerName the storageContainerName value to set.
     * @return the IacProfileProperties object itself.
     */
    public IacProfileProperties withStorageContainerName(String storageContainerName) {
        if (this.innerTerraformProfile() == null) {
            this.innerTerraformProfile = new TerraformProfile();
        }
        this.innerTerraformProfile().withStorageContainerName(storageContainerName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerGithubProfile() != null) {
            innerGithubProfile().validate();
        }
        if (innerTerraformProfile() != null) {
            innerTerraformProfile().validate();
        }
        if (stages() != null) {
            stages().forEach(e -> e.validate());
        }
        if (templates() != null) {
            templates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("githubProfile", this.innerGithubProfile);
        jsonWriter.writeJsonField("terraformProfile", this.innerTerraformProfile);
        jsonWriter.writeArrayField("stages", this.stages, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("templates", this.templates, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IacProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IacProfileProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IacProfileProperties.
     */
    public static IacProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IacProfileProperties deserializedIacProfileProperties = new IacProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("githubProfile".equals(fieldName)) {
                    deserializedIacProfileProperties.innerGithubProfile = IacGitHubProfile.fromJson(reader);
                } else if ("terraformProfile".equals(fieldName)) {
                    deserializedIacProfileProperties.innerTerraformProfile = TerraformProfile.fromJson(reader);
                } else if ("stages".equals(fieldName)) {
                    List<StageProperties> stages = reader.readArray(reader1 -> StageProperties.fromJson(reader1));
                    deserializedIacProfileProperties.stages = stages;
                } else if ("templates".equals(fieldName)) {
                    List<IacTemplateProperties> templates
                        = reader.readArray(reader1 -> IacTemplateProperties.fromJson(reader1));
                    deserializedIacProfileProperties.templates = templates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIacProfileProperties;
        });
    }
}
