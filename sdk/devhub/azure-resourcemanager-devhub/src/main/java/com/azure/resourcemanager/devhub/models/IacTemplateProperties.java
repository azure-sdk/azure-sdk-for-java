// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a IacTemplate.
 */
@Fluent
public final class IacTemplateProperties implements JsonSerializable<IacTemplateProperties> {
    /*
     * Template Name
     */
    private String templateName;

    /*
     * the source store of the template
     */
    private String sourceResourceId;

    /*
     * the source stage of the template
     */
    private String instanceStage;

    /*
     * the sample instance name of the template
     */
    private String instanceName;

    /*
     * The templateDetails property.
     */
    private List<IacTemplateDetails> templateDetails;

    /*
     * Determines the authorization status of requests.
     */
    private QuickStartTemplateType quickStartTemplateType;

    /**
     * Creates an instance of IacTemplateProperties class.
     */
    public IacTemplateProperties() {
    }

    /**
     * Get the templateName property: Template Name.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: Template Name.
     * 
     * @param templateName the templateName value to set.
     * @return the IacTemplateProperties object itself.
     */
    public IacTemplateProperties withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Get the sourceResourceId property: the source store of the template.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: the source store of the template.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the IacTemplateProperties object itself.
     */
    public IacTemplateProperties withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the instanceStage property: the source stage of the template.
     * 
     * @return the instanceStage value.
     */
    public String instanceStage() {
        return this.instanceStage;
    }

    /**
     * Set the instanceStage property: the source stage of the template.
     * 
     * @param instanceStage the instanceStage value to set.
     * @return the IacTemplateProperties object itself.
     */
    public IacTemplateProperties withInstanceStage(String instanceStage) {
        this.instanceStage = instanceStage;
        return this;
    }

    /**
     * Get the instanceName property: the sample instance name of the template.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: the sample instance name of the template.
     * 
     * @param instanceName the instanceName value to set.
     * @return the IacTemplateProperties object itself.
     */
    public IacTemplateProperties withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the templateDetails property: The templateDetails property.
     * 
     * @return the templateDetails value.
     */
    public List<IacTemplateDetails> templateDetails() {
        return this.templateDetails;
    }

    /**
     * Set the templateDetails property: The templateDetails property.
     * 
     * @param templateDetails the templateDetails value to set.
     * @return the IacTemplateProperties object itself.
     */
    public IacTemplateProperties withTemplateDetails(List<IacTemplateDetails> templateDetails) {
        this.templateDetails = templateDetails;
        return this;
    }

    /**
     * Get the quickStartTemplateType property: Determines the authorization status of requests.
     * 
     * @return the quickStartTemplateType value.
     */
    public QuickStartTemplateType quickStartTemplateType() {
        return this.quickStartTemplateType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (templateDetails() != null) {
            templateDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateName", this.templateName);
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("instanceStage", this.instanceStage);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeArrayField("templateDetails", this.templateDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IacTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IacTemplateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IacTemplateProperties.
     */
    public static IacTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IacTemplateProperties deserializedIacTemplateProperties = new IacTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateName".equals(fieldName)) {
                    deserializedIacTemplateProperties.templateName = reader.getString();
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedIacTemplateProperties.sourceResourceId = reader.getString();
                } else if ("instanceStage".equals(fieldName)) {
                    deserializedIacTemplateProperties.instanceStage = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedIacTemplateProperties.instanceName = reader.getString();
                } else if ("templateDetails".equals(fieldName)) {
                    List<IacTemplateDetails> templateDetails
                        = reader.readArray(reader1 -> IacTemplateDetails.fromJson(reader1));
                    deserializedIacTemplateProperties.templateDetails = templateDetails;
                } else if ("quickStartTemplateType".equals(fieldName)) {
                    deserializedIacTemplateProperties.quickStartTemplateType
                        = QuickStartTemplateType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIacTemplateProperties;
        });
    }
}
