// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devhub.models.AuthorizationStatus;
import com.azure.resourcemanager.devhub.models.PullRequestStatus;
import java.io.IOException;

/**
 * GitHub Profile of a IacProfile.
 */
@Fluent
public final class IacGitHubProfile implements JsonSerializable<IacGitHubProfile> {
    /*
     * Repository Name
     */
    private String repositoryName;

    /*
     * Repository Main Branch
     */
    private String repositoryMainBranch;

    /*
     * Repository Owner
     */
    private String repositoryOwner;

    /*
     * Determines the authorization status of requests.
     */
    private AuthorizationStatus authStatus;

    /*
     * The number associated with the submitted pull request.
     */
    private Integer pullNumber;

    /*
     * The status of the Pull Request submitted against the users repository.
     */
    private PullRequestStatus prStatus;

    /*
     * Repository Branch Name
     */
    private String branchName;

    /**
     * Creates an instance of IacGitHubProfile class.
     */
    public IacGitHubProfile() {
    }

    /**
     * Get the repositoryName property: Repository Name.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: Repository Name.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the IacGitHubProfile object itself.
     */
    public IacGitHubProfile withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Get the repositoryMainBranch property: Repository Main Branch.
     * 
     * @return the repositoryMainBranch value.
     */
    public String repositoryMainBranch() {
        return this.repositoryMainBranch;
    }

    /**
     * Set the repositoryMainBranch property: Repository Main Branch.
     * 
     * @param repositoryMainBranch the repositoryMainBranch value to set.
     * @return the IacGitHubProfile object itself.
     */
    public IacGitHubProfile withRepositoryMainBranch(String repositoryMainBranch) {
        this.repositoryMainBranch = repositoryMainBranch;
        return this;
    }

    /**
     * Get the repositoryOwner property: Repository Owner.
     * 
     * @return the repositoryOwner value.
     */
    public String repositoryOwner() {
        return this.repositoryOwner;
    }

    /**
     * Set the repositoryOwner property: Repository Owner.
     * 
     * @param repositoryOwner the repositoryOwner value to set.
     * @return the IacGitHubProfile object itself.
     */
    public IacGitHubProfile withRepositoryOwner(String repositoryOwner) {
        this.repositoryOwner = repositoryOwner;
        return this;
    }

    /**
     * Get the authStatus property: Determines the authorization status of requests.
     * 
     * @return the authStatus value.
     */
    public AuthorizationStatus authStatus() {
        return this.authStatus;
    }

    /**
     * Get the pullNumber property: The number associated with the submitted pull request.
     * 
     * @return the pullNumber value.
     */
    public Integer pullNumber() {
        return this.pullNumber;
    }

    /**
     * Get the prStatus property: The status of the Pull Request submitted against the users repository.
     * 
     * @return the prStatus value.
     */
    public PullRequestStatus prStatus() {
        return this.prStatus;
    }

    /**
     * Get the branchName property: Repository Branch Name.
     * 
     * @return the branchName value.
     */
    public String branchName() {
        return this.branchName;
    }

    /**
     * Set the branchName property: Repository Branch Name.
     * 
     * @param branchName the branchName value to set.
     * @return the IacGitHubProfile object itself.
     */
    public IacGitHubProfile withBranchName(String branchName) {
        this.branchName = branchName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        jsonWriter.writeStringField("repositoryMainBranch", this.repositoryMainBranch);
        jsonWriter.writeStringField("repositoryOwner", this.repositoryOwner);
        jsonWriter.writeStringField("branchName", this.branchName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IacGitHubProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IacGitHubProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IacGitHubProfile.
     */
    public static IacGitHubProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IacGitHubProfile deserializedIacGitHubProfile = new IacGitHubProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryName".equals(fieldName)) {
                    deserializedIacGitHubProfile.repositoryName = reader.getString();
                } else if ("repositoryMainBranch".equals(fieldName)) {
                    deserializedIacGitHubProfile.repositoryMainBranch = reader.getString();
                } else if ("repositoryOwner".equals(fieldName)) {
                    deserializedIacGitHubProfile.repositoryOwner = reader.getString();
                } else if ("authStatus".equals(fieldName)) {
                    deserializedIacGitHubProfile.authStatus = AuthorizationStatus.fromString(reader.getString());
                } else if ("pullNumber".equals(fieldName)) {
                    deserializedIacGitHubProfile.pullNumber = reader.getNullable(JsonReader::getInt);
                } else if ("prStatus".equals(fieldName)) {
                    deserializedIacGitHubProfile.prStatus = PullRequestStatus.fromString(reader.getString());
                } else if ("branchName".equals(fieldName)) {
                    deserializedIacGitHubProfile.branchName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIacGitHubProfile;
        });
    }
}
