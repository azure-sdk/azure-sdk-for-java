// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devhub.fluent.models.IacProfileInner;
import com.azure.resourcemanager.devhub.models.AuthorizationStatus;
import com.azure.resourcemanager.devhub.models.ExportTemplateRequest;
import com.azure.resourcemanager.devhub.models.IacProfile;
import com.azure.resourcemanager.devhub.models.IacTemplateProperties;
import com.azure.resourcemanager.devhub.models.PrLinkResponse;
import com.azure.resourcemanager.devhub.models.PullRequestStatus;
import com.azure.resourcemanager.devhub.models.ScaleTemplateRequest;
import com.azure.resourcemanager.devhub.models.StageProperties;
import com.azure.resourcemanager.devhub.models.TagsObject;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class IacProfileImpl implements IacProfile, IacProfile.Definition, IacProfile.Update {
    private IacProfileInner innerObject;

    private final com.azure.resourcemanager.devhub.DevHubManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<StageProperties> stages() {
        List<StageProperties> inner = this.innerModel().stages();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<IacTemplateProperties> templates() {
        List<IacTemplateProperties> inner = this.innerModel().templates();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String repositoryName() {
        return this.innerModel().repositoryName();
    }

    public String repositoryMainBranch() {
        return this.innerModel().repositoryMainBranch();
    }

    public String repositoryOwner() {
        return this.innerModel().repositoryOwner();
    }

    public AuthorizationStatus authStatus() {
        return this.innerModel().authStatus();
    }

    public Integer pullNumber() {
        return this.innerModel().pullNumber();
    }

    public PullRequestStatus prStatus() {
        return this.innerModel().prStatus();
    }

    public String branchName() {
        return this.innerModel().branchName();
    }

    public String storageAccountSubscription() {
        return this.innerModel().storageAccountSubscription();
    }

    public String storageAccountResourceGroup() {
        return this.innerModel().storageAccountResourceGroup();
    }

    public String storageAccountName() {
        return this.innerModel().storageAccountName();
    }

    public String storageContainerName() {
        return this.innerModel().storageContainerName();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public IacProfileInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devhub.DevHubManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String iacProfileName;

    private TagsObject updateParameters;

    public IacProfileImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public IacProfile create() {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .createOrUpdateWithResponse(resourceGroupName, iacProfileName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public IacProfile create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .createOrUpdateWithResponse(resourceGroupName, iacProfileName, this.innerModel(), context)
            .getValue();
        return this;
    }

    IacProfileImpl(String name, com.azure.resourcemanager.devhub.DevHubManager serviceManager) {
        this.innerObject = new IacProfileInner();
        this.serviceManager = serviceManager;
        this.iacProfileName = name;
    }

    public IacProfileImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public IacProfile apply() {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .updateTagsWithResponse(resourceGroupName, iacProfileName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public IacProfile apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .updateTagsWithResponse(resourceGroupName, iacProfileName, updateParameters, context)
            .getValue();
        return this;
    }

    IacProfileImpl(IacProfileInner innerObject, com.azure.resourcemanager.devhub.DevHubManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.iacProfileName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "iacProfiles");
    }

    public IacProfile refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .getByResourceGroupWithResponse(resourceGroupName, iacProfileName, Context.NONE)
            .getValue();
        return this;
    }

    public IacProfile refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIacProfiles()
            .getByResourceGroupWithResponse(resourceGroupName, iacProfileName, context)
            .getValue();
        return this;
    }

    public Response<PrLinkResponse> exportWithResponse(ExportTemplateRequest parameters, Context context) {
        return serviceManager.iacProfiles().exportWithResponse(resourceGroupName, iacProfileName, parameters, context);
    }

    public PrLinkResponse export(ExportTemplateRequest parameters) {
        return serviceManager.iacProfiles().export(resourceGroupName, iacProfileName, parameters);
    }

    public Response<PrLinkResponse> scaleWithResponse(ScaleTemplateRequest parameters, Context context) {
        return serviceManager.iacProfiles().scaleWithResponse(resourceGroupName, iacProfileName, parameters, context);
    }

    public PrLinkResponse scale(ScaleTemplateRequest parameters) {
        return serviceManager.iacProfiles().scale(resourceGroupName, iacProfileName, parameters);
    }

    public Response<Void> syncWithResponse(Context context) {
        return serviceManager.iacProfiles().syncWithResponse(resourceGroupName, iacProfileName, context);
    }

    public void sync() {
        serviceManager.iacProfiles().sync(resourceGroupName, iacProfileName);
    }

    public IacProfileImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IacProfileImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IacProfileImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public IacProfileImpl withStages(List<StageProperties> stages) {
        this.innerModel().withStages(stages);
        return this;
    }

    public IacProfileImpl withTemplates(List<IacTemplateProperties> templates) {
        this.innerModel().withTemplates(templates);
        return this;
    }

    public IacProfileImpl withRepositoryName(String repositoryName) {
        this.innerModel().withRepositoryName(repositoryName);
        return this;
    }

    public IacProfileImpl withRepositoryMainBranch(String repositoryMainBranch) {
        this.innerModel().withRepositoryMainBranch(repositoryMainBranch);
        return this;
    }

    public IacProfileImpl withRepositoryOwner(String repositoryOwner) {
        this.innerModel().withRepositoryOwner(repositoryOwner);
        return this;
    }

    public IacProfileImpl withBranchName(String branchName) {
        this.innerModel().withBranchName(branchName);
        return this;
    }

    public IacProfileImpl withStorageAccountSubscription(String storageAccountSubscription) {
        this.innerModel().withStorageAccountSubscription(storageAccountSubscription);
        return this;
    }

    public IacProfileImpl withStorageAccountResourceGroup(String storageAccountResourceGroup) {
        this.innerModel().withStorageAccountResourceGroup(storageAccountResourceGroup);
        return this;
    }

    public IacProfileImpl withStorageAccountName(String storageAccountName) {
        this.innerModel().withStorageAccountName(storageAccountName);
        return this;
    }

    public IacProfileImpl withStorageContainerName(String storageContainerName) {
        this.innerModel().withStorageContainerName(storageContainerName);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
