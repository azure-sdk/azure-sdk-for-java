// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the pull request containing the workflow.
 */
@Immutable
public final class PullRequest implements JsonSerializable<PullRequest> {
    /*
     * The URL to the Pull Request submitted against the users repository.
     */
    private String prUrl;

    /*
     * The number associated with the submitted pull request.
     */
    private Integer pullNumber;

    /*
     * The status of the Pull Request submitted against the users repository.
     */
    private PullRequestStatus prStatus;

    /**
     * Creates an instance of PullRequest class.
     */
    public PullRequest() {
    }

    /**
     * Get the prUrl property: The URL to the Pull Request submitted against the users repository.
     * 
     * @return the prUrl value.
     */
    public String prUrl() {
        return this.prUrl;
    }

    /**
     * Get the pullNumber property: The number associated with the submitted pull request.
     * 
     * @return the pullNumber value.
     */
    public Integer pullNumber() {
        return this.pullNumber;
    }

    /**
     * Get the prStatus property: The status of the Pull Request submitted against the users repository.
     * 
     * @return the prStatus value.
     */
    public PullRequestStatus prStatus() {
        return this.prStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PullRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PullRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PullRequest.
     */
    public static PullRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PullRequest deserializedPullRequest = new PullRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prURL".equals(fieldName)) {
                    deserializedPullRequest.prUrl = reader.getString();
                } else if ("pullNumber".equals(fieldName)) {
                    deserializedPullRequest.pullNumber = reader.getNullable(JsonReader::getInt);
                } else if ("prStatus".equals(fieldName)) {
                    deserializedPullRequest.prStatus = PullRequestStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPullRequest;
        });
    }
}
