// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VersionedTemplate properties.
 */
@Fluent
public final class VersionedTemplateProperties implements JsonSerializable<VersionedTemplateProperties> {
    /*
     * The version of the template.
     */
    private String version;

    /*
     * The type of the template.
     */
    private TemplateType templateType;

    /*
     * The template parameters.
     */
    private List<Parameter> parameters;

    /**
     * Creates an instance of VersionedTemplateProperties class.
     */
    public VersionedTemplateProperties() {
    }

    /**
     * Get the version property: The version of the template.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the template.
     * 
     * @param version the version value to set.
     * @return the VersionedTemplateProperties object itself.
     */
    public VersionedTemplateProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the templateType property: The type of the template.
     * 
     * @return the templateType value.
     */
    public TemplateType templateType() {
        return this.templateType;
    }

    /**
     * Get the parameters property: The template parameters.
     * 
     * @return the parameters value.
     */
    public List<Parameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The template parameters.
     * 
     * @param parameters the parameters value to set.
     * @return the VersionedTemplateProperties object itself.
     */
    public VersionedTemplateProperties withParameters(List<Parameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VersionedTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VersionedTemplateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VersionedTemplateProperties.
     */
    public static VersionedTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VersionedTemplateProperties deserializedVersionedTemplateProperties = new VersionedTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedVersionedTemplateProperties.version = reader.getString();
                } else if ("templateType".equals(fieldName)) {
                    deserializedVersionedTemplateProperties.templateType = TemplateType.fromString(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    List<Parameter> parameters = reader.readArray(reader1 -> Parameter.fromJson(reader1));
                    deserializedVersionedTemplateProperties.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVersionedTemplateProperties;
        });
    }
}
