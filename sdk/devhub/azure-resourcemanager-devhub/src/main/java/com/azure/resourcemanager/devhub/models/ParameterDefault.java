// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A reference to a default parameter value or a reference parameter to take the value from.
 */
@Fluent
public final class ParameterDefault implements JsonSerializable<ParameterDefault> {
    /*
     * The default value for this parameter.
     */
    private String value;

    /*
     * The Parameter to reference a value from.
     */
    private String referenceParameter;

    /**
     * Creates an instance of ParameterDefault class.
     */
    public ParameterDefault() {
    }

    /**
     * Get the value property: The default value for this parameter.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The default value for this parameter.
     * 
     * @param value the value value to set.
     * @return the ParameterDefault object itself.
     */
    public ParameterDefault withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the referenceParameter property: The Parameter to reference a value from.
     * 
     * @return the referenceParameter value.
     */
    public String referenceParameter() {
        return this.referenceParameter;
    }

    /**
     * Set the referenceParameter property: The Parameter to reference a value from.
     * 
     * @param referenceParameter the referenceParameter value to set.
     * @return the ParameterDefault object itself.
     */
    public ParameterDefault withReferenceParameter(String referenceParameter) {
        this.referenceParameter = referenceParameter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("referenceParameter", this.referenceParameter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParameterDefault from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParameterDefault if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ParameterDefault.
     */
    public static ParameterDefault fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParameterDefault deserializedParameterDefault = new ParameterDefault();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedParameterDefault.value = reader.getString();
                } else if ("referenceParameter".equals(fieldName)) {
                    deserializedParameterDefault.referenceParameter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParameterDefault;
        });
    }
}
