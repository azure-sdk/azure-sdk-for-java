// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Template properties.
 */
@Fluent
public final class TemplateProperties implements JsonSerializable<TemplateProperties> {
    /*
     * The name of the template.
     */
    private String templateName;

    /*
     * The default version of the template.
     */
    private String defaultVersion;

    /*
     * The valid versions of the template.
     */
    private List<String> versions;

    /*
     * Description of the template
     */
    private String description;

    /*
     * The type of the template.
     */
    private TemplateType templateType;

    /**
     * Creates an instance of TemplateProperties class.
     */
    public TemplateProperties() {
    }

    /**
     * Get the templateName property: The name of the template.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: The name of the template.
     * 
     * @param templateName the templateName value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Get the defaultVersion property: The default version of the template.
     * 
     * @return the defaultVersion value.
     */
    public String defaultVersion() {
        return this.defaultVersion;
    }

    /**
     * Set the defaultVersion property: The default version of the template.
     * 
     * @param defaultVersion the defaultVersion value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withDefaultVersion(String defaultVersion) {
        this.defaultVersion = defaultVersion;
        return this;
    }

    /**
     * Get the versions property: The valid versions of the template.
     * 
     * @return the versions value.
     */
    public List<String> versions() {
        return this.versions;
    }

    /**
     * Set the versions property: The valid versions of the template.
     * 
     * @param versions the versions value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withVersions(List<String> versions) {
        this.versions = versions;
        return this;
    }

    /**
     * Get the description property: Description of the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the template.
     * 
     * @param description the description value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the templateType property: The type of the template.
     * 
     * @return the templateType value.
     */
    public TemplateType templateType() {
        return this.templateType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateName", this.templateName);
        jsonWriter.writeStringField("defaultVersion", this.defaultVersion);
        jsonWriter.writeArrayField("versions", this.versions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateProperties.
     */
    public static TemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateProperties deserializedTemplateProperties = new TemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateName".equals(fieldName)) {
                    deserializedTemplateProperties.templateName = reader.getString();
                } else if ("defaultVersion".equals(fieldName)) {
                    deserializedTemplateProperties.defaultVersion = reader.getString();
                } else if ("versions".equals(fieldName)) {
                    List<String> versions = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.versions = versions;
                } else if ("description".equals(fieldName)) {
                    deserializedTemplateProperties.description = reader.getString();
                } else if ("templateType".equals(fieldName)) {
                    deserializedTemplateProperties.templateType = TemplateType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateProperties;
        });
    }
}
