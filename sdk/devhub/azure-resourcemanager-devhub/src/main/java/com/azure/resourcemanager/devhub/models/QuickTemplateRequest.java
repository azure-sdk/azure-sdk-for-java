// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The QuickTemplateRequest model.
 */
@Fluent
public final class QuickTemplateRequest implements JsonSerializable<QuickTemplateRequest> {
    /*
     * Template Name
     */
    private String templateName;

    /*
     * Stage Name
     */
    private String stageName;

    /*
     * Instance Name
     */
    private String instanceName;

    /*
     * The type of quick start template
     */
    private QuickStartTemplateType quickStartTemplateType;

    /**
     * Creates an instance of QuickTemplateRequest class.
     */
    public QuickTemplateRequest() {
    }

    /**
     * Get the templateName property: Template Name.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: Template Name.
     * 
     * @param templateName the templateName value to set.
     * @return the QuickTemplateRequest object itself.
     */
    public QuickTemplateRequest withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Get the stageName property: Stage Name.
     * 
     * @return the stageName value.
     */
    public String stageName() {
        return this.stageName;
    }

    /**
     * Set the stageName property: Stage Name.
     * 
     * @param stageName the stageName value to set.
     * @return the QuickTemplateRequest object itself.
     */
    public QuickTemplateRequest withStageName(String stageName) {
        this.stageName = stageName;
        return this;
    }

    /**
     * Get the instanceName property: Instance Name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: Instance Name.
     * 
     * @param instanceName the instanceName value to set.
     * @return the QuickTemplateRequest object itself.
     */
    public QuickTemplateRequest withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the quickStartTemplateType property: The type of quick start template.
     * 
     * @return the quickStartTemplateType value.
     */
    public QuickStartTemplateType quickStartTemplateType() {
        return this.quickStartTemplateType;
    }

    /**
     * Set the quickStartTemplateType property: The type of quick start template.
     * 
     * @param quickStartTemplateType the quickStartTemplateType value to set.
     * @return the QuickTemplateRequest object itself.
     */
    public QuickTemplateRequest withQuickStartTemplateType(QuickStartTemplateType quickStartTemplateType) {
        this.quickStartTemplateType = quickStartTemplateType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateName", this.templateName);
        jsonWriter.writeStringField("stageName", this.stageName);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeStringField("quickStartTemplateType",
            this.quickStartTemplateType == null ? null : this.quickStartTemplateType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuickTemplateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuickTemplateRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuickTemplateRequest.
     */
    public static QuickTemplateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuickTemplateRequest deserializedQuickTemplateRequest = new QuickTemplateRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateName".equals(fieldName)) {
                    deserializedQuickTemplateRequest.templateName = reader.getString();
                } else if ("stageName".equals(fieldName)) {
                    deserializedQuickTemplateRequest.stageName = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedQuickTemplateRequest.instanceName = reader.getString();
                } else if ("quickStartTemplateType".equals(fieldName)) {
                    deserializedQuickTemplateRequest.quickStartTemplateType
                        = QuickStartTemplateType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuickTemplateRequest;
        });
    }
}
