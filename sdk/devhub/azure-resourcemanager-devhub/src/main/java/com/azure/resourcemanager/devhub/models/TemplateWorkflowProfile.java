// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Template Workflow Profile.
 */
@Fluent
public final class TemplateWorkflowProfile implements JsonSerializable<TemplateWorkflowProfile> {
    /*
     * The status of the Pull Request submitted against the users repository.
     */
    private RepositoryProviderType repositoryProvider;

    /*
     * The properties of ADO OAuth.
     */
    private TemplateReference workflowTemplate;

    /*
     * The properties of ADO OAuth.
     */
    private TemplateReference deploymentTemplate;

    /*
     * The properties of ADO OAuth.
     */
    private TemplateReference dockerfileTemplate;

    /*
     * The manifestTemplates property.
     */
    private List<TemplateReference> manifestTemplates;

    /*
     * Details of the GitHub repository and credentials associated with the workflow.
     */
    private GitHubProviderProfile gitHubProviderProfile;

    /*
     * Details of the GitHub repository associated with the workflow.
     */
    private AdoProviderProfile adoProviderProfile;

    /*
     * Details of the pull request containing the workflow.
     */
    private PullRequest pullRequest;

    /*
     * The lastWorkflowRun property.
     */
    private WorkflowRun lastWorkflowRun;

    /*
     * Determines the authorization status of requests.
     */
    private AuthorizationStatus authStatus;

    /**
     * Creates an instance of TemplateWorkflowProfile class.
     */
    public TemplateWorkflowProfile() {
    }

    /**
     * Get the repositoryProvider property: The status of the Pull Request submitted against the users repository.
     * 
     * @return the repositoryProvider value.
     */
    public RepositoryProviderType repositoryProvider() {
        return this.repositoryProvider;
    }

    /**
     * Set the repositoryProvider property: The status of the Pull Request submitted against the users repository.
     * 
     * @param repositoryProvider the repositoryProvider value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withRepositoryProvider(RepositoryProviderType repositoryProvider) {
        this.repositoryProvider = repositoryProvider;
        return this;
    }

    /**
     * Get the workflowTemplate property: The properties of ADO OAuth.
     * 
     * @return the workflowTemplate value.
     */
    public TemplateReference workflowTemplate() {
        return this.workflowTemplate;
    }

    /**
     * Set the workflowTemplate property: The properties of ADO OAuth.
     * 
     * @param workflowTemplate the workflowTemplate value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withWorkflowTemplate(TemplateReference workflowTemplate) {
        this.workflowTemplate = workflowTemplate;
        return this;
    }

    /**
     * Get the deploymentTemplate property: The properties of ADO OAuth.
     * 
     * @return the deploymentTemplate value.
     */
    public TemplateReference deploymentTemplate() {
        return this.deploymentTemplate;
    }

    /**
     * Set the deploymentTemplate property: The properties of ADO OAuth.
     * 
     * @param deploymentTemplate the deploymentTemplate value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withDeploymentTemplate(TemplateReference deploymentTemplate) {
        this.deploymentTemplate = deploymentTemplate;
        return this;
    }

    /**
     * Get the dockerfileTemplate property: The properties of ADO OAuth.
     * 
     * @return the dockerfileTemplate value.
     */
    public TemplateReference dockerfileTemplate() {
        return this.dockerfileTemplate;
    }

    /**
     * Set the dockerfileTemplate property: The properties of ADO OAuth.
     * 
     * @param dockerfileTemplate the dockerfileTemplate value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withDockerfileTemplate(TemplateReference dockerfileTemplate) {
        this.dockerfileTemplate = dockerfileTemplate;
        return this;
    }

    /**
     * Get the manifestTemplates property: The manifestTemplates property.
     * 
     * @return the manifestTemplates value.
     */
    public List<TemplateReference> manifestTemplates() {
        return this.manifestTemplates;
    }

    /**
     * Set the manifestTemplates property: The manifestTemplates property.
     * 
     * @param manifestTemplates the manifestTemplates value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withManifestTemplates(List<TemplateReference> manifestTemplates) {
        this.manifestTemplates = manifestTemplates;
        return this;
    }

    /**
     * Get the gitHubProviderProfile property: Details of the GitHub repository and credentials associated with the
     * workflow.
     * 
     * @return the gitHubProviderProfile value.
     */
    public GitHubProviderProfile gitHubProviderProfile() {
        return this.gitHubProviderProfile;
    }

    /**
     * Set the gitHubProviderProfile property: Details of the GitHub repository and credentials associated with the
     * workflow.
     * 
     * @param gitHubProviderProfile the gitHubProviderProfile value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withGitHubProviderProfile(GitHubProviderProfile gitHubProviderProfile) {
        this.gitHubProviderProfile = gitHubProviderProfile;
        return this;
    }

    /**
     * Get the adoProviderProfile property: Details of the GitHub repository associated with the workflow.
     * 
     * @return the adoProviderProfile value.
     */
    public AdoProviderProfile adoProviderProfile() {
        return this.adoProviderProfile;
    }

    /**
     * Set the adoProviderProfile property: Details of the GitHub repository associated with the workflow.
     * 
     * @param adoProviderProfile the adoProviderProfile value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withAdoProviderProfile(AdoProviderProfile adoProviderProfile) {
        this.adoProviderProfile = adoProviderProfile;
        return this;
    }

    /**
     * Get the pullRequest property: Details of the pull request containing the workflow.
     * 
     * @return the pullRequest value.
     */
    public PullRequest pullRequest() {
        return this.pullRequest;
    }

    /**
     * Set the pullRequest property: Details of the pull request containing the workflow.
     * 
     * @param pullRequest the pullRequest value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withPullRequest(PullRequest pullRequest) {
        this.pullRequest = pullRequest;
        return this;
    }

    /**
     * Get the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @return the lastWorkflowRun value.
     */
    public WorkflowRun lastWorkflowRun() {
        return this.lastWorkflowRun;
    }

    /**
     * Set the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @param lastWorkflowRun the lastWorkflowRun value to set.
     * @return the TemplateWorkflowProfile object itself.
     */
    public TemplateWorkflowProfile withLastWorkflowRun(WorkflowRun lastWorkflowRun) {
        this.lastWorkflowRun = lastWorkflowRun;
        return this;
    }

    /**
     * Get the authStatus property: Determines the authorization status of requests.
     * 
     * @return the authStatus value.
     */
    public AuthorizationStatus authStatus() {
        return this.authStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workflowTemplate() != null) {
            workflowTemplate().validate();
        }
        if (deploymentTemplate() != null) {
            deploymentTemplate().validate();
        }
        if (dockerfileTemplate() != null) {
            dockerfileTemplate().validate();
        }
        if (manifestTemplates() != null) {
            manifestTemplates().forEach(e -> e.validate());
        }
        if (gitHubProviderProfile() != null) {
            gitHubProviderProfile().validate();
        }
        if (adoProviderProfile() != null) {
            adoProviderProfile().validate();
        }
        if (pullRequest() != null) {
            pullRequest().validate();
        }
        if (lastWorkflowRun() != null) {
            lastWorkflowRun().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryProvider",
            this.repositoryProvider == null ? null : this.repositoryProvider.toString());
        jsonWriter.writeJsonField("workflowTemplate", this.workflowTemplate);
        jsonWriter.writeJsonField("deploymentTemplate", this.deploymentTemplate);
        jsonWriter.writeJsonField("dockerfileTemplate", this.dockerfileTemplate);
        jsonWriter.writeArrayField("manifestTemplates", this.manifestTemplates,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("gitHubProviderProfile", this.gitHubProviderProfile);
        jsonWriter.writeJsonField("adoProviderProfile", this.adoProviderProfile);
        jsonWriter.writeJsonField("pullRequest", this.pullRequest);
        jsonWriter.writeJsonField("lastWorkflowRun", this.lastWorkflowRun);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateWorkflowProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateWorkflowProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateWorkflowProfile.
     */
    public static TemplateWorkflowProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateWorkflowProfile deserializedTemplateWorkflowProfile = new TemplateWorkflowProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryProvider".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.repositoryProvider
                        = RepositoryProviderType.fromString(reader.getString());
                } else if ("workflowTemplate".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.workflowTemplate = TemplateReference.fromJson(reader);
                } else if ("deploymentTemplate".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.deploymentTemplate = TemplateReference.fromJson(reader);
                } else if ("dockerfileTemplate".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.dockerfileTemplate = TemplateReference.fromJson(reader);
                } else if ("manifestTemplates".equals(fieldName)) {
                    List<TemplateReference> manifestTemplates
                        = reader.readArray(reader1 -> TemplateReference.fromJson(reader1));
                    deserializedTemplateWorkflowProfile.manifestTemplates = manifestTemplates;
                } else if ("gitHubProviderProfile".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.gitHubProviderProfile = GitHubProviderProfile.fromJson(reader);
                } else if ("adoProviderProfile".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.adoProviderProfile = AdoProviderProfile.fromJson(reader);
                } else if ("pullRequest".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.pullRequest = PullRequest.fromJson(reader);
                } else if ("lastWorkflowRun".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.lastWorkflowRun = WorkflowRun.fromJson(reader);
                } else if ("authStatus".equals(fieldName)) {
                    deserializedTemplateWorkflowProfile.authStatus = AuthorizationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateWorkflowProfile;
        });
    }
}
