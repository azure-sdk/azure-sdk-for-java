// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of ADO OAuth.
 */
@Fluent
public final class TemplateReference implements JsonSerializable<TemplateReference> {
    /*
     * The versioned template arm resource id.
     */
    private String templateId;

    /*
     * destination for template creation
     */
    private String destination;

    /*
     * parameters for template creation
     */
    private Map<String, String> parameters;

    /**
     * Creates an instance of TemplateReference class.
     */
    public TemplateReference() {
    }

    /**
     * Get the templateId property: The versioned template arm resource id.
     * 
     * @return the templateId value.
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: The versioned template arm resource id.
     * 
     * @param templateId the templateId value to set.
     * @return the TemplateReference object itself.
     */
    public TemplateReference withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get the destination property: destination for template creation.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: destination for template creation.
     * 
     * @param destination the destination value to set.
     * @return the TemplateReference object itself.
     */
    public TemplateReference withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the parameters property: parameters for template creation.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: parameters for template creation.
     * 
     * @param parameters the parameters value to set.
     * @return the TemplateReference object itself.
     */
    public TemplateReference withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateId", this.templateId);
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateReference.
     */
    public static TemplateReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateReference deserializedTemplateReference = new TemplateReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateId".equals(fieldName)) {
                    deserializedTemplateReference.templateId = reader.getString();
                } else if ("destination".equals(fieldName)) {
                    deserializedTemplateReference.destination = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedTemplateReference.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateReference;
        });
    }
}
