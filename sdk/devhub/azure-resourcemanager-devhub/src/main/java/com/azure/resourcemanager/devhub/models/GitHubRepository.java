// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the GitHub repository associated with the workflow.
 */
@Fluent
public final class GitHubRepository implements JsonSerializable<GitHubRepository> {
    /*
     * The owner of the repository the workflow is associated with.
     */
    private String repositoryOwner;

    /*
     * The name of the repository the workflow is associated with.
     */
    private String repositoryName;

    /*
     * The name of the branch the workflow is associated with.
     */
    private String branchName;

    /**
     * Creates an instance of GitHubRepository class.
     */
    public GitHubRepository() {
    }

    /**
     * Get the repositoryOwner property: The owner of the repository the workflow is associated with.
     * 
     * @return the repositoryOwner value.
     */
    public String repositoryOwner() {
        return this.repositoryOwner;
    }

    /**
     * Set the repositoryOwner property: The owner of the repository the workflow is associated with.
     * 
     * @param repositoryOwner the repositoryOwner value to set.
     * @return the GitHubRepository object itself.
     */
    public GitHubRepository withRepositoryOwner(String repositoryOwner) {
        this.repositoryOwner = repositoryOwner;
        return this;
    }

    /**
     * Get the repositoryName property: The name of the repository the workflow is associated with.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: The name of the repository the workflow is associated with.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the GitHubRepository object itself.
     */
    public GitHubRepository withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Get the branchName property: The name of the branch the workflow is associated with.
     * 
     * @return the branchName value.
     */
    public String branchName() {
        return this.branchName;
    }

    /**
     * Set the branchName property: The name of the branch the workflow is associated with.
     * 
     * @param branchName the branchName value to set.
     * @return the GitHubRepository object itself.
     */
    public GitHubRepository withBranchName(String branchName) {
        this.branchName = branchName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryOwner", this.repositoryOwner);
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        jsonWriter.writeStringField("branchName", this.branchName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubRepository from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubRepository if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitHubRepository.
     */
    public static GitHubRepository fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubRepository deserializedGitHubRepository = new GitHubRepository();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryOwner".equals(fieldName)) {
                    deserializedGitHubRepository.repositoryOwner = reader.getString();
                } else if ("repositoryName".equals(fieldName)) {
                    deserializedGitHubRepository.repositoryName = reader.getString();
                } else if ("branchName".equals(fieldName)) {
                    deserializedGitHubRepository.branchName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubRepository;
        });
    }
}
