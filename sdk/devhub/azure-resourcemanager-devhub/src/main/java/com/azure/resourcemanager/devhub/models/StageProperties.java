// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Stage.
 */
@Fluent
public final class StageProperties implements JsonSerializable<StageProperties> {
    /*
     * Stage Name
     */
    private String stageName;

    /*
     * The dependencies property.
     */
    private List<String> dependencies;

    /*
     * The gitEnvironment property.
     */
    private String gitEnvironment;

    /**
     * Creates an instance of StageProperties class.
     */
    public StageProperties() {
    }

    /**
     * Get the stageName property: Stage Name.
     * 
     * @return the stageName value.
     */
    public String stageName() {
        return this.stageName;
    }

    /**
     * Set the stageName property: Stage Name.
     * 
     * @param stageName the stageName value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withStageName(String stageName) {
        this.stageName = stageName;
        return this;
    }

    /**
     * Get the dependencies property: The dependencies property.
     * 
     * @return the dependencies value.
     */
    public List<String> dependencies() {
        return this.dependencies;
    }

    /**
     * Set the dependencies property: The dependencies property.
     * 
     * @param dependencies the dependencies value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withDependencies(List<String> dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    /**
     * Get the gitEnvironment property: The gitEnvironment property.
     * 
     * @return the gitEnvironment value.
     */
    public String gitEnvironment() {
        return this.gitEnvironment;
    }

    /**
     * Set the gitEnvironment property: The gitEnvironment property.
     * 
     * @param gitEnvironment the gitEnvironment value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withGitEnvironment(String gitEnvironment) {
        this.gitEnvironment = gitEnvironment;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stageName", this.stageName);
        jsonWriter.writeArrayField("dependencies", this.dependencies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("gitEnvironment", this.gitEnvironment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StageProperties.
     */
    public static StageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageProperties deserializedStageProperties = new StageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stageName".equals(fieldName)) {
                    deserializedStageProperties.stageName = reader.getString();
                } else if ("dependencies".equals(fieldName)) {
                    List<String> dependencies = reader.readArray(reader1 -> reader1.getString());
                    deserializedStageProperties.dependencies = dependencies;
                } else if ("gitEnvironment".equals(fieldName)) {
                    deserializedStageProperties.gitEnvironment = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageProperties;
        });
    }
}
