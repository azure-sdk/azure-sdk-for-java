// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devhub.fluent.VersionedTemplatesClient;
import com.azure.resourcemanager.devhub.fluent.models.GenerateVersionedTemplateResponseInner;
import com.azure.resourcemanager.devhub.fluent.models.VersionedTemplateInner;
import com.azure.resourcemanager.devhub.models.GenerateVersionedTemplateResponse;
import com.azure.resourcemanager.devhub.models.VersionedTemplate;
import com.azure.resourcemanager.devhub.models.VersionedTemplates;
import java.util.Map;

public final class VersionedTemplatesImpl implements VersionedTemplates {
    private static final ClientLogger LOGGER = new ClientLogger(VersionedTemplatesImpl.class);

    private final VersionedTemplatesClient innerClient;

    private final com.azure.resourcemanager.devhub.DevHubManager serviceManager;

    public VersionedTemplatesImpl(VersionedTemplatesClient innerClient,
        com.azure.resourcemanager.devhub.DevHubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<VersionedTemplate> list(String templateName) {
        PagedIterable<VersionedTemplateInner> inner = this.serviceClient().list(templateName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionedTemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<VersionedTemplate> list(String templateName, Context context) {
        PagedIterable<VersionedTemplateInner> inner = this.serviceClient().list(templateName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionedTemplateImpl(inner1, this.manager()));
    }

    public Response<VersionedTemplate> getWithResponse(String templateName, String templateVersion, Context context) {
        Response<VersionedTemplateInner> inner
            = this.serviceClient().getWithResponse(templateName, templateVersion, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VersionedTemplateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VersionedTemplate get(String templateName, String templateVersion) {
        VersionedTemplateInner inner = this.serviceClient().get(templateName, templateVersion);
        if (inner != null) {
            return new VersionedTemplateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GenerateVersionedTemplateResponse> generateWithResponse(String templateName, String templateVersion,
        Map<String, String> parameters, Context context) {
        Response<GenerateVersionedTemplateResponseInner> inner
            = this.serviceClient().generateWithResponse(templateName, templateVersion, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GenerateVersionedTemplateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GenerateVersionedTemplateResponse generate(String templateName, String templateVersion,
        Map<String, String> parameters) {
        GenerateVersionedTemplateResponseInner inner
            = this.serviceClient().generate(templateName, templateVersion, parameters);
        if (inner != null) {
            return new GenerateVersionedTemplateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private VersionedTemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devhub.DevHubManager manager() {
        return this.serviceManager;
    }
}
