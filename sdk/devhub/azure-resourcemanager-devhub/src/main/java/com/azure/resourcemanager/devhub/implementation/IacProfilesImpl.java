// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devhub.fluent.IacProfilesClient;
import com.azure.resourcemanager.devhub.fluent.models.IacProfileInner;
import com.azure.resourcemanager.devhub.fluent.models.PrLinkResponseInner;
import com.azure.resourcemanager.devhub.models.ExportTemplateRequest;
import com.azure.resourcemanager.devhub.models.IacProfile;
import com.azure.resourcemanager.devhub.models.IacProfiles;
import com.azure.resourcemanager.devhub.models.PrLinkResponse;
import com.azure.resourcemanager.devhub.models.QuickTemplateRequest;
import com.azure.resourcemanager.devhub.models.ScaleTemplateRequest;

public final class IacProfilesImpl implements IacProfiles {
    private static final ClientLogger LOGGER = new ClientLogger(IacProfilesImpl.class);

    private final IacProfilesClient innerClient;

    private final com.azure.resourcemanager.devhub.DevHubManager serviceManager;

    public IacProfilesImpl(IacProfilesClient innerClient,
        com.azure.resourcemanager.devhub.DevHubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IacProfile> list() {
        PagedIterable<IacProfileInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IacProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<IacProfile> list(Context context) {
        PagedIterable<IacProfileInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IacProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<IacProfile> listByResourceGroup(String resourceGroupName) {
        PagedIterable<IacProfileInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IacProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<IacProfile> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<IacProfileInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IacProfileImpl(inner1, this.manager()));
    }

    public Response<IacProfile> getByResourceGroupWithResponse(String resourceGroupName, String iacProfileName,
        Context context) {
        Response<IacProfileInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, iacProfileName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IacProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IacProfile getByResourceGroup(String resourceGroupName, String iacProfileName) {
        IacProfileInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, iacProfileName);
        if (inner != null) {
            return new IacProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String iacProfileName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, iacProfileName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String iacProfileName) {
        this.serviceClient().delete(resourceGroupName, iacProfileName);
    }

    public Response<PrLinkResponse> exportWithResponse(String resourceGroupName, String iacProfileName,
        ExportTemplateRequest parameters, Context context) {
        Response<PrLinkResponseInner> inner
            = this.serviceClient().exportWithResponse(resourceGroupName, iacProfileName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrLinkResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrLinkResponse export(String resourceGroupName, String iacProfileName, ExportTemplateRequest parameters) {
        PrLinkResponseInner inner = this.serviceClient().export(resourceGroupName, iacProfileName, parameters);
        if (inner != null) {
            return new PrLinkResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrLinkResponse> scaleWithResponse(String resourceGroupName, String iacProfileName,
        ScaleTemplateRequest parameters, Context context) {
        Response<PrLinkResponseInner> inner
            = this.serviceClient().scaleWithResponse(resourceGroupName, iacProfileName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrLinkResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrLinkResponse scale(String resourceGroupName, String iacProfileName, ScaleTemplateRequest parameters) {
        PrLinkResponseInner inner = this.serviceClient().scale(resourceGroupName, iacProfileName, parameters);
        if (inner != null) {
            return new PrLinkResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> syncWithResponse(String resourceGroupName, String iacProfileName, Context context) {
        return this.serviceClient().syncWithResponse(resourceGroupName, iacProfileName, context);
    }

    public void sync(String resourceGroupName, String iacProfileName) {
        this.serviceClient().sync(resourceGroupName, iacProfileName);
    }

    public Response<PrLinkResponse> quickTemplateWithResponse(String resourceGroupName, String iacProfileName,
        QuickTemplateRequest parameters, Context context) {
        Response<PrLinkResponseInner> inner
            = this.serviceClient().quickTemplateWithResponse(resourceGroupName, iacProfileName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrLinkResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrLinkResponse quickTemplate(String resourceGroupName, String iacProfileName,
        QuickTemplateRequest parameters) {
        PrLinkResponseInner inner = this.serviceClient().quickTemplate(resourceGroupName, iacProfileName, parameters);
        if (inner != null) {
            return new PrLinkResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public IacProfile getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String iacProfileName = ResourceManagerUtils.getValueFromIdByName(id, "iacProfiles");
        if (iacProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iacProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, iacProfileName, Context.NONE).getValue();
    }

    public Response<IacProfile> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String iacProfileName = ResourceManagerUtils.getValueFromIdByName(id, "iacProfiles");
        if (iacProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iacProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, iacProfileName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String iacProfileName = ResourceManagerUtils.getValueFromIdByName(id, "iacProfiles");
        if (iacProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iacProfiles'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, iacProfileName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String iacProfileName = ResourceManagerUtils.getValueFromIdByName(id, "iacProfiles");
        if (iacProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iacProfiles'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, iacProfileName, context);
    }

    private IacProfilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devhub.DevHubManager manager() {
        return this.serviceManager;
    }

    public IacProfileImpl define(String name) {
        return new IacProfileImpl(name, this.manager());
    }
}
