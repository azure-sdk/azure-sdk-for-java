// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Pipeline Profile.
 */
@Fluent
public final class AzurePipelineProfile implements JsonSerializable<AzurePipelineProfile> {
    /*
     * Details of the ADO repository associated with the workflow.
     */
    private AdoRepository repository;

    /*
     * The name of the ARM Service Connection the pipeline is associated with.
     */
    private String armServiceConnection;

    /*
     * Build details of the repository associated with the workflow.
     */
    private Build build;

    /*
     * Deployment details of the repository associated with the workflow.
     */
    private Deployment deployment;

    /*
     * Kubernetes namespace the application is deployed to.
     */
    private String namespace;

    /*
     * Resource identifier for azure container registry repository associated with the workflow.
     */
    private String acr;

    /*
     * The Azure Kubernetes Cluster Resource the application will be deployed to.
     */
    private String clusterId;

    /*
     * Details of the pull request containing the workflow.
     */
    private PullRequest pullRequest;

    /*
     * The lastWorkflowRun property.
     */
    private WorkflowRun lastWorkflowRun;

    /*
     * Determines the authorization status of requests.
     */
    private AuthorizationStatus authStatus;

    /**
     * Creates an instance of AzurePipelineProfile class.
     */
    public AzurePipelineProfile() {
    }

    /**
     * Get the repository property: Details of the ADO repository associated with the workflow.
     * 
     * @return the repository value.
     */
    public AdoRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Details of the ADO repository associated with the workflow.
     * 
     * @param repository the repository value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withRepository(AdoRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the armServiceConnection property: The name of the ARM Service Connection the pipeline is associated with.
     * 
     * @return the armServiceConnection value.
     */
    public String armServiceConnection() {
        return this.armServiceConnection;
    }

    /**
     * Set the armServiceConnection property: The name of the ARM Service Connection the pipeline is associated with.
     * 
     * @param armServiceConnection the armServiceConnection value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withArmServiceConnection(String armServiceConnection) {
        this.armServiceConnection = armServiceConnection;
        return this;
    }

    /**
     * Get the build property: Build details of the repository associated with the workflow.
     * 
     * @return the build value.
     */
    public Build build() {
        return this.build;
    }

    /**
     * Set the build property: Build details of the repository associated with the workflow.
     * 
     * @param build the build value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withBuild(Build build) {
        this.build = build;
        return this;
    }

    /**
     * Get the deployment property: Deployment details of the repository associated with the workflow.
     * 
     * @return the deployment value.
     */
    public Deployment deployment() {
        return this.deployment;
    }

    /**
     * Set the deployment property: Deployment details of the repository associated with the workflow.
     * 
     * @param deployment the deployment value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withDeployment(Deployment deployment) {
        this.deployment = deployment;
        return this;
    }

    /**
     * Get the namespace property: Kubernetes namespace the application is deployed to.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Kubernetes namespace the application is deployed to.
     * 
     * @param namespace the namespace value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the acr property: Resource identifier for azure container registry repository associated with the workflow.
     * 
     * @return the acr value.
     */
    public String acr() {
        return this.acr;
    }

    /**
     * Set the acr property: Resource identifier for azure container registry repository associated with the workflow.
     * 
     * @param acr the acr value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withAcr(String acr) {
        this.acr = acr;
        return this;
    }

    /**
     * Get the clusterId property: The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Set the clusterId property: The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     * @param clusterId the clusterId value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withClusterId(String clusterId) {
        this.clusterId = clusterId;
        return this;
    }

    /**
     * Get the pullRequest property: Details of the pull request containing the workflow.
     * 
     * @return the pullRequest value.
     */
    public PullRequest pullRequest() {
        return this.pullRequest;
    }

    /**
     * Set the pullRequest property: Details of the pull request containing the workflow.
     * 
     * @param pullRequest the pullRequest value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withPullRequest(PullRequest pullRequest) {
        this.pullRequest = pullRequest;
        return this;
    }

    /**
     * Get the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @return the lastWorkflowRun value.
     */
    public WorkflowRun lastWorkflowRun() {
        return this.lastWorkflowRun;
    }

    /**
     * Set the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @param lastWorkflowRun the lastWorkflowRun value to set.
     * @return the AzurePipelineProfile object itself.
     */
    public AzurePipelineProfile withLastWorkflowRun(WorkflowRun lastWorkflowRun) {
        this.lastWorkflowRun = lastWorkflowRun;
        return this;
    }

    /**
     * Get the authStatus property: Determines the authorization status of requests.
     * 
     * @return the authStatus value.
     */
    public AuthorizationStatus authStatus() {
        return this.authStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repository() != null) {
            repository().validate();
        }
        if (build() != null) {
            build().validate();
        }
        if (deployment() != null) {
            deployment().validate();
        }
        if (pullRequest() != null) {
            pullRequest().validate();
        }
        if (lastWorkflowRun() != null) {
            lastWorkflowRun().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("repository", this.repository);
        jsonWriter.writeStringField("armServiceConnection", this.armServiceConnection);
        jsonWriter.writeJsonField("build", this.build);
        jsonWriter.writeJsonField("deployment", this.deployment);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("acr", this.acr);
        jsonWriter.writeStringField("clusterId", this.clusterId);
        jsonWriter.writeJsonField("pullRequest", this.pullRequest);
        jsonWriter.writeJsonField("lastWorkflowRun", this.lastWorkflowRun);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzurePipelineProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzurePipelineProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzurePipelineProfile.
     */
    public static AzurePipelineProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzurePipelineProfile deserializedAzurePipelineProfile = new AzurePipelineProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repository".equals(fieldName)) {
                    deserializedAzurePipelineProfile.repository = AdoRepository.fromJson(reader);
                } else if ("armServiceConnection".equals(fieldName)) {
                    deserializedAzurePipelineProfile.armServiceConnection = reader.getString();
                } else if ("build".equals(fieldName)) {
                    deserializedAzurePipelineProfile.build = Build.fromJson(reader);
                } else if ("deployment".equals(fieldName)) {
                    deserializedAzurePipelineProfile.deployment = Deployment.fromJson(reader);
                } else if ("namespace".equals(fieldName)) {
                    deserializedAzurePipelineProfile.namespace = reader.getString();
                } else if ("acr".equals(fieldName)) {
                    deserializedAzurePipelineProfile.acr = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedAzurePipelineProfile.clusterId = reader.getString();
                } else if ("pullRequest".equals(fieldName)) {
                    deserializedAzurePipelineProfile.pullRequest = PullRequest.fromJson(reader);
                } else if ("lastWorkflowRun".equals(fieldName)) {
                    deserializedAzurePipelineProfile.lastWorkflowRun = WorkflowRun.fromJson(reader);
                } else if ("authStatus".equals(fieldName)) {
                    deserializedAzurePipelineProfile.authStatus = AuthorizationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzurePipelineProfile;
        });
    }
}
