// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PrLinkResponse model.
 */
@Fluent
public final class PrLinkResponseInner implements JsonSerializable<PrLinkResponseInner> {
    /*
     * The link of the pull request.
     */
    private String prLink;

    /**
     * Creates an instance of PrLinkResponseInner class.
     */
    public PrLinkResponseInner() {
    }

    /**
     * Get the prLink property: The link of the pull request.
     * 
     * @return the prLink value.
     */
    public String prLink() {
        return this.prLink;
    }

    /**
     * Set the prLink property: The link of the pull request.
     * 
     * @param prLink the prLink value to set.
     * @return the PrLinkResponseInner object itself.
     */
    public PrLinkResponseInner withPrLink(String prLink) {
        this.prLink = prLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prLink", this.prLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrLinkResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrLinkResponseInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrLinkResponseInner.
     */
    public static PrLinkResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrLinkResponseInner deserializedPrLinkResponseInner = new PrLinkResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prLink".equals(fieldName)) {
                    deserializedPrLinkResponseInner.prLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrLinkResponseInner;
        });
    }
}
