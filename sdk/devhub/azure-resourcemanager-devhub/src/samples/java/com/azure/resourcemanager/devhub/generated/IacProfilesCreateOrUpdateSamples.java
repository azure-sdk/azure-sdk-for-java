// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.resourcemanager.devhub.models.IacTemplateDetails;
import com.azure.resourcemanager.devhub.models.IacTemplateProperties;
import com.azure.resourcemanager.devhub.models.StageProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IacProfiles CreateOrUpdate.
 */
public final class IacProfilesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-08-01-preview/examples/
     * IacProfile_CreateOrUpdate.json
     */
    /**
     * Sample code: Create IacProfile.
     * 
     * @param manager Entry point to DevHubManager.
     */
    public static void createIacProfile(com.azure.resourcemanager.devhub.DevHubManager manager) {
        manager.iacProfiles()
            .define("profile1")
            .withRegion("location1")
            .withExistingResourceGroup("resourceGroup1")
            .withTags(mapOf("appname", "testApp"))
            .withStages(Arrays.asList(
                new StageProperties().withStageName("dev")
                    .withDependencies(Arrays.asList())
                    .withGitEnvironment("Terraform"),
                new StageProperties().withStageName("qa")
                    .withDependencies(Arrays.asList("dev"))
                    .withGitEnvironment("Terraform"),
                new StageProperties().withStageName("prod")
                    .withDependencies(Arrays.asList("qa"))
                    .withGitEnvironment("Terraform")))
            .withTemplates(Arrays.asList(new IacTemplateProperties().withTemplateName("base")
                .withSourceResourceId("/subscriptions/xxxx/resourceGroups/xxxx")
                .withInstanceStage("dev")
                .withInstanceName("contoso")
                .withTemplateDetails(Arrays.asList(
                    new IacTemplateDetails().withProductName("HCI").withCount(1).withNamingConvention("$sitid-hci"),
                    new IacTemplateDetails().withProductName("AKSarc")
                        .withCount(1)
                        .withNamingConvention("$sitid-aks")))))
            .withRepositoryName("localtest")
            .withRepositoryMainBranch("main")
            .withRepositoryOwner("owner")
            .withStorageAccountSubscription("subscription")
            .withStorageAccountResourceGroup("hybrid-iac")
            .withStorageAccountName("hybridiac")
            .withStorageContainerName("hybridiac")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
