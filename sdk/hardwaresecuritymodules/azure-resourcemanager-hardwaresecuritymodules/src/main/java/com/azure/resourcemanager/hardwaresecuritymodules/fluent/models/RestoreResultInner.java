// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hardwaresecuritymodules.models.BackupRestoreBaseResult;
import com.azure.resourcemanager.hardwaresecuritymodules.models.BackupRestoreOperationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Restore operation properties.
 */
@Fluent
public final class RestoreResultInner extends BackupRestoreBaseResult {
    /*
     * Status of the backup/restore operation
     */
    private BackupRestoreOperationStatus status;

    /*
     * The start time of the backup/restore operation in UTC
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the backup/restore operation in UTC
     */
    private OffsetDateTime endTime;

    /**
     * Creates an instance of RestoreResultInner class.
     */
    public RestoreResultInner() {
    }

    /**
     * Get the status property: Status of the backup/restore operation.
     * 
     * @return the status value.
     */
    @Override
    public BackupRestoreOperationStatus status() {
        return this.status;
    }

    /**
     * Get the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @return the startTime value.
     */
    @Override
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @return the endTime value.
     */
    @Override
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreResultInner withStatusDetails(String statusDetails) {
        super.withStatusDetails(statusDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreResultInner withError(ManagementError error) {
        super.withError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreResultInner withJobId(String jobId) {
        super.withJobId(jobId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusDetails", statusDetails());
        jsonWriter.writeJsonField("error", error());
        jsonWriter.writeStringField("jobId", jobId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestoreResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestoreResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RestoreResultInner.
     */
    public static RestoreResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestoreResultInner deserializedRestoreResultInner = new RestoreResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedRestoreResultInner.status = BackupRestoreOperationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedRestoreResultInner.withStatusDetails(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedRestoreResultInner.withError(ManagementError.fromJson(reader));
                } else if ("startTime".equals(fieldName)) {
                    deserializedRestoreResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedRestoreResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedRestoreResultInner.withJobId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestoreResultInner;
        });
    }
}
