// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hardwaresecuritymodules.models.BackupRestoreOperationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Restore operation properties.
 */
@Immutable
public final class RestoreResultInner implements JsonSerializable<RestoreResultInner> {
    /*
     * Backup and Restore operation common properties
     */
    private BackupRestoreBaseResultProperties innerProperties;

    /**
     * Creates an instance of RestoreResultInner class.
     */
    private RestoreResultInner() {
    }

    /**
     * Get the innerProperties property: Backup and Restore operation common properties.
     * 
     * @return the innerProperties value.
     */
    private BackupRestoreBaseResultProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the status property: Status of the backup/restore operation.
     * 
     * @return the status value.
     */
    public BackupRestoreOperationStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the statusDetails property: The status details of backup/restore operation.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Get the error property: Error encountered, if any, during the backup/restore operation.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.innerProperties() == null ? null : this.innerProperties().error();
    }

    /**
     * Get the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endTime();
    }

    /**
     * Get the jobId property: Identifier for the backup/restore operation.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.innerProperties() == null ? null : this.innerProperties().jobId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestoreResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestoreResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RestoreResultInner.
     */
    public static RestoreResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestoreResultInner deserializedRestoreResultInner = new RestoreResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedRestoreResultInner.innerProperties = BackupRestoreBaseResultProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestoreResultInner;
        });
    }
}
