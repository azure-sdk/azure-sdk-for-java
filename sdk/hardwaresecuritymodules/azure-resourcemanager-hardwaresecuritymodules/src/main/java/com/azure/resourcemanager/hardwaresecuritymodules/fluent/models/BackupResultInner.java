// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hardwaresecuritymodules.models.BackupRestoreBaseResult;
import com.azure.resourcemanager.hardwaresecuritymodules.models.BackupRestoreOperationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Backup operation Result.
 */
@Fluent
public final class BackupResultInner extends BackupRestoreBaseResult {
    /*
     * The Azure blob storage container Uri which contains the backup
     */
    private String azureStorageBlobContainerUri;

    /*
     * The ID of the backup.
     */
    private String backupId;

    /*
     * Status of the backup/restore operation
     */
    private BackupRestoreOperationStatus status;

    /*
     * The start time of the backup/restore operation in UTC
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the backup/restore operation in UTC
     */
    private OffsetDateTime endTime;

    /**
     * Creates an instance of BackupResultInner class.
     */
    public BackupResultInner() {
    }

    /**
     * Get the azureStorageBlobContainerUri property: The Azure blob storage container Uri which contains the backup.
     * 
     * @return the azureStorageBlobContainerUri value.
     */
    public String azureStorageBlobContainerUri() {
        return this.azureStorageBlobContainerUri;
    }

    /**
     * Set the azureStorageBlobContainerUri property: The Azure blob storage container Uri which contains the backup.
     * 
     * @param azureStorageBlobContainerUri the azureStorageBlobContainerUri value to set.
     * @return the BackupResultInner object itself.
     */
    public BackupResultInner withAzureStorageBlobContainerUri(String azureStorageBlobContainerUri) {
        this.azureStorageBlobContainerUri = azureStorageBlobContainerUri;
        return this;
    }

    /**
     * Get the backupId property: The ID of the backup.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Set the backupId property: The ID of the backup.
     * 
     * @param backupId the backupId value to set.
     * @return the BackupResultInner object itself.
     */
    public BackupResultInner withBackupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * Get the status property: Status of the backup/restore operation.
     * 
     * @return the status value.
     */
    @Override
    public BackupRestoreOperationStatus status() {
        return this.status;
    }

    /**
     * Get the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @return the startTime value.
     */
    @Override
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @return the endTime value.
     */
    @Override
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackupResultInner withStatusDetails(String statusDetails) {
        super.withStatusDetails(statusDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackupResultInner withError(ManagementError error) {
        super.withError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackupResultInner withJobId(String jobId) {
        super.withJobId(jobId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusDetails", statusDetails());
        jsonWriter.writeJsonField("error", error());
        jsonWriter.writeStringField("jobId", jobId());
        jsonWriter.writeStringField("azureStorageBlobContainerUri", this.azureStorageBlobContainerUri);
        jsonWriter.writeStringField("backupId", this.backupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupResultInner.
     */
    public static BackupResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupResultInner deserializedBackupResultInner = new BackupResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedBackupResultInner.status = BackupRestoreOperationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedBackupResultInner.withStatusDetails(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedBackupResultInner.withError(ManagementError.fromJson(reader));
                } else if ("startTime".equals(fieldName)) {
                    deserializedBackupResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedBackupResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedBackupResultInner.withJobId(reader.getString());
                } else if ("azureStorageBlobContainerUri".equals(fieldName)) {
                    deserializedBackupResultInner.azureStorageBlobContainerUri = reader.getString();
                } else if ("backupId".equals(fieldName)) {
                    deserializedBackupResultInner.backupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupResultInner;
        });
    }
}
