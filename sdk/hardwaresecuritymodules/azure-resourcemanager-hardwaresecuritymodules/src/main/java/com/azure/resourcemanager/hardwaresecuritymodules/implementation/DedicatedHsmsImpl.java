// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.DedicatedHsmsClient;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.models.DedicatedHsmInner;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.models.OutboundEnvironmentEndpointInner;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsm;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsms;
import com.azure.resourcemanager.hardwaresecuritymodules.models.OutboundEnvironmentEndpoint;

public final class DedicatedHsmsImpl implements DedicatedHsms {
    private static final ClientLogger LOGGER = new ClientLogger(DedicatedHsmsImpl.class);

    private final DedicatedHsmsClient innerClient;

    private final com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager serviceManager;

    public DedicatedHsmsImpl(DedicatedHsmsClient innerClient,
        com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String dedicatedHsmName) {
        this.serviceClient().delete(resourceGroupName, dedicatedHsmName);
    }

    public void delete(String resourceGroupName, String dedicatedHsmName, Context context) {
        this.serviceClient().delete(resourceGroupName, dedicatedHsmName, context);
    }

    public Response<DedicatedHsm> getByResourceGroupWithResponse(String resourceGroupName, String dedicatedHsmName,
        Context context) {
        Response<DedicatedHsmInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, dedicatedHsmName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DedicatedHsmImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DedicatedHsm getByResourceGroup(String resourceGroupName, String dedicatedHsmName) {
        DedicatedHsmInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, dedicatedHsmName);
        if (inner != null) {
            return new DedicatedHsmImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DedicatedHsm> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DedicatedHsmInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DedicatedHsmImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHsm> listByResourceGroup(String resourceGroupName, Integer top, Context context) {
        PagedIterable<DedicatedHsmInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DedicatedHsmImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHsm> list() {
        PagedIterable<DedicatedHsmInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DedicatedHsmImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHsm> list(Integer top, Context context) {
        PagedIterable<DedicatedHsmInner> inner = this.serviceClient().list(top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DedicatedHsmImpl(inner1, this.manager()));
    }

    public PagedIterable<OutboundEnvironmentEndpoint> listOutboundNetworkDependenciesEndpoints(String resourceGroupName,
        String dedicatedHsmName) {
        PagedIterable<OutboundEnvironmentEndpointInner> inner
            = this.serviceClient().listOutboundNetworkDependenciesEndpoints(resourceGroupName, dedicatedHsmName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new OutboundEnvironmentEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<OutboundEnvironmentEndpoint> listOutboundNetworkDependenciesEndpoints(String resourceGroupName,
        String dedicatedHsmName, Context context) {
        PagedIterable<OutboundEnvironmentEndpointInner> inner = this.serviceClient()
            .listOutboundNetworkDependenciesEndpoints(resourceGroupName, dedicatedHsmName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new OutboundEnvironmentEndpointImpl(inner1, this.manager()));
    }

    public DedicatedHsm getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dedicatedHsmName = ResourceManagerUtils.getValueFromIdByName(id, "dedicatedHSMs");
        if (dedicatedHsmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dedicatedHSMs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dedicatedHsmName, Context.NONE).getValue();
    }

    public Response<DedicatedHsm> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dedicatedHsmName = ResourceManagerUtils.getValueFromIdByName(id, "dedicatedHSMs");
        if (dedicatedHsmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dedicatedHSMs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dedicatedHsmName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dedicatedHsmName = ResourceManagerUtils.getValueFromIdByName(id, "dedicatedHSMs");
        if (dedicatedHsmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dedicatedHSMs'.", id)));
        }
        this.delete(resourceGroupName, dedicatedHsmName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dedicatedHsmName = ResourceManagerUtils.getValueFromIdByName(id, "dedicatedHSMs");
        if (dedicatedHsmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dedicatedHSMs'.", id)));
        }
        this.delete(resourceGroupName, dedicatedHsmName, context);
    }

    private DedicatedHsmsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager manager() {
        return this.serviceManager;
    }

    public DedicatedHsmImpl define(String name) {
        return new DedicatedHsmImpl(name, this.manager());
    }
}
