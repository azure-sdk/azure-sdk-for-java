// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwaresecuritymodulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ApiEntityReference;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsm;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkInterface;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.models.Sku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DedicatedHsmsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"SafeNet Luna Network HSM A790\"},\"zones\":[\"kdmligovi\",\"rxkpmloazuruoc\"],\"properties\":{\"networkProfile\":{\"subnet\":{\"resourceId\":\"rb\"},\"networkInterfaces\":[{\"resourceId\":\"bfhjxakvvjgsl\",\"privateIpAddress\":\"dilmyww\"},{\"resourceId\":\"gkxnyedabg\",\"privateIpAddress\":\"udtjuewbc\"},{\"resourceId\":\"xuuwhcj\",\"privateIpAddress\":\"ccybvp\"}]},\"managementNetworkProfile\":{\"subnet\":{\"resourceId\":\"kudzpxgwj\"},\"networkInterfaces\":[{\"resourceId\":\"gstcyohpf\",\"privateIpAddress\":\"rkdbdgiogsjkmnwq\"}]},\"stampId\":\"obaiyhddviaceg\",\"statusMessage\":\"m\",\"provisioningState\":\"Succeeded\"},\"location\":\"mvmemfnczd\",\"tags\":{\"lxlllchpo\":\"b\",\"hfuk\":\"bzevwrd\",\"fcvlerch\":\"vsjcswsmystuluqy\"},\"id\":\"qbmfpjbabwidf\",\"name\":\"xsspuunnoxyhk\",\"type\":\"g\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HardwaresecuritymodulesManager manager = HardwaresecuritymodulesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DedicatedHsm response = manager.dedicatedHsms()
            .define("alywjhhgdn")
            .withRegion("wlvwlyoupf")
            .withExistingResourceGroup("nnrwrbiork")
            .withSku(new Sku().withName(SkuName.PAY_SHIELD10K_LMK1_CPS60))
            .withTags(
                mapOf("ubdyhgk", "k", "tsttktlahbq", "minsgowzf", "mmqtgqqqxhr", "ctxtgzukxi", "juisavokqdzf", "xrxc"))
            .withZones(Arrays.asList("v", "omi", "ox"))
            .withNetworkProfile(new NetworkProfile().withSubnet(new ApiEntityReference().withResourceId("fi"))
                .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("hvcyyysfg"),
                    new NetworkInterface().withPrivateIpAddress("jeknizshq"),
                    new NetworkInterface().withPrivateIpAddress("b"))))
            .withManagementNetworkProfile(
                new NetworkProfile().withSubnet(new ApiEntityReference().withResourceId("lbywdxsm"))
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("dvoqyt"),
                        new NetworkInterface().withPrivateIpAddress("blgyavutpthj"))))
            .withStampId("oismsksbpimlqol")
            .create();

        Assertions.assertEquals("mvmemfnczd", response.location());
        Assertions.assertEquals("b", response.tags().get("lxlllchpo"));
        Assertions.assertEquals(SkuName.SAFE_NET_LUNA_NETWORK_HSM_A790, response.sku().name());
        Assertions.assertEquals("kdmligovi", response.zones().get(0));
        Assertions.assertEquals("rb", response.networkProfile().subnet().resourceId());
        Assertions.assertEquals("dilmyww", response.networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("kudzpxgwj", response.managementNetworkProfile().subnet().resourceId());
        Assertions.assertEquals("rkdbdgiogsjkmnwq",
            response.managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("obaiyhddviaceg", response.stampId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
