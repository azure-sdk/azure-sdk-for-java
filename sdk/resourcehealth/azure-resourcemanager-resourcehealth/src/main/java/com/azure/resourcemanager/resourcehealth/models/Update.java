// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Update for service health event.
 */
@Fluent
public final class Update implements JsonSerializable<Update> {
    /*
     * Summary text for the given update for the service health event.
     */
    private String summary;

    /*
     * It provides the Timestamp for the given update for the service health event.
     */
    private OffsetDateTime updateDateTime;

    /*
     * A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     */
    private List<String> eventTags;

    /**
     * Creates an instance of Update class.
     */
    public Update() {
    }

    /**
     * Get the summary property: Summary text for the given update for the service health event.
     * 
     * @return the summary value.
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set the summary property: Summary text for the given update for the service health event.
     * 
     * @param summary the summary value to set.
     * @return the Update object itself.
     */
    public Update withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the updateDateTime property: It provides the Timestamp for the given update for the service health event.
     * 
     * @return the updateDateTime value.
     */
    public OffsetDateTime updateDateTime() {
        return this.updateDateTime;
    }

    /**
     * Set the updateDateTime property: It provides the Timestamp for the given update for the service health event.
     * 
     * @param updateDateTime the updateDateTime value to set.
     * @return the Update object itself.
     */
    public Update withUpdateDateTime(OffsetDateTime updateDateTime) {
        this.updateDateTime = updateDateTime;
        return this;
    }

    /**
     * Get the eventTags property: A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     * 
     * @return the eventTags value.
     */
    public List<String> eventTags() {
        return this.eventTags;
    }

    /**
     * Set the eventTags property: A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     * 
     * @param eventTags the eventTags value to set.
     * @return the Update object itself.
     */
    public Update withEventTags(List<String> eventTags) {
        this.eventTags = eventTags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summary", this.summary);
        jsonWriter.writeStringField("updateDateTime",
            this.updateDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updateDateTime));
        jsonWriter.writeArrayField("eventTags", this.eventTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Update from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Update if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Update.
     */
    public static Update fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Update deserializedUpdate = new Update();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    deserializedUpdate.summary = reader.getString();
                } else if ("updateDateTime".equals(fieldName)) {
                    deserializedUpdate.updateDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eventTags".equals(fieldName)) {
                    List<String> eventTags = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpdate.eventTags = eventTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdate;
        });
    }
}
