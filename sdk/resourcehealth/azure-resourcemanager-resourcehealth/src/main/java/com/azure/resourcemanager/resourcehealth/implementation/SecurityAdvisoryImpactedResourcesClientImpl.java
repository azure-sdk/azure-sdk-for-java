// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcehealth.fluent.SecurityAdvisoryImpactedResourcesClient;
import com.azure.resourcemanager.resourcehealth.fluent.models.EventImpactedResourceInner;
import com.azure.resourcemanager.resourcehealth.models.EventImpactedResourceListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SecurityAdvisoryImpactedResourcesClient.
 */
public final class SecurityAdvisoryImpactedResourcesClientImpl implements SecurityAdvisoryImpactedResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SecurityAdvisoryImpactedResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftResourceHealthImpl client;

    /**
     * Initializes an instance of SecurityAdvisoryImpactedResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SecurityAdvisoryImpactedResourcesClientImpl(MicrosoftResourceHealthImpl client) {
        this.service = RestProxy.create(SecurityAdvisoryImpactedResourcesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftResourceHealthSecurityAdvisoryImpactedResources to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftResourceHea")
    public interface SecurityAdvisoryImpactedResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listBySubscriptionIdAndEventId(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("eventTrackingId") String eventTrackingId, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EventImpactedResourceListResult> listBySubscriptionIdAndEventIdSync(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("eventTrackingId") String eventTrackingId, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listByTenantIdAndEventId(@HostParam("$host") String endpoint,
            @PathParam("eventTrackingId") String eventTrackingId, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EventImpactedResourceListResult> listByTenantIdAndEventIdSync(@HostParam("$host") String endpoint,
            @PathParam("eventTrackingId") String eventTrackingId, @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listBySubscriptionIdAndEventIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EventImpactedResourceListResult> listBySubscriptionIdAndEventIdNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listByTenantIdAndEventIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EventImpactedResourceListResult> listByTenantIdAndEventIdNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>>
        listBySubscriptionIdAndEventIdSinglePageAsync(String eventTrackingId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscriptionIdAndEventId(this.client.getEndpoint(),
                this.client.getSubscriptionId(), eventTrackingId, this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listBySubscriptionIdAndEventIdAsync(String eventTrackingId,
        String filter) {
        return new PagedFlux<>(() -> listBySubscriptionIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listBySubscriptionIdAndEventIdAsync(String eventTrackingId) {
        final String filter = null;
        return new PagedFlux<>(() -> listBySubscriptionIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listBySubscriptionIdAndEventIdSinglePage(String eventTrackingId,
        String filter) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listBySubscriptionIdAndEventIdSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
                eventTrackingId, this.client.getApiVersion(), filter, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listBySubscriptionIdAndEventIdSinglePage(String eventTrackingId,
        String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listBySubscriptionIdAndEventIdSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
                eventTrackingId, this.client.getApiVersion(), filter, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listBySubscriptionIdAndEventId(String eventTrackingId) {
        final String filter = null;
        return new PagedIterable<>(() -> listBySubscriptionIdAndEventIdSinglePage(eventTrackingId, filter),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePage(nextLink));
    }

    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listBySubscriptionIdAndEventId(String eventTrackingId,
        String filter, Context context) {
        return new PagedIterable<>(() -> listBySubscriptionIdAndEventIdSinglePage(eventTrackingId, filter, context),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePage(nextLink, context));
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>>
        listByTenantIdAndEventIdSinglePageAsync(String eventTrackingId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTenantIdAndEventId(this.client.getEndpoint(), eventTrackingId,
                this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listByTenantIdAndEventIdAsync(String eventTrackingId, String filter) {
        return new PagedFlux<>(() -> listByTenantIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listByTenantIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listByTenantIdAndEventIdAsync(String eventTrackingId) {
        final String filter = null;
        return new PagedFlux<>(() -> listByTenantIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listByTenantIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listByTenantIdAndEventIdSinglePage(String eventTrackingId,
        String filter) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res = service.listByTenantIdAndEventIdSync(this.client.getEndpoint(),
            eventTrackingId, this.client.getApiVersion(), filter, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listByTenantIdAndEventIdSinglePage(String eventTrackingId,
        String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res = service.listByTenantIdAndEventIdSync(this.client.getEndpoint(),
            eventTrackingId, this.client.getApiVersion(), filter, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listByTenantIdAndEventId(String eventTrackingId) {
        final String filter = null;
        return new PagedIterable<>(() -> listByTenantIdAndEventIdSinglePage(eventTrackingId, filter),
            nextLink -> listByTenantIdAndEventIdNextSinglePage(nextLink));
    }

    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * 
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listByTenantIdAndEventId(String eventTrackingId, String filter,
        Context context) {
        return new PagedIterable<>(() -> listByTenantIdAndEventIdSinglePage(eventTrackingId, filter, context),
            nextLink -> listByTenantIdAndEventIdNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>>
        listBySubscriptionIdAndEventIdNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listBySubscriptionIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listBySubscriptionIdAndEventIdNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listBySubscriptionIdAndEventIdNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listBySubscriptionIdAndEventIdNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listBySubscriptionIdAndEventIdNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>>
        listByTenantIdAndEventIdNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTenantIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listByTenantIdAndEventIdNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listByTenantIdAndEventIdNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EventImpactedResourceInner> listByTenantIdAndEventIdNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<EventImpactedResourceListResult> res
            = service.listByTenantIdAndEventIdNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecurityAdvisoryImpactedResourcesClientImpl.class);
}
