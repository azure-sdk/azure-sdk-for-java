// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcehealth.models.EventLevelValues;
import com.azure.resourcemanager.resourcehealth.models.EventPropertiesAdditionalInformation;
import com.azure.resourcemanager.resourcehealth.models.EventPropertiesArticle;
import com.azure.resourcemanager.resourcehealth.models.EventPropertiesRecommendedActions;
import com.azure.resourcemanager.resourcehealth.models.EventSourceValues;
import com.azure.resourcemanager.resourcehealth.models.EventStatusValues;
import com.azure.resourcemanager.resourcehealth.models.EventTypeValues;
import com.azure.resourcemanager.resourcehealth.models.Faq;
import com.azure.resourcemanager.resourcehealth.models.Impact;
import com.azure.resourcemanager.resourcehealth.models.LevelValues;
import com.azure.resourcemanager.resourcehealth.models.Link;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Properties of event.
 */
@Fluent
public final class EventProperties implements JsonSerializable<EventProperties> {
    /*
     * Type of event.
     */
    private EventTypeValues eventType;

    /*
     * Source of event.
     */
    private EventSourceValues eventSource;

    /*
     * Current status of event.
     */
    private EventStatusValues status;

    /*
     * Title text of event.
     */
    private String title;

    /*
     * Summary text of event. Use fetchEventDetails endpoint to get summary of sensitive events.
     */
    private String summary;

    /*
     * Header text of event.
     */
    private String headerProperty;

    /*
     * Level of insight.
     */
    private LevelValues level;

    /*
     * Level of event.
     */
    private EventLevelValues eventLevel;

    /*
     * If true the event may contains sensitive data. Use the post events/{trackingId}/fetchEventDetails endpoint to
     * fetch sensitive data see
     * https://learn.microsoft.com/en-us/azure/service-health/security-advisories-elevated-access
     */
    private Boolean isEventSensitive;

    /*
     * The id of the Incident
     */
    private String externalIncidentId;

    /*
     * The reason for the Incident
     */
    private String reason;

    /*
     * Article of event.
     */
    private EventPropertiesArticle article;

    /*
     * Useful links of event.
     */
    private List<Link> links;

    /*
     * It provides the Timestamp for when the health impacting event started.
     */
    private OffsetDateTime impactStartTime;

    /*
     * It provides the Timestamp for when the health impacting event resolved.
     */
    private OffsetDateTime impactMitigationTime;

    /*
     * List services impacted by the service health event.
     */
    private List<Impact> impact;

    /*
     * Recommended actions of event.
     */
    private EventPropertiesRecommendedActions recommendedActions;

    /*
     * Frequently asked questions for the service health event.
     */
    private List<Faq> faqs;

    /*
     * It provides information if the event is High incident rate event or not.
     */
    private Boolean isHir;

    /*
     * Tells if we want to enable or disable Microsoft Support for this event.
     */
    private Boolean enableMicrosoftSupport;

    /*
     * Contains the communication message for the event, that could include summary, root cause and other details. Use
     * fetchEventDetails endpoint to get description of sensitive events.
     */
    private String description;

    /*
     * Is true if the event is platform initiated.
     */
    private Boolean platformInitiated;

    /*
     * Tells if we want to enable or disable Microsoft Support for this event.
     */
    private Boolean enableChatWithUs;

    /*
     * Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher
     * priority followed by planned maintenance and health advisory. Critical events have higher priority followed by
     * error, warning and informational. Furthermore, active events have higher priority than resolved.
     */
    private Integer priority;

    /*
     * It provides the Timestamp for when the health impacting event was last updated.
     */
    private OffsetDateTime lastUpdateTime;

    /*
     * Stage for HIR Document
     */
    private String hirStage;

    /*
     * Additional information
     */
    private EventPropertiesAdditionalInformation additionalInformation;

    /*
     * duration in seconds
     */
    private Integer duration;

    /*
     * The type of the impact
     */
    private String impactType;

    /*
     * A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     */
    private List<String> eventTags;

    /**
     * Creates an instance of EventProperties class.
     */
    public EventProperties() {
    }

    /**
     * Get the eventType property: Type of event.
     * 
     * @return the eventType value.
     */
    public EventTypeValues eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: Type of event.
     * 
     * @param eventType the eventType value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEventType(EventTypeValues eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get the eventSource property: Source of event.
     * 
     * @return the eventSource value.
     */
    public EventSourceValues eventSource() {
        return this.eventSource;
    }

    /**
     * Set the eventSource property: Source of event.
     * 
     * @param eventSource the eventSource value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEventSource(EventSourceValues eventSource) {
        this.eventSource = eventSource;
        return this;
    }

    /**
     * Get the status property: Current status of event.
     * 
     * @return the status value.
     */
    public EventStatusValues status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of event.
     * 
     * @param status the status value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withStatus(EventStatusValues status) {
        this.status = status;
        return this;
    }

    /**
     * Get the title property: Title text of event.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title text of event.
     * 
     * @param title the title value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the summary property: Summary text of event. Use fetchEventDetails endpoint to get summary of sensitive
     * events.
     * 
     * @return the summary value.
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set the summary property: Summary text of event. Use fetchEventDetails endpoint to get summary of sensitive
     * events.
     * 
     * @param summary the summary value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the headerProperty property: Header text of event.
     * 
     * @return the headerProperty value.
     */
    public String headerProperty() {
        return this.headerProperty;
    }

    /**
     * Set the headerProperty property: Header text of event.
     * 
     * @param headerProperty the headerProperty value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withHeaderProperty(String headerProperty) {
        this.headerProperty = headerProperty;
        return this;
    }

    /**
     * Get the level property: Level of insight.
     * 
     * @return the level value.
     */
    public LevelValues level() {
        return this.level;
    }

    /**
     * Set the level property: Level of insight.
     * 
     * @param level the level value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withLevel(LevelValues level) {
        this.level = level;
        return this;
    }

    /**
     * Get the eventLevel property: Level of event.
     * 
     * @return the eventLevel value.
     */
    public EventLevelValues eventLevel() {
        return this.eventLevel;
    }

    /**
     * Set the eventLevel property: Level of event.
     * 
     * @param eventLevel the eventLevel value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEventLevel(EventLevelValues eventLevel) {
        this.eventLevel = eventLevel;
        return this;
    }

    /**
     * Get the isEventSensitive property: If true the event may contains sensitive data. Use the post
     * events/{trackingId}/fetchEventDetails endpoint to fetch sensitive data see
     * https://learn.microsoft.com/en-us/azure/service-health/security-advisories-elevated-access.
     * 
     * @return the isEventSensitive value.
     */
    public Boolean isEventSensitive() {
        return this.isEventSensitive;
    }

    /**
     * Set the isEventSensitive property: If true the event may contains sensitive data. Use the post
     * events/{trackingId}/fetchEventDetails endpoint to fetch sensitive data see
     * https://learn.microsoft.com/en-us/azure/service-health/security-advisories-elevated-access.
     * 
     * @param isEventSensitive the isEventSensitive value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withIsEventSensitive(Boolean isEventSensitive) {
        this.isEventSensitive = isEventSensitive;
        return this;
    }

    /**
     * Get the externalIncidentId property: The id of the Incident.
     * 
     * @return the externalIncidentId value.
     */
    public String externalIncidentId() {
        return this.externalIncidentId;
    }

    /**
     * Set the externalIncidentId property: The id of the Incident.
     * 
     * @param externalIncidentId the externalIncidentId value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withExternalIncidentId(String externalIncidentId) {
        this.externalIncidentId = externalIncidentId;
        return this;
    }

    /**
     * Get the reason property: The reason for the Incident.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason for the Incident.
     * 
     * @param reason the reason value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the article property: Article of event.
     * 
     * @return the article value.
     */
    public EventPropertiesArticle article() {
        return this.article;
    }

    /**
     * Set the article property: Article of event.
     * 
     * @param article the article value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withArticle(EventPropertiesArticle article) {
        this.article = article;
        return this;
    }

    /**
     * Get the links property: Useful links of event.
     * 
     * @return the links value.
     */
    public List<Link> links() {
        return this.links;
    }

    /**
     * Set the links property: Useful links of event.
     * 
     * @param links the links value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withLinks(List<Link> links) {
        this.links = links;
        return this;
    }

    /**
     * Get the impactStartTime property: It provides the Timestamp for when the health impacting event started.
     * 
     * @return the impactStartTime value.
     */
    public OffsetDateTime impactStartTime() {
        return this.impactStartTime;
    }

    /**
     * Set the impactStartTime property: It provides the Timestamp for when the health impacting event started.
     * 
     * @param impactStartTime the impactStartTime value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withImpactStartTime(OffsetDateTime impactStartTime) {
        this.impactStartTime = impactStartTime;
        return this;
    }

    /**
     * Get the impactMitigationTime property: It provides the Timestamp for when the health impacting event resolved.
     * 
     * @return the impactMitigationTime value.
     */
    public OffsetDateTime impactMitigationTime() {
        return this.impactMitigationTime;
    }

    /**
     * Set the impactMitigationTime property: It provides the Timestamp for when the health impacting event resolved.
     * 
     * @param impactMitigationTime the impactMitigationTime value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withImpactMitigationTime(OffsetDateTime impactMitigationTime) {
        this.impactMitigationTime = impactMitigationTime;
        return this;
    }

    /**
     * Get the impact property: List services impacted by the service health event.
     * 
     * @return the impact value.
     */
    public List<Impact> impact() {
        return this.impact;
    }

    /**
     * Set the impact property: List services impacted by the service health event.
     * 
     * @param impact the impact value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withImpact(List<Impact> impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get the recommendedActions property: Recommended actions of event.
     * 
     * @return the recommendedActions value.
     */
    public EventPropertiesRecommendedActions recommendedActions() {
        return this.recommendedActions;
    }

    /**
     * Set the recommendedActions property: Recommended actions of event.
     * 
     * @param recommendedActions the recommendedActions value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withRecommendedActions(EventPropertiesRecommendedActions recommendedActions) {
        this.recommendedActions = recommendedActions;
        return this;
    }

    /**
     * Get the faqs property: Frequently asked questions for the service health event.
     * 
     * @return the faqs value.
     */
    public List<Faq> faqs() {
        return this.faqs;
    }

    /**
     * Set the faqs property: Frequently asked questions for the service health event.
     * 
     * @param faqs the faqs value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withFaqs(List<Faq> faqs) {
        this.faqs = faqs;
        return this;
    }

    /**
     * Get the isHir property: It provides information if the event is High incident rate event or not.
     * 
     * @return the isHir value.
     */
    public Boolean isHir() {
        return this.isHir;
    }

    /**
     * Set the isHir property: It provides information if the event is High incident rate event or not.
     * 
     * @param isHir the isHir value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withIsHir(Boolean isHir) {
        this.isHir = isHir;
        return this;
    }

    /**
     * Get the enableMicrosoftSupport property: Tells if we want to enable or disable Microsoft Support for this event.
     * 
     * @return the enableMicrosoftSupport value.
     */
    public Boolean enableMicrosoftSupport() {
        return this.enableMicrosoftSupport;
    }

    /**
     * Set the enableMicrosoftSupport property: Tells if we want to enable or disable Microsoft Support for this event.
     * 
     * @param enableMicrosoftSupport the enableMicrosoftSupport value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEnableMicrosoftSupport(Boolean enableMicrosoftSupport) {
        this.enableMicrosoftSupport = enableMicrosoftSupport;
        return this;
    }

    /**
     * Get the description property: Contains the communication message for the event, that could include summary, root
     * cause and other details. Use fetchEventDetails endpoint to get description of sensitive events.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Contains the communication message for the event, that could include summary, root
     * cause and other details. Use fetchEventDetails endpoint to get description of sensitive events.
     * 
     * @param description the description value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the platformInitiated property: Is true if the event is platform initiated.
     * 
     * @return the platformInitiated value.
     */
    public Boolean platformInitiated() {
        return this.platformInitiated;
    }

    /**
     * Set the platformInitiated property: Is true if the event is platform initiated.
     * 
     * @param platformInitiated the platformInitiated value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withPlatformInitiated(Boolean platformInitiated) {
        this.platformInitiated = platformInitiated;
        return this;
    }

    /**
     * Get the enableChatWithUs property: Tells if we want to enable or disable Microsoft Support for this event.
     * 
     * @return the enableChatWithUs value.
     */
    public Boolean enableChatWithUs() {
        return this.enableChatWithUs;
    }

    /**
     * Set the enableChatWithUs property: Tells if we want to enable or disable Microsoft Support for this event.
     * 
     * @param enableChatWithUs the enableChatWithUs value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEnableChatWithUs(Boolean enableChatWithUs) {
        this.enableChatWithUs = enableChatWithUs;
        return this;
    }

    /**
     * Get the priority property: Priority level of the event. Has value from 0 to 23. 0 is the highest priority.
     * Service issue events have higher priority followed by planned maintenance and health advisory. Critical events
     * have higher priority followed by error, warning and informational. Furthermore, active events have higher
     * priority than resolved.
     * 
     * @return the priority value.
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Priority level of the event. Has value from 0 to 23. 0 is the highest priority.
     * Service issue events have higher priority followed by planned maintenance and health advisory. Critical events
     * have higher priority followed by error, warning and informational. Furthermore, active events have higher
     * priority than resolved.
     * 
     * @param priority the priority value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the lastUpdateTime property: It provides the Timestamp for when the health impacting event was last updated.
     * 
     * @return the lastUpdateTime value.
     */
    public OffsetDateTime lastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Set the lastUpdateTime property: It provides the Timestamp for when the health impacting event was last updated.
     * 
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Get the hirStage property: Stage for HIR Document.
     * 
     * @return the hirStage value.
     */
    public String hirStage() {
        return this.hirStage;
    }

    /**
     * Set the hirStage property: Stage for HIR Document.
     * 
     * @param hirStage the hirStage value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withHirStage(String hirStage) {
        this.hirStage = hirStage;
        return this;
    }

    /**
     * Get the additionalInformation property: Additional information.
     * 
     * @return the additionalInformation value.
     */
    public EventPropertiesAdditionalInformation additionalInformation() {
        return this.additionalInformation;
    }

    /**
     * Set the additionalInformation property: Additional information.
     * 
     * @param additionalInformation the additionalInformation value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withAdditionalInformation(EventPropertiesAdditionalInformation additionalInformation) {
        this.additionalInformation = additionalInformation;
        return this;
    }

    /**
     * Get the duration property: duration in seconds.
     * 
     * @return the duration value.
     */
    public Integer duration() {
        return this.duration;
    }

    /**
     * Set the duration property: duration in seconds.
     * 
     * @param duration the duration value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the impactType property: The type of the impact.
     * 
     * @return the impactType value.
     */
    public String impactType() {
        return this.impactType;
    }

    /**
     * Set the impactType property: The type of the impact.
     * 
     * @param impactType the impactType value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withImpactType(String impactType) {
        this.impactType = impactType;
        return this;
    }

    /**
     * Get the eventTags property: A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     * 
     * @return the eventTags value.
     */
    public List<String> eventTags() {
        return this.eventTags;
    }

    /**
     * Set the eventTags property: A list of metadata tags associated with the event. Possible values include:
     * -Action Recommended: Action may be required by you to avoid possible disruptions or mitigate risks for your
     * services. It is recommended to evaluate these actions and the potential impact on your services.
     * - False Positive: After investigation, we've determined your service is healthy and service issues did not impact
     * your services as originally communicated.
     * - Preliminary PIR: For our largest, most impactful service issues a Preliminary Post Incident Review (PIR) is
     * published generally within 72 hours of mitigation, to summarize what we have learned so far from the
     * still-in-progress investigation.
     * - Final PIR: For service issues, a Final Post Incident Review (PIR) may be published to provide additional
     * details or learnings. Sometimes this requires us to complete an internal retrospective, generally within 14 days
     * of mitigation.
     * 
     * @param eventTags the eventTags value to set.
     * @return the EventProperties object itself.
     */
    public EventProperties withEventTags(List<String> eventTags) {
        this.eventTags = eventTags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (article() != null) {
            article().validate();
        }
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
        if (impact() != null) {
            impact().forEach(e -> e.validate());
        }
        if (recommendedActions() != null) {
            recommendedActions().validate();
        }
        if (faqs() != null) {
            faqs().forEach(e -> e.validate());
        }
        if (additionalInformation() != null) {
            additionalInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventType", this.eventType == null ? null : this.eventType.toString());
        jsonWriter.writeStringField("eventSource", this.eventSource == null ? null : this.eventSource.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("summary", this.summary);
        jsonWriter.writeStringField("header", this.headerProperty);
        jsonWriter.writeStringField("level", this.level == null ? null : this.level.toString());
        jsonWriter.writeStringField("eventLevel", this.eventLevel == null ? null : this.eventLevel.toString());
        jsonWriter.writeBooleanField("isEventSensitive", this.isEventSensitive);
        jsonWriter.writeStringField("externalIncidentId", this.externalIncidentId);
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeJsonField("article", this.article);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("impactStartTime",
            this.impactStartTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.impactStartTime));
        jsonWriter.writeStringField("impactMitigationTime",
            this.impactMitigationTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.impactMitigationTime));
        jsonWriter.writeArrayField("impact", this.impact, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("recommendedActions", this.recommendedActions);
        jsonWriter.writeArrayField("faqs", this.faqs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("isHIR", this.isHir);
        jsonWriter.writeBooleanField("enableMicrosoftSupport", this.enableMicrosoftSupport);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("platformInitiated", this.platformInitiated);
        jsonWriter.writeBooleanField("enableChatWithUs", this.enableChatWithUs);
        jsonWriter.writeNumberField("priority", this.priority);
        jsonWriter.writeStringField("lastUpdateTime",
            this.lastUpdateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdateTime));
        jsonWriter.writeStringField("hirStage", this.hirStage);
        jsonWriter.writeJsonField("additionalInformation", this.additionalInformation);
        jsonWriter.writeNumberField("duration", this.duration);
        jsonWriter.writeStringField("impactType", this.impactType);
        jsonWriter.writeArrayField("eventTags", this.eventTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventProperties.
     */
    public static EventProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventProperties deserializedEventProperties = new EventProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventType".equals(fieldName)) {
                    deserializedEventProperties.eventType = EventTypeValues.fromString(reader.getString());
                } else if ("eventSource".equals(fieldName)) {
                    deserializedEventProperties.eventSource = EventSourceValues.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedEventProperties.status = EventStatusValues.fromString(reader.getString());
                } else if ("title".equals(fieldName)) {
                    deserializedEventProperties.title = reader.getString();
                } else if ("summary".equals(fieldName)) {
                    deserializedEventProperties.summary = reader.getString();
                } else if ("header".equals(fieldName)) {
                    deserializedEventProperties.headerProperty = reader.getString();
                } else if ("level".equals(fieldName)) {
                    deserializedEventProperties.level = LevelValues.fromString(reader.getString());
                } else if ("eventLevel".equals(fieldName)) {
                    deserializedEventProperties.eventLevel = EventLevelValues.fromString(reader.getString());
                } else if ("isEventSensitive".equals(fieldName)) {
                    deserializedEventProperties.isEventSensitive = reader.getNullable(JsonReader::getBoolean);
                } else if ("externalIncidentId".equals(fieldName)) {
                    deserializedEventProperties.externalIncidentId = reader.getString();
                } else if ("reason".equals(fieldName)) {
                    deserializedEventProperties.reason = reader.getString();
                } else if ("article".equals(fieldName)) {
                    deserializedEventProperties.article = EventPropertiesArticle.fromJson(reader);
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    deserializedEventProperties.links = links;
                } else if ("impactStartTime".equals(fieldName)) {
                    deserializedEventProperties.impactStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("impactMitigationTime".equals(fieldName)) {
                    deserializedEventProperties.impactMitigationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("impact".equals(fieldName)) {
                    List<Impact> impact = reader.readArray(reader1 -> Impact.fromJson(reader1));
                    deserializedEventProperties.impact = impact;
                } else if ("recommendedActions".equals(fieldName)) {
                    deserializedEventProperties.recommendedActions = EventPropertiesRecommendedActions.fromJson(reader);
                } else if ("faqs".equals(fieldName)) {
                    List<Faq> faqs = reader.readArray(reader1 -> Faq.fromJson(reader1));
                    deserializedEventProperties.faqs = faqs;
                } else if ("isHIR".equals(fieldName)) {
                    deserializedEventProperties.isHir = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableMicrosoftSupport".equals(fieldName)) {
                    deserializedEventProperties.enableMicrosoftSupport = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedEventProperties.description = reader.getString();
                } else if ("platformInitiated".equals(fieldName)) {
                    deserializedEventProperties.platformInitiated = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableChatWithUs".equals(fieldName)) {
                    deserializedEventProperties.enableChatWithUs = reader.getNullable(JsonReader::getBoolean);
                } else if ("priority".equals(fieldName)) {
                    deserializedEventProperties.priority = reader.getNullable(JsonReader::getInt);
                } else if ("lastUpdateTime".equals(fieldName)) {
                    deserializedEventProperties.lastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("hirStage".equals(fieldName)) {
                    deserializedEventProperties.hirStage = reader.getString();
                } else if ("additionalInformation".equals(fieldName)) {
                    deserializedEventProperties.additionalInformation
                        = EventPropertiesAdditionalInformation.fromJson(reader);
                } else if ("duration".equals(fieldName)) {
                    deserializedEventProperties.duration = reader.getNullable(JsonReader::getInt);
                } else if ("impactType".equals(fieldName)) {
                    deserializedEventProperties.impactType = reader.getString();
                } else if ("eventTags".equals(fieldName)) {
                    List<String> eventTags = reader.readArray(reader1 -> reader1.getString());
                    deserializedEventProperties.eventTags = eventTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventProperties;
        });
    }
}
