// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgesites.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.edgemicrosoftedgesites.fluent.models.SiteInner;

/**
 * An instance of this class provides access to all the operations defined in SitesCreatesClient.
 */
public interface SitesCreatesClient {
    /**
     * Create a Site at Subscription scope.
     * 
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteInner>, SiteInner> beginAtSubscription(String siteName, SiteInner site);

    /**
     * Create a Site at Subscription scope.
     * 
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteInner>, SiteInner> beginAtSubscription(String siteName, SiteInner site, Context context);

    /**
     * Create a Site at Subscription scope.
     * 
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteInner atSubscription(String siteName, SiteInner site);

    /**
     * Create a Site at Subscription scope.
     * 
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteInner atSubscription(String siteName, SiteInner site, Context context);

    /**
     * Create a Site at Resource Group scope.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteInner>, SiteInner> beginByResourceGroup(String resourceGroupName, String siteName,
        SiteInner site);

    /**
     * Create a Site at Resource Group scope.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of site resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SiteInner>, SiteInner> beginByResourceGroup(String resourceGroupName, String siteName,
        SiteInner site, Context context);

    /**
     * Create a Site at Resource Group scope.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteInner byResourceGroup(String resourceGroupName, String siteName, SiteInner site);

    /**
     * Create a Site at Resource Group scope.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName Name of Site.
     * @param site Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return site resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SiteInner byResourceGroup(String resourceGroupName, String siteName, SiteInner site, Context context);
}
