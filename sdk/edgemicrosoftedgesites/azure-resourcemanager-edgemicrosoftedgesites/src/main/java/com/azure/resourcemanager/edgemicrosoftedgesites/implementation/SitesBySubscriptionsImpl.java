// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgesites.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgemicrosoftedgesites.fluent.SitesBySubscriptionsClient;
import com.azure.resourcemanager.edgemicrosoftedgesites.fluent.models.SiteInner;
import com.azure.resourcemanager.edgemicrosoftedgesites.models.Site;
import com.azure.resourcemanager.edgemicrosoftedgesites.models.SitesBySubscriptions;

public final class SitesBySubscriptionsImpl implements SitesBySubscriptions {
    private static final ClientLogger LOGGER = new ClientLogger(SitesBySubscriptionsImpl.class);

    private final SitesBySubscriptionsClient innerClient;

    private final com.azure.resourcemanager.edgemicrosoftedgesites.EdgemicrosoftedgesitesManager serviceManager;

    public SitesBySubscriptionsImpl(SitesBySubscriptionsClient innerClient,
        com.azure.resourcemanager.edgemicrosoftedgesites.EdgemicrosoftedgesitesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Site> list() {
        PagedIterable<SiteInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> list(Context context) {
        PagedIterable<SiteInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Response<Site> getWithResponse(String siteName, Context context) {
        Response<SiteInner> inner = this.serviceClient().getWithResponse(siteName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site get(String siteName) {
        SiteInner inner = this.serviceClient().get(siteName);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String siteName, Context context) {
        return this.serviceClient().deleteWithResponse(siteName, context);
    }

    public void delete(String siteName) {
        this.serviceClient().delete(siteName);
    }

    public Site getById(String id) {
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "sites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.getWithResponse(siteName, Context.NONE).getValue();
    }

    public Response<Site> getByIdWithResponse(String id, Context context) {
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "sites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.getWithResponse(siteName, context);
    }

    public void deleteById(String id) {
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "sites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        this.deleteWithResponse(siteName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String siteName = ResourceManagerUtils.getValueFromIdByName(id, "sites");
        if (siteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.deleteWithResponse(siteName, context);
    }

    private SitesBySubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgemicrosoftedgesites.EdgemicrosoftedgesitesManager manager() {
        return this.serviceManager;
    }

    public SiteImpl define(String name) {
        return new SiteImpl(name, this.manager());
    }
}
