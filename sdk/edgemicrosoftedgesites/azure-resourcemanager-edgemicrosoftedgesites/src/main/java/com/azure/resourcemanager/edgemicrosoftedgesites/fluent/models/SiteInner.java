// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgesites.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.edgemicrosoftedgesites.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.edgemicrosoftedgesites.models.ProvisioningState;
import com.azure.resourcemanager.edgemicrosoftedgesites.models.UserAssignedIdentity;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;
import java.util.UUID;

/**
 * Site resource.
 */
@Fluent
public final class SiteInner extends ProxyResource {
    /*
     * Identity of Sites resource
     */
    @JsonProperty(value = "identity")
    private ManagedServiceIdentity innerIdentity;

    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private SiteProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of SiteInner class.
     */
    public SiteInner() {
    }

    /**
     * Get the innerIdentity property: Identity of Sites resource.
     * 
     * @return the innerIdentity value.
     */
    private ManagedServiceIdentity innerIdentity() {
        return this.innerIdentity;
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private SiteProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the principalId property: The service principal ID of the system assigned identity. This property will only
     * be provided for a system assigned identity.
     * 
     * @return the principalId value.
     */
    public UUID principalId() {
        return this.innerIdentity() == null ? null : this.innerIdentity().principalId();
    }

    /**
     * Get the tenantId property: The tenant ID of the system assigned identity. This property will only be provided
     * for a system assigned identity.
     * 
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.innerIdentity() == null ? null : this.innerIdentity().tenantId();
    }

    /**
     * Get the type property: Type of managed service identity (where both SystemAssigned and UserAssigned types are
     * allowed).
     * 
     * @return the type value.
     */
    public ManagedServiceIdentityType typeIdentityType() {
        return this.innerIdentity() == null ? null : this.innerIdentity().type();
    }

    /**
     * Set the type property: Type of managed service identity (where both SystemAssigned and UserAssigned types are
     * allowed).
     * 
     * @param type the type value to set.
     * @return the SiteInner object itself.
     */
    public SiteInner withTypeIdentityType(ManagedServiceIdentityType type) {
        if (this.innerIdentity() == null) {
            this.innerIdentity = new ManagedServiceIdentity();
        }
        this.innerIdentity().withType(type);
        return this;
    }

    /**
     * Get the userAssignedIdentities property: The set of user assigned identities associated with the resource. The
     * userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     * The dictionary values can be empty objects ({}) in requests.
     * 
     * @return the userAssignedIdentities value.
     */
    public Map<String, UserAssignedIdentity> userAssignedIdentities() {
        return this.innerIdentity() == null ? null : this.innerIdentity().userAssignedIdentities();
    }

    /**
     * Set the userAssignedIdentities property: The set of user assigned identities associated with the resource. The
     * userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     * The dictionary values can be empty objects ({}) in requests.
     * 
     * @param userAssignedIdentities the userAssignedIdentities value to set.
     * @return the SiteInner object itself.
     */
    public SiteInner withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities) {
        if (this.innerIdentity() == null) {
            this.innerIdentity = new ManagedServiceIdentity();
        }
        this.innerIdentity().withUserAssignedIdentities(userAssignedIdentities);
        return this;
    }

    /**
     * Get the displayName property: Friendly name of site.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Friendly name of site.
     * 
     * @param displayName the displayName value to set.
     * @return the SiteInner object itself.
     */
    public SiteInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: Description of site.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Description of site.
     * 
     * @param description the description value to set.
     * @return the SiteInner object itself.
     */
    public SiteInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the addressResourceId property: AddressResourceId for site.
     * 
     * @return the addressResourceId value.
     */
    public String addressResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().addressResourceId();
    }

    /**
     * Set the addressResourceId property: AddressResourceId for site.
     * 
     * @param addressResourceId the addressResourceId value to set.
     * @return the SiteInner object itself.
     */
    public SiteInner withAddressResourceId(String addressResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteProperties();
        }
        this.innerProperties().withAddressResourceId(addressResourceId);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerIdentity() != null) {
            innerIdentity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
