// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent.models.ConnectivityStatusInner;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.models.ConnectivityStatusUpdate;

/**
 * An instance of this class provides access to all the operations defined in ConnectivityStatusesClient.
 */
public interface ConnectivityStatusesClient {
    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectivityStatusInner> list(String resourceUri);

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectivityStatusInner> list(String resourceUri, Context context);

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectivityStatusInner> getWithResponse(String resourceUri, String connectivityStatusName,
        Context context);

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectivityStatusInner get(String resourceUri, String connectivityStatusName);

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner> beginCreateOrUpdate(String resourceUri,
        String connectivityStatusName, ConnectivityStatusInner resource);

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner> beginCreateOrUpdate(String resourceUri,
        String connectivityStatusName, ConnectivityStatusInner resource, Context context);

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectivityStatusInner createOrUpdate(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource);

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectivityStatusInner createOrUpdate(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource, Context context);

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectivityStatusInner> updateWithResponse(String resourceUri, String connectivityStatusName,
        ConnectivityStatusUpdate properties, Context context);

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectivityStatusInner update(String resourceUri, String connectivityStatusName,
        ConnectivityStatusUpdate properties);

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceUri, String connectivityStatusName, Context context);

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String connectivityStatusName);
}
