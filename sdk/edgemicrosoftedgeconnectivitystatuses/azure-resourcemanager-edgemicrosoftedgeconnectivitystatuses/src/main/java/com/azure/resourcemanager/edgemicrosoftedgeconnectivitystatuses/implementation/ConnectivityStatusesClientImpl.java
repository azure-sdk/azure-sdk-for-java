// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent.ConnectivityStatusesClient;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent.models.ConnectivityStatusInner;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.models.ConnectivityStatusListResult;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.models.ConnectivityStatusUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConnectivityStatusesClient.
 */
public final class ConnectivityStatusesClientImpl implements ConnectivityStatusesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConnectivityStatusesService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftEdgeImpl client;

    /**
     * Initializes an instance of ConnectivityStatusesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConnectivityStatusesClientImpl(MicrosoftEdgeImpl client) {
        this.service = RestProxy.create(ConnectivityStatusesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftEdgeConnectivityStatuses to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftEdgeConnect")
    public interface ConnectivityStatusesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectivityStatusListResult>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectivityStatusInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("connectivityStatusName") String connectivityStatusName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("connectivityStatusName") String connectivityStatusName,
            @BodyParam("application/json") ConnectivityStatusInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectivityStatusInner>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("connectivityStatusName") String connectivityStatusName,
            @BodyParam("application/json") ConnectivityStatusUpdate properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("connectivityStatusName") String connectivityStatusName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectivityStatusListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectivityStatusInner>> listSinglePageAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                accept, context))
            .<PagedResponse<ConnectivityStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectivityStatusInner>> listSinglePageAsync(String resourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConnectivityStatusInner> listAsync(String resourceUri) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConnectivityStatusInner> listAsync(String resourceUri, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConnectivityStatusInner> list(String resourceUri) {
        return new PagedIterable<>(listAsync(resourceUri));
    }

    /**
     * List ConnectivityStatus resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConnectivityStatusInner> list(String resourceUri, Context context) {
        return new PagedIterable<>(listAsync(resourceUri, context));
    }

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectivityStatusInner>> getWithResponseAsync(String resourceUri,
        String connectivityStatusName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                connectivityStatusName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectivityStatusInner>> getWithResponseAsync(String resourceUri,
        String connectivityStatusName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, connectivityStatusName,
            accept, context);
    }

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectivityStatusInner> getAsync(String resourceUri, String connectivityStatusName) {
        return getWithResponseAsync(resourceUri, connectivityStatusName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectivityStatusInner> getWithResponse(String resourceUri, String connectivityStatusName,
        Context context) {
        return getWithResponseAsync(resourceUri, connectivityStatusName, context).block();
    }

    /**
     * Get a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConnectivityStatus.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectivityStatusInner get(String resourceUri, String connectivityStatusName) {
        return getWithResponse(resourceUri, connectivityStatusName, Context.NONE).getValue();
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri,
        String connectivityStatusName, ConnectivityStatusInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, connectivityStatusName, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri,
        String connectivityStatusName, ConnectivityStatusInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            connectivityStatusName, resource, accept, context);
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner>
        beginCreateOrUpdateAsync(String resourceUri, String connectivityStatusName, ConnectivityStatusInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceUri, connectivityStatusName, resource);
        return this.client.<ConnectivityStatusInner, ConnectivityStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), ConnectivityStatusInner.class, ConnectivityStatusInner.class,
            this.client.getContext());
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner> beginCreateOrUpdateAsync(
        String resourceUri, String connectivityStatusName, ConnectivityStatusInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceUri, connectivityStatusName, resource, context);
        return this.client.<ConnectivityStatusInner, ConnectivityStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), ConnectivityStatusInner.class, ConnectivityStatusInner.class, context);
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner>
        beginCreateOrUpdate(String resourceUri, String connectivityStatusName, ConnectivityStatusInner resource) {
        return this.beginCreateOrUpdateAsync(resourceUri, connectivityStatusName, resource).getSyncPoller();
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectivityStatusInner>, ConnectivityStatusInner> beginCreateOrUpdate(
        String resourceUri, String connectivityStatusName, ConnectivityStatusInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceUri, connectivityStatusName, resource, context).getSyncPoller();
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectivityStatusInner> createOrUpdateAsync(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource) {
        return beginCreateOrUpdateAsync(resourceUri, connectivityStatusName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectivityStatusInner> createOrUpdateAsync(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceUri, connectivityStatusName, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectivityStatusInner createOrUpdate(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource) {
        return createOrUpdateAsync(resourceUri, connectivityStatusName, resource).block();
    }

    /**
     * Create a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectivityStatusInner createOrUpdate(String resourceUri, String connectivityStatusName,
        ConnectivityStatusInner resource, Context context) {
        return createOrUpdateAsync(resourceUri, connectivityStatusName, resource, context).block();
    }

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectivityStatusInner>> updateWithResponseAsync(String resourceUri,
        String connectivityStatusName, ConnectivityStatusUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                connectivityStatusName, properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectivityStatusInner>> updateWithResponseAsync(String resourceUri,
        String connectivityStatusName, ConnectivityStatusUpdate properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            connectivityStatusName, properties, accept, context);
    }

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectivityStatusInner> updateAsync(String resourceUri, String connectivityStatusName,
        ConnectivityStatusUpdate properties) {
        return updateWithResponseAsync(resourceUri, connectivityStatusName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectivityStatusInner> updateWithResponse(String resourceUri, String connectivityStatusName,
        ConnectivityStatusUpdate properties, Context context) {
        return updateWithResponseAsync(resourceUri, connectivityStatusName, properties, context).block();
    }

    /**
     * Update a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Microsoft.Edge connectivity status resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectivityStatusInner update(String resourceUri, String connectivityStatusName,
        ConnectivityStatusUpdate properties) {
        return updateWithResponse(resourceUri, connectivityStatusName, properties, Context.NONE).getValue();
    }

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceUri, String connectivityStatusName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                connectivityStatusName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceUri, String connectivityStatusName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (connectivityStatusName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter connectivityStatusName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            connectivityStatusName, accept, context);
    }

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String connectivityStatusName) {
        return deleteWithResponseAsync(resourceUri, connectivityStatusName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceUri, String connectivityStatusName, Context context) {
        return deleteWithResponseAsync(resourceUri, connectivityStatusName, context).block();
    }

    /**
     * Delete a ConnectivityStatus.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param connectivityStatusName Name of ConnectivityStatus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String connectivityStatusName) {
        deleteWithResponse(resourceUri, connectivityStatusName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectivityStatusInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConnectivityStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ConnectivityStatus list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectivityStatusInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
