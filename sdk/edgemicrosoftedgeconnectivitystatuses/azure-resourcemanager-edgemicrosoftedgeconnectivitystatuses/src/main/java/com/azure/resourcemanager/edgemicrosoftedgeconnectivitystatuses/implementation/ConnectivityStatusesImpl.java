// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent.ConnectivityStatusesClient;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.fluent.models.ConnectivityStatusInner;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.models.ConnectivityStatus;
import com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.models.ConnectivityStatuses;

public final class ConnectivityStatusesImpl implements ConnectivityStatuses {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectivityStatusesImpl.class);

    private final ConnectivityStatusesClient innerClient;

    private final com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.EdgemicrosoftedgeconnectivitystatusesManager serviceManager;

    public ConnectivityStatusesImpl(ConnectivityStatusesClient innerClient,
        com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.EdgemicrosoftedgeconnectivitystatusesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ConnectivityStatus> list(String resourceUri) {
        PagedIterable<ConnectivityStatusInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new ConnectivityStatusImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectivityStatus> list(String resourceUri, Context context) {
        PagedIterable<ConnectivityStatusInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new ConnectivityStatusImpl(inner1, this.manager()));
    }

    public Response<ConnectivityStatus> getWithResponse(String resourceUri, String connectivityStatusName,
        Context context) {
        Response<ConnectivityStatusInner> inner
            = this.serviceClient().getWithResponse(resourceUri, connectivityStatusName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectivityStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectivityStatus get(String resourceUri, String connectivityStatusName) {
        ConnectivityStatusInner inner = this.serviceClient().get(resourceUri, connectivityStatusName);
        if (inner != null) {
            return new ConnectivityStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String connectivityStatusName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, connectivityStatusName, context);
    }

    public void deleteByResourceGroup(String resourceUri, String connectivityStatusName) {
        this.serviceClient().delete(resourceUri, connectivityStatusName);
    }

    public ConnectivityStatus getById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String connectivityStatusName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
            "connectivityStatusName");
        if (connectivityStatusName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectivityStatuses'.", id)));
        }
        return this.getWithResponse(resourceUri, connectivityStatusName, Context.NONE).getValue();
    }

    public Response<ConnectivityStatus> getByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String connectivityStatusName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
            "connectivityStatusName");
        if (connectivityStatusName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectivityStatuses'.", id)));
        }
        return this.getWithResponse(resourceUri, connectivityStatusName, context);
    }

    public void deleteById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String connectivityStatusName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
            "connectivityStatusName");
        if (connectivityStatusName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectivityStatuses'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceUri, connectivityStatusName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String connectivityStatusName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
            "connectivityStatusName");
        if (connectivityStatusName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectivityStatuses'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceUri, connectivityStatusName, context);
    }

    private ConnectivityStatusesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgemicrosoftedgeconnectivitystatuses.EdgemicrosoftedgeconnectivitystatusesManager
        manager() {
        return this.serviceManager;
    }

    public ConnectivityStatusImpl define(String name) {
        return new ConnectivityStatusImpl(name, this.manager());
    }
}
