// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The overview of the compliance result for one report.
 */
@Immutable
public final class OverviewStatus {
    /*
     * The count of all passed control.
     */
    @JsonProperty(value = "passedCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer passedCount;

    /*
     * The count of all failed control.
     */
    @JsonProperty(value = "failedCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer failedCount;

    /*
     * The count of all manual control.
     */
    @JsonProperty(value = "manualCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer manualCount;

    /*
     * The count of all not applicable control.
     */
    @JsonProperty(value = "notApplicableCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer notApplicableCount;

    /*
     * The count of all pending for approval control.
     */
    @JsonProperty(value = "pendingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer pendingCount;

    /**
     * Creates an instance of OverviewStatus class.
     */
    private OverviewStatus() {
    }

    /**
     * Get the passedCount property: The count of all passed control.
     * 
     * @return the passedCount value.
     */
    public Integer passedCount() {
        return this.passedCount;
    }

    /**
     * Get the failedCount property: The count of all failed control.
     * 
     * @return the failedCount value.
     */
    public Integer failedCount() {
        return this.failedCount;
    }

    /**
     * Get the manualCount property: The count of all manual control.
     * 
     * @return the manualCount value.
     */
    public Integer manualCount() {
        return this.manualCount;
    }

    /**
     * Get the notApplicableCount property: The count of all not applicable control.
     * 
     * @return the notApplicableCount value.
     */
    public Integer notApplicableCount() {
        return this.notApplicableCount;
    }

    /**
     * Get the pendingCount property: The count of all pending for approval control.
     * 
     * @return the pendingCount value.
     */
    public Integer pendingCount() {
        return this.pendingCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
