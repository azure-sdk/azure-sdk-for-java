// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ReportOperationsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ReportVerificationResultInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ReportOperationsClient.
 */
public final class ReportOperationsClientImpl implements ReportOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ReportOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppComplianceAutomationToolForMicrosoft365Impl client;

    /**
     * Initializes an instance of ReportOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ReportOperationsClientImpl(AppComplianceAutomationToolForMicrosoft365Impl client) {
        this.service
            = RestProxy.create(ReportOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppComplianceAutomationToolForMicrosoft365ReportOperations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppComplianceAutomat")
    public interface ReportOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/verify")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> verify(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> verifyWithResponseAsync(String reportName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.verify(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> verifyWithResponseAsync(String reportName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.verify(this.client.getEndpoint(), this.client.getApiVersion(), reportName, accept, context);
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReportVerificationResultInner>, ReportVerificationResultInner>
        beginVerifyAsync(String reportName) {
        Mono<Response<Flux<ByteBuffer>>> mono = verifyWithResponseAsync(reportName);
        return this.client.<ReportVerificationResultInner, ReportVerificationResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReportVerificationResultInner.class, ReportVerificationResultInner.class,
            this.client.getContext());
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReportVerificationResultInner>, ReportVerificationResultInner>
        beginVerifyAsync(String reportName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = verifyWithResponseAsync(reportName, context);
        return this.client.<ReportVerificationResultInner, ReportVerificationResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReportVerificationResultInner.class, ReportVerificationResultInner.class,
            context);
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReportVerificationResultInner>, ReportVerificationResultInner>
        beginVerify(String reportName) {
        return this.beginVerifyAsync(reportName).getSyncPoller();
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReportVerificationResultInner>, ReportVerificationResultInner>
        beginVerify(String reportName, Context context) {
        return this.beginVerifyAsync(reportName, context).getSyncPoller();
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReportVerificationResultInner> verifyAsync(String reportName) {
        return beginVerifyAsync(reportName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReportVerificationResultInner> verifyAsync(String reportName, Context context) {
        return beginVerifyAsync(reportName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportVerificationResultInner verify(String reportName) {
        return verifyAsync(reportName).block();
    }

    /**
     * Verify the AppComplianceAutomation report health status.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return report health status verification result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportVerificationResultInner verify(String reportName, Context context) {
        return verifyAsync(reportName, context).block();
    }
}
