// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Evidence's properties.
 */
@Fluent
public final class EvidenceProperties {
    /*
     * Evidence type.
     */
    @JsonProperty(value = "evidenceType")
    private EvidenceType evidenceType;

    /*
     * The path of the file in storage.
     */
    @JsonProperty(value = "filePath", required = true)
    private String filePath;

    /*
     * Extra data considered as evidence.
     */
    @JsonProperty(value = "extraData")
    private String extraData;

    /*
     * Control id.
     */
    @JsonProperty(value = "controlId")
    private String controlId;

    /*
     * Responsibility id.
     */
    @JsonProperty(value = "responsibilityId")
    private String responsibilityId;

    /*
     * Azure lifecycle management
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of EvidenceProperties class.
     */
    public EvidenceProperties() {
    }

    /**
     * Get the evidenceType property: Evidence type.
     * 
     * @return the evidenceType value.
     */
    public EvidenceType evidenceType() {
        return this.evidenceType;
    }

    /**
     * Set the evidenceType property: Evidence type.
     * 
     * @param evidenceType the evidenceType value to set.
     * @return the EvidenceProperties object itself.
     */
    public EvidenceProperties withEvidenceType(EvidenceType evidenceType) {
        this.evidenceType = evidenceType;
        return this;
    }

    /**
     * Get the filePath property: The path of the file in storage.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Set the filePath property: The path of the file in storage.
     * 
     * @param filePath the filePath value to set.
     * @return the EvidenceProperties object itself.
     */
    public EvidenceProperties withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * Get the extraData property: Extra data considered as evidence.
     * 
     * @return the extraData value.
     */
    public String extraData() {
        return this.extraData;
    }

    /**
     * Set the extraData property: Extra data considered as evidence.
     * 
     * @param extraData the extraData value to set.
     * @return the EvidenceProperties object itself.
     */
    public EvidenceProperties withExtraData(String extraData) {
        this.extraData = extraData;
        return this;
    }

    /**
     * Get the controlId property: Control id.
     * 
     * @return the controlId value.
     */
    public String controlId() {
        return this.controlId;
    }

    /**
     * Set the controlId property: Control id.
     * 
     * @param controlId the controlId value to set.
     * @return the EvidenceProperties object itself.
     */
    public EvidenceProperties withControlId(String controlId) {
        this.controlId = controlId;
        return this;
    }

    /**
     * Get the responsibilityId property: Responsibility id.
     * 
     * @return the responsibilityId value.
     */
    public String responsibilityId() {
        return this.responsibilityId;
    }

    /**
     * Set the responsibilityId property: Responsibility id.
     * 
     * @param responsibilityId the responsibilityId value to set.
     * @return the EvidenceProperties object itself.
     */
    public EvidenceProperties withResponsibilityId(String responsibilityId) {
        this.responsibilityId = responsibilityId;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filePath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property filePath in model EvidenceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EvidenceProperties.class);
}
