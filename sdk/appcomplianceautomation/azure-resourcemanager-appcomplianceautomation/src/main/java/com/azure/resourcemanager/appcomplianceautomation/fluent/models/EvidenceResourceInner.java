// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcomplianceautomation.models.EvidenceType;
import com.azure.resourcemanager.appcomplianceautomation.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A class represent an AppComplianceAutomation evidence resource.
 */
@Fluent
public final class EvidenceResourceInner extends ProxyResource {
    /*
     * Evidence property.
     */
    @JsonProperty(value = "properties", required = true)
    private EvidenceProperties innerProperties = new EvidenceProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of EvidenceResourceInner class.
     */
    public EvidenceResourceInner() {
    }

    /**
     * Get the innerProperties property: Evidence property.
     * 
     * @return the innerProperties value.
     */
    private EvidenceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the evidenceType property: Evidence type.
     * 
     * @return the evidenceType value.
     */
    public EvidenceType evidenceType() {
        return this.innerProperties() == null ? null : this.innerProperties().evidenceType();
    }

    /**
     * Set the evidenceType property: Evidence type.
     * 
     * @param evidenceType the evidenceType value to set.
     * @return the EvidenceResourceInner object itself.
     */
    public EvidenceResourceInner withEvidenceType(EvidenceType evidenceType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EvidenceProperties();
        }
        this.innerProperties().withEvidenceType(evidenceType);
        return this;
    }

    /**
     * Get the filePath property: The path of the file in storage.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: The path of the file in storage.
     * 
     * @param filePath the filePath value to set.
     * @return the EvidenceResourceInner object itself.
     */
    public EvidenceResourceInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EvidenceProperties();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the extraData property: Extra data considered as evidence.
     * 
     * @return the extraData value.
     */
    public String extraData() {
        return this.innerProperties() == null ? null : this.innerProperties().extraData();
    }

    /**
     * Set the extraData property: Extra data considered as evidence.
     * 
     * @param extraData the extraData value to set.
     * @return the EvidenceResourceInner object itself.
     */
    public EvidenceResourceInner withExtraData(String extraData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EvidenceProperties();
        }
        this.innerProperties().withExtraData(extraData);
        return this;
    }

    /**
     * Get the controlId property: Control id.
     * 
     * @return the controlId value.
     */
    public String controlId() {
        return this.innerProperties() == null ? null : this.innerProperties().controlId();
    }

    /**
     * Set the controlId property: Control id.
     * 
     * @param controlId the controlId value to set.
     * @return the EvidenceResourceInner object itself.
     */
    public EvidenceResourceInner withControlId(String controlId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EvidenceProperties();
        }
        this.innerProperties().withControlId(controlId);
        return this;
    }

    /**
     * Get the responsibilityId property: Responsibility id.
     * 
     * @return the responsibilityId value.
     */
    public String responsibilityId() {
        return this.innerProperties() == null ? null : this.innerProperties().responsibilityId();
    }

    /**
     * Set the responsibilityId property: Responsibility id.
     * 
     * @param responsibilityId the responsibilityId value to set.
     * @return the EvidenceResourceInner object itself.
     */
    public EvidenceResourceInner withResponsibilityId(String responsibilityId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EvidenceProperties();
        }
        this.innerProperties().withResponsibilityId(responsibilityId);
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model EvidenceResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EvidenceResourceInner.class);
}
