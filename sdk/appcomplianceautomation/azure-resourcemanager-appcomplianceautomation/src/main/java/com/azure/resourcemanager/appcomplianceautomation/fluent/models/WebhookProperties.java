// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcomplianceautomation.models.ContentType;
import com.azure.resourcemanager.appcomplianceautomation.models.DeliveryStatus;
import com.azure.resourcemanager.appcomplianceautomation.models.EnableSslVerification;
import com.azure.resourcemanager.appcomplianceautomation.models.NotificationEvent;
import com.azure.resourcemanager.appcomplianceautomation.models.ProvisioningState;
import com.azure.resourcemanager.appcomplianceautomation.models.SendAllEvents;
import com.azure.resourcemanager.appcomplianceautomation.models.UpdateWebhookKey;
import com.azure.resourcemanager.appcomplianceautomation.models.WebhookKeyEnabled;
import com.azure.resourcemanager.appcomplianceautomation.models.WebhookStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Webhook properties.
 */
@Fluent
public final class WebhookProperties {
    /*
     * Webhook id in database.
     */
    @JsonProperty(value = "webhookId", access = JsonProperty.Access.WRITE_ONLY)
    private String webhookId;

    /*
     * Webhook status.
     */
    @JsonProperty(value = "status")
    private WebhookStatus status;

    /*
     * Tenant id.
     */
    @JsonProperty(value = "tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /*
     * whether to send notification under any event.
     */
    @JsonProperty(value = "sendAllEvents")
    private SendAllEvents sendAllEvents;

    /*
     * under which event notification should be sent.
     */
    @JsonProperty(value = "events")
    private List<NotificationEvent> events;

    /*
     * webhook payload url
     */
    @JsonProperty(value = "payloadUrl")
    private String payloadUrl;

    /*
     * content type
     */
    @JsonProperty(value = "contentType")
    private ContentType contentType;

    /*
     * webhook secret token. If not set, this field value is null; otherwise, please set a string value.
     */
    @JsonProperty(value = "webhookKey")
    private String webhookKey;

    /*
     * whether to update webhookKey.
     */
    @JsonProperty(value = "updateWebhookKey")
    private UpdateWebhookKey updateWebhookKey;

    /*
     * whether webhookKey is enabled.
     */
    @JsonProperty(value = "webhookKeyEnabled", access = JsonProperty.Access.WRITE_ONLY)
    private WebhookKeyEnabled webhookKeyEnabled;

    /*
     * whether to enable ssl verification
     */
    @JsonProperty(value = "enableSslVerification")
    private EnableSslVerification enableSslVerification;

    /*
     * webhook deliveryStatus
     */
    @JsonProperty(value = "deliveryStatus", access = JsonProperty.Access.WRITE_ONLY)
    private DeliveryStatus deliveryStatus;

    /*
     * Azure Resource Provisioning State
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of WebhookProperties class.
     */
    public WebhookProperties() {
    }

    /**
     * Get the webhookId property: Webhook id in database.
     * 
     * @return the webhookId value.
     */
    public String webhookId() {
        return this.webhookId;
    }

    /**
     * Get the status property: Webhook status.
     * 
     * @return the status value.
     */
    public WebhookStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Webhook status.
     * 
     * @param status the status value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withStatus(WebhookStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tenantId property: Tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the sendAllEvents property: whether to send notification under any event.
     * 
     * @return the sendAllEvents value.
     */
    public SendAllEvents sendAllEvents() {
        return this.sendAllEvents;
    }

    /**
     * Set the sendAllEvents property: whether to send notification under any event.
     * 
     * @param sendAllEvents the sendAllEvents value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withSendAllEvents(SendAllEvents sendAllEvents) {
        this.sendAllEvents = sendAllEvents;
        return this;
    }

    /**
     * Get the events property: under which event notification should be sent.
     * 
     * @return the events value.
     */
    public List<NotificationEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: under which event notification should be sent.
     * 
     * @param events the events value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withEvents(List<NotificationEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Get the payloadUrl property: webhook payload url.
     * 
     * @return the payloadUrl value.
     */
    public String payloadUrl() {
        return this.payloadUrl;
    }

    /**
     * Set the payloadUrl property: webhook payload url.
     * 
     * @param payloadUrl the payloadUrl value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withPayloadUrl(String payloadUrl) {
        this.payloadUrl = payloadUrl;
        return this;
    }

    /**
     * Get the contentType property: content type.
     * 
     * @return the contentType value.
     */
    public ContentType contentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: content type.
     * 
     * @param contentType the contentType value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withContentType(ContentType contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @return the webhookKey value.
     */
    public String webhookKey() {
        return this.webhookKey;
    }

    /**
     * Set the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @param webhookKey the webhookKey value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withWebhookKey(String webhookKey) {
        this.webhookKey = webhookKey;
        return this;
    }

    /**
     * Get the updateWebhookKey property: whether to update webhookKey.
     * 
     * @return the updateWebhookKey value.
     */
    public UpdateWebhookKey updateWebhookKey() {
        return this.updateWebhookKey;
    }

    /**
     * Set the updateWebhookKey property: whether to update webhookKey.
     * 
     * @param updateWebhookKey the updateWebhookKey value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withUpdateWebhookKey(UpdateWebhookKey updateWebhookKey) {
        this.updateWebhookKey = updateWebhookKey;
        return this;
    }

    /**
     * Get the webhookKeyEnabled property: whether webhookKey is enabled.
     * 
     * @return the webhookKeyEnabled value.
     */
    public WebhookKeyEnabled webhookKeyEnabled() {
        return this.webhookKeyEnabled;
    }

    /**
     * Get the enableSslVerification property: whether to enable ssl verification.
     * 
     * @return the enableSslVerification value.
     */
    public EnableSslVerification enableSslVerification() {
        return this.enableSslVerification;
    }

    /**
     * Set the enableSslVerification property: whether to enable ssl verification.
     * 
     * @param enableSslVerification the enableSslVerification value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withEnableSslVerification(EnableSslVerification enableSslVerification) {
        this.enableSslVerification = enableSslVerification;
        return this;
    }

    /**
     * Get the deliveryStatus property: webhook deliveryStatus.
     * 
     * @return the deliveryStatus value.
     */
    public DeliveryStatus deliveryStatus() {
        return this.deliveryStatus;
    }

    /**
     * Get the provisioningState property: Azure Resource Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
