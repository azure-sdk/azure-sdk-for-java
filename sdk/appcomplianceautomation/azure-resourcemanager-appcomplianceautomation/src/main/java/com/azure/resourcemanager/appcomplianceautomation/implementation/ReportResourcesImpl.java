// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ReportResourcesClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ReportResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResource;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResourceUpdate;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResources;

public final class ReportResourcesImpl implements ReportResources {
    private static final ClientLogger LOGGER = new ClientLogger(ReportResourcesImpl.class);

    private final ReportResourcesClient innerClient;

    private final com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager;

    public ReportResourcesImpl(ReportResourcesClient innerClient,
        com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ReportResource> listByTenant() {
        PagedIterable<ReportResourceInner> inner = this.serviceClient().listByTenant();
        return Utils.mapPage(inner, inner1 -> new ReportResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ReportResource> listByTenant(String skipToken, Integer top, String select, String offerGuid,
        String reportCreatorTenantId, Context context) {
        PagedIterable<ReportResourceInner> inner
            = this.serviceClient().listByTenant(skipToken, top, select, offerGuid, reportCreatorTenantId, context);
        return Utils.mapPage(inner, inner1 -> new ReportResourceImpl(inner1, this.manager()));
    }

    public Response<ReportResource> getWithResponse(String reportName, Context context) {
        Response<ReportResourceInner> inner = this.serviceClient().getWithResponse(reportName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReportResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReportResource get(String reportName) {
        ReportResourceInner inner = this.serviceClient().get(reportName);
        if (inner != null) {
            return new ReportResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReportResource createOrUpdate(String reportName, ReportResourceInner resource) {
        ReportResourceInner inner = this.serviceClient().createOrUpdate(reportName, resource);
        if (inner != null) {
            return new ReportResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReportResource createOrUpdate(String reportName, ReportResourceInner resource, Context context) {
        ReportResourceInner inner = this.serviceClient().createOrUpdate(reportName, resource, context);
        if (inner != null) {
            return new ReportResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReportResource update(String reportName, ReportResourceUpdate properties) {
        ReportResourceInner inner = this.serviceClient().update(reportName, properties);
        if (inner != null) {
            return new ReportResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReportResource update(String reportName, ReportResourceUpdate properties, Context context) {
        ReportResourceInner inner = this.serviceClient().update(reportName, properties, context);
        if (inner != null) {
            return new ReportResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String reportName) {
        this.serviceClient().delete(reportName);
    }

    public void delete(String reportName, Context context) {
        this.serviceClient().delete(reportName, context);
    }

    private ReportResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager manager() {
        return this.serviceManager;
    }
}
