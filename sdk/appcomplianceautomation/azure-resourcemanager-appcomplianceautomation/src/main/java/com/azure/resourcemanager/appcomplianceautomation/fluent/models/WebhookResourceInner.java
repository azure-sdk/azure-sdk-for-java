// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcomplianceautomation.models.ContentType;
import com.azure.resourcemanager.appcomplianceautomation.models.DeliveryStatus;
import com.azure.resourcemanager.appcomplianceautomation.models.EnableSslVerification;
import com.azure.resourcemanager.appcomplianceautomation.models.NotificationEvent;
import com.azure.resourcemanager.appcomplianceautomation.models.ProvisioningState;
import com.azure.resourcemanager.appcomplianceautomation.models.SendAllEvents;
import com.azure.resourcemanager.appcomplianceautomation.models.UpdateWebhookKey;
import com.azure.resourcemanager.appcomplianceautomation.models.WebhookKeyEnabled;
import com.azure.resourcemanager.appcomplianceautomation.models.WebhookStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A class represent an AppComplianceAutomation webhook resource.
 */
@Fluent
public final class WebhookResourceInner extends ProxyResource {
    /*
     * Webhook property.
     */
    @JsonProperty(value = "properties", required = true)
    private WebhookProperties innerProperties = new WebhookProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of WebhookResourceInner class.
     */
    public WebhookResourceInner() {
    }

    /**
     * Get the innerProperties property: Webhook property.
     * 
     * @return the innerProperties value.
     */
    private WebhookProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the webhookId property: Webhook id in database.
     * 
     * @return the webhookId value.
     */
    public String webhookId() {
        return this.innerProperties() == null ? null : this.innerProperties().webhookId();
    }

    /**
     * Get the status property: Webhook status.
     * 
     * @return the status value.
     */
    public WebhookStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: Webhook status.
     * 
     * @param status the status value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withStatus(WebhookStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the tenantId property: Tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Get the sendAllEvents property: whether to send notification under any event.
     * 
     * @return the sendAllEvents value.
     */
    public SendAllEvents sendAllEvents() {
        return this.innerProperties() == null ? null : this.innerProperties().sendAllEvents();
    }

    /**
     * Set the sendAllEvents property: whether to send notification under any event.
     * 
     * @param sendAllEvents the sendAllEvents value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withSendAllEvents(SendAllEvents sendAllEvents) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withSendAllEvents(sendAllEvents);
        return this;
    }

    /**
     * Get the events property: under which event notification should be sent.
     * 
     * @return the events value.
     */
    public List<NotificationEvent> events() {
        return this.innerProperties() == null ? null : this.innerProperties().events();
    }

    /**
     * Set the events property: under which event notification should be sent.
     * 
     * @param events the events value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withEvents(List<NotificationEvent> events) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withEvents(events);
        return this;
    }

    /**
     * Get the payloadUrl property: webhook payload url.
     * 
     * @return the payloadUrl value.
     */
    public String payloadUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().payloadUrl();
    }

    /**
     * Set the payloadUrl property: webhook payload url.
     * 
     * @param payloadUrl the payloadUrl value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withPayloadUrl(String payloadUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withPayloadUrl(payloadUrl);
        return this;
    }

    /**
     * Get the contentType property: content type.
     * 
     * @return the contentType value.
     */
    public ContentType contentType() {
        return this.innerProperties() == null ? null : this.innerProperties().contentType();
    }

    /**
     * Set the contentType property: content type.
     * 
     * @param contentType the contentType value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withContentType(ContentType contentType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withContentType(contentType);
        return this;
    }

    /**
     * Get the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @return the webhookKey value.
     */
    public String webhookKey() {
        return this.innerProperties() == null ? null : this.innerProperties().webhookKey();
    }

    /**
     * Set the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @param webhookKey the webhookKey value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withWebhookKey(String webhookKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withWebhookKey(webhookKey);
        return this;
    }

    /**
     * Get the updateWebhookKey property: whether to update webhookKey.
     * 
     * @return the updateWebhookKey value.
     */
    public UpdateWebhookKey updateWebhookKey() {
        return this.innerProperties() == null ? null : this.innerProperties().updateWebhookKey();
    }

    /**
     * Set the updateWebhookKey property: whether to update webhookKey.
     * 
     * @param updateWebhookKey the updateWebhookKey value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withUpdateWebhookKey(UpdateWebhookKey updateWebhookKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withUpdateWebhookKey(updateWebhookKey);
        return this;
    }

    /**
     * Get the webhookKeyEnabled property: whether webhookKey is enabled.
     * 
     * @return the webhookKeyEnabled value.
     */
    public WebhookKeyEnabled webhookKeyEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().webhookKeyEnabled();
    }

    /**
     * Get the enableSslVerification property: whether to enable ssl verification.
     * 
     * @return the enableSslVerification value.
     */
    public EnableSslVerification enableSslVerification() {
        return this.innerProperties() == null ? null : this.innerProperties().enableSslVerification();
    }

    /**
     * Set the enableSslVerification property: whether to enable ssl verification.
     * 
     * @param enableSslVerification the enableSslVerification value to set.
     * @return the WebhookResourceInner object itself.
     */
    public WebhookResourceInner withEnableSslVerification(EnableSslVerification enableSslVerification) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookProperties();
        }
        this.innerProperties().withEnableSslVerification(enableSslVerification);
        return this;
    }

    /**
     * Get the deliveryStatus property: webhook deliveryStatus.
     * 
     * @return the deliveryStatus value.
     */
    public DeliveryStatus deliveryStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().deliveryStatus();
    }

    /**
     * Get the provisioningState property: Azure Resource Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model WebhookResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebhookResourceInner.class);
}
