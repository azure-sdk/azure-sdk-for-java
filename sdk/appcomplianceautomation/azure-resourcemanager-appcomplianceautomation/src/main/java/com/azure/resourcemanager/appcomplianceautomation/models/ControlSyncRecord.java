// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A class represent the control record synchronized from app compliance.
 */
@Fluent
public final class ControlSyncRecord {
    /*
     * The Id of the control. e.g. "Operational_Security_10"
     */
    @JsonProperty(value = "controlId")
    private String controlId;

    /*
     * Control status synchronized from app compliance.
     */
    @JsonProperty(value = "controlStatus")
    private String controlStatus;

    /**
     * Creates an instance of ControlSyncRecord class.
     */
    public ControlSyncRecord() {
    }

    /**
     * Get the controlId property: The Id of the control. e.g. "Operational_Security_10".
     * 
     * @return the controlId value.
     */
    public String controlId() {
        return this.controlId;
    }

    /**
     * Set the controlId property: The Id of the control. e.g. "Operational_Security_10".
     * 
     * @param controlId the controlId value to set.
     * @return the ControlSyncRecord object itself.
     */
    public ControlSyncRecord withControlId(String controlId) {
        this.controlId = controlId;
        return this;
    }

    /**
     * Get the controlStatus property: Control status synchronized from app compliance.
     * 
     * @return the controlStatus value.
     */
    public String controlStatus() {
        return this.controlStatus;
    }

    /**
     * Set the controlStatus property: Control status synchronized from app compliance.
     * 
     * @param controlStatus the controlStatus value to set.
     * @return the ControlSyncRecord object itself.
     */
    public ControlSyncRecord withControlStatus(String controlStatus) {
        this.controlStatus = controlStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
