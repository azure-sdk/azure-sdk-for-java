// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Scoping answer.
 */
@Fluent
public final class ScopingAnswer {
    /*
     * Question id.
     */
    @JsonProperty(value = "questionId", required = true)
    private String questionId;

    /*
     * Question answer value list.
     */
    @JsonProperty(value = "answers", required = true)
    private List<String> answers;

    /**
     * Creates an instance of ScopingAnswer class.
     */
    public ScopingAnswer() {
    }

    /**
     * Get the questionId property: Question id.
     * 
     * @return the questionId value.
     */
    public String questionId() {
        return this.questionId;
    }

    /**
     * Set the questionId property: Question id.
     * 
     * @param questionId the questionId value to set.
     * @return the ScopingAnswer object itself.
     */
    public ScopingAnswer withQuestionId(String questionId) {
        this.questionId = questionId;
        return this;
    }

    /**
     * Get the answers property: Question answer value list.
     * 
     * @return the answers value.
     */
    public List<String> answers() {
        return this.answers;
    }

    /**
     * Set the answers property: Question answer value list.
     * 
     * @param answers the answers value to set.
     * @return the ScopingAnswer object itself.
     */
    public ScopingAnswer withAnswers(List<String> answers) {
        this.answers = answers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (questionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property questionId in model ScopingAnswer"));
        }
        if (answers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property answers in model ScopingAnswer"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScopingAnswer.class);
}
