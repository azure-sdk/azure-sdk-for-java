// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager;
import com.azure.resourcemanager.appcomplianceautomation.models.CertSyncRecord;
import com.azure.resourcemanager.appcomplianceautomation.models.ControlSyncRecord;
import com.azure.resourcemanager.appcomplianceautomation.models.SyncCertRecordRequest;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsSyncCertRecordMockTests {
    @Test
    public void testSyncCertRecord() throws Exception {
        String responseStr = "{}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppComplianceAutomationManager manager = AppComplianceAutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagementError response = manager.reports()
            .syncCertRecord("juhdqazkmtgguwpi",
                new SyncCertRecordRequest().withCertRecord(new CertSyncRecord().withOfferGuid("ajc")
                    .withCertificationStatus("m")
                    .withIngestionStatus("hfcf")
                    .withControls(Arrays.asList(new ControlSyncRecord().withControlId("gkn").withControlStatus("vyi"),
                        new ControlSyncRecord().withControlId("qodfvp").withControlStatus("hoxgsgbpf")))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(new ManagementError(), response);
    }
}
