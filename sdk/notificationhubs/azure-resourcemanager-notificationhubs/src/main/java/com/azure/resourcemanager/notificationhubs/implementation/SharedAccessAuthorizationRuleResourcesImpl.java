// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.notificationhubs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.notificationhubs.fluent.SharedAccessAuthorizationRuleResourcesClient;
import com.azure.resourcemanager.notificationhubs.fluent.models.ResourceListKeysInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.SharedAccessAuthorizationRuleResourceInner;
import com.azure.resourcemanager.notificationhubs.models.PolicyKeyResource;
import com.azure.resourcemanager.notificationhubs.models.ResourceListKeys;
import com.azure.resourcemanager.notificationhubs.models.SharedAccessAuthorizationRuleResource;
import com.azure.resourcemanager.notificationhubs.models.SharedAccessAuthorizationRuleResources;

public final class SharedAccessAuthorizationRuleResourcesImpl implements SharedAccessAuthorizationRuleResources {
    private static final ClientLogger LOGGER = new ClientLogger(SharedAccessAuthorizationRuleResourcesImpl.class);

    private final SharedAccessAuthorizationRuleResourcesClient innerClient;

    private final com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager;

    public SharedAccessAuthorizationRuleResourcesImpl(SharedAccessAuthorizationRuleResourcesClient innerClient,
        com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SharedAccessAuthorizationRuleResource> getAuthorizationRuleWithResponse(String resourceGroupName,
        String namespaceName, String notificationHubName, String authorizationRuleName, Context context) {
        Response<SharedAccessAuthorizationRuleResourceInner> inner = this.serviceClient()
            .getAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
                authorizationRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SharedAccessAuthorizationRuleResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SharedAccessAuthorizationRuleResource getAuthorizationRule(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName) {
        SharedAccessAuthorizationRuleResourceInner inner = this.serviceClient()
            .getAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
        if (inner != null) {
            return new SharedAccessAuthorizationRuleResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteAuthorizationRuleWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, Context context) {
        return this.serviceClient()
            .deleteAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
                authorizationRuleName, context);
    }

    public void deleteAuthorizationRule(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName) {
        this.serviceClient()
            .deleteAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
    }

    public PagedIterable<SharedAccessAuthorizationRuleResource> listAuthorizationRules(String resourceGroupName,
        String namespaceName, String notificationHubName) {
        PagedIterable<SharedAccessAuthorizationRuleResourceInner> inner
            = this.serviceClient().listAuthorizationRules(resourceGroupName, namespaceName, notificationHubName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SharedAccessAuthorizationRuleResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SharedAccessAuthorizationRuleResource> listAuthorizationRules(String resourceGroupName,
        String namespaceName, String notificationHubName, Context context) {
        PagedIterable<SharedAccessAuthorizationRuleResourceInner> inner = this.serviceClient()
            .listAuthorizationRules(resourceGroupName, namespaceName, notificationHubName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SharedAccessAuthorizationRuleResourceImpl(inner1, this.manager()));
    }

    public Response<ResourceListKeys> listKeysWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, Context context) {
        Response<ResourceListKeysInner> inner = this.serviceClient()
            .listKeysWithResponse(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ResourceListKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceListKeys listKeys(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName) {
        ResourceListKeysInner inner = this.serviceClient()
            .listKeys(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
        if (inner != null) {
            return new ResourceListKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceListKeys> regenerateKeysWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, PolicyKeyResource parameters, Context context) {
        Response<ResourceListKeysInner> inner = this.serviceClient()
            .regenerateKeysWithResponse(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName,
                parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ResourceListKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceListKeys regenerateKeys(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName, PolicyKeyResource parameters) {
        ResourceListKeysInner inner = this.serviceClient()
            .regenerateKeys(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters);
        if (inner != null) {
            return new ResourceListKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SharedAccessAuthorizationRuleResource getAuthorizationRuleById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        String authorizationRuleName = ResourceManagerUtils.getValueFromIdByName(id, "authorizationRules");
        if (authorizationRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'authorizationRules'.", id)));
        }
        return this
            .getAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
                authorizationRuleName, Context.NONE)
            .getValue();
    }

    public Response<SharedAccessAuthorizationRuleResource> getAuthorizationRuleByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        String authorizationRuleName = ResourceManagerUtils.getValueFromIdByName(id, "authorizationRules");
        if (authorizationRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'authorizationRules'.", id)));
        }
        return this.getAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
            authorizationRuleName, context);
    }

    public void deleteAuthorizationRuleById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        String authorizationRuleName = ResourceManagerUtils.getValueFromIdByName(id, "authorizationRules");
        if (authorizationRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'authorizationRules'.", id)));
        }
        this.deleteAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
            authorizationRuleName, Context.NONE);
    }

    public Response<Void> deleteAuthorizationRuleByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        String authorizationRuleName = ResourceManagerUtils.getValueFromIdByName(id, "authorizationRules");
        if (authorizationRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'authorizationRules'.", id)));
        }
        return this.deleteAuthorizationRuleWithResponse(resourceGroupName, namespaceName, notificationHubName,
            authorizationRuleName, context);
    }

    private SharedAccessAuthorizationRuleResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.notificationhubs.NotificationhubsManager manager() {
        return this.serviceManager;
    }

    public SharedAccessAuthorizationRuleResourceImpl define(String name) {
        return new SharedAccessAuthorizationRuleResourceImpl(name, this.manager());
    }
}
