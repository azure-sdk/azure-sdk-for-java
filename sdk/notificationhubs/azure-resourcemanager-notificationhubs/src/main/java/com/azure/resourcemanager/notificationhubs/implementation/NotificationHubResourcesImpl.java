// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.notificationhubs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.notificationhubs.fluent.NotificationHubResourcesClient;
import com.azure.resourcemanager.notificationhubs.fluent.models.DebugSendResponseInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.NotificationHubResourceInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.PnsCredentialsResourceInner;
import com.azure.resourcemanager.notificationhubs.models.DebugSendResponse;
import com.azure.resourcemanager.notificationhubs.models.NotificationHubResource;
import com.azure.resourcemanager.notificationhubs.models.NotificationHubResources;
import com.azure.resourcemanager.notificationhubs.models.PnsCredentialsResource;

public final class NotificationHubResourcesImpl implements NotificationHubResources {
    private static final ClientLogger LOGGER = new ClientLogger(NotificationHubResourcesImpl.class);

    private final NotificationHubResourcesClient innerClient;

    private final com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager;

    public NotificationHubResourcesImpl(NotificationHubResourcesClient innerClient,
        com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NotificationHubResource> getWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, Context context) {
        Response<NotificationHubResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NotificationHubResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NotificationHubResource get(String resourceGroupName, String namespaceName, String notificationHubName) {
        NotificationHubResourceInner inner
            = this.serviceClient().get(resourceGroupName, namespaceName, notificationHubName);
        if (inner != null) {
            return new NotificationHubResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String namespaceName, String notificationHubName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
    }

    public void delete(String resourceGroupName, String namespaceName, String notificationHubName) {
        this.serviceClient().delete(resourceGroupName, namespaceName, notificationHubName);
    }

    public PagedIterable<NotificationHubResource> list(String resourceGroupName, String namespaceName) {
        PagedIterable<NotificationHubResourceInner> inner = this.serviceClient().list(resourceGroupName, namespaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NotificationHubResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<NotificationHubResource> list(String resourceGroupName, String namespaceName, String skipToken,
        Integer top, Context context) {
        PagedIterable<NotificationHubResourceInner> inner
            = this.serviceClient().list(resourceGroupName, namespaceName, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NotificationHubResourceImpl(inner1, this.manager()));
    }

    public Response<DebugSendResponse> debugSendWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, Context context) {
        Response<DebugSendResponseInner> inner = this.serviceClient()
            .debugSendWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DebugSendResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DebugSendResponse debugSend(String resourceGroupName, String namespaceName, String notificationHubName) {
        DebugSendResponseInner inner
            = this.serviceClient().debugSend(resourceGroupName, namespaceName, notificationHubName);
        if (inner != null) {
            return new DebugSendResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PnsCredentialsResource> getPnsCredentialsWithResponse(String resourceGroupName,
        String namespaceName, String notificationHubName, Context context) {
        Response<PnsCredentialsResourceInner> inner = this.serviceClient()
            .getPnsCredentialsWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PnsCredentialsResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PnsCredentialsResource getPnsCredentials(String resourceGroupName, String namespaceName,
        String notificationHubName) {
        PnsCredentialsResourceInner inner
            = this.serviceClient().getPnsCredentials(resourceGroupName, namespaceName, notificationHubName);
        if (inner != null) {
            return new PnsCredentialsResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NotificationHubResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, notificationHubName, Context.NONE).getValue();
    }

    public Response<NotificationHubResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, namespaceName, notificationHubName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String notificationHubName = ResourceManagerUtils.getValueFromIdByName(id, "notificationHubs");
        if (notificationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'notificationHubs'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, namespaceName, notificationHubName, context);
    }

    private NotificationHubResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.notificationhubs.NotificationhubsManager manager() {
        return this.serviceManager;
    }

    public NotificationHubResourceImpl define(String name) {
        return new NotificationHubResourceImpl(name, this.manager());
    }
}
