// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.notificationhubs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.notificationhubs.fluent.NamespaceResourcesClient;
import com.azure.resourcemanager.notificationhubs.fluent.models.CheckAvailabilityResultInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.NamespaceResourceInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.PnsCredentialsResourceInner;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityParameters;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityResult;
import com.azure.resourcemanager.notificationhubs.models.NamespaceResource;
import com.azure.resourcemanager.notificationhubs.models.NamespaceResources;
import com.azure.resourcemanager.notificationhubs.models.PnsCredentialsResource;

public final class NamespaceResourcesImpl implements NamespaceResources {
    private static final ClientLogger LOGGER = new ClientLogger(NamespaceResourcesImpl.class);

    private final NamespaceResourcesClient innerClient;

    private final com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager;

    public NamespaceResourcesImpl(NamespaceResourcesClient innerClient,
        com.azure.resourcemanager.notificationhubs.NotificationhubsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NamespaceResource> getByResourceGroupWithResponse(String resourceGroupName, String namespaceName,
        Context context) {
        Response<NamespaceResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, namespaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NamespaceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NamespaceResource getByResourceGroup(String resourceGroupName, String namespaceName) {
        NamespaceResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, namespaceName);
        if (inner != null) {
            return new NamespaceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String namespaceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, namespaceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String namespaceName) {
        this.serviceClient().delete(resourceGroupName, namespaceName);
    }

    public PagedIterable<NamespaceResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NamespaceResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<NamespaceResource> listByResourceGroup(String resourceGroupName, String skipToken, Integer top,
        Context context) {
        PagedIterable<NamespaceResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<NamespaceResource> list() {
        PagedIterable<NamespaceResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<NamespaceResource> list(String skipToken, Integer top, Context context) {
        PagedIterable<NamespaceResourceInner> inner = this.serviceClient().list(skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceResourceImpl(inner1, this.manager()));
    }

    public Response<CheckAvailabilityResult> checkNotificationHubAvailabilityWithResponse(String resourceGroupName,
        String namespaceName, CheckAvailabilityParameters parameters, Context context) {
        Response<CheckAvailabilityResultInner> inner = this.serviceClient()
            .checkNotificationHubAvailabilityWithResponse(resourceGroupName, namespaceName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckAvailabilityResult checkNotificationHubAvailability(String resourceGroupName, String namespaceName,
        CheckAvailabilityParameters parameters) {
        CheckAvailabilityResultInner inner
            = this.serviceClient().checkNotificationHubAvailability(resourceGroupName, namespaceName, parameters);
        if (inner != null) {
            return new CheckAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PnsCredentialsResource> getPnsCredentialsWithResponse(String resourceGroupName,
        String namespaceName, Context context) {
        Response<PnsCredentialsResourceInner> inner
            = this.serviceClient().getPnsCredentialsWithResponse(resourceGroupName, namespaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PnsCredentialsResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PnsCredentialsResource getPnsCredentials(String resourceGroupName, String namespaceName) {
        PnsCredentialsResourceInner inner = this.serviceClient().getPnsCredentials(resourceGroupName, namespaceName);
        if (inner != null) {
            return new PnsCredentialsResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NamespaceResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, namespaceName, Context.NONE).getValue();
    }

    public Response<NamespaceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, namespaceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, namespaceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, namespaceName, context);
    }

    private NamespaceResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.notificationhubs.NotificationhubsManager manager() {
        return this.serviceManager;
    }

    public NamespaceResourceImpl define(String name) {
        return new NamespaceResourceImpl(name, this.manager());
    }
}
