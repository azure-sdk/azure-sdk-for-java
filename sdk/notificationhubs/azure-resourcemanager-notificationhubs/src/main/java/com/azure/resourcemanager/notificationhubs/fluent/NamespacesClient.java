// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.notificationhubs.fluent.models.ResourceListKeysInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.SharedAccessAuthorizationRuleResourceInner;
import com.azure.resourcemanager.notificationhubs.models.PolicyKeyResource;

/**
 * An instance of this class provides access to all the operations defined in NamespacesClient.
 */
public interface NamespacesClient {
    /**
     * Gets an authorization rule for a namespace by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a namespace by name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SharedAccessAuthorizationRuleResourceInner> getAuthorizationRuleWithResponse(String resourceGroupName,
        String namespaceName, String authorizationRuleName, Context context);

    /**
     * Gets an authorization rule for a namespace by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a namespace by name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SharedAccessAuthorizationRuleResourceInner getAuthorizationRule(String resourceGroupName, String namespaceName,
        String authorizationRuleName);

    /**
     * Creates an authorization rule for a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param parameters Request content.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for POST requests that return single SharedAccessAuthorizationRule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SharedAccessAuthorizationRuleResourceInner> createOrUpdateAuthorizationRuleWithResponse(
        String resourceGroupName, String namespaceName, String authorizationRuleName,
        SharedAccessAuthorizationRuleResourceInner parameters, Context context);

    /**
     * Creates an authorization rule for a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param parameters Request content.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for POST requests that return single SharedAccessAuthorizationRule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SharedAccessAuthorizationRuleResourceInner createOrUpdateAuthorizationRule(String resourceGroupName,
        String namespaceName, String authorizationRuleName, SharedAccessAuthorizationRuleResourceInner parameters);

    /**
     * Deletes a namespace authorization rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteAuthorizationRuleWithResponse(String resourceGroupName, String namespaceName,
        String authorizationRuleName, Context context);

    /**
     * Deletes a namespace authorization rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteAuthorizationRule(String resourceGroupName, String namespaceName, String authorizationRuleName);

    /**
     * Gets the authorization rules for a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorization rules for a namespace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SharedAccessAuthorizationRuleResourceInner> listAuthorizationRules(String resourceGroupName,
        String namespaceName);

    /**
     * Gets the authorization rules for a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorization rules for a namespace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SharedAccessAuthorizationRuleResourceInner> listAuthorizationRules(String resourceGroupName,
        String namespaceName, Context context);

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Primary and Secondary ConnectionStrings to the namespace along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ResourceListKeysInner> listKeysWithResponse(String resourceGroupName, String namespaceName,
        String authorizationRuleName, Context context);

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Primary and Secondary ConnectionStrings to the namespace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResourceListKeysInner listKeys(String resourceGroupName, String namespaceName, String authorizationRuleName);

    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param parameters Request content.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the POST request that returns Namespace or NotificationHub access keys (connection strings)
     * along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ResourceListKeysInner> regenerateKeysWithResponse(String resourceGroupName, String namespaceName,
        String authorizationRuleName, PolicyKeyResource parameters, Context context);

    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the NamespaceResource.
     * @param authorizationRuleName The name of the SharedAccessAuthorizationRuleResource.
     * @param parameters Request content.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the POST request that returns Namespace or NotificationHub access keys (connection strings).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResourceListKeysInner regenerateKeys(String resourceGroupName, String namespaceName, String authorizationRuleName,
        PolicyKeyResource parameters);
}
