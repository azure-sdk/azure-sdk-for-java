// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.resourcemanager.astro.models.AzureResourceManagerLegacyManagedServiceIdentityV4Update;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationPropertiesUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetailsUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetailsUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetailsUpdate;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResource;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdateProperties;
import com.azure.resourcemanager.astro.models.RenewalMode;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations Update.
 */
public final class OrganizationsUpdateSamples {
    /*
     * x-ms-original-file: specification/liftrastronomer/resource-manager/Astronomer.Astro/stable/2024-08-27/examples/
     * Organizations_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_Update - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to AstroManager.
     */
    public static void
        organizationsUpdateGeneratedByMaximumSetRule(com.azure.resourcemanager.astro.AstroManager manager) {
        OrganizationResource resource = manager.organizations()
            .getByResourceGroupWithResponse("rgastronomer", "U.1-:7", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf())
            .withIdentity(
                new AzureResourceManagerLegacyManagedServiceIdentityV4Update().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf()))
            .withProperties(new OrganizationResourceUpdateProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetailsUpdate().withSubscriptionId("ujl")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new LiftrBaseOfferDetailsUpdate().withPublisherId("bywzycdrucjkx")
                        .withOfferId("aljpaprqzpnivwol")
                        .withPlanId("fcpnstrwetlrajanh")
                        .withPlanName("wjgnlhqqkdi")
                        .withTermUnit("pvpk")
                        .withTermId("xg")
                        .withRenewalMode(RenewalMode.AUTO)))
                .withUser(new LiftrBaseUserDetailsUpdate().withFirstName("wyoaxocyjfpgicvketuiayfxrxq")
                    .withLastName("vlwybhfayupjpwfhy")
                    .withEmailAddress(".K_@e7N-g1.xjqnbPs")
                    .withUpn("ezefcwbsbgcxrdiixmzphibt")
                    .withPhoneNumber("eibhsslqzufgshuzrjjyymsb"))
                .withPartnerOrganizationProperties(new LiftrBaseDataPartnerOrganizationPropertiesUpdate()
                    .withOrganizationId("linzwcqhrpqrxpnghxjnxzetfdps")
                    .withWorkspaceId("tmmxzlagmdrc")
                    .withOrganizationName("U.1-:7")
                    .withWorkspaceName("9.:06")
                    .withSingleSignOnProperties(
                        new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.INITIAL)
                            .withEnterpriseAppId("jspfkoxolosmvyixpktbwyoqrx")
                            .withSingleSignOnUrl("aatouxlmqqizijszlu")
                            .withAadDomains(Arrays.asList("gwzhrfmnhbeitagjdlzw")))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
