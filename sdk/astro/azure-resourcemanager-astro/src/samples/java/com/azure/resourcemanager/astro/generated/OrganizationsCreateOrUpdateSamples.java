// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.RenewalMode;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations CreateOrUpdate.
 */
public final class OrganizationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/liftrastronomer/resource-manager/Astronomer.Astro/stable/2024-08-27/examples/
     * Organizations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to AstroManager.
     */
    public static void
        organizationsCreateOrUpdateGeneratedByMaximumSetRule(com.azure.resourcemanager.astro.AstroManager manager) {
        manager.organizations()
            .define("U.1-:7")
            .withRegion("pgfkugslgnsxeqpjs")
            .withExistingResourceGroup("rgastronomer")
            .withTags(mapOf())
            .withProperties(new LiftrBaseDataOrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("emasc")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("kt")
                        .withOfferId("tvidibzbxevtvnrdp")
                        .withPlanId("lwcvzdqecwkeracahmixnh")
                        .withPlanName("d")
                        .withTermUnit("rs")
                        .withTermId("kopnnjsp")
                        .withRenewalMode(RenewalMode.AUTO)))
                .withUser(new LiftrBaseUserDetails().withFirstName("ucowvrccqpqpkdg")
                    .withLastName("fwwtnwggrtibghoijfzajrhgyo")
                    .withEmailAddress(".K_@e7N-g1.xjqnbPs")
                    .withUpn("zbdgbbqg")
                    .withPhoneNumber("brnngpezmqecvflklbhsibq"))
                .withPartnerOrganizationProperties(
                    new LiftrBaseDataPartnerOrganizationProperties().withOrganizationId("juomtfzwkjwnhhpodfnrqdv")
                        .withWorkspaceId("nnryjcmiohmkbvhngfgxigpodvhl")
                        .withOrganizationName("U.1-:7")
                        .withWorkspaceName("9.:06")
                        .withSingleSignOnProperties(
                            new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.INITIAL)
                                .withEnterpriseAppId("srkwxktx")
                                .withSingleSignOnUrl("l")
                                .withAadDomains(Arrays.asList("fcnqoizqxcdclmy")))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
