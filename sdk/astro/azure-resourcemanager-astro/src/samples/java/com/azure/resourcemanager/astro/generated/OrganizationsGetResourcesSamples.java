// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.resourcemanager.astro.models.GetResourcesRequest;
import com.azure.resourcemanager.astro.models.PageInfo;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations GetResources.
 */
public final class OrganizationsGetResourcesSamples {
    /*
     * x-ms-original-file:
     * specification/liftrastronomer/resource-manager/Astronomer.Astro/preview/2024-11-01-preview/examples/
     * Organizations_GetResources_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_GetResources_MaximumSet.
     * 
     * @param manager Entry point to AstroManager.
     */
    public static void organizationsGetResourcesMaximumSet(com.azure.resourcemanager.astro.AstroManager manager) {
        manager.organizations()
            .getResourcesWithResponse("rgastronomer", "org-name",
                new GetResourcesRequest().withSearchParamsDictionary(mapOf("key136", "fakeTokenPlaceholder"))
                    .withPageInfo(new PageInfo().withOffset(24L).withLimit(21L).withTotalCount(24L)),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
