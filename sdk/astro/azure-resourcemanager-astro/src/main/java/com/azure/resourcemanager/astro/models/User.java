// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * User object.
 */
@Fluent
public final class User implements JsonSerializable<User> {
    /*
     * User id
     */
    private String id;

    /*
     * user type
     */
    private String type;

    /*
     * email of User
     */
    private String email;

    /*
     * Full name
     */
    private String fullName;

    /*
     * Auth type
     */
    private String authType;

    /*
     * User status
     */
    private String status;

    /*
     * avatar url
     */
    private String avatarUrl;

    /*
     * roles assigned to user
     */
    private List<Role> roles;

    /*
     * User metadata
     */
    private Map<String, String> metadataUser;

    /**
     * Creates an instance of User class.
     */
    public User() {
    }

    /**
     * Get the id property: User id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: User id.
     * 
     * @param id the id value to set.
     * @return the User object itself.
     */
    public User withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: user type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: user type.
     * 
     * @param type the type value to set.
     * @return the User object itself.
     */
    public User withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the email property: email of User.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: email of User.
     * 
     * @param email the email value to set.
     * @return the User object itself.
     */
    public User withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the fullName property: Full name.
     * 
     * @return the fullName value.
     */
    public String fullName() {
        return this.fullName;
    }

    /**
     * Set the fullName property: Full name.
     * 
     * @param fullName the fullName value to set.
     * @return the User object itself.
     */
    public User withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }

    /**
     * Get the authType property: Auth type.
     * 
     * @return the authType value.
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Set the authType property: Auth type.
     * 
     * @param authType the authType value to set.
     * @return the User object itself.
     */
    public User withAuthType(String authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Get the status property: User status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: User status.
     * 
     * @param status the status value to set.
     * @return the User object itself.
     */
    public User withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the avatarUrl property: avatar url.
     * 
     * @return the avatarUrl value.
     */
    public String avatarUrl() {
        return this.avatarUrl;
    }

    /**
     * Set the avatarUrl property: avatar url.
     * 
     * @param avatarUrl the avatarUrl value to set.
     * @return the User object itself.
     */
    public User withAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
        return this;
    }

    /**
     * Get the roles property: roles assigned to user.
     * 
     * @return the roles value.
     */
    public List<Role> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: roles assigned to user.
     * 
     * @param roles the roles value to set.
     * @return the User object itself.
     */
    public User withRoles(List<Role> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Get the metadataUser property: User metadata.
     * 
     * @return the metadataUser value.
     */
    public Map<String, String> metadataUser() {
        return this.metadataUser;
    }

    /**
     * Set the metadataUser property: User metadata.
     * 
     * @param metadataUser the metadataUser value to set.
     * @return the User object itself.
     */
    public User withMetadataUser(Map<String, String> metadataUser) {
        this.metadataUser = metadataUser;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (email() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property email in model User"));
        }
        if (roles() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property roles in model User"));
        } else {
            roles().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(User.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("fullName", this.fullName);
        jsonWriter.writeStringField("authType", this.authType);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("avatarUrl", this.avatarUrl);
        jsonWriter.writeMapField("metadataUser", this.metadataUser, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of User from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of User if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the User.
     */
    public static User fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            User deserializedUser = new User();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("email".equals(fieldName)) {
                    deserializedUser.email = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    List<Role> roles = reader.readArray(reader1 -> Role.fromJson(reader1));
                    deserializedUser.roles = roles;
                } else if ("id".equals(fieldName)) {
                    deserializedUser.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedUser.type = reader.getString();
                } else if ("fullName".equals(fieldName)) {
                    deserializedUser.fullName = reader.getString();
                } else if ("authType".equals(fieldName)) {
                    deserializedUser.authType = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedUser.status = reader.getString();
                } else if ("avatarUrl".equals(fieldName)) {
                    deserializedUser.avatarUrl = reader.getString();
                } else if ("metadataUser".equals(fieldName)) {
                    Map<String, String> metadataUser = reader.readMap(reader1 -> reader1.getString());
                    deserializedUser.metadataUser = metadataUser;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUser;
        });
    }
}
