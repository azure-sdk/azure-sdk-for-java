// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Role object.
 */
@Fluent
public final class Role implements JsonSerializable<Role> {
    /*
     * Role id
     */
    private String id;

    /*
     * Role name
     */
    private String name;

    /*
     * Role type
     */
    private String type;

    /*
     * description of role
     */
    private String description;

    /*
     * scope at which roles are assigned
     */
    private String scope;

    /**
     * Creates an instance of Role class.
     */
    public Role() {
    }

    /**
     * Get the id property: Role id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Role id.
     * 
     * @param id the id value to set.
     * @return the Role object itself.
     */
    public Role withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Role name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Role name.
     * 
     * @param name the name value to set.
     * @return the Role object itself.
     */
    public Role withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Role type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Role type.
     * 
     * @param type the type value to set.
     * @return the Role object itself.
     */
    public Role withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the description property: description of role.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: description of role.
     * 
     * @param description the description value to set.
     * @return the Role object itself.
     */
    public Role withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the scope property: scope at which roles are assigned.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: scope at which roles are assigned.
     * 
     * @param scope the scope value to set.
     * @return the Role object itself.
     */
    public Role withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Role"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Role.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Role from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Role if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Role.
     */
    public static Role fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Role deserializedRole = new Role();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRole.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedRole.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRole.type = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedRole.description = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedRole.scope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRole;
        });
    }
}
