// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.astro.fluent.models.GetResourcesSuccessResponseInner;
import com.azure.resourcemanager.astro.fluent.models.GetRolesSuccessResponseInner;
import com.azure.resourcemanager.astro.fluent.models.GetUsersSuccessResponseInner;
import com.azure.resourcemanager.astro.fluent.models.ManageRolesModelInner;
import com.azure.resourcemanager.astro.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.astro.models.GetResourcesRequest;
import com.azure.resourcemanager.astro.models.GetRolesRequest;
import com.azure.resourcemanager.astro.models.GetUsersRequest;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdate;
import com.azure.resourcemanager.astro.models.RemoveUserRequest;

/**
 * An instance of this class provides access to all the operations defined in OrganizationsClient.
 */
public interface OrganizationsClient {
    /**
     * List OrganizationResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OrganizationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OrganizationResourceInner> list();

    /**
     * List OrganizationResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OrganizationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OrganizationResourceInner> list(Context context);

    /**
     * List OrganizationResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OrganizationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OrganizationResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List OrganizationResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OrganizationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OrganizationResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OrganizationResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OrganizationResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String organizationName, Context context);

    /**
     * Get a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OrganizationResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrganizationResourceInner getByResourceGroup(String resourceGroupName, String organizationName);

    /**
     * Create a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OrganizationResourceInner>, OrganizationResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String organizationName, OrganizationResourceInner resource);

    /**
     * Create a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OrganizationResourceInner>, OrganizationResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String organizationName, OrganizationResourceInner resource, Context context);

    /**
     * Create a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrganizationResourceInner createOrUpdate(String resourceGroupName, String organizationName,
        OrganizationResourceInner resource);

    /**
     * Create a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrganizationResourceInner createOrUpdate(String resourceGroupName, String organizationName,
        OrganizationResourceInner resource, Context context);

    /**
     * Update a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OrganizationResourceInner>, OrganizationResourceInner> beginUpdate(String resourceGroupName,
        String organizationName, OrganizationResourceUpdate properties);

    /**
     * Update a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OrganizationResourceInner>, OrganizationResourceInner> beginUpdate(String resourceGroupName,
        String organizationName, OrganizationResourceUpdate properties, Context context);

    /**
     * Update a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrganizationResourceInner update(String resourceGroupName, String organizationName,
        OrganizationResourceUpdate properties);

    /**
     * Update a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return organization Resource by Astronomer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OrganizationResourceInner update(String resourceGroupName, String organizationName,
        OrganizationResourceUpdate properties, Context context);

    /**
     * Delete a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName);

    /**
     * Delete a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName, Context context);

    /**
     * Delete a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String organizationName);

    /**
     * Delete a OrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String organizationName, Context context);

    /**
     * list of available resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetResourcesRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get resources API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetResourcesSuccessResponseInner> getResourcesWithResponse(String resourceGroupName,
        String organizationName, GetResourcesRequest properties, Context context);

    /**
     * list of available resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetResourcesRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get resources API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetResourcesSuccessResponseInner getResources(String resourceGroupName, String organizationName,
        GetResourcesRequest properties);

    /**
     * list of available roles.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetRolesRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get roles API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetRolesSuccessResponseInner> getRolesWithResponse(String resourceGroupName, String organizationName,
        GetRolesRequest properties, Context context);

    /**
     * list of available roles.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetRolesRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get roles API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetRolesSuccessResponseInner getRoles(String resourceGroupName, String organizationName,
        GetRolesRequest properties);

    /**
     * list of users with roles.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetUsersRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get users API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetUsersSuccessResponseInner> getUsersWithResponse(String resourceGroupName, String organizationName,
        GetUsersRequest properties, Context context);

    /**
     * list of users with roles.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of GetUsersRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response model for get users API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetUsersSuccessResponseInner getUsers(String resourceGroupName, String organizationName,
        GetUsersRequest properties);

    /**
     * manage roles of users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of ManageRolesRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request model for manage roles API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ManageRolesModelInner> manageRolesWithResponse(String resourceGroupName, String organizationName,
        ManageRolesModelInner properties, Context context);

    /**
     * manage roles of users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of ManageRolesRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request model for manage roles API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManageRolesModelInner manageRoles(String resourceGroupName, String organizationName,
        ManageRolesModelInner properties);

    /**
     * remove user.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of RemoveUserRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> removeUserWithResponse(String resourceGroupName, String organizationName,
        RemoveUserRequest properties, Context context);

    /**
     * remove user.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param properties properties of RemoveUserRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeUser(String resourceGroupName, String organizationName, RemoveUserRequest properties);
}
