// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.astro.models.Role;
import com.azure.resourcemanager.astro.models.User;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Request model for manage roles API.
 */
@Fluent
public final class ManageRolesModelInner implements JsonSerializable<ManageRolesModelInner> {
    /*
     * Users object array
     */
    private List<User> principals;

    /*
     * Role object array
     */
    private List<Role> roles;

    /*
     * Additional data to assign roles
     */
    private Map<String, String> additionalData;

    /**
     * Creates an instance of ManageRolesModelInner class.
     */
    public ManageRolesModelInner() {
    }

    /**
     * Get the principals property: Users object array.
     * 
     * @return the principals value.
     */
    public List<User> principals() {
        return this.principals;
    }

    /**
     * Set the principals property: Users object array.
     * 
     * @param principals the principals value to set.
     * @return the ManageRolesModelInner object itself.
     */
    public ManageRolesModelInner withPrincipals(List<User> principals) {
        this.principals = principals;
        return this;
    }

    /**
     * Get the roles property: Role object array.
     * 
     * @return the roles value.
     */
    public List<Role> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: Role object array.
     * 
     * @param roles the roles value to set.
     * @return the ManageRolesModelInner object itself.
     */
    public ManageRolesModelInner withRoles(List<Role> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Get the additionalData property: Additional data to assign roles.
     * 
     * @return the additionalData value.
     */
    public Map<String, String> additionalData() {
        return this.additionalData;
    }

    /**
     * Set the additionalData property: Additional data to assign roles.
     * 
     * @param additionalData the additionalData value to set.
     * @return the ManageRolesModelInner object itself.
     */
    public ManageRolesModelInner withAdditionalData(Map<String, String> additionalData) {
        this.additionalData = additionalData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principals() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property principals in model ManageRolesModelInner"));
        } else {
            principals().forEach(e -> e.validate());
        }
        if (roles() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property roles in model ManageRolesModelInner"));
        } else {
            roles().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManageRolesModelInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("principals", this.principals, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("additionalData", this.additionalData,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManageRolesModelInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManageRolesModelInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManageRolesModelInner.
     */
    public static ManageRolesModelInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManageRolesModelInner deserializedManageRolesModelInner = new ManageRolesModelInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principals".equals(fieldName)) {
                    List<User> principals = reader.readArray(reader1 -> User.fromJson(reader1));
                    deserializedManageRolesModelInner.principals = principals;
                } else if ("roles".equals(fieldName)) {
                    List<Role> roles = reader.readArray(reader1 -> Role.fromJson(reader1));
                    deserializedManageRolesModelInner.roles = roles;
                } else if ("additionalData".equals(fieldName)) {
                    Map<String, String> additionalData = reader.readMap(reader1 -> reader1.getString());
                    deserializedManageRolesModelInner.additionalData = additionalData;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManageRolesModelInner;
        });
    }
}
