// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.webpubsub.fluent.WebPubSubReplicaOperationsClient;
import com.azure.resourcemanager.webpubsub.fluent.models.SharedPrivateLinkResourceInner;
import com.azure.resourcemanager.webpubsub.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubReplicaOperations;

public final class WebPubSubReplicaOperationsImpl implements WebPubSubReplicaOperations {
    private static final ClientLogger LOGGER = new ClientLogger(WebPubSubReplicaOperationsImpl.class);

    private final WebPubSubReplicaOperationsClient innerClient;

    private final com.azure.resourcemanager.webpubsub.WebPubSubManager serviceManager;

    public WebPubSubReplicaOperationsImpl(WebPubSubReplicaOperationsClient innerClient,
        com.azure.resourcemanager.webpubsub.WebPubSubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SharedPrivateLinkResource> sharedPrivateLinkResourcesList(String resourceGroupName,
        String resourceName, String replicaName) {
        PagedIterable<SharedPrivateLinkResourceInner> inner
            = this.serviceClient().sharedPrivateLinkResourcesList(resourceGroupName, resourceName, replicaName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SharedPrivateLinkResource> sharedPrivateLinkResourcesList(String resourceGroupName,
        String resourceName, String replicaName, Context context) {
        PagedIterable<SharedPrivateLinkResourceInner> inner = this.serviceClient()
            .sharedPrivateLinkResourcesList(resourceGroupName, resourceName, replicaName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public Response<SharedPrivateLinkResource> sharedPrivateLinkResourcesGetWithResponse(String resourceGroupName,
        String resourceName, String replicaName, String sharedPrivateLinkResourceName, Context context) {
        Response<SharedPrivateLinkResourceInner> inner = this.serviceClient().sharedPrivateLinkResourcesGetWithResponse(
            resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SharedPrivateLinkResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource sharedPrivateLinkResourcesGet(String resourceGroupName, String resourceName,
        String replicaName, String sharedPrivateLinkResourceName) {
        SharedPrivateLinkResourceInner inner = this.serviceClient().sharedPrivateLinkResourcesGet(resourceGroupName,
            resourceName, replicaName, sharedPrivateLinkResourceName);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource sharedPrivateLinkResourcesGetById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "webPubSub");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'webPubSub'.", id)));
        }
        String replicaName = ResourceManagerUtils.getValueFromIdByName(id, "replicas");
        if (replicaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicas'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        return this.sharedPrivateLinkResourcesGetWithResponse(resourceGroupName, resourceName, replicaName,
            sharedPrivateLinkResourceName, Context.NONE).getValue();
    }

    public Response<SharedPrivateLinkResource> sharedPrivateLinkResourcesGetByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "webPubSub");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'webPubSub'.", id)));
        }
        String replicaName = ResourceManagerUtils.getValueFromIdByName(id, "replicas");
        if (replicaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicas'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        return this.sharedPrivateLinkResourcesGetWithResponse(resourceGroupName, resourceName, replicaName,
            sharedPrivateLinkResourceName, context);
    }

    private WebPubSubReplicaOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.webpubsub.WebPubSubManager manager() {
        return this.serviceManager;
    }

    public SharedPrivateLinkResourceImpl define(String name) {
        return new SharedPrivateLinkResourceImpl(name, this.manager());
    }
}
