// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.mongocluster.fluent.models.MongoClusterUpdateProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * The type used for update operations of the MongoCluster.
 */
@Fluent
public final class MongoClusterUpdate {
    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * The updatable properties of the MongoCluster.
     */
    @JsonProperty(value = "properties")
    private MongoClusterUpdateProperties innerProperties;

    /**
     * Creates an instance of MongoClusterUpdate class.
     */
    public MongoClusterUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The updatable properties of the MongoCluster.
     * 
     * @return the innerProperties value.
     */
    private MongoClusterUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.innerProperties() == null ? null : this.innerProperties().administratorLogin();
    }

    /**
     * Set the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @param administratorLogin the administratorLogin value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withAdministratorLogin(String administratorLogin) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterUpdateProperties();
        }
        this.innerProperties().withAdministratorLogin(administratorLogin);
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.innerProperties() == null ? null : this.innerProperties().administratorLoginPassword();
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withAdministratorLoginPassword(String administratorLoginPassword) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterUpdateProperties();
        }
        this.innerProperties().withAdministratorLoginPassword(administratorLoginPassword);
        return this;
    }

    /**
     * Get the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().serverVersion();
    }

    /**
     * Set the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withServerVersion(String serverVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterUpdateProperties();
        }
        this.innerProperties().withServerVersion(serverVersion);
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this mongo cluster.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterUpdateProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Get the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @return the nodeGroupSpecs value.
     */
    public List<NodeGroupSpec> nodeGroupSpecs() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeGroupSpecs();
    }

    /**
     * Set the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @param nodeGroupSpecs the nodeGroupSpecs value to set.
     * @return the MongoClusterUpdate object itself.
     */
    public MongoClusterUpdate withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterUpdateProperties();
        }
        this.innerProperties().withNodeGroupSpecs(nodeGroupSpecs);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
