// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mongocluster.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mongocluster.fluent.models.MongoClusterInner;
import com.azure.resourcemanager.mongocluster.models.AzureResourceManagerPrivateEndpointConnection;
import com.azure.resourcemanager.mongocluster.models.CreateMode;
import com.azure.resourcemanager.mongocluster.models.ListConnectionStringsResult;
import com.azure.resourcemanager.mongocluster.models.MongoCluster;
import com.azure.resourcemanager.mongocluster.models.MongoClusterRestoreParameters;
import com.azure.resourcemanager.mongocluster.models.MongoClusterStatus;
import com.azure.resourcemanager.mongocluster.models.MongoClusterUpdate;
import com.azure.resourcemanager.mongocluster.models.NodeGroupSpec;
import com.azure.resourcemanager.mongocluster.models.ProvisioningState;
import com.azure.resourcemanager.mongocluster.models.PublicNetworkAccess;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class MongoClusterImpl implements MongoCluster, MongoCluster.Definition, MongoCluster.Update {
    private MongoClusterInner innerObject;

    private final com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public CreateMode createMode() {
        return this.innerModel().createMode();
    }

    public MongoClusterRestoreParameters restoreParameters() {
        return this.innerModel().restoreParameters();
    }

    public String administratorLogin() {
        return this.innerModel().administratorLogin();
    }

    public String administratorLoginPassword() {
        return this.innerModel().administratorLoginPassword();
    }

    public String serverVersion() {
        return this.innerModel().serverVersion();
    }

    public String connectionString() {
        return this.innerModel().connectionString();
    }

    public String earliestRestoreTime() {
        return this.innerModel().earliestRestoreTime();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public MongoClusterStatus clusterStatus() {
        return this.innerModel().clusterStatus();
    }

    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public List<NodeGroupSpec> nodeGroupSpecs() {
        List<NodeGroupSpec> inner = this.innerModel().nodeGroupSpecs();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<AzureResourceManagerPrivateEndpointConnection> privateEndpointConnections() {
        List<AzureResourceManagerPrivateEndpointConnection> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MongoClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mongocluster.MongoClusterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String mongoClusterName;

    private MongoClusterUpdate updateProperties;

    public MongoClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MongoCluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .createOrUpdate(resourceGroupName, mongoClusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public MongoCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .createOrUpdate(resourceGroupName, mongoClusterName, this.innerModel(), context);
        return this;
    }

    MongoClusterImpl(String name, com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager) {
        this.innerObject = new MongoClusterInner();
        this.serviceManager = serviceManager;
        this.mongoClusterName = name;
    }

    public MongoClusterImpl update() {
        this.updateProperties = new MongoClusterUpdate();
        return this;
    }

    public MongoCluster apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .update(resourceGroupName, mongoClusterName, updateProperties, Context.NONE);
        return this;
    }

    public MongoCluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .update(resourceGroupName, mongoClusterName, updateProperties, context);
        return this;
    }

    MongoClusterImpl(MongoClusterInner innerObject,
        com.azure.resourcemanager.mongocluster.MongoClusterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.mongoClusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "mongoClusters");
    }

    public MongoCluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .getByResourceGroupWithResponse(resourceGroupName, mongoClusterName, Context.NONE)
            .getValue();
        return this;
    }

    public MongoCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoClusters()
            .getByResourceGroupWithResponse(resourceGroupName, mongoClusterName, context)
            .getValue();
        return this;
    }

    public Response<ListConnectionStringsResult> listConnectionStringsWithResponse(Context context) {
        return serviceManager.mongoClusters()
            .listConnectionStringsWithResponse(resourceGroupName, mongoClusterName, context);
    }

    public ListConnectionStringsResult listConnectionStrings() {
        return serviceManager.mongoClusters().listConnectionStrings(resourceGroupName, mongoClusterName);
    }

    public MongoClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MongoClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MongoClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public MongoClusterImpl withCreateMode(CreateMode createMode) {
        this.innerModel().withCreateMode(createMode);
        return this;
    }

    public MongoClusterImpl withRestoreParameters(MongoClusterRestoreParameters restoreParameters) {
        this.innerModel().withRestoreParameters(restoreParameters);
        return this;
    }

    public MongoClusterImpl withAdministratorLogin(String administratorLogin) {
        if (isInCreateMode()) {
            this.innerModel().withAdministratorLogin(administratorLogin);
            return this;
        } else {
            this.updateProperties.withAdministratorLogin(administratorLogin);
            return this;
        }
    }

    public MongoClusterImpl withAdministratorLoginPassword(String administratorLoginPassword) {
        if (isInCreateMode()) {
            this.innerModel().withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        } else {
            this.updateProperties.withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        }
    }

    public MongoClusterImpl withServerVersion(String serverVersion) {
        if (isInCreateMode()) {
            this.innerModel().withServerVersion(serverVersion);
            return this;
        } else {
            this.updateProperties.withServerVersion(serverVersion);
            return this;
        }
    }

    public MongoClusterImpl withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (isInCreateMode()) {
            this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
            return this;
        } else {
            this.updateProperties.withPublicNetworkAccess(publicNetworkAccess);
            return this;
        }
    }

    public MongoClusterImpl withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs) {
        if (isInCreateMode()) {
            this.innerModel().withNodeGroupSpecs(nodeGroupSpecs);
            return this;
        } else {
            this.updateProperties.withNodeGroupSpecs(nodeGroupSpecs);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
