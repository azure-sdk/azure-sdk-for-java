// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.ai.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.ai.models.JitAuthorizationPolicies;
import com.azure.resourcemanager.ai.models.JitRequestState;
import com.azure.resourcemanager.ai.models.JitSchedulingPolicy;
import com.azure.resourcemanager.ai.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Information about JIT request properties. */
@Fluent
public final class JitRequestProperties {
    /*
     * The parent application id.
     */
    @JsonProperty(value = "applicationResourceId", required = true)
    private String applicationResourceId;

    /*
     * The publisher tenant id.
     */
    @JsonProperty(value = "publisherTenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String publisherTenantId;

    /*
     * The JIT authorization policies.
     */
    @JsonProperty(value = "authorizationPolicies", required = true)
    private List<JitAuthorizationPolicies> authorizationPolicies;

    /*
     * The JIT request properties.
     */
    @JsonProperty(value = "schedulingPolicy", required = true)
    private JitSchedulingPolicy schedulingPolicy;

    /*
     * The JIT request provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The JIT request state.
     */
    @JsonProperty(value = "requestState", access = JsonProperty.Access.WRITE_ONLY)
    private JitRequestState requestState;

    /*
     * Metadata for the private link resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the applicationResourceId property: The parent application id.
     *
     * @return the applicationResourceId value.
     */
    public String applicationResourceId() {
        return this.applicationResourceId;
    }

    /**
     * Set the applicationResourceId property: The parent application id.
     *
     * @param applicationResourceId the applicationResourceId value to set.
     * @return the JitRequestProperties object itself.
     */
    public JitRequestProperties withApplicationResourceId(String applicationResourceId) {
        this.applicationResourceId = applicationResourceId;
        return this;
    }

    /**
     * Get the publisherTenantId property: The publisher tenant id.
     *
     * @return the publisherTenantId value.
     */
    public String publisherTenantId() {
        return this.publisherTenantId;
    }

    /**
     * Get the authorizationPolicies property: The JIT authorization policies.
     *
     * @return the authorizationPolicies value.
     */
    public List<JitAuthorizationPolicies> authorizationPolicies() {
        return this.authorizationPolicies;
    }

    /**
     * Set the authorizationPolicies property: The JIT authorization policies.
     *
     * @param authorizationPolicies the authorizationPolicies value to set.
     * @return the JitRequestProperties object itself.
     */
    public JitRequestProperties withAuthorizationPolicies(List<JitAuthorizationPolicies> authorizationPolicies) {
        this.authorizationPolicies = authorizationPolicies;
        return this;
    }

    /**
     * Get the schedulingPolicy property: The JIT request properties.
     *
     * @return the schedulingPolicy value.
     */
    public JitSchedulingPolicy schedulingPolicy() {
        return this.schedulingPolicy;
    }

    /**
     * Set the schedulingPolicy property: The JIT request properties.
     *
     * @param schedulingPolicy the schedulingPolicy value to set.
     * @return the JitRequestProperties object itself.
     */
    public JitRequestProperties withSchedulingPolicy(JitSchedulingPolicy schedulingPolicy) {
        this.schedulingPolicy = schedulingPolicy;
        return this;
    }

    /**
     * Get the provisioningState property: The JIT request provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the requestState property: The JIT request state.
     *
     * @return the requestState value.
     */
    public JitRequestState requestState() {
        return this.requestState;
    }

    /**
     * Get the systemData property: Metadata for the private link resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationResourceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property applicationResourceId in model JitRequestProperties"));
        }
        if (authorizationPolicies() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property authorizationPolicies in model JitRequestProperties"));
        } else {
            authorizationPolicies().forEach(e -> e.validate());
        }
        if (schedulingPolicy() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property schedulingPolicy in model JitRequestProperties"));
        } else {
            schedulingPolicy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JitRequestProperties.class);
}
