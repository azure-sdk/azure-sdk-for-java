// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.ai.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.ai.fluent.models.JitRequestDefinitionInner;
import com.azure.resourcemanager.ai.models.JitRequestPatchable;

/** An instance of this class provides access to all the operations defined in JitRequestsClient. */
public interface JitRequestsClient {
    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JitRequestDefinitionInner get(String resourceGroupName, String jitRequestName, String location);

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<JitRequestDefinitionInner> getWithResponse(
        String resourceGroupName, String jitRequestName, String location, Context context);

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about JIT request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JitRequestDefinitionInner>, JitRequestDefinitionInner> beginCreateOrUpdate(
        String resourceGroupName, String jitRequestName, String location, JitRequestDefinitionInner parameters);

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about JIT request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JitRequestDefinitionInner>, JitRequestDefinitionInner> beginCreateOrUpdate(
        String resourceGroupName,
        String jitRequestName,
        String location,
        JitRequestDefinitionInner parameters,
        Context context);

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about JIT request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JitRequestDefinitionInner createOrUpdate(
        String resourceGroupName, String jitRequestName, String location, JitRequestDefinitionInner parameters);

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about JIT request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JitRequestDefinitionInner createOrUpdate(
        String resourceGroupName,
        String jitRequestName,
        String location,
        JitRequestDefinitionInner parameters,
        Context context);

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about JIT request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JitRequestDefinitionInner update(
        String resourceGroupName, String jitRequestName, String location, JitRequestPatchable parameters);

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to the update JIT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about JIT request definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<JitRequestDefinitionInner> updateWithResponse(
        String resourceGroupName,
        String jitRequestName,
        String location,
        JitRequestPatchable parameters,
        Context context);

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String jitRequestName, String location);

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String jitRequestName, String location, Context context);

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JitRequestDefinitionInner> listBySubscription(String location);

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JitRequestDefinitionInner> listBySubscription(String location, Context context);

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JitRequestDefinitionInner> listByResourceGroup(String resourceGroupName, String location);

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JitRequestDefinitionInner> listByResourceGroup(
        String resourceGroupName, String location, Context context);
}
