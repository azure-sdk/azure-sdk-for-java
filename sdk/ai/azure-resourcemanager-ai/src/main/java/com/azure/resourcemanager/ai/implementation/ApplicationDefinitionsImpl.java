// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.ai.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.ai.fluent.ApplicationDefinitionsClient;
import com.azure.resourcemanager.ai.fluent.models.ApplicationDefinitionInner;
import com.azure.resourcemanager.ai.models.ApplicationDefinition;
import com.azure.resourcemanager.ai.models.ApplicationDefinitions;

public final class ApplicationDefinitionsImpl implements ApplicationDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationDefinitionsImpl.class);

    private final ApplicationDefinitionsClient innerClient;

    private final com.azure.resourcemanager.ai.AiManager serviceManager;

    public ApplicationDefinitionsImpl(
        ApplicationDefinitionsClient innerClient, com.azure.resourcemanager.ai.AiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ApplicationDefinition get(String resourceGroupName, String applicationDefinitionName, String location) {
        ApplicationDefinitionInner inner =
            this.serviceClient().get(resourceGroupName, applicationDefinitionName, location);
        if (inner != null) {
            return new ApplicationDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationDefinition> getWithResponse(
        String resourceGroupName, String applicationDefinitionName, String location, Context context) {
        Response<ApplicationDefinitionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, applicationDefinitionName, location, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String applicationDefinitionName, String location) {
        this.serviceClient().delete(resourceGroupName, applicationDefinitionName, location);
    }

    public void delete(String resourceGroupName, String applicationDefinitionName, String location, Context context) {
        this.serviceClient().delete(resourceGroupName, applicationDefinitionName, location, context);
    }

    public PagedIterable<ApplicationDefinition> listByResourceGroup(String resourceGroupName, String location) {
        PagedIterable<ApplicationDefinitionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, location);
        return Utils.mapPage(inner, inner1 -> new ApplicationDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationDefinition> listByResourceGroup(
        String resourceGroupName, String location, Context context) {
        PagedIterable<ApplicationDefinitionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, location, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationDefinition> listBySubscription(String location) {
        PagedIterable<ApplicationDefinitionInner> inner = this.serviceClient().listBySubscription(location);
        return Utils.mapPage(inner, inner1 -> new ApplicationDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationDefinition> listBySubscription(String location, Context context) {
        PagedIterable<ApplicationDefinitionInner> inner = this.serviceClient().listBySubscription(location, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationDefinitionImpl(inner1, this.manager()));
    }

    public ApplicationDefinition getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationDefinitionName = Utils.getValueFromIdByName(id, "applicationDefinitions");
        if (applicationDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationDefinitions'.",
                                id)));
        }
        String location = Utils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, applicationDefinitionName, location, Context.NONE).getValue();
    }

    public Response<ApplicationDefinition> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationDefinitionName = Utils.getValueFromIdByName(id, "applicationDefinitions");
        if (applicationDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationDefinitions'.",
                                id)));
        }
        String location = Utils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, applicationDefinitionName, location, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationDefinitionName = Utils.getValueFromIdByName(id, "applicationDefinitions");
        if (applicationDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationDefinitions'.",
                                id)));
        }
        String location = Utils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        this.delete(resourceGroupName, applicationDefinitionName, location, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationDefinitionName = Utils.getValueFromIdByName(id, "applicationDefinitions");
        if (applicationDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationDefinitions'.",
                                id)));
        }
        String location = Utils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        this.delete(resourceGroupName, applicationDefinitionName, location, context);
    }

    private ApplicationDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.ai.AiManager manager() {
        return this.serviceManager;
    }

    public ApplicationDefinitionImpl define(String name) {
        return new ApplicationDefinitionImpl(name, this.manager());
    }
}
