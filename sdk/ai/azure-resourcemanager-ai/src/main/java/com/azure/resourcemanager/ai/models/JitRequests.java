// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.ai.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of JitRequests. */
public interface JitRequests {
    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request.
     */
    JitRequestDefinition get(String resourceGroupName, String jitRequestName, String location);

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request along with {@link Response}.
     */
    Response<JitRequestDefinition> getWithResponse(
        String resourceGroupName, String jitRequestName, String location, Context context);

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String jitRequestName, String location);

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName, String jitRequestName, String location, Context context);

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    PagedIterable<JitRequestDefinition> listBySubscription(String location);

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    PagedIterable<JitRequestDefinition> listBySubscription(String location, Context context);

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    PagedIterable<JitRequestDefinition> listByResourceGroup(String resourceGroupName, String location);

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The location of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of JIT requests as paginated response with {@link PagedIterable}.
     */
    PagedIterable<JitRequestDefinition> listByResourceGroup(String resourceGroupName, String location, Context context);

    /**
     * Gets the JIT request.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request along with {@link Response}.
     */
    JitRequestDefinition getById(String id);

    /**
     * Gets the JIT request.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JIT request along with {@link Response}.
     */
    Response<JitRequestDefinition> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the JIT request.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the JIT request.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new JitRequestDefinition resource.
     *
     * @param name resource name.
     * @return the first stage of the new JitRequestDefinition definition.
     */
    JitRequestDefinition.DefinitionStages.Blank define(String name);
}
