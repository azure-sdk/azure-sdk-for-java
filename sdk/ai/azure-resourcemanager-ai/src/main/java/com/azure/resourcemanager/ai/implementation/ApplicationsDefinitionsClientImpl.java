// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.ai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.ai.fluent.ApplicationsDefinitionsClient;
import com.azure.resourcemanager.ai.fluent.models.ApplicationDefinitionInner;
import com.azure.resourcemanager.ai.models.ApplicationDefinitionPatchable;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ApplicationsDefinitionsClient. */
public final class ApplicationsDefinitionsClientImpl implements ApplicationsDefinitionsClient {
    /** The proxy service used to perform REST calls. */
    private final ApplicationsDefinitionsService service;

    /** The service client containing this operation class. */
    private final AiImpl client;

    /**
     * Initializes an instance of ApplicationsDefinitionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ApplicationsDefinitionsClientImpl(AiImpl client) {
        this.service =
            RestProxy
                .create(ApplicationsDefinitionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AiApplicationsDefinitions to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AiApplicationsDefini")
    private interface ApplicationsDefinitionsService {
        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Ai/locations"
                + "/{location}/applicationDefinitions/{applicationDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("applicationDefinitionName") String applicationDefinitionName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location,
            @BodyParam("application/json") ApplicationDefinitionPatchable parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationDefinitionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            applicationDefinitionName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            location,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationDefinitionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                resourceGroupName,
                applicationDefinitionName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                location,
                parameters,
                accept,
                context);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApplicationDefinitionInner>, ApplicationDefinitionInner> beginUpdateAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, applicationDefinitionName, location, parameters);
        return this
            .client
            .<ApplicationDefinitionInner, ApplicationDefinitionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ApplicationDefinitionInner.class,
                ApplicationDefinitionInner.class,
                this.client.getContext());
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApplicationDefinitionInner>, ApplicationDefinitionInner> beginUpdateAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, applicationDefinitionName, location, parameters, context);
        return this
            .client
            .<ApplicationDefinitionInner, ApplicationDefinitionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ApplicationDefinitionInner.class,
                ApplicationDefinitionInner.class,
                context);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApplicationDefinitionInner>, ApplicationDefinitionInner> beginUpdate(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters) {
        return beginUpdateAsync(resourceGroupName, applicationDefinitionName, location, parameters).getSyncPoller();
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApplicationDefinitionInner>, ApplicationDefinitionInner> beginUpdate(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, applicationDefinitionName, location, parameters, context)
            .getSyncPoller();
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationDefinitionInner> updateAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters) {
        return beginUpdateAsync(resourceGroupName, applicationDefinitionName, location, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationDefinitionInner> updateAsync(
        String resourceGroupName, String applicationDefinitionName, String location) {
        final ApplicationDefinitionPatchable parameters = null;
        return beginUpdateAsync(resourceGroupName, applicationDefinitionName, location, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationDefinitionInner> updateAsync(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, applicationDefinitionName, location, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationDefinitionInner update(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters) {
        return updateAsync(resourceGroupName, applicationDefinitionName, location, parameters).block();
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationDefinitionInner update(
        String resourceGroupName, String applicationDefinitionName, String location) {
        final ApplicationDefinitionPatchable parameters = null;
        return updateAsync(resourceGroupName, applicationDefinitionName, location, parameters).block();
    }

    /**
     * Updates an existing managed application definition. The only value that can be updated via PATCH currently is the
     * tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param location The location of the resource.
     * @param parameters Parameters supplied to update an existing managed application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about managed application definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationDefinitionInner update(
        String resourceGroupName,
        String applicationDefinitionName,
        String location,
        ApplicationDefinitionPatchable parameters,
        Context context) {
        return updateAsync(resourceGroupName, applicationDefinitionName, location, parameters, context).block();
    }
}
