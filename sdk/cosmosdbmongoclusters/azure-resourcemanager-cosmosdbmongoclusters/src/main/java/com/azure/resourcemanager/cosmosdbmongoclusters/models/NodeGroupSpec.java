// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbmongoclusters.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specification for a node group.
 */
@Fluent
public final class NodeGroupSpec {
    /*
     * The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node.
     * Example values: 'M30', 'M40'.
     */
    @JsonProperty(value = "sku")
    private String sku;

    /*
     * The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
     */
    @JsonProperty(value = "diskSizeGB")
    private Long diskSizeGB;

    /*
     * Whether high availability is enabled on the node group.
     */
    @JsonProperty(value = "enableHa")
    private Boolean enableHa;

    /*
     * The node type deployed in the node group.
     */
    @JsonProperty(value = "kind")
    private NodeKind kind;

    /*
     * The number of nodes in the node group.
     */
    @JsonProperty(value = "nodeCount")
    private Integer nodeCount;

    /**
     * Creates an instance of NodeGroupSpec class.
     */
    public NodeGroupSpec() {
    }

    /**
     * Get the sku property: The resource sku for the node group. This defines the size of CPU and memory that is
     * provisioned for each node. Example values: 'M30', 'M40'.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The resource sku for the node group. This defines the size of CPU and memory that is
     * provisioned for each node. Example values: 'M30', 'M40'.
     * 
     * @param sku the sku value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the diskSizeGB property: The disk storage size for the node group in GB. Example values: 128, 256, 512,
     * 1024.
     * 
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: The disk storage size for the node group in GB. Example values: 128, 256, 512,
     * 1024.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withDiskSizeGB(Long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the enableHa property: Whether high availability is enabled on the node group.
     * 
     * @return the enableHa value.
     */
    public Boolean enableHa() {
        return this.enableHa;
    }

    /**
     * Set the enableHa property: Whether high availability is enabled on the node group.
     * 
     * @param enableHa the enableHa value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withEnableHa(Boolean enableHa) {
        this.enableHa = enableHa;
        return this;
    }

    /**
     * Get the kind property: The node type deployed in the node group.
     * 
     * @return the kind value.
     */
    public NodeKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The node type deployed in the node group.
     * 
     * @param kind the kind value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withKind(NodeKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the nodeCount property: The number of nodes in the node group.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: The number of nodes in the node group.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
