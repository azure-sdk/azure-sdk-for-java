// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The item payload of the NavigationResult.
 */
@Immutable
public final class NavigationElement implements JsonSerializable<NavigationElement> {
    /*
     * The name of the item.
     */
    @Generated
    private String name;

    /*
     * The identifier of navigation request.
     */
    @Generated
    private ItemPath itemPath;

    /*
     * The type name of the item. Eg. EntityType.
     */
    @Generated
    private String type;

    /*
     * Whether the item is Entity. If yes, can get complete definition of an entity given its itemPath
     */
    @Generated
    private Boolean isEntity;

    /*
     * Indicates whether the item is a leaf node. If it is, further navigation is not possible.
     */
    @Generated
    private Boolean isLeafNode;

    /*
     * The count of the top level asset. Won't return if request payload 'includeNextLevelAssetCount' is false.
     */
    @Generated
    private Integer count;

    /*
     * The additional properties of the navigation element.
     */
    @Generated
    private Map<String, Object> properties;

    /**
     * Creates an instance of NavigationElement class.
     */
    @Generated
    private NavigationElement() {
    }

    /**
     * Get the name property: The name of the item.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the itemPath property: The identifier of navigation request.
     * 
     * @return the itemPath value.
     */
    @Generated
    public ItemPath getItemPath() {
        return this.itemPath;
    }

    /**
     * Get the type property: The type name of the item. Eg. EntityType.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the isEntity property: Whether the item is Entity. If yes, can get complete definition of an entity given its
     * itemPath.
     * 
     * @return the isEntity value.
     */
    @Generated
    public Boolean isEntity() {
        return this.isEntity;
    }

    /**
     * Get the isLeafNode property: Indicates whether the item is a leaf node. If it is, further navigation is not
     * possible.
     * 
     * @return the isLeafNode value.
     */
    @Generated
    public Boolean isLeafNode() {
        return this.isLeafNode;
    }

    /**
     * Get the count property: The count of the top level asset. Won't return if request payload
     * 'includeNextLevelAssetCount' is false.
     * 
     * @return the count value.
     */
    @Generated
    public Integer getCount() {
        return this.count;
    }

    /**
     * Get the properties property: The additional properties of the navigation element.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, Object> getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("itemPath", this.itemPath);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeBooleanField("isEntity", this.isEntity);
        jsonWriter.writeBooleanField("isLeafNode", this.isLeafNode);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NavigationElement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NavigationElement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NavigationElement.
     */
    @Generated
    public static NavigationElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NavigationElement deserializedNavigationElement = new NavigationElement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNavigationElement.name = reader.getString();
                } else if ("itemPath".equals(fieldName)) {
                    deserializedNavigationElement.itemPath = ItemPath.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedNavigationElement.type = reader.getString();
                } else if ("isEntity".equals(fieldName)) {
                    deserializedNavigationElement.isEntity = reader.getNullable(JsonReader::getBoolean);
                } else if ("isLeafNode".equals(fieldName)) {
                    deserializedNavigationElement.isLeafNode = reader.getNullable(JsonReader::getBoolean);
                } else if ("count".equals(fieldName)) {
                    deserializedNavigationElement.count = reader.getNullable(JsonReader::getInt);
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedNavigationElement.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNavigationElement;
        });
    }
}
