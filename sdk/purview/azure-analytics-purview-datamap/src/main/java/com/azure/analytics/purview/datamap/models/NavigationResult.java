// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The response payload of the Navigation API.
 */
@Immutable
public final class NavigationResult implements JsonSerializable<NavigationResult> {
    /*
     * The token used to get next batch of data. Absent if there's no more data.
     */
    @Generated
    private String continuationToken;

    /*
     * The identifier of navigation request.
     */
    @Generated
    private List<NavigationElement> items;

    /**
     * Creates an instance of NavigationResult class.
     */
    @Generated
    private NavigationResult() {
    }

    /**
     * Get the continuationToken property: The token used to get next batch of data. Absent if there's no more data.
     * 
     * @return the continuationToken value.
     */
    @Generated
    public String getContinuationToken() {
        return this.continuationToken;
    }

    /**
     * Get the items property: The identifier of navigation request.
     * 
     * @return the items value.
     */
    @Generated
    public List<NavigationElement> getItems() {
        return this.items;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("continuationToken", this.continuationToken);
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NavigationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NavigationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NavigationResult.
     */
    @Generated
    public static NavigationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NavigationResult deserializedNavigationResult = new NavigationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("continuationToken".equals(fieldName)) {
                    deserializedNavigationResult.continuationToken = reader.getString();
                } else if ("items".equals(fieldName)) {
                    List<NavigationElement> items = reader.readArray(reader1 -> NavigationElement.fromJson(reader1));
                    deserializedNavigationResult.items = items;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNavigationResult;
        });
    }
}
