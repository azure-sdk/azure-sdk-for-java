// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The identifier of navigation request.
 */
@Fluent
public final class ItemPath implements JsonSerializable<ItemPath> {
    /*
     * The identifier of the item. The path starts with an empty string or a single slash. To navigate further, you need to concatenate with a slash to form the full itemPath using the previous navigation response's relative item path.
     */
    @Generated
    private final String path;

    /*
     * The extended properties of the itemPath are typically obtained from the last navigation response. While not mandatory to provide, including them can enhance performance. Otherwise, there may be some impact on performance.
     */
    @Generated
    private Map<String, Object> extendedProperties;

    /**
     * Creates an instance of ItemPath class.
     * 
     * @param path the path value to set.
     */
    @Generated
    public ItemPath(String path) {
        this.path = path;
    }

    /**
     * Get the path property: The identifier of the item. The path starts with an empty string or a single slash. To
     * navigate further, you need to concatenate with a slash to form the full itemPath using the previous navigation
     * response's relative item path.
     * 
     * @return the path value.
     */
    @Generated
    public String getPath() {
        return this.path;
    }

    /**
     * Get the extendedProperties property: The extended properties of the itemPath are typically obtained from the last
     * navigation response. While not mandatory to provide, including them can enhance performance. Otherwise, there may
     * be some impact on performance.
     * 
     * @return the extendedProperties value.
     */
    @Generated
    public Map<String, Object> getExtendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: The extended properties of the itemPath are typically obtained from the last
     * navigation response. While not mandatory to provide, including them can enhance performance. Otherwise, there may
     * be some impact on performance.
     * 
     * @param extendedProperties the extendedProperties value to set.
     * @return the ItemPath object itself.
     */
    @Generated
    public ItemPath setExtendedProperties(Map<String, Object> extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeMapField("extendedProperties", this.extendedProperties,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ItemPath from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ItemPath if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ItemPath.
     */
    @Generated
    public static ItemPath fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String path = null;
            Map<String, Object> extendedProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    path = reader.getString();
                } else if ("extendedProperties".equals(fieldName)) {
                    extendedProperties = reader.readMap(reader1 -> reader1.readUntyped());
                } else {
                    reader.skipChildren();
                }
            }
            ItemPath deserializedItemPath = new ItemPath(path);
            deserializedItemPath.extendedProperties = extendedProperties;

            return deserializedItemPath;
        });
    }
}
