// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The request payload of Navigation API.
 */
@Fluent
public final class NavigationRequest implements JsonSerializable<NavigationRequest> {
    /*
     * The enum of navigation mode.
     */
    @Generated
    private NavigationMode navigationMode;

    /*
     * The identifier of navigation request.
     */
    @Generated
    private final ItemPath itemPath;

    /*
     * Whether to return the next level asset count.
     */
    @Generated
    private Boolean includeNextLevelAssetCount;

    /*
     * The additional properties of the request.
     */
    @Generated
    private Map<String, Object> properties;

    /**
     * Creates an instance of NavigationRequest class.
     * 
     * @param itemPath the itemPath value to set.
     */
    @Generated
    public NavigationRequest(ItemPath itemPath) {
        this.itemPath = itemPath;
    }

    /**
     * Get the navigationMode property: The enum of navigation mode.
     * 
     * @return the navigationMode value.
     */
    @Generated
    public NavigationMode getNavigationMode() {
        return this.navigationMode;
    }

    /**
     * Set the navigationMode property: The enum of navigation mode.
     * 
     * @param navigationMode the navigationMode value to set.
     * @return the NavigationRequest object itself.
     */
    @Generated
    public NavigationRequest setNavigationMode(NavigationMode navigationMode) {
        this.navigationMode = navigationMode;
        return this;
    }

    /**
     * Get the itemPath property: The identifier of navigation request.
     * 
     * @return the itemPath value.
     */
    @Generated
    public ItemPath getItemPath() {
        return this.itemPath;
    }

    /**
     * Get the includeNextLevelAssetCount property: Whether to return the next level asset count.
     * 
     * @return the includeNextLevelAssetCount value.
     */
    @Generated
    public Boolean isIncludeNextLevelAssetCount() {
        return this.includeNextLevelAssetCount;
    }

    /**
     * Set the includeNextLevelAssetCount property: Whether to return the next level asset count.
     * 
     * @param includeNextLevelAssetCount the includeNextLevelAssetCount value to set.
     * @return the NavigationRequest object itself.
     */
    @Generated
    public NavigationRequest setIncludeNextLevelAssetCount(Boolean includeNextLevelAssetCount) {
        this.includeNextLevelAssetCount = includeNextLevelAssetCount;
        return this;
    }

    /**
     * Get the properties property: The additional properties of the request.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, Object> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: The additional properties of the request.
     * 
     * @param properties the properties value to set.
     * @return the NavigationRequest object itself.
     */
    @Generated
    public NavigationRequest setProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("itemPath", this.itemPath);
        jsonWriter.writeStringField("navigationMode",
            this.navigationMode == null ? null : this.navigationMode.toString());
        jsonWriter.writeBooleanField("includeNextLevelAssetCount", this.includeNextLevelAssetCount);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NavigationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NavigationRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NavigationRequest.
     */
    @Generated
    public static NavigationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ItemPath itemPath = null;
            NavigationMode navigationMode = null;
            Boolean includeNextLevelAssetCount = null;
            Map<String, Object> properties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("itemPath".equals(fieldName)) {
                    itemPath = ItemPath.fromJson(reader);
                } else if ("navigationMode".equals(fieldName)) {
                    navigationMode = NavigationMode.fromString(reader.getString());
                } else if ("includeNextLevelAssetCount".equals(fieldName)) {
                    includeNextLevelAssetCount = reader.getNullable(JsonReader::getBoolean);
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1.readUntyped());
                } else {
                    reader.skipChildren();
                }
            }
            NavigationRequest deserializedNavigationRequest = new NavigationRequest(itemPath);
            deserializedNavigationRequest.navigationMode = navigationMode;
            deserializedNavigationRequest.includeNextLevelAssetCount = includeNextLevelAssetCount;
            deserializedNavigationRequest.properties = properties;

            return deserializedNavigationRequest;
        });
    }
}
