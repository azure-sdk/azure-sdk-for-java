// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesbicep.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.resourcesmicrosoftresourcesbicep.fluent.DecompilesClient;
import com.azure.resourcemanager.resourcesmicrosoftresourcesbicep.fluent.models.DecompileOperationSuccessResponseInner;
import com.azure.resourcemanager.resourcesmicrosoftresourcesbicep.models.DecompileOperationRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DecompilesClient.
 */
public final class DecompilesClientImpl implements DecompilesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DecompilesService service;

    /**
     * The service client containing this operation class.
     */
    private final BicepClientImpl client;

    /**
     * Initializes an instance of DecompilesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DecompilesClientImpl(BicepClientImpl client) {
        this.service
            = RestProxy.create(DecompilesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BicepClientDecompiles to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BicepClientDecompile")
    public interface DecompilesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Resources/decompileBicep")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DecompileOperationSuccessResponseInner>> bicep(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DecompileOperationRequest decompileOperationRequest,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Decompiles an ARM json template into a Bicep template.
     * 
     * @param decompileOperationRequest Decompile operation request supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the decompileBicep operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DecompileOperationSuccessResponseInner>>
        bicepWithResponseAsync(DecompileOperationRequest decompileOperationRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (decompileOperationRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter decompileOperationRequest is required and cannot be null."));
        } else {
            decompileOperationRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.bicep(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), decompileOperationRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Decompiles an ARM json template into a Bicep template.
     * 
     * @param decompileOperationRequest Decompile operation request supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the decompileBicep operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DecompileOperationSuccessResponseInner>>
        bicepWithResponseAsync(DecompileOperationRequest decompileOperationRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (decompileOperationRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter decompileOperationRequest is required and cannot be null."));
        } else {
            decompileOperationRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.bicep(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(),
            decompileOperationRequest, accept, context);
    }

    /**
     * Decompiles an ARM json template into a Bicep template.
     * 
     * @param decompileOperationRequest Decompile operation request supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the decompileBicep operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DecompileOperationSuccessResponseInner>
        bicepAsync(DecompileOperationRequest decompileOperationRequest) {
        return bicepWithResponseAsync(decompileOperationRequest).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Decompiles an ARM json template into a Bicep template.
     * 
     * @param decompileOperationRequest Decompile operation request supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the decompileBicep operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DecompileOperationSuccessResponseInner>
        bicepWithResponse(DecompileOperationRequest decompileOperationRequest, Context context) {
        return bicepWithResponseAsync(decompileOperationRequest, context).block();
    }

    /**
     * Decompiles an ARM json template into a Bicep template.
     * 
     * @param decompileOperationRequest Decompile operation request supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the decompileBicep operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DecompileOperationSuccessResponseInner bicep(DecompileOperationRequest decompileOperationRequest) {
        return bicepWithResponse(decompileOperationRequest, Context.NONE).getValue();
    }
}
