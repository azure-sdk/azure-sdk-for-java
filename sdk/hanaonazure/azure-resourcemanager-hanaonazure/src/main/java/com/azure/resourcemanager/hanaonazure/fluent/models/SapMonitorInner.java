// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import java.io.IOException;
import java.util.Map;

/**
 * SAP monitor info on Azure (ARM properties and SAP monitor properties).
 */
@Fluent
public final class SapMonitorInner extends Resource {
    /*
     * SAP monitor properties
     */
    private SapMonitorProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of SapMonitorInner class.
     */
    public SapMonitorInner() {
    }

    /**
     * Get the innerProperties property: SAP monitor properties.
     * 
     * @return the innerProperties value.
     */
    private SapMonitorProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SapMonitorInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SapMonitorInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the HanaInstance.
     * 
     * @return the provisioningState value.
     */
    public HanaProvisioningStatesEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the managedResourceGroupName property: The name of the resource group the SAP Monitor resources get deployed
     * into.
     * 
     * @return the managedResourceGroupName value.
     */
    public String managedResourceGroupName() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupName();
    }

    /**
     * Get the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceArmId value.
     */
    public String logAnalyticsWorkspaceArmId() {
        return this.innerProperties() == null ? null : this.innerProperties().logAnalyticsWorkspaceArmId();
    }

    /**
     * Set the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceArmId the logAnalyticsWorkspaceArmId value to set.
     * @return the SapMonitorInner object itself.
     */
    public SapMonitorInner withLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SapMonitorProperties();
        }
        this.innerProperties().withLogAnalyticsWorkspaceArmId(logAnalyticsWorkspaceArmId);
        return this;
    }

    /**
     * Get the enableCustomerAnalytics property: The value indicating whether to send analytics to Microsoft.
     * 
     * @return the enableCustomerAnalytics value.
     */
    public Boolean enableCustomerAnalytics() {
        return this.innerProperties() == null ? null : this.innerProperties().enableCustomerAnalytics();
    }

    /**
     * Set the enableCustomerAnalytics property: The value indicating whether to send analytics to Microsoft.
     * 
     * @param enableCustomerAnalytics the enableCustomerAnalytics value to set.
     * @return the SapMonitorInner object itself.
     */
    public SapMonitorInner withEnableCustomerAnalytics(Boolean enableCustomerAnalytics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SapMonitorProperties();
        }
        this.innerProperties().withEnableCustomerAnalytics(enableCustomerAnalytics);
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceId value.
     */
    public String logAnalyticsWorkspaceId() {
        return this.innerProperties() == null ? null : this.innerProperties().logAnalyticsWorkspaceId();
    }

    /**
     * Set the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceId the logAnalyticsWorkspaceId value to set.
     * @return the SapMonitorInner object itself.
     */
    public SapMonitorInner withLogAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SapMonitorProperties();
        }
        this.innerProperties().withLogAnalyticsWorkspaceId(logAnalyticsWorkspaceId);
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that is used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceSharedKey value.
     */
    public String logAnalyticsWorkspaceSharedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().logAnalyticsWorkspaceSharedKey();
    }

    /**
     * Set the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that is used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceSharedKey the logAnalyticsWorkspaceSharedKey value to set.
     * @return the SapMonitorInner object itself.
     */
    public SapMonitorInner withLogAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SapMonitorProperties();
        }
        this.innerProperties().withLogAnalyticsWorkspaceSharedKey(logAnalyticsWorkspaceSharedKey);
        return this;
    }

    /**
     * Get the sapMonitorCollectorVersion property: The version of the payload running in the Collector VM.
     * 
     * @return the sapMonitorCollectorVersion value.
     */
    public String sapMonitorCollectorVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().sapMonitorCollectorVersion();
    }

    /**
     * Get the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @return the monitorSubnet value.
     */
    public String monitorSubnet() {
        return this.innerProperties() == null ? null : this.innerProperties().monitorSubnet();
    }

    /**
     * Set the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @param monitorSubnet the monitorSubnet value to set.
     * @return the SapMonitorInner object itself.
     */
    public SapMonitorInner withMonitorSubnet(String monitorSubnet) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SapMonitorProperties();
        }
        this.innerProperties().withMonitorSubnet(monitorSubnet);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapMonitorInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapMonitorInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SapMonitorInner.
     */
    public static SapMonitorInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapMonitorInner deserializedSapMonitorInner = new SapMonitorInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSapMonitorInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSapMonitorInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSapMonitorInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedSapMonitorInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedSapMonitorInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedSapMonitorInner.innerProperties = SapMonitorProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapMonitorInner;
        });
    }
}
