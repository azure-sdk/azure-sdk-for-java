// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import java.io.IOException;

/**
 * Describes the properties of a SAP monitor.
 */
@Fluent
public final class SapMonitorProperties implements JsonSerializable<SapMonitorProperties> {
    /*
     * State of provisioning of the HanaInstance
     */
    private HanaProvisioningStatesEnum provisioningState;

    /*
     * The name of the resource group the SAP Monitor resources get deployed into.
     */
    private String managedResourceGroupName;

    /*
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     */
    private String logAnalyticsWorkspaceArmId;

    /*
     * The value indicating whether to send analytics to Microsoft
     */
    private Boolean enableCustomerAnalytics;

    /*
     * The workspace ID of the log analytics workspace to be used for monitoring
     */
    private String logAnalyticsWorkspaceId;

    /*
     * The shared key of the log analytics workspace that is used for monitoring
     */
    private String logAnalyticsWorkspaceSharedKey;

    /*
     * The version of the payload running in the Collector VM
     */
    private String sapMonitorCollectorVersion;

    /*
     * The subnet which the SAP monitor will be deployed in
     */
    private String monitorSubnet;

    /**
     * Creates an instance of SapMonitorProperties class.
     */
    public SapMonitorProperties() {
    }

    /**
     * Get the provisioningState property: State of provisioning of the HanaInstance.
     * 
     * @return the provisioningState value.
     */
    public HanaProvisioningStatesEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the managedResourceGroupName property: The name of the resource group the SAP Monitor resources get deployed
     * into.
     * 
     * @return the managedResourceGroupName value.
     */
    public String managedResourceGroupName() {
        return this.managedResourceGroupName;
    }

    /**
     * Get the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceArmId value.
     */
    public String logAnalyticsWorkspaceArmId() {
        return this.logAnalyticsWorkspaceArmId;
    }

    /**
     * Set the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceArmId the logAnalyticsWorkspaceArmId value to set.
     * @return the SapMonitorProperties object itself.
     */
    public SapMonitorProperties withLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
        this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
        return this;
    }

    /**
     * Get the enableCustomerAnalytics property: The value indicating whether to send analytics to Microsoft.
     * 
     * @return the enableCustomerAnalytics value.
     */
    public Boolean enableCustomerAnalytics() {
        return this.enableCustomerAnalytics;
    }

    /**
     * Set the enableCustomerAnalytics property: The value indicating whether to send analytics to Microsoft.
     * 
     * @param enableCustomerAnalytics the enableCustomerAnalytics value to set.
     * @return the SapMonitorProperties object itself.
     */
    public SapMonitorProperties withEnableCustomerAnalytics(Boolean enableCustomerAnalytics) {
        this.enableCustomerAnalytics = enableCustomerAnalytics;
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceId value.
     */
    public String logAnalyticsWorkspaceId() {
        return this.logAnalyticsWorkspaceId;
    }

    /**
     * Set the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceId the logAnalyticsWorkspaceId value to set.
     * @return the SapMonitorProperties object itself.
     */
    public SapMonitorProperties withLogAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
        this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that is used for
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceSharedKey value.
     */
    public String logAnalyticsWorkspaceSharedKey() {
        return this.logAnalyticsWorkspaceSharedKey;
    }

    /**
     * Set the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that is used for
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceSharedKey the logAnalyticsWorkspaceSharedKey value to set.
     * @return the SapMonitorProperties object itself.
     */
    public SapMonitorProperties withLogAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
        this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
        return this;
    }

    /**
     * Get the sapMonitorCollectorVersion property: The version of the payload running in the Collector VM.
     * 
     * @return the sapMonitorCollectorVersion value.
     */
    public String sapMonitorCollectorVersion() {
        return this.sapMonitorCollectorVersion;
    }

    /**
     * Get the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @return the monitorSubnet value.
     */
    public String monitorSubnet() {
        return this.monitorSubnet;
    }

    /**
     * Set the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @param monitorSubnet the monitorSubnet value to set.
     * @return the SapMonitorProperties object itself.
     */
    public SapMonitorProperties withMonitorSubnet(String monitorSubnet) {
        this.monitorSubnet = monitorSubnet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logAnalyticsWorkspaceArmId", this.logAnalyticsWorkspaceArmId);
        jsonWriter.writeBooleanField("enableCustomerAnalytics", this.enableCustomerAnalytics);
        jsonWriter.writeStringField("logAnalyticsWorkspaceId", this.logAnalyticsWorkspaceId);
        jsonWriter.writeStringField("logAnalyticsWorkspaceSharedKey", this.logAnalyticsWorkspaceSharedKey);
        jsonWriter.writeStringField("monitorSubnet", this.monitorSubnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapMonitorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapMonitorProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapMonitorProperties.
     */
    public static SapMonitorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapMonitorProperties deserializedSapMonitorProperties = new SapMonitorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedSapMonitorProperties.provisioningState
                        = HanaProvisioningStatesEnum.fromString(reader.getString());
                } else if ("managedResourceGroupName".equals(fieldName)) {
                    deserializedSapMonitorProperties.managedResourceGroupName = reader.getString();
                } else if ("logAnalyticsWorkspaceArmId".equals(fieldName)) {
                    deserializedSapMonitorProperties.logAnalyticsWorkspaceArmId = reader.getString();
                } else if ("enableCustomerAnalytics".equals(fieldName)) {
                    deserializedSapMonitorProperties.enableCustomerAnalytics
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("logAnalyticsWorkspaceId".equals(fieldName)) {
                    deserializedSapMonitorProperties.logAnalyticsWorkspaceId = reader.getString();
                } else if ("logAnalyticsWorkspaceSharedKey".equals(fieldName)) {
                    deserializedSapMonitorProperties.logAnalyticsWorkspaceSharedKey = reader.getString();
                } else if ("sapMonitorCollectorVersion".equals(fieldName)) {
                    deserializedSapMonitorProperties.sapMonitorCollectorVersion = reader.getString();
                } else if ("monitorSubnet".equals(fieldName)) {
                    deserializedSapMonitorProperties.monitorSubnet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapMonitorProperties;
        });
    }
}
