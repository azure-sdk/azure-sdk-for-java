// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import java.io.IOException;

/**
 * Describes the properties of a provider instance.
 */
@Fluent
public final class ProviderInstanceProperties implements JsonSerializable<ProviderInstanceProperties> {
    /*
     * The type of provider instance.
     */
    private String type;

    /*
     * A JSON string containing the properties of the provider instance.
     */
    private String properties;

    /*
     * A JSON string containing metadata of the provider instance.
     */
    private String metadata;

    /*
     * State of provisioning of the provider instance
     */
    private HanaProvisioningStatesEnum provisioningState;

    /**
     * Creates an instance of ProviderInstanceProperties class.
     */
    public ProviderInstanceProperties() {
    }

    /**
     * Get the type property: The type of provider instance.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of provider instance.
     * 
     * @param type the type value to set.
     * @return the ProviderInstanceProperties object itself.
     */
    public ProviderInstanceProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the properties property: A JSON string containing the properties of the provider instance.
     * 
     * @return the properties value.
     */
    public String properties() {
        return this.properties;
    }

    /**
     * Set the properties property: A JSON string containing the properties of the provider instance.
     * 
     * @param properties the properties value to set.
     * @return the ProviderInstanceProperties object itself.
     */
    public ProviderInstanceProperties withProperties(String properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the metadata property: A JSON string containing metadata of the provider instance.
     * 
     * @return the metadata value.
     */
    public String metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A JSON string containing metadata of the provider instance.
     * 
     * @param metadata the metadata value to set.
     * @return the ProviderInstanceProperties object itself.
     */
    public ProviderInstanceProperties withMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the provider instance.
     * 
     * @return the provisioningState value.
     */
    public HanaProvisioningStatesEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("properties", this.properties);
        jsonWriter.writeStringField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderInstanceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderInstanceProperties.
     */
    public static ProviderInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderInstanceProperties deserializedProviderInstanceProperties = new ProviderInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedProviderInstanceProperties.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedProviderInstanceProperties.properties = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedProviderInstanceProperties.metadata = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProviderInstanceProperties.provisioningState
                        = HanaProvisioningStatesEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderInstanceProperties;
        });
    }
}
