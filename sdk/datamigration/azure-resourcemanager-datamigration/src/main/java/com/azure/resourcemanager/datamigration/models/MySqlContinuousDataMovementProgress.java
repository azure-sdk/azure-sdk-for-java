// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The MySqlContinuousDataMovementProgress model. */
@Immutable
public final class MySqlContinuousDataMovementProgress {
    /*
     * Current binlog position of the last event committed at target
     */
    @JsonProperty(value = "binlogPosition", access = JsonProperty.Access.WRITE_ONLY)
    private MySqlBinlogPositionOutput binlogPosition;

    /*
     * The timestamp exposed by the last binlog event that has been committed at target
     */
    @JsonProperty(value = "timestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime timestamp;

    /*
     * The total number of rows inserted at target
     */
    @JsonProperty(value = "numberOfRowsInserted", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfRowsInserted;

    /*
     * The total number of rows updated at target
     */
    @JsonProperty(value = "numberOfRowsUpdated", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfRowsUpdated;

    /*
     * The total number of rows deleted at target
     */
    @JsonProperty(value = "numberOfRowsDeleted", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfRowsDeleted;

    /*
     * The total number of query events executed at target, such as DDL, or DML when using mixed binlog mode
     */
    @JsonProperty(value = "numberOfQueryEventsProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfQueryEventsProcessed;

    /*
     * The the total number of the WRITE_ROWS_EVENTs processed
     */
    @JsonProperty(value = "numberOfWriteRowsEventsProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfWriteRowsEventsProcessed;

    /*
     * The the total number of the UPDATE_ROWS_EVENTs processed
     */
    @JsonProperty(value = "numberOfUpdateRowsEventsProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfUpdateRowsEventsProcessed;

    /*
     * The total number of the DELETE_ROWS_EVENTs processed
     */
    @JsonProperty(value = "numberOfDeleteRowsEventsProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfDeleteRowsEventsProcessed;

    /*
     * The number of seconds the target server is behind the source server
     */
    @JsonProperty(value = "secondsBehindSource", access = JsonProperty.Access.WRITE_ONLY)
    private Integer secondsBehindSource;

    /** Creates an instance of MySqlContinuousDataMovementProgress class. */
    public MySqlContinuousDataMovementProgress() {
    }

    /**
     * Get the binlogPosition property: Current binlog position of the last event committed at target.
     *
     * @return the binlogPosition value.
     */
    public MySqlBinlogPositionOutput binlogPosition() {
        return this.binlogPosition;
    }

    /**
     * Get the timestamp property: The timestamp exposed by the last binlog event that has been committed at target.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the numberOfRowsInserted property: The total number of rows inserted at target.
     *
     * @return the numberOfRowsInserted value.
     */
    public Integer numberOfRowsInserted() {
        return this.numberOfRowsInserted;
    }

    /**
     * Get the numberOfRowsUpdated property: The total number of rows updated at target.
     *
     * @return the numberOfRowsUpdated value.
     */
    public Integer numberOfRowsUpdated() {
        return this.numberOfRowsUpdated;
    }

    /**
     * Get the numberOfRowsDeleted property: The total number of rows deleted at target.
     *
     * @return the numberOfRowsDeleted value.
     */
    public Integer numberOfRowsDeleted() {
        return this.numberOfRowsDeleted;
    }

    /**
     * Get the numberOfQueryEventsProcessed property: The total number of query events executed at target, such as DDL,
     * or DML when using mixed binlog mode.
     *
     * @return the numberOfQueryEventsProcessed value.
     */
    public Integer numberOfQueryEventsProcessed() {
        return this.numberOfQueryEventsProcessed;
    }

    /**
     * Get the numberOfWriteRowsEventsProcessed property: The the total number of the WRITE_ROWS_EVENTs processed.
     *
     * @return the numberOfWriteRowsEventsProcessed value.
     */
    public Integer numberOfWriteRowsEventsProcessed() {
        return this.numberOfWriteRowsEventsProcessed;
    }

    /**
     * Get the numberOfUpdateRowsEventsProcessed property: The the total number of the UPDATE_ROWS_EVENTs processed.
     *
     * @return the numberOfUpdateRowsEventsProcessed value.
     */
    public Integer numberOfUpdateRowsEventsProcessed() {
        return this.numberOfUpdateRowsEventsProcessed;
    }

    /**
     * Get the numberOfDeleteRowsEventsProcessed property: The total number of the DELETE_ROWS_EVENTs processed.
     *
     * @return the numberOfDeleteRowsEventsProcessed value.
     */
    public Integer numberOfDeleteRowsEventsProcessed() {
        return this.numberOfDeleteRowsEventsProcessed;
    }

    /**
     * Get the secondsBehindSource property: The number of seconds the target server is behind the source server.
     *
     * @return the secondsBehindSource value.
     */
    public Integer secondsBehindSource() {
        return this.secondsBehindSource;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (binlogPosition() != null) {
            binlogPosition().validate();
        }
    }
}
