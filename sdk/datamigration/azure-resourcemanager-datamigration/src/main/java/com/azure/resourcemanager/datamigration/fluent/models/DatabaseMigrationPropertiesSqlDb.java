// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationPropertiesSqlDbKind;
import com.azure.resourcemanager.datamigration.models.ErrorInfo;
import com.azure.resourcemanager.datamigration.models.KeyVaultProperties;
import com.azure.resourcemanager.datamigration.models.SqlConnectionInformation;
import com.azure.resourcemanager.datamigration.models.SqlDataCopyThresholds;
import com.azure.resourcemanager.datamigration.models.SqlDbBackupConfiguration;
import com.azure.resourcemanager.datamigration.models.SqlDbMigrationStatusDetails;
import com.azure.resourcemanager.datamigration.models.SqlDbOfflineConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Database Migration Resource properties for SQL database. */
@Fluent
public final class DatabaseMigrationPropertiesSqlDb {
    /*
     * Detailed migration status. Not included by default.
     */
    @JsonProperty(value = "migrationStatusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDbMigrationStatusDetails migrationStatusDetails;

    /*
     * Target SQL DB connection details.
     */
    @JsonProperty(value = "targetSqlConnection")
    private SqlConnectionInformation targetSqlConnection;

    /*
     * Minimum Row count and size of a table with a clustered index required to perform parallel data copy
     */
    @JsonProperty(value = "sqlDataCopyThresholds", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDataCopyThresholds sqlDataCopyThresholds;

    /*
     * Offline configuration.
     */
    @JsonProperty(value = "offlineConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDbOfflineConfiguration offlineConfiguration;

    /*
     * Source Location details of backups.
     */
    @JsonProperty(value = "backupConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDbBackupConfiguration backupConfiguration;

    /*
     * List of tables to copy.
     */
    @JsonProperty(value = "tableList")
    private List<String> tableList;

    /*
     * Scope of the database.
     */
    @JsonProperty(value = "scope")
    private String scope;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and
     * migration has started.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Migration status.
     */
    @JsonProperty(value = "migrationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String migrationStatus;

    /*
     * Database migration start time.
     */
    @JsonProperty(value = "startedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedOn;

    /*
     * Database migration end time.
     */
    @JsonProperty(value = "endedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endedOn;

    /*
     * Source SQL Server connection details.
     */
    @JsonProperty(value = "sourceSqlConnection")
    private SqlConnectionInformation sourceSqlConnection;

    /*
     * Name of the source sql server.
     */
    @JsonProperty(value = "sourceServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceServerName;

    /*
     * Name of the source database.
     */
    @JsonProperty(value = "sourceDatabaseName")
    private String sourceDatabaseName;

    /*
     * Database collation to be used for the target database.
     */
    @JsonProperty(value = "targetDatabaseCollation")
    private String targetDatabaseCollation;

    /*
     * Resource Id of the Migration Service.
     */
    @JsonProperty(value = "migrationService")
    private String migrationService;

    /*
     * ID tracking current migration operation.
     */
    @JsonProperty(value = "migrationOperationId")
    private String migrationOperationId;

    /*
     * Error details in case of migration failure.
     */
    @JsonProperty(value = "migrationFailureError", access = JsonProperty.Access.WRITE_ONLY)
    private ErrorInfo migrationFailureError;

    /*
     * Error message for migration provisioning failure, if any.
     */
    @JsonProperty(value = "provisioningError")
    private String provisioningError;

    /*
     * Resource Type
     */
    @JsonProperty(value = "kind")
    private DatabaseMigrationPropertiesSqlDbKind kind;

    /*
     * Key Vault Properties
     */
    @JsonProperty(value = "keyVault")
    private KeyVaultProperties keyVault;

    /** Creates an instance of DatabaseMigrationPropertiesSqlDb class. */
    public DatabaseMigrationPropertiesSqlDb() {
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     *
     * @return the migrationStatusDetails value.
     */
    public SqlDbMigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the targetSqlConnection property: Target SQL DB connection details.
     *
     * @return the targetSqlConnection value.
     */
    public SqlConnectionInformation targetSqlConnection() {
        return this.targetSqlConnection;
    }

    /**
     * Set the targetSqlConnection property: Target SQL DB connection details.
     *
     * @param targetSqlConnection the targetSqlConnection value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        this.targetSqlConnection = targetSqlConnection;
        return this;
    }

    /**
     * Get the sqlDataCopyThresholds property: Minimum Row count and size of a table with a clustered index required to
     * perform parallel data copy.
     *
     * @return the sqlDataCopyThresholds value.
     */
    public SqlDataCopyThresholds sqlDataCopyThresholds() {
        return this.sqlDataCopyThresholds;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     *
     * @return the offlineConfiguration value.
     */
    public SqlDbOfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Get the backupConfiguration property: Source Location details of backups.
     *
     * @return the backupConfiguration value.
     */
    public SqlDbBackupConfiguration backupConfiguration() {
        return this.backupConfiguration;
    }

    /**
     * Get the tableList property: List of tables to copy.
     *
     * @return the tableList value.
     */
    public List<String> tableList() {
        return this.tableList;
    }

    /**
     * Set the tableList property: List of tables to copy.
     *
     * @param tableList the tableList value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTableList(List<String> tableList) {
        this.tableList = tableList;
        return this;
    }

    /**
     * Get the scope property: Scope of the database.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Scope of the database.
     *
     * @param scope the scope value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the migrationStatus property: Migration status.
     *
     * @return the migrationStatus value.
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the startedOn property: Database migration start time.
     *
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Database migration end time.
     *
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.sourceSqlConnection;
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.sourceSqlConnection = sourceSqlConnection;
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     *
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     *
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     *
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.targetDatabaseCollation;
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.targetDatabaseCollation = targetDatabaseCollation;
        return this;
    }

    /**
     * Get the migrationService property: Resource Id of the Migration Service.
     *
     * @return the migrationService value.
     */
    public String migrationService() {
        return this.migrationService;
    }

    /**
     * Set the migrationService property: Resource Id of the Migration Service.
     *
     * @param migrationService the migrationService value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withMigrationService(String migrationService) {
        this.migrationService = migrationService;
        return this;
    }

    /**
     * Get the migrationOperationId property: ID tracking current migration operation.
     *
     * @return the migrationOperationId value.
     */
    public String migrationOperationId() {
        return this.migrationOperationId;
    }

    /**
     * Set the migrationOperationId property: ID tracking current migration operation.
     *
     * @param migrationOperationId the migrationOperationId value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withMigrationOperationId(String migrationOperationId) {
        this.migrationOperationId = migrationOperationId;
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     *
     * @return the migrationFailureError value.
     */
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.provisioningError;
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withProvisioningError(String provisioningError) {
        this.provisioningError = provisioningError;
        return this;
    }

    /**
     * Get the kind property: Resource Type.
     *
     * @return the kind value.
     */
    public DatabaseMigrationPropertiesSqlDbKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Resource Type.
     *
     * @param kind the kind value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withKind(DatabaseMigrationPropertiesSqlDbKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the keyVault property: Key Vault Properties.
     *
     * @return the keyVault value.
     */
    public KeyVaultProperties keyVault() {
        return this.keyVault;
    }

    /**
     * Set the keyVault property: Key Vault Properties.
     *
     * @param keyVault the keyVault value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withKeyVault(KeyVaultProperties keyVault) {
        this.keyVault = keyVault;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (targetSqlConnection() != null) {
            targetSqlConnection().validate();
        }
        if (sqlDataCopyThresholds() != null) {
            sqlDataCopyThresholds().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
        if (backupConfiguration() != null) {
            backupConfiguration().validate();
        }
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
        if (keyVault() != null) {
            keyVault().validate();
        }
    }
}
