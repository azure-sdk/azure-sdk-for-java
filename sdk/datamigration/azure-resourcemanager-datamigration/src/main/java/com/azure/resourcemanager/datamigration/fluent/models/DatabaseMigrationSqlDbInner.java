// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationPropertiesSqlDbKind;
import com.azure.resourcemanager.datamigration.models.ErrorInfo;
import com.azure.resourcemanager.datamigration.models.KeyVaultProperties;
import com.azure.resourcemanager.datamigration.models.SqlConnectionInformation;
import com.azure.resourcemanager.datamigration.models.SqlDataCopyThresholds;
import com.azure.resourcemanager.datamigration.models.SqlDbBackupConfiguration;
import com.azure.resourcemanager.datamigration.models.SqlDbMigrationStatusDetails;
import com.azure.resourcemanager.datamigration.models.SqlDbOfflineConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Database Migration Resource for SQL Database. */
@Fluent
public final class DatabaseMigrationSqlDbInner extends ProxyResource {
    /*
     * Location of database migration service.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Database Migration Resource properties for SQL database.
     */
    @JsonProperty(value = "properties")
    private DatabaseMigrationPropertiesSqlDb innerProperties;

    /** Creates an instance of DatabaseMigrationSqlDbInner class. */
    public DatabaseMigrationSqlDbInner() {
    }

    /**
     * Get the location property: Location of database migration service.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location of database migration service.
     *
     * @param location the location value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Database Migration Resource properties for SQL database.
     *
     * @return the innerProperties value.
     */
    private DatabaseMigrationPropertiesSqlDb innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     *
     * @return the migrationStatusDetails value.
     */
    public SqlDbMigrationStatusDetails migrationStatusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().migrationStatusDetails();
    }

    /**
     * Get the targetSqlConnection property: Target SQL DB connection details.
     *
     * @return the targetSqlConnection value.
     */
    public SqlConnectionInformation targetSqlConnection() {
        return this.innerProperties() == null ? null : this.innerProperties().targetSqlConnection();
    }

    /**
     * Set the targetSqlConnection property: Target SQL DB connection details.
     *
     * @param targetSqlConnection the targetSqlConnection value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withTargetSqlConnection(targetSqlConnection);
        return this;
    }

    /**
     * Get the sqlDataCopyThresholds property: Minimum Row count and size of a table with a clustered index required to
     * perform parallel data copy.
     *
     * @return the sqlDataCopyThresholds value.
     */
    public SqlDataCopyThresholds sqlDataCopyThresholds() {
        return this.innerProperties() == null ? null : this.innerProperties().sqlDataCopyThresholds();
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     *
     * @return the offlineConfiguration value.
     */
    public SqlDbOfflineConfiguration offlineConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().offlineConfiguration();
    }

    /**
     * Get the backupConfiguration property: Source Location details of backups.
     *
     * @return the backupConfiguration value.
     */
    public SqlDbBackupConfiguration backupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().backupConfiguration();
    }

    /**
     * Get the tableList property: List of tables to copy.
     *
     * @return the tableList value.
     */
    public List<String> tableList() {
        return this.innerProperties() == null ? null : this.innerProperties().tableList();
    }

    /**
     * Set the tableList property: List of tables to copy.
     *
     * @param tableList the tableList value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withTableList(List<String> tableList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withTableList(tableList);
        return this;
    }

    /**
     * Get the scope property: Scope of the database.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.innerProperties() == null ? null : this.innerProperties().scope();
    }

    /**
     * Set the scope property: Scope of the database.
     *
     * @param scope the scope value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withScope(String scope) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withScope(scope);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the migrationStatus property: Migration status.
     *
     * @return the migrationStatus value.
     */
    public String migrationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().migrationStatus();
    }

    /**
     * Get the startedOn property: Database migration start time.
     *
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.innerProperties() == null ? null : this.innerProperties().startedOn();
    }

    /**
     * Get the endedOn property: Database migration end time.
     *
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.innerProperties() == null ? null : this.innerProperties().endedOn();
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceSqlConnection();
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     *
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceServerName();
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     *
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceDatabaseName();
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     *
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withSourceDatabaseName(String sourceDatabaseName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.innerProperties() == null ? null : this.innerProperties().targetDatabaseCollation();
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withTargetDatabaseCollation(String targetDatabaseCollation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    /**
     * Get the migrationService property: Resource Id of the Migration Service.
     *
     * @return the migrationService value.
     */
    public String migrationService() {
        return this.innerProperties() == null ? null : this.innerProperties().migrationService();
    }

    /**
     * Set the migrationService property: Resource Id of the Migration Service.
     *
     * @param migrationService the migrationService value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withMigrationService(String migrationService) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withMigrationService(migrationService);
        return this;
    }

    /**
     * Get the migrationOperationId property: ID tracking current migration operation.
     *
     * @return the migrationOperationId value.
     */
    public String migrationOperationId() {
        return this.innerProperties() == null ? null : this.innerProperties().migrationOperationId();
    }

    /**
     * Set the migrationOperationId property: ID tracking current migration operation.
     *
     * @param migrationOperationId the migrationOperationId value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withMigrationOperationId(String migrationOperationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     *
     * @return the migrationFailureError value.
     */
    public ErrorInfo migrationFailureError() {
        return this.innerProperties() == null ? null : this.innerProperties().migrationFailureError();
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningError();
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withProvisioningError(String provisioningError) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Get the kind property: Resource Type.
     *
     * @return the kind value.
     */
    public DatabaseMigrationPropertiesSqlDbKind kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Set the kind property: Resource Type.
     *
     * @param kind the kind value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withKind(DatabaseMigrationPropertiesSqlDbKind kind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withKind(kind);
        return this;
    }

    /**
     * Get the keyVault property: Key Vault Properties.
     *
     * @return the keyVault value.
     */
    public KeyVaultProperties keyVault() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVault();
    }

    /**
     * Set the keyVault property: Key Vault Properties.
     *
     * @param keyVault the keyVault value to set.
     * @return the DatabaseMigrationSqlDbInner object itself.
     */
    public DatabaseMigrationSqlDbInner withKeyVault(KeyVaultProperties keyVault) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseMigrationPropertiesSqlDb();
        }
        this.innerProperties().withKeyVault(keyVault);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
