// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/**
 * Database Migration Base Resource properties.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "kind",
    defaultImpl = DatabaseMigrationBaseProperties.class)
@JsonTypeName("DatabaseMigrationBaseProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "MongoToCosmosDbMongo", value = DatabaseMigrationPropertiesCosmosDbMongo.class),
    @JsonSubTypes.Type(name = "DatabaseMigrationProperties", value = DatabaseMigrationProperties.class) })
@Fluent
public class DatabaseMigrationBaseProperties {
    /*
     * Resource Id of the target resource.
     */
    @JsonProperty(value = "scope")
    private String scope;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and
     * migration has started.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Migration status.
     */
    @JsonProperty(value = "migrationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String migrationStatus;

    /*
     * Database migration start time.
     */
    @JsonProperty(value = "startedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedOn;

    /*
     * Database migration end time.
     */
    @JsonProperty(value = "endedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endedOn;

    /*
     * Resource Id of the Migration Service.
     */
    @JsonProperty(value = "migrationService")
    private String migrationService;

    /*
     * ID for current migration operation.
     */
    @JsonProperty(value = "migrationOperationId")
    private String migrationOperationId;

    /*
     * Error details in case of migration failure.
     */
    @JsonProperty(value = "migrationFailureError", access = JsonProperty.Access.WRITE_ONLY)
    private ErrorInfo migrationFailureError;

    /*
     * Error message for migration provisioning failure, if any.
     */
    @JsonProperty(value = "provisioningError")
    private String provisioningError;

    /**
     * Creates an instance of DatabaseMigrationBaseProperties class.
     */
    public DatabaseMigrationBaseProperties() {
    }

    /**
     * Get the scope property: Resource Id of the target resource.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Resource Id of the target resource.
     * 
     * @param scope the scope value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the migrationStatus property: Migration status.
     * 
     * @return the migrationStatus value.
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the startedOn property: Database migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Database migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the migrationService property: Resource Id of the Migration Service.
     * 
     * @return the migrationService value.
     */
    public String migrationService() {
        return this.migrationService;
    }

    /**
     * Set the migrationService property: Resource Id of the Migration Service.
     * 
     * @param migrationService the migrationService value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withMigrationService(String migrationService) {
        this.migrationService = migrationService;
        return this;
    }

    /**
     * Get the migrationOperationId property: ID for current migration operation.
     * 
     * @return the migrationOperationId value.
     */
    public String migrationOperationId() {
        return this.migrationOperationId;
    }

    /**
     * Set the migrationOperationId property: ID for current migration operation.
     * 
     * @param migrationOperationId the migrationOperationId value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withMigrationOperationId(String migrationOperationId) {
        this.migrationOperationId = migrationOperationId;
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     * 
     * @return the migrationFailureError value.
     */
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     * 
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.provisioningError;
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     * 
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withProvisioningError(String provisioningError) {
        this.provisioningError = provisioningError;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
    }
}
