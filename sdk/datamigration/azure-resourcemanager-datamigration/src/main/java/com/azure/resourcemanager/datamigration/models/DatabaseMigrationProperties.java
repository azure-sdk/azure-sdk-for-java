// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Database Migration Resource properties.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "kind",
    defaultImpl = DatabaseMigrationProperties.class)
@JsonTypeName("DatabaseMigrationProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "SqlDb", value = DatabaseMigrationPropertiesSqlDb.class),
    @JsonSubTypes.Type(name = "SqlMi", value = DatabaseMigrationPropertiesSqlMi.class),
    @JsonSubTypes.Type(name = "SqlVm", value = DatabaseMigrationPropertiesSqlVm.class) })
@Fluent
public class DatabaseMigrationProperties extends DatabaseMigrationBaseProperties {
    /*
     * Source SQL Server connection details.
     */
    @JsonProperty(value = "sourceSqlConnection")
    private SqlConnectionInformation sourceSqlConnection;

    /*
     * Name of the source database.
     */
    @JsonProperty(value = "sourceDatabaseName")
    private String sourceDatabaseName;

    /*
     * Name of the source sql server.
     */
    @JsonProperty(value = "sourceServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceServerName;

    /*
     * Database collation to be used for the target database.
     */
    @JsonProperty(value = "targetDatabaseCollation")
    private String targetDatabaseCollation;

    /**
     * Creates an instance of DatabaseMigrationProperties class.
     */
    public DatabaseMigrationProperties() {
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     * 
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.sourceSqlConnection;
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     * 
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.sourceSqlConnection = sourceSqlConnection;
        return this;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     * 
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     * 
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     * 
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.targetDatabaseCollation;
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     * 
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.targetDatabaseCollation = targetDatabaseCollation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
    }
}
