// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationPropertiesSqlDbKind;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationSqlDb;
import com.azure.resourcemanager.datamigration.models.ErrorInfo;
import com.azure.resourcemanager.datamigration.models.KeyVaultProperties;
import com.azure.resourcemanager.datamigration.models.MigrationOperationInput;
import com.azure.resourcemanager.datamigration.models.SqlConnectionInformation;
import com.azure.resourcemanager.datamigration.models.SqlDataCopyThresholds;
import com.azure.resourcemanager.datamigration.models.SqlDbBackupConfiguration;
import com.azure.resourcemanager.datamigration.models.SqlDbMigrationStatusDetails;
import com.azure.resourcemanager.datamigration.models.SqlDbOfflineConfiguration;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

public final class DatabaseMigrationSqlDbImpl
    implements DatabaseMigrationSqlDb, DatabaseMigrationSqlDb.Definition, DatabaseMigrationSqlDb.Update {
    private DatabaseMigrationSqlDbInner innerObject;

    private final com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public SqlDbMigrationStatusDetails migrationStatusDetails() {
        return this.innerModel().migrationStatusDetails();
    }

    public SqlConnectionInformation targetSqlConnection() {
        return this.innerModel().targetSqlConnection();
    }

    public SqlDataCopyThresholds sqlDataCopyThresholds() {
        return this.innerModel().sqlDataCopyThresholds();
    }

    public SqlDbOfflineConfiguration offlineConfiguration() {
        return this.innerModel().offlineConfiguration();
    }

    public SqlDbBackupConfiguration backupConfiguration() {
        return this.innerModel().backupConfiguration();
    }

    public List<String> tableList() {
        List<String> inner = this.innerModel().tableList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String scope() {
        return this.innerModel().scope();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String migrationStatus() {
        return this.innerModel().migrationStatus();
    }

    public OffsetDateTime startedOn() {
        return this.innerModel().startedOn();
    }

    public OffsetDateTime endedOn() {
        return this.innerModel().endedOn();
    }

    public SqlConnectionInformation sourceSqlConnection() {
        return this.innerModel().sourceSqlConnection();
    }

    public String sourceServerName() {
        return this.innerModel().sourceServerName();
    }

    public String sourceDatabaseName() {
        return this.innerModel().sourceDatabaseName();
    }

    public String targetDatabaseCollation() {
        return this.innerModel().targetDatabaseCollation();
    }

    public String migrationService() {
        return this.innerModel().migrationService();
    }

    public String migrationOperationId() {
        return this.innerModel().migrationOperationId();
    }

    public ErrorInfo migrationFailureError() {
        return this.innerModel().migrationFailureError();
    }

    public String provisioningError() {
        return this.innerModel().provisioningError();
    }

    public DatabaseMigrationPropertiesSqlDbKind kind() {
        return this.innerModel().kind();
    }

    public KeyVaultProperties keyVault() {
        return this.innerModel().keyVault();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DatabaseMigrationSqlDbInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.datamigration.DataMigrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlDbInstanceName;

    private String targetDbName;

    public DatabaseMigrationSqlDbImpl withExistingServer(String resourceGroupName, String sqlDbInstanceName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlDbInstanceName = sqlDbInstanceName;
        return this;
    }

    public DatabaseMigrationSqlDb create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .createOrUpdate(resourceGroupName, sqlDbInstanceName, targetDbName, this.innerModel(), Context.NONE);
        return this;
    }

    public DatabaseMigrationSqlDb create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .createOrUpdate(resourceGroupName, sqlDbInstanceName, targetDbName, this.innerModel(), context);
        return this;
    }

    DatabaseMigrationSqlDbImpl(
        String name, com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerObject = new DatabaseMigrationSqlDbInner();
        this.serviceManager = serviceManager;
        this.targetDbName = name;
    }

    public DatabaseMigrationSqlDbImpl update() {
        return this;
    }

    public DatabaseMigrationSqlDb apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .createOrUpdate(resourceGroupName, sqlDbInstanceName, targetDbName, this.innerModel(), Context.NONE);
        return this;
    }

    public DatabaseMigrationSqlDb apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .createOrUpdate(resourceGroupName, sqlDbInstanceName, targetDbName, this.innerModel(), context);
        return this;
    }

    DatabaseMigrationSqlDbImpl(
        DatabaseMigrationSqlDbInner innerObject,
        com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlDbInstanceName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.targetDbName = Utils.getValueFromIdByName(innerObject.id(), "databaseMigrations");
    }

    public DatabaseMigrationSqlDb refresh() {
        UUID localMigrationOperationId = null;
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .getWithResponse(
                    resourceGroupName,
                    sqlDbInstanceName,
                    targetDbName,
                    localMigrationOperationId,
                    localExpand,
                    Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseMigrationSqlDb refresh(Context context) {
        UUID localMigrationOperationId = null;
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseMigrationsSqlDbs()
                .getWithResponse(
                    resourceGroupName, sqlDbInstanceName, targetDbName, localMigrationOperationId, localExpand, context)
                .getValue();
        return this;
    }

    public void cancel(MigrationOperationInput parameters) {
        serviceManager
            .databaseMigrationsSqlDbs()
            .cancel(resourceGroupName, sqlDbInstanceName, targetDbName, parameters);
    }

    public void cancel(MigrationOperationInput parameters, Context context) {
        serviceManager
            .databaseMigrationsSqlDbs()
            .cancel(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context);
    }

    public Response<DatabaseMigrationSqlDb> retryWithResponse(
        MigrationOperationInput migrationOperationInput, Context context) {
        return serviceManager
            .databaseMigrationsSqlDbs()
            .retryWithResponse(resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationInput, context);
    }

    public DatabaseMigrationSqlDb retry(MigrationOperationInput migrationOperationInput) {
        return serviceManager
            .databaseMigrationsSqlDbs()
            .retry(resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationInput);
    }

    public DatabaseMigrationSqlDbImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DatabaseMigrationSqlDbImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        this.innerModel().withTargetSqlConnection(targetSqlConnection);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withTableList(List<String> tableList) {
        this.innerModel().withTableList(tableList);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withScope(String scope) {
        this.innerModel().withScope(scope);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.innerModel().withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withSourceDatabaseName(String sourceDatabaseName) {
        this.innerModel().withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.innerModel().withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withMigrationService(String migrationService) {
        this.innerModel().withMigrationService(migrationService);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withMigrationOperationId(String migrationOperationId) {
        this.innerModel().withMigrationOperationId(migrationOperationId);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withProvisioningError(String provisioningError) {
        this.innerModel().withProvisioningError(provisioningError);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withKind(DatabaseMigrationPropertiesSqlDbKind kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public DatabaseMigrationSqlDbImpl withKeyVault(KeyVaultProperties keyVault) {
        this.innerModel().withKeyVault(keyVault);
        return this;
    }
}
