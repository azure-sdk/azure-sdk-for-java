// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner;
import java.time.OffsetDateTime;
import java.util.List;

/** An immutable client-side representation of DatabaseMigrationSqlDb. */
public interface DatabaseMigrationSqlDb {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: Location of database migration service.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the migrationStatusDetails property: Detailed migration status. Not included by default.
     *
     * @return the migrationStatusDetails value.
     */
    SqlDbMigrationStatusDetails migrationStatusDetails();

    /**
     * Gets the targetSqlConnection property: Target SQL DB connection details.
     *
     * @return the targetSqlConnection value.
     */
    SqlConnectionInformation targetSqlConnection();

    /**
     * Gets the sqlDataCopyThresholds property: Minimum Row count and size of a table with a clustered index required to
     * perform parallel data copy.
     *
     * @return the sqlDataCopyThresholds value.
     */
    SqlDataCopyThresholds sqlDataCopyThresholds();

    /**
     * Gets the offlineConfiguration property: Offline configuration.
     *
     * @return the offlineConfiguration value.
     */
    SqlDbOfflineConfiguration offlineConfiguration();

    /**
     * Gets the backupConfiguration property: Source Location details of backups.
     *
     * @return the backupConfiguration value.
     */
    SqlDbBackupConfiguration backupConfiguration();

    /**
     * Gets the tableList property: List of tables to copy.
     *
     * @return the tableList value.
     */
    List<String> tableList();

    /**
     * Gets the scope property: Scope of the database.
     *
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the migrationStatus property: Migration status.
     *
     * @return the migrationStatus value.
     */
    String migrationStatus();

    /**
     * Gets the startedOn property: Database migration start time.
     *
     * @return the startedOn value.
     */
    OffsetDateTime startedOn();

    /**
     * Gets the endedOn property: Database migration end time.
     *
     * @return the endedOn value.
     */
    OffsetDateTime endedOn();

    /**
     * Gets the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @return the sourceSqlConnection value.
     */
    SqlConnectionInformation sourceSqlConnection();

    /**
     * Gets the sourceServerName property: Name of the source sql server.
     *
     * @return the sourceServerName value.
     */
    String sourceServerName();

    /**
     * Gets the sourceDatabaseName property: Name of the source database.
     *
     * @return the sourceDatabaseName value.
     */
    String sourceDatabaseName();

    /**
     * Gets the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @return the targetDatabaseCollation value.
     */
    String targetDatabaseCollation();

    /**
     * Gets the migrationService property: Resource Id of the Migration Service.
     *
     * @return the migrationService value.
     */
    String migrationService();

    /**
     * Gets the migrationOperationId property: ID tracking current migration operation.
     *
     * @return the migrationOperationId value.
     */
    String migrationOperationId();

    /**
     * Gets the migrationFailureError property: Error details in case of migration failure.
     *
     * @return the migrationFailureError value.
     */
    ErrorInfo migrationFailureError();

    /**
     * Gets the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @return the provisioningError value.
     */
    String provisioningError();

    /**
     * Gets the kind property: Resource Type.
     *
     * @return the kind value.
     */
    DatabaseMigrationPropertiesSqlDbKind kind();

    /**
     * Gets the keyVault property: Key Vault Properties.
     *
     * @return the keyVault value.
     */
    KeyVaultProperties keyVault();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner object.
     *
     * @return the inner object.
     */
    DatabaseMigrationSqlDbInner innerModel();

    /** The entirety of the DatabaseMigrationSqlDb definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DatabaseMigrationSqlDb definition stages. */
    interface DefinitionStages {
        /** The first stage of the DatabaseMigrationSqlDb definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, sqlDbInstanceName.
             *
             * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value
             *     from the Azure Resource Manager API or the portal.
             * @param sqlDbInstanceName The sqlDbInstanceName parameter.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String sqlDbInstanceName);
        }
        /**
         * The stage of the DatabaseMigrationSqlDb definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation,
                DefinitionStages.WithTargetSqlConnection,
                DefinitionStages.WithTableList,
                DefinitionStages.WithScope,
                DefinitionStages.WithSourceSqlConnection,
                DefinitionStages.WithSourceDatabaseName,
                DefinitionStages.WithTargetDatabaseCollation,
                DefinitionStages.WithMigrationService,
                DefinitionStages.WithMigrationOperationId,
                DefinitionStages.WithProvisioningError,
                DefinitionStages.WithKind,
                DefinitionStages.WithKeyVault {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DatabaseMigrationSqlDb create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseMigrationSqlDb create(Context context);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location Location of database migration service.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location Location of database migration service.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify targetSqlConnection. */
        interface WithTargetSqlConnection {
            /**
             * Specifies the targetSqlConnection property: Target SQL DB connection details..
             *
             * @param targetSqlConnection Target SQL DB connection details.
             * @return the next definition stage.
             */
            WithCreate withTargetSqlConnection(SqlConnectionInformation targetSqlConnection);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify tableList. */
        interface WithTableList {
            /**
             * Specifies the tableList property: List of tables to copy..
             *
             * @param tableList List of tables to copy.
             * @return the next definition stage.
             */
            WithCreate withTableList(List<String> tableList);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify scope. */
        interface WithScope {
            /**
             * Specifies the scope property: Scope of the database..
             *
             * @param scope Scope of the database.
             * @return the next definition stage.
             */
            WithCreate withScope(String scope);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify sourceSqlConnection. */
        interface WithSourceSqlConnection {
            /**
             * Specifies the sourceSqlConnection property: Source SQL Server connection details..
             *
             * @param sourceSqlConnection Source SQL Server connection details.
             * @return the next definition stage.
             */
            WithCreate withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify sourceDatabaseName. */
        interface WithSourceDatabaseName {
            /**
             * Specifies the sourceDatabaseName property: Name of the source database..
             *
             * @param sourceDatabaseName Name of the source database.
             * @return the next definition stage.
             */
            WithCreate withSourceDatabaseName(String sourceDatabaseName);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify targetDatabaseCollation. */
        interface WithTargetDatabaseCollation {
            /**
             * Specifies the targetDatabaseCollation property: Database collation to be used for the target database..
             *
             * @param targetDatabaseCollation Database collation to be used for the target database.
             * @return the next definition stage.
             */
            WithCreate withTargetDatabaseCollation(String targetDatabaseCollation);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify migrationService. */
        interface WithMigrationService {
            /**
             * Specifies the migrationService property: Resource Id of the Migration Service..
             *
             * @param migrationService Resource Id of the Migration Service.
             * @return the next definition stage.
             */
            WithCreate withMigrationService(String migrationService);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify migrationOperationId. */
        interface WithMigrationOperationId {
            /**
             * Specifies the migrationOperationId property: ID tracking current migration operation..
             *
             * @param migrationOperationId ID tracking current migration operation.
             * @return the next definition stage.
             */
            WithCreate withMigrationOperationId(String migrationOperationId);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify provisioningError. */
        interface WithProvisioningError {
            /**
             * Specifies the provisioningError property: Error message for migration provisioning failure, if any..
             *
             * @param provisioningError Error message for migration provisioning failure, if any.
             * @return the next definition stage.
             */
            WithCreate withProvisioningError(String provisioningError);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Resource Type.
             *
             * @param kind Resource Type.
             * @return the next definition stage.
             */
            WithCreate withKind(DatabaseMigrationPropertiesSqlDbKind kind);
        }
        /** The stage of the DatabaseMigrationSqlDb definition allowing to specify keyVault. */
        interface WithKeyVault {
            /**
             * Specifies the keyVault property: Key Vault Properties.
             *
             * @param keyVault Key Vault Properties.
             * @return the next definition stage.
             */
            WithCreate withKeyVault(KeyVaultProperties keyVault);
        }
    }
    /**
     * Begins update for the DatabaseMigrationSqlDb resource.
     *
     * @return the stage of resource update.
     */
    DatabaseMigrationSqlDb.Update update();

    /** The template for DatabaseMigrationSqlDb update. */
    interface Update
        extends UpdateStages.WithTargetSqlConnection,
            UpdateStages.WithTableList,
            UpdateStages.WithSourceSqlConnection,
            UpdateStages.WithSourceDatabaseName,
            UpdateStages.WithTargetDatabaseCollation,
            UpdateStages.WithMigrationService,
            UpdateStages.WithMigrationOperationId,
            UpdateStages.WithProvisioningError {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DatabaseMigrationSqlDb apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseMigrationSqlDb apply(Context context);
    }
    /** The DatabaseMigrationSqlDb update stages. */
    interface UpdateStages {
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify targetSqlConnection. */
        interface WithTargetSqlConnection {
            /**
             * Specifies the targetSqlConnection property: Target SQL DB connection details..
             *
             * @param targetSqlConnection Target SQL DB connection details.
             * @return the next definition stage.
             */
            Update withTargetSqlConnection(SqlConnectionInformation targetSqlConnection);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify tableList. */
        interface WithTableList {
            /**
             * Specifies the tableList property: List of tables to copy..
             *
             * @param tableList List of tables to copy.
             * @return the next definition stage.
             */
            Update withTableList(List<String> tableList);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify sourceSqlConnection. */
        interface WithSourceSqlConnection {
            /**
             * Specifies the sourceSqlConnection property: Source SQL Server connection details..
             *
             * @param sourceSqlConnection Source SQL Server connection details.
             * @return the next definition stage.
             */
            Update withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify sourceDatabaseName. */
        interface WithSourceDatabaseName {
            /**
             * Specifies the sourceDatabaseName property: Name of the source database..
             *
             * @param sourceDatabaseName Name of the source database.
             * @return the next definition stage.
             */
            Update withSourceDatabaseName(String sourceDatabaseName);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify targetDatabaseCollation. */
        interface WithTargetDatabaseCollation {
            /**
             * Specifies the targetDatabaseCollation property: Database collation to be used for the target database..
             *
             * @param targetDatabaseCollation Database collation to be used for the target database.
             * @return the next definition stage.
             */
            Update withTargetDatabaseCollation(String targetDatabaseCollation);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify migrationService. */
        interface WithMigrationService {
            /**
             * Specifies the migrationService property: Resource Id of the Migration Service..
             *
             * @param migrationService Resource Id of the Migration Service.
             * @return the next definition stage.
             */
            Update withMigrationService(String migrationService);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify migrationOperationId. */
        interface WithMigrationOperationId {
            /**
             * Specifies the migrationOperationId property: ID tracking current migration operation..
             *
             * @param migrationOperationId ID tracking current migration operation.
             * @return the next definition stage.
             */
            Update withMigrationOperationId(String migrationOperationId);
        }
        /** The stage of the DatabaseMigrationSqlDb update allowing to specify provisioningError. */
        interface WithProvisioningError {
            /**
             * Specifies the provisioningError property: Error message for migration provisioning failure, if any..
             *
             * @param provisioningError Error message for migration provisioning failure, if any.
             * @return the next definition stage.
             */
            Update withProvisioningError(String provisioningError);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlDb refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlDb refresh(Context context);

    /**
     * Stop on going migration for the database.
     *
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters);

    /**
     * Stop on going migration for the database.
     *
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters, Context context);

    /**
     * Retry on going migration for the database.
     *
     * @param migrationOperationInput Required migration operation ID for which retry will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response}.
     */
    Response<DatabaseMigrationSqlDb> retryWithResponse(
        MigrationOperationInput migrationOperationInput, Context context);

    /**
     * Retry on going migration for the database.
     *
     * @param migrationOperationInput Required migration operation ID for which retry will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database.
     */
    DatabaseMigrationSqlDb retry(MigrationOperationInput migrationOperationInput);
}
