// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Database Migration Resource properties for CosmosDb for Mongo.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("MongoToCosmosDbMongo")
@Fluent
public final class DatabaseMigrationPropertiesCosmosDbMongo extends DatabaseMigrationBaseProperties {
    /*
     * Source Mongo connection details.
     */
    @JsonProperty(value = "sourceMongoConnection")
    private MongoConnectionInformation sourceMongoConnection;

    /*
     * Target Cosmos DB Mongo connection details.
     */
    @JsonProperty(value = "targetMongoConnection")
    private MongoConnectionInformation targetMongoConnection;

    /*
     * List of Mongo Collections to be migrated.
     */
    @JsonProperty(value = "collectionList")
    private List<MongoMigrationCollection> collectionList;

    /**
     * Creates an instance of DatabaseMigrationPropertiesCosmosDbMongo class.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo() {
    }

    /**
     * Get the sourceMongoConnection property: Source Mongo connection details.
     * 
     * @return the sourceMongoConnection value.
     */
    public MongoConnectionInformation sourceMongoConnection() {
        return this.sourceMongoConnection;
    }

    /**
     * Set the sourceMongoConnection property: Source Mongo connection details.
     * 
     * @param sourceMongoConnection the sourceMongoConnection value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo
        withSourceMongoConnection(MongoConnectionInformation sourceMongoConnection) {
        this.sourceMongoConnection = sourceMongoConnection;
        return this;
    }

    /**
     * Get the targetMongoConnection property: Target Cosmos DB Mongo connection details.
     * 
     * @return the targetMongoConnection value.
     */
    public MongoConnectionInformation targetMongoConnection() {
        return this.targetMongoConnection;
    }

    /**
     * Set the targetMongoConnection property: Target Cosmos DB Mongo connection details.
     * 
     * @param targetMongoConnection the targetMongoConnection value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo
        withTargetMongoConnection(MongoConnectionInformation targetMongoConnection) {
        this.targetMongoConnection = targetMongoConnection;
        return this;
    }

    /**
     * Get the collectionList property: List of Mongo Collections to be migrated.
     * 
     * @return the collectionList value.
     */
    public List<MongoMigrationCollection> collectionList() {
        return this.collectionList;
    }

    /**
     * Set the collectionList property: List of Mongo Collections to be migrated.
     * 
     * @param collectionList the collectionList value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo withCollectionList(List<MongoMigrationCollection> collectionList) {
        this.collectionList = collectionList;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sourceMongoConnection() != null) {
            sourceMongoConnection().validate();
        }
        if (targetMongoConnection() != null) {
            targetMongoConnection().validate();
        }
        if (collectionList() != null) {
            collectionList().forEach(e -> e.validate());
        }
    }
}
