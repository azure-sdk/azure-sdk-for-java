// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Database Migration Resource properties for CosmosDb for Mongo.
 */
@Fluent
public final class DatabaseMigrationPropertiesCosmosDbMongo extends DatabaseMigrationBaseProperties {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.MONGO_TO_COSMOS_DB_MONGO;

    /*
     * Source Mongo connection details.
     */
    private MongoConnectionInformation sourceMongoConnection;

    /*
     * Target Cosmos DB Mongo connection details.
     */
    private MongoConnectionInformation targetMongoConnection;

    /*
     * List of Mongo Collections to be migrated.
     */
    private List<MongoMigrationCollection> collectionList;

    /*
     * Error details in case of migration failure.
     */
    private ErrorInfo migrationFailureError;

    /*
     * Database migration end time.
     */
    private OffsetDateTime endedOn;

    /*
     * Database migration start time.
     */
    private OffsetDateTime startedOn;

    /*
     * Migration status.
     */
    private String migrationStatus;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and
     * migration has started.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DatabaseMigrationPropertiesCosmosDbMongo class.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    @Override
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the sourceMongoConnection property: Source Mongo connection details.
     * 
     * @return the sourceMongoConnection value.
     */
    public MongoConnectionInformation sourceMongoConnection() {
        return this.sourceMongoConnection;
    }

    /**
     * Set the sourceMongoConnection property: Source Mongo connection details.
     * 
     * @param sourceMongoConnection the sourceMongoConnection value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo
        withSourceMongoConnection(MongoConnectionInformation sourceMongoConnection) {
        this.sourceMongoConnection = sourceMongoConnection;
        return this;
    }

    /**
     * Get the targetMongoConnection property: Target Cosmos DB Mongo connection details.
     * 
     * @return the targetMongoConnection value.
     */
    public MongoConnectionInformation targetMongoConnection() {
        return this.targetMongoConnection;
    }

    /**
     * Set the targetMongoConnection property: Target Cosmos DB Mongo connection details.
     * 
     * @param targetMongoConnection the targetMongoConnection value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo
        withTargetMongoConnection(MongoConnectionInformation targetMongoConnection) {
        this.targetMongoConnection = targetMongoConnection;
        return this;
    }

    /**
     * Get the collectionList property: List of Mongo Collections to be migrated.
     * 
     * @return the collectionList value.
     */
    public List<MongoMigrationCollection> collectionList() {
        return this.collectionList;
    }

    /**
     * Set the collectionList property: List of Mongo Collections to be migrated.
     * 
     * @param collectionList the collectionList value to set.
     * @return the DatabaseMigrationPropertiesCosmosDbMongo object itself.
     */
    public DatabaseMigrationPropertiesCosmosDbMongo withCollectionList(List<MongoMigrationCollection> collectionList) {
        this.collectionList = collectionList;
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     * 
     * @return the migrationFailureError value.
     */
    @Override
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Get the endedOn property: Database migration end time.
     * 
     * @return the endedOn value.
     */
    @Override
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the startedOn property: Database migration start time.
     * 
     * @return the startedOn value.
     */
    @Override
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the migrationStatus property: Migration status.
     * 
     * @return the migrationStatus value.
     */
    @Override
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesCosmosDbMongo withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceMongoConnection() != null) {
            sourceMongoConnection().validate();
        }
        if (targetMongoConnection() != null) {
            targetMongoConnection().validate();
        }
        if (collectionList() != null) {
            collectionList().forEach(e -> e.validate());
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", scope());
        jsonWriter.writeStringField("migrationService", migrationService());
        jsonWriter.writeStringField("migrationOperationId", migrationOperationId());
        jsonWriter.writeStringField("provisioningError", provisioningError());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("sourceMongoConnection", this.sourceMongoConnection);
        jsonWriter.writeJsonField("targetMongoConnection", this.targetMongoConnection);
        jsonWriter.writeArrayField("collectionList", this.collectionList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationPropertiesCosmosDbMongo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationPropertiesCosmosDbMongo if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationPropertiesCosmosDbMongo.
     */
    public static DatabaseMigrationPropertiesCosmosDbMongo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationPropertiesCosmosDbMongo deserializedDatabaseMigrationPropertiesCosmosDbMongo
                = new DatabaseMigrationPropertiesCosmosDbMongo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.withScope(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.migrationStatus = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.withMigrationService(reader.getString());
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.withMigrationOperationId(reader.getString());
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.migrationFailureError
                        = ErrorInfo.fromJson(reader);
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.withProvisioningError(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.kind
                        = ResourceType.fromString(reader.getString());
                } else if ("sourceMongoConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.sourceMongoConnection
                        = MongoConnectionInformation.fromJson(reader);
                } else if ("targetMongoConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.targetMongoConnection
                        = MongoConnectionInformation.fromJson(reader);
                } else if ("collectionList".equals(fieldName)) {
                    List<MongoMigrationCollection> collectionList
                        = reader.readArray(reader1 -> MongoMigrationCollection.fromJson(reader1));
                    deserializedDatabaseMigrationPropertiesCosmosDbMongo.collectionList = collectionList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationPropertiesCosmosDbMongo;
        });
    }
}
