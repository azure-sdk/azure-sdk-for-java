// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.datamigration.models.BackupConfiguration;
import com.azure.resourcemanager.datamigration.models.SqlConnectionInformation;
import com.azure.resourcemanager.datamigration.models.TestConnectivityData;
import com.azure.resourcemanager.datamigration.models.ValidateIRKind;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** IR validations for MI / VM. */
@Fluent
public final class ValidateIRInner {
    /*
     * Resource Type
     */
    @JsonProperty(value = "kind")
    private ValidateIRKind kind;

    /*
     * Name of the source database.
     */
    @JsonProperty(value = "sourceDatabaseName")
    private String sourceDatabaseName;

    /*
     * Source SQL Server connection details.
     */
    @JsonProperty(value = "sourceSqlConnection")
    private SqlConnectionInformation sourceSqlConnection;

    /*
     * Name of the target database.
     */
    @JsonProperty(value = "targetDatabaseName")
    private String targetDatabaseName;

    /*
     * Target SQL Server connection details.
     */
    @JsonProperty(value = "targetSqlConnection")
    private SqlConnectionInformation targetSqlConnection;

    /*
     * Backup configuration info.
     */
    @JsonProperty(value = "backupConfiguration")
    private BackupConfiguration backupConfiguration;

    /*
     * Validation result.
     */
    @JsonProperty(value = "succeeded")
    private Boolean succeeded;

    /*
     * Validation errors.
     */
    @JsonProperty(value = "errors")
    private List<TestConnectivityData> errors;

    /** Creates an instance of ValidateIRInner class. */
    public ValidateIRInner() {
    }

    /**
     * Get the kind property: Resource Type.
     *
     * @return the kind value.
     */
    public ValidateIRKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Resource Type.
     *
     * @param kind the kind value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withKind(ValidateIRKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     *
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     *
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.sourceSqlConnection;
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.sourceSqlConnection = sourceSqlConnection;
        return this;
    }

    /**
     * Get the targetDatabaseName property: Name of the target database.
     *
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set the targetDatabaseName property: Name of the target database.
     *
     * @param targetDatabaseName the targetDatabaseName value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get the targetSqlConnection property: Target SQL Server connection details.
     *
     * @return the targetSqlConnection value.
     */
    public SqlConnectionInformation targetSqlConnection() {
        return this.targetSqlConnection;
    }

    /**
     * Set the targetSqlConnection property: Target SQL Server connection details.
     *
     * @param targetSqlConnection the targetSqlConnection value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        this.targetSqlConnection = targetSqlConnection;
        return this;
    }

    /**
     * Get the backupConfiguration property: Backup configuration info.
     *
     * @return the backupConfiguration value.
     */
    public BackupConfiguration backupConfiguration() {
        return this.backupConfiguration;
    }

    /**
     * Set the backupConfiguration property: Backup configuration info.
     *
     * @param backupConfiguration the backupConfiguration value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withBackupConfiguration(BackupConfiguration backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
    }

    /**
     * Get the succeeded property: Validation result.
     *
     * @return the succeeded value.
     */
    public Boolean succeeded() {
        return this.succeeded;
    }

    /**
     * Set the succeeded property: Validation result.
     *
     * @param succeeded the succeeded value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withSucceeded(Boolean succeeded) {
        this.succeeded = succeeded;
        return this;
    }

    /**
     * Get the errors property: Validation errors.
     *
     * @return the errors value.
     */
    public List<TestConnectivityData> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: Validation errors.
     *
     * @param errors the errors value to set.
     * @return the ValidateIRInner object itself.
     */
    public ValidateIRInner withErrors(List<TestConnectivityData> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
        if (targetSqlConnection() != null) {
            targetSqlConnection().validate();
        }
        if (backupConfiguration() != null) {
            backupConfiguration().validate();
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }
}
