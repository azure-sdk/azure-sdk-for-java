// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Database Migration Resource properties for SQL Managed Instance. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("SqlMi")
@Fluent
public final class DatabaseMigrationPropertiesSqlMi extends DatabaseMigrationProperties {
    /*
     * Detailed migration status. Not included by default.
     */
    @JsonProperty(value = "migrationStatusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private MigrationStatusDetails migrationStatusDetails;

    /*
     * Database collation to be used for the target database.
     */
    @JsonProperty(value = "targetDatabaseCollation")
    private String targetDatabaseCollation;

    /*
     * Error message for migration provisioning failure, if any.
     */
    @JsonProperty(value = "provisioningError")
    private String provisioningError;

    /*
     * Backup configuration info.
     */
    @JsonProperty(value = "backupConfiguration")
    private BackupConfiguration backupConfiguration;

    /*
     * Offline configuration.
     */
    @JsonProperty(value = "offlineConfiguration")
    private OfflineConfiguration offlineConfiguration;

    /** Creates an instance of DatabaseMigrationPropertiesSqlMi class. */
    public DatabaseMigrationPropertiesSqlMi() {
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     *
     * @return the migrationStatusDetails value.
     */
    public MigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.targetDatabaseCollation;
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.targetDatabaseCollation = targetDatabaseCollation;
        return this;
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.provisioningError;
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withProvisioningError(String provisioningError) {
        this.provisioningError = provisioningError;
        return this;
    }

    /**
     * Get the backupConfiguration property: Backup configuration info.
     *
     * @return the backupConfiguration value.
     */
    public BackupConfiguration backupConfiguration() {
        return this.backupConfiguration;
    }

    /**
     * Set the backupConfiguration property: Backup configuration info.
     *
     * @param backupConfiguration the backupConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withBackupConfiguration(BackupConfiguration backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     *
     * @return the offlineConfiguration value.
     */
    public OfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Set the offlineConfiguration property: Offline configuration.
     *
     * @param offlineConfiguration the offlineConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withOfflineConfiguration(OfflineConfiguration offlineConfiguration) {
        this.offlineConfiguration = offlineConfiguration;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlMi withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlMi withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        super.withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlMi withSourceDatabaseName(String sourceDatabaseName) {
        super.withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlMi withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlMi withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (backupConfiguration() != null) {
            backupConfiguration().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
    }
}
