// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Database Migration Resource properties for SQL Managed Instance.
 */
@Fluent
public final class DatabaseMigrationPropertiesSqlMi extends DatabaseMigrationProperties {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.SQL_MI;

    /*
     * Detailed migration status. Not included by default.
     */
    private MigrationStatusDetails migrationStatusDetails;

    /*
     * Backup configuration info.
     */
    private BackupConfiguration backupConfiguration;

    /*
     * Offline configuration.
     */
    private OfflineConfiguration offlineConfiguration;

    /*
     * Name of the source sql server.
     */
    private String sourceServerName;

    /*
     * Error details in case of migration failure.
     */
    private ErrorInfo migrationFailureError;

    /*
     * Database migration end time.
     */
    private OffsetDateTime endedOn;

    /*
     * Database migration start time.
     */
    private OffsetDateTime startedOn;

    /*
     * Migration status.
     */
    private String migrationStatus;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and
     * migration has started.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DatabaseMigrationPropertiesSqlMi class.
     */
    public DatabaseMigrationPropertiesSqlMi() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    @Override
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     * 
     * @return the migrationStatusDetails value.
     */
    public MigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the backupConfiguration property: Backup configuration info.
     * 
     * @return the backupConfiguration value.
     */
    public BackupConfiguration backupConfiguration() {
        return this.backupConfiguration;
    }

    /**
     * Set the backupConfiguration property: Backup configuration info.
     * 
     * @param backupConfiguration the backupConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withBackupConfiguration(BackupConfiguration backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     * 
     * @return the offlineConfiguration value.
     */
    public OfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Set the offlineConfiguration property: Offline configuration.
     * 
     * @param offlineConfiguration the offlineConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlMi object itself.
     */
    public DatabaseMigrationPropertiesSqlMi withOfflineConfiguration(OfflineConfiguration offlineConfiguration) {
        this.offlineConfiguration = offlineConfiguration;
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     * 
     * @return the sourceServerName value.
     */
    @Override
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     * 
     * @return the migrationFailureError value.
     */
    @Override
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Get the endedOn property: Database migration end time.
     * 
     * @return the endedOn value.
     */
    @Override
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the startedOn property: Database migration start time.
     * 
     * @return the startedOn value.
     */
    @Override
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the migrationStatus property: Migration status.
     * 
     * @return the migrationStatus value.
     */
    @Override
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        super.withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withSourceDatabaseName(String sourceDatabaseName) {
        super.withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withTargetDatabaseCollation(String targetDatabaseCollation) {
        super.withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlMi withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (backupConfiguration() != null) {
            backupConfiguration().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", scope());
        jsonWriter.writeStringField("migrationService", migrationService());
        jsonWriter.writeStringField("migrationOperationId", migrationOperationId());
        jsonWriter.writeStringField("provisioningError", provisioningError());
        jsonWriter.writeJsonField("sourceSqlConnection", sourceSqlConnection());
        jsonWriter.writeStringField("sourceDatabaseName", sourceDatabaseName());
        jsonWriter.writeStringField("targetDatabaseCollation", targetDatabaseCollation());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("backupConfiguration", this.backupConfiguration);
        jsonWriter.writeJsonField("offlineConfiguration", this.offlineConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationPropertiesSqlMi from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationPropertiesSqlMi if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationPropertiesSqlMi.
     */
    public static DatabaseMigrationPropertiesSqlMi fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationPropertiesSqlMi deserializedDatabaseMigrationPropertiesSqlMi
                = new DatabaseMigrationPropertiesSqlMi();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withScope(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.migrationStatus = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withMigrationService(reader.getString());
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withMigrationOperationId(reader.getString());
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.migrationFailureError = ErrorInfo.fromJson(reader);
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withProvisioningError(reader.getString());
                } else if ("sourceSqlConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi
                        .withSourceSqlConnection(SqlConnectionInformation.fromJson(reader));
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withSourceDatabaseName(reader.getString());
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.sourceServerName = reader.getString();
                } else if ("targetDatabaseCollation".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.withTargetDatabaseCollation(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.kind = ResourceType.fromString(reader.getString());
                } else if ("migrationStatusDetails".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.migrationStatusDetails
                        = MigrationStatusDetails.fromJson(reader);
                } else if ("backupConfiguration".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.backupConfiguration
                        = BackupConfiguration.fromJson(reader);
                } else if ("offlineConfiguration".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlMi.offlineConfiguration
                        = OfflineConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationPropertiesSqlMi;
        });
    }
}
