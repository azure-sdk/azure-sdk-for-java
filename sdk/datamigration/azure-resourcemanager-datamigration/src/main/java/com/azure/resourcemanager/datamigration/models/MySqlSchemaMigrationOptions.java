// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** MySQL schema migration options. */
@Fluent
public class MySqlSchemaMigrationOptions {
    /*
     * If true, all view definitions will be migrated in the selected databases
     */
    @JsonProperty(value = "migrateAllViews")
    private Boolean migrateAllViews;

    /*
     * If true, all trigger definitions will be migrated in the selected databases
     */
    @JsonProperty(value = "migrateAllTriggers")
    private Boolean migrateAllTriggers;

    /*
     * If true, all event definitions will be migrated in the selected databases
     */
    @JsonProperty(value = "migrateAllEvents")
    private Boolean migrateAllEvents;

    /*
     * If true, all routine definitions will be migrated in the selected databases
     */
    @JsonProperty(value = "migrateAllRoutines")
    private Boolean migrateAllRoutines;

    /** Creates an instance of MySqlSchemaMigrationOptions class. */
    public MySqlSchemaMigrationOptions() {
    }

    /**
     * Get the migrateAllViews property: If true, all view definitions will be migrated in the selected databases.
     *
     * @return the migrateAllViews value.
     */
    public Boolean migrateAllViews() {
        return this.migrateAllViews;
    }

    /**
     * Set the migrateAllViews property: If true, all view definitions will be migrated in the selected databases.
     *
     * @param migrateAllViews the migrateAllViews value to set.
     * @return the MySqlSchemaMigrationOptions object itself.
     */
    public MySqlSchemaMigrationOptions withMigrateAllViews(Boolean migrateAllViews) {
        this.migrateAllViews = migrateAllViews;
        return this;
    }

    /**
     * Get the migrateAllTriggers property: If true, all trigger definitions will be migrated in the selected databases.
     *
     * @return the migrateAllTriggers value.
     */
    public Boolean migrateAllTriggers() {
        return this.migrateAllTriggers;
    }

    /**
     * Set the migrateAllTriggers property: If true, all trigger definitions will be migrated in the selected databases.
     *
     * @param migrateAllTriggers the migrateAllTriggers value to set.
     * @return the MySqlSchemaMigrationOptions object itself.
     */
    public MySqlSchemaMigrationOptions withMigrateAllTriggers(Boolean migrateAllTriggers) {
        this.migrateAllTriggers = migrateAllTriggers;
        return this;
    }

    /**
     * Get the migrateAllEvents property: If true, all event definitions will be migrated in the selected databases.
     *
     * @return the migrateAllEvents value.
     */
    public Boolean migrateAllEvents() {
        return this.migrateAllEvents;
    }

    /**
     * Set the migrateAllEvents property: If true, all event definitions will be migrated in the selected databases.
     *
     * @param migrateAllEvents the migrateAllEvents value to set.
     * @return the MySqlSchemaMigrationOptions object itself.
     */
    public MySqlSchemaMigrationOptions withMigrateAllEvents(Boolean migrateAllEvents) {
        this.migrateAllEvents = migrateAllEvents;
        return this;
    }

    /**
     * Get the migrateAllRoutines property: If true, all routine definitions will be migrated in the selected databases.
     *
     * @return the migrateAllRoutines value.
     */
    public Boolean migrateAllRoutines() {
        return this.migrateAllRoutines;
    }

    /**
     * Set the migrateAllRoutines property: If true, all routine definitions will be migrated in the selected databases.
     *
     * @param migrateAllRoutines the migrateAllRoutines value to set.
     * @return the MySqlSchemaMigrationOptions object itself.
     */
    public MySqlSchemaMigrationOptions withMigrateAllRoutines(Boolean migrateAllRoutines) {
        this.migrateAllRoutines = migrateAllRoutines;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
