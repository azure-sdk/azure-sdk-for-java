// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Basic info for Connector.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "connectorType",
    defaultImpl = ConnectorProperties.class)
@JsonTypeName("ConnectorProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "BitCoinSource", value = BitCoinSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "ConfluentSource", value = ConfluentSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "CosmosDbSource", value = CosmosDbSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "GooglePubSubSource", value = GooglePubSubSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "KinesisSource", value = KinesisSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "PostgreSqlSource", value = PostgreSqlSourceConnectorProperties.class),
    @JsonSubTypes.Type(name = "SqlServerSource", value = SqlServerSourceConnectorProperties.class) })
@Fluent
public class ConnectorProperties {
    /*
     * Max Tasks count of the Connector.
     */
    @JsonProperty(value = "maxTasks", required = true)
    private int maxTasks;

    /*
     * Type of the Connector.
     */
    @JsonProperty(value = "valueConverter", required = true)
    private ConverterType valueConverter;

    /*
     * Direction of the Connector.
     */
    @JsonProperty(value = "connectorDirection", access = JsonProperty.Access.WRITE_ONLY)
    private Direction connectorDirection;

    /*
     * connectionString of the EventHub.
     */
    @JsonProperty(value = "eventHubConfig", required = true)
    private EventHubConfig eventHubConfig;

    /*
     * State of the MessagingConnector
     */
    @JsonProperty(value = "connectorState", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private ConnectorState connectorState;

    /*
     * State of provisioning of the MessagingConnector ARM Resource
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectorProvisioningState provisioningState;

    /**
     * Creates an instance of ConnectorProperties class.
     */
    public ConnectorProperties() {
    }

    /**
     * Get the maxTasks property: Max Tasks count of the Connector.
     * 
     * @return the maxTasks value.
     */
    public int maxTasks() {
        return this.maxTasks;
    }

    /**
     * Set the maxTasks property: Max Tasks count of the Connector.
     * 
     * @param maxTasks the maxTasks value to set.
     * @return the ConnectorProperties object itself.
     */
    public ConnectorProperties withMaxTasks(int maxTasks) {
        this.maxTasks = maxTasks;
        return this;
    }

    /**
     * Get the valueConverter property: Type of the Connector.
     * 
     * @return the valueConverter value.
     */
    public ConverterType valueConverter() {
        return this.valueConverter;
    }

    /**
     * Set the valueConverter property: Type of the Connector.
     * 
     * @param valueConverter the valueConverter value to set.
     * @return the ConnectorProperties object itself.
     */
    public ConnectorProperties withValueConverter(ConverterType valueConverter) {
        this.valueConverter = valueConverter;
        return this;
    }

    /**
     * Get the connectorDirection property: Direction of the Connector.
     * 
     * @return the connectorDirection value.
     */
    public Direction connectorDirection() {
        return this.connectorDirection;
    }

    /**
     * Get the eventHubConfig property: connectionString of the EventHub.
     * 
     * @return the eventHubConfig value.
     */
    public EventHubConfig eventHubConfig() {
        return this.eventHubConfig;
    }

    /**
     * Set the eventHubConfig property: connectionString of the EventHub.
     * 
     * @param eventHubConfig the eventHubConfig value to set.
     * @return the ConnectorProperties object itself.
     */
    public ConnectorProperties withEventHubConfig(EventHubConfig eventHubConfig) {
        this.eventHubConfig = eventHubConfig;
        return this;
    }

    /**
     * Get the connectorState property: State of the MessagingConnector.
     * 
     * @return the connectorState value.
     */
    public ConnectorState connectorState() {
        return this.connectorState;
    }

    /**
     * Get the provisioningState property: State of provisioning of the MessagingConnector ARM Resource.
     * 
     * @return the provisioningState value.
     */
    public ConnectorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (valueConverter() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property valueConverter in model ConnectorProperties"));
        }
        if (eventHubConfig() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property eventHubConfig in model ConnectorProperties"));
        } else {
            eventHubConfig().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorProperties.class);
}
