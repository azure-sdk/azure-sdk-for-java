// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Configuration for KinesisSourceConnector.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "connectorType")
@JsonTypeName("KinesisSource")
@Fluent
public final class KinesisSourceConnectorProperties extends ConnectorProperties {
    /*
     * AccessKeyId for AWS Kinesis Server.
     */
    @JsonProperty(value = "awsAccessKeyId", required = true)
    private String awsAccessKeyId;

    /*
     * SecretAccessKey for AWS Kinesis Server.
     */
    @JsonProperty(value = "awsSecretAccessKey")
    private String awsSecretAccessKey;

    /*
     * Region of AWS Kinesis Server.
     */
    @JsonProperty(value = "awsKinesisRegion", required = true)
    private String awsKinesisRegion;

    /*
     * StreamName in AWS Kinesis Server.
     */
    @JsonProperty(value = "awsKinesisStreamName", required = true)
    private String awsKinesisStreamName;

    /**
     * Creates an instance of KinesisSourceConnectorProperties class.
     */
    public KinesisSourceConnectorProperties() {
    }

    /**
     * Get the awsAccessKeyId property: AccessKeyId for AWS Kinesis Server.
     * 
     * @return the awsAccessKeyId value.
     */
    public String awsAccessKeyId() {
        return this.awsAccessKeyId;
    }

    /**
     * Set the awsAccessKeyId property: AccessKeyId for AWS Kinesis Server.
     * 
     * @param awsAccessKeyId the awsAccessKeyId value to set.
     * @return the KinesisSourceConnectorProperties object itself.
     */
    public KinesisSourceConnectorProperties withAwsAccessKeyId(String awsAccessKeyId) {
        this.awsAccessKeyId = awsAccessKeyId;
        return this;
    }

    /**
     * Get the awsSecretAccessKey property: SecretAccessKey for AWS Kinesis Server.
     * 
     * @return the awsSecretAccessKey value.
     */
    public String awsSecretAccessKey() {
        return this.awsSecretAccessKey;
    }

    /**
     * Set the awsSecretAccessKey property: SecretAccessKey for AWS Kinesis Server.
     * 
     * @param awsSecretAccessKey the awsSecretAccessKey value to set.
     * @return the KinesisSourceConnectorProperties object itself.
     */
    public KinesisSourceConnectorProperties withAwsSecretAccessKey(String awsSecretAccessKey) {
        this.awsSecretAccessKey = awsSecretAccessKey;
        return this;
    }

    /**
     * Get the awsKinesisRegion property: Region of AWS Kinesis Server.
     * 
     * @return the awsKinesisRegion value.
     */
    public String awsKinesisRegion() {
        return this.awsKinesisRegion;
    }

    /**
     * Set the awsKinesisRegion property: Region of AWS Kinesis Server.
     * 
     * @param awsKinesisRegion the awsKinesisRegion value to set.
     * @return the KinesisSourceConnectorProperties object itself.
     */
    public KinesisSourceConnectorProperties withAwsKinesisRegion(String awsKinesisRegion) {
        this.awsKinesisRegion = awsKinesisRegion;
        return this;
    }

    /**
     * Get the awsKinesisStreamName property: StreamName in AWS Kinesis Server.
     * 
     * @return the awsKinesisStreamName value.
     */
    public String awsKinesisStreamName() {
        return this.awsKinesisStreamName;
    }

    /**
     * Set the awsKinesisStreamName property: StreamName in AWS Kinesis Server.
     * 
     * @param awsKinesisStreamName the awsKinesisStreamName value to set.
     * @return the KinesisSourceConnectorProperties object itself.
     */
    public KinesisSourceConnectorProperties withAwsKinesisStreamName(String awsKinesisStreamName) {
        this.awsKinesisStreamName = awsKinesisStreamName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KinesisSourceConnectorProperties withMaxTasks(int maxTasks) {
        super.withMaxTasks(maxTasks);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KinesisSourceConnectorProperties withValueConverter(ConverterType valueConverter) {
        super.withValueConverter(valueConverter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KinesisSourceConnectorProperties withEventHubConfig(EventHubConfig eventHubConfig) {
        super.withEventHubConfig(eventHubConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (awsAccessKeyId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property awsAccessKeyId in model KinesisSourceConnectorProperties"));
        }
        if (awsSecretAccessKey() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property awsSecretAccessKey in model KinesisSourceConnectorProperties"));
        }
        if (awsKinesisRegion() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property awsKinesisRegion in model KinesisSourceConnectorProperties"));
        }
        if (awsKinesisStreamName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property awsKinesisStreamName in model KinesisSourceConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KinesisSourceConnectorProperties.class);
}
