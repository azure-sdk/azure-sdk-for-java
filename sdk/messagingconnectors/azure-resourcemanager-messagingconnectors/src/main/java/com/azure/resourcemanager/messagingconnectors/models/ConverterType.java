// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.util.ExpandableStringEnum;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collection;

/**
 * Enum of the type of Converter.
 */
public final class ConverterType extends ExpandableStringEnum<ConverterType> {
    /**
     * Static value Unknown for ConverterType.
     */
    public static final ConverterType UNKNOWN = fromString("Unknown");

    /**
     * Static value ByteArrayConverter for ConverterType.
     */
    public static final ConverterType BYTE_ARRAY_CONVERTER = fromString("ByteArrayConverter");

    /**
     * Static value StringConverter for ConverterType.
     */
    public static final ConverterType STRING_CONVERTER = fromString("StringConverter");

    /**
     * Static value JsonConverter for ConverterType.
     */
    public static final ConverterType JSON_CONVERTER = fromString("JsonConverter");

    /**
     * Static value AvroConverter for ConverterType.
     */
    public static final ConverterType AVRO_CONVERTER = fromString("AvroConverter");

    /**
     * Static value CsvConverter for ConverterType.
     */
    public static final ConverterType CSV_CONVERTER = fromString("CsvConverter");

    /**
     * Creates a new instance of ConverterType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public ConverterType() {
    }

    /**
     * Creates or finds a ConverterType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding ConverterType.
     */
    @JsonCreator
    public static ConverterType fromString(String name) {
        return fromString(name, ConverterType.class);
    }

    /**
     * Gets known ConverterType values.
     * 
     * @return known ConverterType values.
     */
    public static Collection<ConverterType> values() {
        return values(ConverterType.class);
    }
}
