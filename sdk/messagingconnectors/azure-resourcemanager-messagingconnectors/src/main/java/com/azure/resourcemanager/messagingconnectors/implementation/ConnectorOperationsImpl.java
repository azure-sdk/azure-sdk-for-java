// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.messagingconnectors.fluent.ConnectorOperationsClient;
import com.azure.resourcemanager.messagingconnectors.fluent.models.ConnectorInstanceInner;
import com.azure.resourcemanager.messagingconnectors.models.ConnectorInstance;
import com.azure.resourcemanager.messagingconnectors.models.ConnectorOperations;

public final class ConnectorOperationsImpl implements ConnectorOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectorOperationsImpl.class);

    private final ConnectorOperationsClient innerClient;

    private final com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager serviceManager;

    public ConnectorOperationsImpl(ConnectorOperationsClient innerClient,
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ConnectorInstance> list() {
        PagedIterable<ConnectorInstanceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectorInstance> list(Context context) {
        PagedIterable<ConnectorInstanceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectorInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ConnectorInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectorInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ConnectorInstanceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ConnectorInstanceImpl(inner1, this.manager()));
    }

    public Response<ConnectorInstance> getByResourceGroupWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<ConnectorInstanceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectorInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectorInstance getByResourceGroup(String resourceGroupName, String name) {
        ConnectorInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new ConnectorInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Void> pauseWithResponse(String resourceGroupName, String name, Object body, Context context) {
        return this.serviceClient().pauseWithResponse(resourceGroupName, name, body, context);
    }

    public void pause(String resourceGroupName, String name, Object body) {
        this.serviceClient().pause(resourceGroupName, name, body);
    }

    public Response<Void> resumeWithResponse(String resourceGroupName, String name, Object body, Context context) {
        return this.serviceClient().resumeWithResponse(resourceGroupName, name, body, context);
    }

    public void resume(String resourceGroupName, String name, Object body) {
        this.serviceClient().resume(resourceGroupName, name, body);
    }

    public ConnectorInstance getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<ConnectorInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, name, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    private ConnectorOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager() {
        return this.serviceManager;
    }

    public ConnectorInstanceImpl define(String name) {
        return new ConnectorInstanceImpl(name, this.manager());
    }
}
