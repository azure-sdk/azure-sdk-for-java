// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Configuration for CosmosDbSourceConnector.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "connectorType")
@JsonTypeName("CosmosDbSource")
@Fluent
public final class CosmosDbSourceConnectorProperties extends ConnectorProperties {
    /*
     * PollIntervalInMs policy.
     */
    @JsonProperty(value = "pollIntervalInMs", required = true)
    private int pollIntervalInMs;

    /*
     * Endpoint of CosmosDB.
     */
    @JsonProperty(value = "cosmosEndpoint", required = true)
    private String cosmosEndpoint;

    /*
     * DatabaseName for CosmosDB server.
     */
    @JsonProperty(value = "databaseName", required = true)
    private String databaseName;

    /*
     * Container for CosmosDB server.
     */
    @JsonProperty(value = "container", required = true)
    private String container;

    /*
     * masterKey for CosmosDB server.
     */
    @JsonProperty(value = "masterKey")
    private String masterKey;

    /*
     * useLatestOffset policy
     */
    @JsonProperty(value = "offsetPolicy", required = true)
    private OffsetPolicyForCosmosDB offsetPolicy;

    /**
     * Creates an instance of CosmosDbSourceConnectorProperties class.
     */
    public CosmosDbSourceConnectorProperties() {
    }

    /**
     * Get the pollIntervalInMs property: PollIntervalInMs policy.
     * 
     * @return the pollIntervalInMs value.
     */
    public int pollIntervalInMs() {
        return this.pollIntervalInMs;
    }

    /**
     * Set the pollIntervalInMs property: PollIntervalInMs policy.
     * 
     * @param pollIntervalInMs the pollIntervalInMs value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withPollIntervalInMs(int pollIntervalInMs) {
        this.pollIntervalInMs = pollIntervalInMs;
        return this;
    }

    /**
     * Get the cosmosEndpoint property: Endpoint of CosmosDB.
     * 
     * @return the cosmosEndpoint value.
     */
    public String cosmosEndpoint() {
        return this.cosmosEndpoint;
    }

    /**
     * Set the cosmosEndpoint property: Endpoint of CosmosDB.
     * 
     * @param cosmosEndpoint the cosmosEndpoint value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withCosmosEndpoint(String cosmosEndpoint) {
        this.cosmosEndpoint = cosmosEndpoint;
        return this;
    }

    /**
     * Get the databaseName property: DatabaseName for CosmosDB server.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: DatabaseName for CosmosDB server.
     * 
     * @param databaseName the databaseName value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the container property: Container for CosmosDB server.
     * 
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: Container for CosmosDB server.
     * 
     * @param container the container value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the masterKey property: masterKey for CosmosDB server.
     * 
     * @return the masterKey value.
     */
    public String masterKey() {
        return this.masterKey;
    }

    /**
     * Set the masterKey property: masterKey for CosmosDB server.
     * 
     * @param masterKey the masterKey value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withMasterKey(String masterKey) {
        this.masterKey = masterKey;
        return this;
    }

    /**
     * Get the offsetPolicy property: useLatestOffset policy.
     * 
     * @return the offsetPolicy value.
     */
    public OffsetPolicyForCosmosDB offsetPolicy() {
        return this.offsetPolicy;
    }

    /**
     * Set the offsetPolicy property: useLatestOffset policy.
     * 
     * @param offsetPolicy the offsetPolicy value to set.
     * @return the CosmosDbSourceConnectorProperties object itself.
     */
    public CosmosDbSourceConnectorProperties withOffsetPolicy(OffsetPolicyForCosmosDB offsetPolicy) {
        this.offsetPolicy = offsetPolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSourceConnectorProperties withMaxTasks(int maxTasks) {
        super.withMaxTasks(maxTasks);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSourceConnectorProperties withValueConverter(ConverterType valueConverter) {
        super.withValueConverter(valueConverter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSourceConnectorProperties withEventHubConfig(EventHubConfig eventHubConfig) {
        super.withEventHubConfig(eventHubConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (cosmosEndpoint() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property cosmosEndpoint in model CosmosDbSourceConnectorProperties"));
        }
        if (databaseName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property databaseName in model CosmosDbSourceConnectorProperties"));
        }
        if (container() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property container in model CosmosDbSourceConnectorProperties"));
        }
        if (masterKey() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property masterKey in model CosmosDbSourceConnectorProperties"));
        }
        if (offsetPolicy() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property offsetPolicy in model CosmosDbSourceConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosDbSourceConnectorProperties.class);
}
