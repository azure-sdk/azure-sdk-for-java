// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Configuration for SqlServerSqlSourceConnector.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "connectorType")
@JsonTypeName("SqlServerSource")
@Fluent
public final class SqlServerSourceConnectorProperties extends ConnectorProperties {
    /*
     * HostName for SqlServer.
     */
    @JsonProperty(value = "hostName", required = true)
    private String hostname;

    /*
     * Port for SqlServer.
     */
    @JsonProperty(value = "port", required = true)
    private int port;

    /*
     * DatabaseName for SqlServer.
     */
    @JsonProperty(value = "databaseName", required = true)
    private String databaseName;

    /*
     * Username for SqlServer.
     */
    @JsonProperty(value = "username", required = true)
    private String username;

    /*
     * Password for SqlServer.
     */
    @JsonProperty(value = "password")
    private String password;

    /**
     * Creates an instance of SqlServerSourceConnectorProperties class.
     */
    public SqlServerSourceConnectorProperties() {
    }

    /**
     * Get the hostname property: HostName for SqlServer.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: HostName for SqlServer.
     * 
     * @param hostname the hostname value to set.
     * @return the SqlServerSourceConnectorProperties object itself.
     */
    public SqlServerSourceConnectorProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the port property: Port for SqlServer.
     * 
     * @return the port value.
     */
    public int port() {
        return this.port;
    }

    /**
     * Set the port property: Port for SqlServer.
     * 
     * @param port the port value to set.
     * @return the SqlServerSourceConnectorProperties object itself.
     */
    public SqlServerSourceConnectorProperties withPort(int port) {
        this.port = port;
        return this;
    }

    /**
     * Get the databaseName property: DatabaseName for SqlServer.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: DatabaseName for SqlServer.
     * 
     * @param databaseName the databaseName value to set.
     * @return the SqlServerSourceConnectorProperties object itself.
     */
    public SqlServerSourceConnectorProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the username property: Username for SqlServer.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username for SqlServer.
     * 
     * @param username the username value to set.
     * @return the SqlServerSourceConnectorProperties object itself.
     */
    public SqlServerSourceConnectorProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password for SqlServer.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password for SqlServer.
     * 
     * @param password the password value to set.
     * @return the SqlServerSourceConnectorProperties object itself.
     */
    public SqlServerSourceConnectorProperties withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlServerSourceConnectorProperties withMaxTasks(int maxTasks) {
        super.withMaxTasks(maxTasks);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlServerSourceConnectorProperties withValueConverter(ConverterType valueConverter) {
        super.withValueConverter(valueConverter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlServerSourceConnectorProperties withEventHubConfig(EventHubConfig eventHubConfig) {
        super.withEventHubConfig(eventHubConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (hostname() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property hostname in model SqlServerSourceConnectorProperties"));
        }
        if (databaseName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property databaseName in model SqlServerSourceConnectorProperties"));
        }
        if (username() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property username in model SqlServerSourceConnectorProperties"));
        }
        if (password() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property password in model SqlServerSourceConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerSourceConnectorProperties.class);
}
