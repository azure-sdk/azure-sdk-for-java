// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Configuration for GooglePubSubSourceConnector.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "connectorType")
@JsonTypeName("GooglePubSubSource")
@Fluent
public final class GooglePubSubSourceConnectorProperties extends ConnectorProperties {
    /*
     * ProjectId for pubsub server.
     */
    @JsonProperty(value = "projectId", required = true)
    private String projectId;

    /*
     * SubscriptionName for pubsub server.
     */
    @JsonProperty(value = "subscriptionName", required = true)
    private String subscriptionName;

    /*
     * AccountKey for pubsub server.
     */
    @JsonProperty(value = "accountKey")
    private String accountKey;

    /**
     * Creates an instance of GooglePubSubSourceConnectorProperties class.
     */
    public GooglePubSubSourceConnectorProperties() {
    }

    /**
     * Get the projectId property: ProjectId for pubsub server.
     * 
     * @return the projectId value.
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: ProjectId for pubsub server.
     * 
     * @param projectId the projectId value to set.
     * @return the GooglePubSubSourceConnectorProperties object itself.
     */
    public GooglePubSubSourceConnectorProperties withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the subscriptionName property: SubscriptionName for pubsub server.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Set the subscriptionName property: SubscriptionName for pubsub server.
     * 
     * @param subscriptionName the subscriptionName value to set.
     * @return the GooglePubSubSourceConnectorProperties object itself.
     */
    public GooglePubSubSourceConnectorProperties withSubscriptionName(String subscriptionName) {
        this.subscriptionName = subscriptionName;
        return this;
    }

    /**
     * Get the accountKey property: AccountKey for pubsub server.
     * 
     * @return the accountKey value.
     */
    public String accountKey() {
        return this.accountKey;
    }

    /**
     * Set the accountKey property: AccountKey for pubsub server.
     * 
     * @param accountKey the accountKey value to set.
     * @return the GooglePubSubSourceConnectorProperties object itself.
     */
    public GooglePubSubSourceConnectorProperties withAccountKey(String accountKey) {
        this.accountKey = accountKey;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GooglePubSubSourceConnectorProperties withMaxTasks(int maxTasks) {
        super.withMaxTasks(maxTasks);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GooglePubSubSourceConnectorProperties withValueConverter(ConverterType valueConverter) {
        super.withValueConverter(valueConverter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GooglePubSubSourceConnectorProperties withEventHubConfig(EventHubConfig eventHubConfig) {
        super.withEventHubConfig(eventHubConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (projectId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property projectId in model GooglePubSubSourceConnectorProperties"));
        }
        if (subscriptionName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property subscriptionName in model GooglePubSubSourceConnectorProperties"));
        }
        if (accountKey() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property accountKey in model GooglePubSubSourceConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GooglePubSubSourceConnectorProperties.class);
}
