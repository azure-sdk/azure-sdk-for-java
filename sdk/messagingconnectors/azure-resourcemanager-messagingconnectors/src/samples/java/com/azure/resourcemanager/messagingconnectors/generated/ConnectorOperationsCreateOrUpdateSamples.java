// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.messagingconnectors.generated;

import com.azure.resourcemanager.messagingconnectors.models.BitCoinSourceConnectorProperties;
import com.azure.resourcemanager.messagingconnectors.models.ConfluentSourceConnectorProperties;
import com.azure.resourcemanager.messagingconnectors.models.ConverterType;
import com.azure.resourcemanager.messagingconnectors.models.CosmosDbSourceConnectorProperties;
import com.azure.resourcemanager.messagingconnectors.models.EventHubConfig;
import com.azure.resourcemanager.messagingconnectors.models.GooglePubSubSourceConnectorProperties;
import com.azure.resourcemanager.messagingconnectors.models.KinesisSourceConnectorProperties;
import com.azure.resourcemanager.messagingconnectors.models.OffsetPolicyForCosmosDB;
import com.azure.resourcemanager.messagingconnectors.models.PostgreSqlSourceConnectorProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ConnectorOperations CreateOrUpdate.
 */
public final class ConnectorOperationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/GooglePubSubSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: GooglePubSubSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void googlePubSubSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("googlePubSubSourceConnector1").withRegion("East US")
            .withExistingResourceGroup("abcd").withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(new GooglePubSubSourceConnectorProperties().withMaxTasks(1)
                .withValueConverter(ConverterType.JSON_CONVERTER)
                .withEventHubConfig(new EventHubConfig().withNamespaceHostname("ns").withEventHubName("eh")
                    .withConnectionString("connectionString1"))
                .withProjectId("projectId1").withSubscriptionName("subscriptionName1")
                .withAccountKey("fakeTokenPlaceholder"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/ConfluentSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: ConfluentSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void confluentSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("confluentSourceConnector1").withRegion("East US")
            .withExistingResourceGroup("abcd").withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(new ConfluentSourceConnectorProperties().withMaxTasks(1)
                .withValueConverter(ConverterType.JSON_CONVERTER)
                .withEventHubConfig(new EventHubConfig().withNamespaceHostname("ns").withEventHubName("eh")
                    .withConnectionString("connectionString1"))
                .withBootstrapServers("bootstrapServers.confluent.com").withTopic("topic1")
                .withConsumerGroup("consumerGroup1").withAutoOffsetReset("autoOffsetReset").withUser("user1")
                .withPassword("fakeTokenPlaceholder"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/CosmosDbSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: CosmosDbSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void cosmosDbSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("cosmosDbSourceConnector1").withRegion("East US")
            .withExistingResourceGroup("abcd").withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(
                new CosmosDbSourceConnectorProperties().withMaxTasks(1).withValueConverter(ConverterType.JSON_CONVERTER)
                    .withEventHubConfig(new EventHubConfig().withNamespaceHostname("ns").withEventHubName("eh")
                        .withConnectionString("connectionString1"))
                    .withPollIntervalInMs(2000).withCosmosEndpoint("endpoint.cosmos.com")
                    .withDatabaseName("databaseName1").withContainer("container1").withMasterKey("fakeTokenPlaceholder")
                    .withOffsetPolicy(OffsetPolicyForCosmosDB.USE_LATEST_SOURCE_OFFSET))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/BitCoinSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: BitCoinSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void bitCoinSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("bitCoin1").withRegion("West US").withExistingResourceGroup("abcd")
            .withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(new BitCoinSourceConnectorProperties().withMaxTasks(1)
                .withValueConverter(ConverterType.BYTE_ARRAY_CONVERTER).withEventHubConfig(new EventHubConfig()
                    .withNamespaceHostname("ns").withEventHubName("eh").withConnectionString("connectionString1")))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/PostgreSqlSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: PostgreSqlSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void postgreSqlSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("postgreSqlSourceConnector1").withRegion("East US")
            .withExistingResourceGroup("abcd").withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(new PostgreSqlSourceConnectorProperties().withMaxTasks(1)
                .withValueConverter(ConverterType.JSON_CONVERTER)
                .withEventHubConfig(new EventHubConfig().withNamespaceHostname("ns").withEventHubName("eh")
                    .withConnectionString("connectionString1"))
                .withHostname("hostName.postgresql.com").withPort(8080).withDatabaseName("databaseName1")
                .withUsername("username1").withPassword("fakeTokenPlaceholder").withReplicationSlotName("slotA"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/
     * examples/KinesisSourceConnector_CreateOrUpdate.json
     */
    /**
     * Sample code: KinesisSourceConnector CreateOrUpdate.
     * 
     * @param manager Entry point to MessagingconnectorsManager.
     */
    public static void kinesisSourceConnectorCreateOrUpdate(
        com.azure.resourcemanager.messagingconnectors.MessagingconnectorsManager manager) {
        manager.connectorOperations().define("kinesisSourceConnector1").withRegion("East US")
            .withExistingResourceGroup("abcd").withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withProperties(
                new KinesisSourceConnectorProperties().withMaxTasks(1).withValueConverter(ConverterType.JSON_CONVERTER)
                    .withEventHubConfig(new EventHubConfig().withNamespaceHostname("ns").withEventHubName("eh")
                        .withConnectionString("connectionString1"))
                    .withAwsAccessKeyId("fakeTokenPlaceholder").withAwsSecretAccessKey("fakeTokenPlaceholder")
                    .withAwsKinesisRegion("global").withAwsKinesisStreamName("streamName1"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
