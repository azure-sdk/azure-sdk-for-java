// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The administrative details of the instruction.
 */
@Immutable
public final class AdministrativeDetails implements JsonSerializable<AdministrativeDetails> {
    /*
     * The source of the instruction.
     */
    @Generated
    private final String source;

    /*
     * The comment for the instruction.
     */
    @Generated
    private final String createdBy;

    /*
     * The comment for the instruction.
     */
    @Generated
    private final String lastModifiedBy;

    /*
     * Creation date of the instruction.
     */
    @Generated
    private final OffsetDateTime createdAt;

    /*
     * any closing comments
     */
    @Generated
    private final String comment;

    /**
     * Creates an instance of AdministrativeDetails class.
     * 
     * @param source the source value to set.
     * @param createdBy the createdBy value to set.
     * @param lastModifiedBy the lastModifiedBy value to set.
     * @param createdAt the createdAt value to set.
     * @param comment the comment value to set.
     */
    @Generated
    public AdministrativeDetails(String source, String createdBy, String lastModifiedBy, OffsetDateTime createdAt,
        String comment) {
        this.source = source;
        this.createdBy = createdBy;
        this.lastModifiedBy = lastModifiedBy;
        this.createdAt = createdAt;
        this.comment = comment;
    }

    /**
     * Get the source property: The source of the instruction.
     * 
     * @return the source value.
     */
    @Generated
    public String getSource() {
        return this.source;
    }

    /**
     * Get the createdBy property: The comment for the instruction.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedBy property: The comment for the instruction.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the createdAt property: Creation date of the instruction.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the comment property: any closing comments.
     * 
     * @return the comment value.
     */
    @Generated
    public String getComment() {
        return this.comment;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeStringField("lastModifiedBy", this.lastModifiedBy);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("comment", this.comment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdministrativeDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdministrativeDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AdministrativeDetails.
     */
    @Generated
    public static AdministrativeDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String source = null;
            String createdBy = null;
            String lastModifiedBy = null;
            OffsetDateTime createdAt = null;
            String comment = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    source = reader.getString();
                } else if ("createdBy".equals(fieldName)) {
                    createdBy = reader.getString();
                } else if ("lastModifiedBy".equals(fieldName)) {
                    lastModifiedBy = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("comment".equals(fieldName)) {
                    comment = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AdministrativeDetails(source, createdBy, lastModifiedBy, createdAt, comment);
        });
    }
}
