// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The example query resource.
 */
@Immutable
public final class ExampleQueryRequest implements JsonSerializable<ExampleQueryRequest> {
    /*
     * The ID of the example query.
     */
    @Generated
    private String exampleId;

    /*
     * The user question associated with the example.
     */
    @Generated
    private final String userQuestion;

    /*
     * The linked instructions for the example query.
     */
    @Generated
    private final List<String> linkedInstructions;

    /*
     * The sample query for the example.
     */
    @Generated
    private final SampleQuery sampleQuery;

    /**
     * Creates an instance of ExampleQueryRequest class.
     * 
     * @param userQuestion the userQuestion value to set.
     * @param linkedInstructions the linkedInstructions value to set.
     * @param sampleQuery the sampleQuery value to set.
     */
    @Generated
    public ExampleQueryRequest(String userQuestion, List<String> linkedInstructions, SampleQuery sampleQuery) {
        this.userQuestion = userQuestion;
        this.linkedInstructions = linkedInstructions;
        this.sampleQuery = sampleQuery;
    }

    /**
     * Get the exampleId property: The ID of the example query.
     * 
     * @return the exampleId value.
     */
    @Generated
    public String getExampleId() {
        return this.exampleId;
    }

    /**
     * Get the userQuestion property: The user question associated with the example.
     * 
     * @return the userQuestion value.
     */
    @Generated
    public String getUserQuestion() {
        return this.userQuestion;
    }

    /**
     * Get the linkedInstructions property: The linked instructions for the example query.
     * 
     * @return the linkedInstructions value.
     */
    @Generated
    public List<String> getLinkedInstructions() {
        return this.linkedInstructions;
    }

    /**
     * Get the sampleQuery property: The sample query for the example.
     * 
     * @return the sampleQuery value.
     */
    @Generated
    public SampleQuery getSampleQuery() {
        return this.sampleQuery;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userQuestion", this.userQuestion);
        jsonWriter.writeArrayField("linkedInstructions", this.linkedInstructions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sampleQuery", this.sampleQuery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExampleQueryRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExampleQueryRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExampleQueryRequest.
     */
    @Generated
    public static ExampleQueryRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String exampleId = null;
            String userQuestion = null;
            List<String> linkedInstructions = null;
            SampleQuery sampleQuery = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exampleId".equals(fieldName)) {
                    exampleId = reader.getString();
                } else if ("userQuestion".equals(fieldName)) {
                    userQuestion = reader.getString();
                } else if ("linkedInstructions".equals(fieldName)) {
                    linkedInstructions = reader.readArray(reader1 -> reader1.getString());
                } else if ("sampleQuery".equals(fieldName)) {
                    sampleQuery = SampleQuery.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ExampleQueryRequest deserializedExampleQueryRequest
                = new ExampleQueryRequest(userQuestion, linkedInstructions, sampleQuery);
            deserializedExampleQueryRequest.exampleId = exampleId;

            return deserializedExampleQueryRequest;
        });
    }
}
