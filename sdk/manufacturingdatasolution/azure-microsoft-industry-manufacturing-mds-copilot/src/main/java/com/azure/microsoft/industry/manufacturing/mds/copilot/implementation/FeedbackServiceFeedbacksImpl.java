// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.microsoft.industry.manufacturing.mds.copilot.CopilotServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FeedbackServiceFeedbacks.
 */
public final class FeedbackServiceFeedbacksImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FeedbackServiceFeedbacksService service;

    /**
     * The service client containing this operation class.
     */
    private final CopilotServiceClientImpl client;

    /**
     * Initializes an instance of FeedbackServiceFeedbacksImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FeedbackServiceFeedbacksImpl(CopilotServiceClientImpl client) {
        this.service = RestProxy.create(FeedbackServiceFeedbacksService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public CopilotServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for CopilotServiceClientFeedbackServiceFeedbacks to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://mds-{mdsUniqueId}.{location}.cloudapp.azure.com/")
    @ServiceInterface(name = "CopilotServiceClient")
    public interface FeedbackServiceFeedbacksService {
        @Post("/copilot/feedback")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> submit(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Post("/copilot/feedback")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> submitSync(@HostParam("mdsUniqueId") String mdsUniqueId, @HostParam("location") String location,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Send feedback for a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     conversationId: String (Required)
     *     feedback: String(Neutral/ThumbUp/ThumbDown) (Required)
     *     queryEndpoint: String(V3/Assistant) (Required)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> submitWithResponseAsync(BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.submit(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), contentType, accept, resource, requestOptions, context));
    }

    /**
     * Send feedback for a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     conversationId: String (Required)
     *     feedback: String(Neutral/ThumbUp/ThumbDown) (Required)
     *     queryEndpoint: String(V3/Assistant) (Required)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> submitWithResponse(BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.submitSync(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), contentType, accept, resource, requestOptions, Context.NONE);
    }
}
