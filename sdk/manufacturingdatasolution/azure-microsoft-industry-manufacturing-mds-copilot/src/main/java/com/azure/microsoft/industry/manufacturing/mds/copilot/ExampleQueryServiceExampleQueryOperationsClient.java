// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.ExampleQueryServiceExampleQueryOperationsImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models.LinkInstructionRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.ExampleQueryRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.LinkInstructionRequest1;
import java.util.List;

/**
 * Initializes a new instance of the synchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class)
public final class ExampleQueryServiceExampleQueryOperationsClient {
    @Generated
    private final ExampleQueryServiceExampleQueryOperationsImpl serviceClient;

    /**
     * Initializes an instance of ExampleQueryServiceExampleQueryOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ExampleQueryServiceExampleQueryOperationsClient(ExampleQueryServiceExampleQueryOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * get the example query.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exampleId: String (Required)
     *     userQuestion: String (Required)
     *     linkedInstructions (Required): [
     *         String (Required)
     *     ]
     *     sampleQuery (Required): {
     *         language: String (Required)
     *         query: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param exampleId The ID of the example query.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the example query along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExampleWithResponse(String exampleId, RequestOptions requestOptions) {
        return this.serviceClient.getExampleWithResponse(exampleId, requestOptions);
    }

    /**
     * get all example queries.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>instructionId</td><td>String</td><td>No</td><td>Instruction id.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exampleId: String (Required)
     *     userQuestion: String (Required)
     *     linkedInstructions (Required): [
     *         String (Required)
     *     ]
     *     sampleQuery (Required): {
     *         language: String (Required)
     *         query: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all example queries as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAllExamples(RequestOptions requestOptions) {
        return this.serviceClient.listAllExamples(requestOptions);
    }

    /**
     * update the example query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exampleId: String (Required)
     *     userQuestion: String (Required)
     *     linkedInstructions (Required): [
     *         String (Required)
     *     ]
     *     sampleQuery (Required): {
     *         language: String (Required)
     *         query: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exampleId: String (Required)
     *     userQuestion: String (Required)
     *     linkedInstructions (Required): [
     *         String (Required)
     *     ]
     *     sampleQuery (Required): {
     *         language: String (Required)
     *         query: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param exampleId The ID of the example query.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the example query resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String exampleId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponse(exampleId, resource, requestOptions);
    }

    /**
     * delete the example query.
     * 
     * @param exampleId The ID of the example query.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteExampleWithResponse(String exampleId, RequestOptions requestOptions) {
        return this.serviceClient.deleteExampleWithResponse(exampleId, requestOptions);
    }

    /**
     * Update instruction status.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     linkedInstructions (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     linkedInstructions (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param exampleId The ID of the example query.
     * @param linkInstructionRequest The linkInstructionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the patch request for the example query along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> linkInstructionWithResponse(String exampleId, BinaryData linkInstructionRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.linkInstructionWithResponse(exampleId, linkInstructionRequest, requestOptions);
    }

    /**
     * get the example query.
     * 
     * @param exampleId The ID of the example query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the example query.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExampleQueryRequest getExample(String exampleId) {
        // Generated convenience method for getExampleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExampleWithResponse(exampleId, requestOptions).getValue().toObject(ExampleQueryRequest.class);
    }

    /**
     * get all example queries.
     * 
     * @param instructionId Instruction id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all example queries as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExampleQueryRequest> listAllExamples(String instructionId) {
        // Generated convenience method for listAllExamples
        RequestOptions requestOptions = new RequestOptions();
        if (instructionId != null) {
            requestOptions.addQueryParam("instructionId", instructionId, false);
        }
        return serviceClient.listAllExamples(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ExampleQueryRequest.class));
    }

    /**
     * get all example queries.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all example queries as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExampleQueryRequest> listAllExamples() {
        // Generated convenience method for listAllExamples
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAllExamples(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ExampleQueryRequest.class));
    }

    /**
     * update the example query.
     * 
     * @param exampleId The ID of the example query.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the example query resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExampleQueryRequest createOrReplace(String exampleId, ExampleQueryRequest resource) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(exampleId, BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(ExampleQueryRequest.class);
    }

    /**
     * delete the example query.
     * 
     * @param exampleId The ID of the example query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteExample(String exampleId) {
        // Generated convenience method for deleteExampleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteExampleWithResponse(exampleId, requestOptions).getValue();
    }

    /**
     * Update instruction status.
     * 
     * @param exampleId The ID of the example query.
     * @param linkedInstructions The linked instructions for the example query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the patch request for the example query.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkInstructionRequest1 linkInstruction(String exampleId, List<String> linkedInstructions) {
        // Generated convenience method for linkInstructionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        LinkInstructionRequest linkInstructionRequestObj
            = new LinkInstructionRequest().setLinkedInstructions(linkedInstructions);
        BinaryData linkInstructionRequest = BinaryData.fromObject(linkInstructionRequestObj);
        return linkInstructionWithResponse(exampleId, linkInstructionRequest, requestOptions).getValue()
            .toObject(LinkInstructionRequest1.class);
    }

    /**
     * Update instruction status.
     * 
     * @param exampleId The ID of the example query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the patch request for the example query.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinkInstructionRequest1 linkInstruction(String exampleId) {
        // Generated convenience method for linkInstructionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        LinkInstructionRequest linkInstructionRequestObj = new LinkInstructionRequest();
        BinaryData linkInstructionRequest = BinaryData.fromObject(linkInstructionRequestObj);
        return linkInstructionWithResponse(exampleId, linkInstructionRequest, requestOptions).getValue()
            .toObject(LinkInstructionRequest1.class);
    }
}
