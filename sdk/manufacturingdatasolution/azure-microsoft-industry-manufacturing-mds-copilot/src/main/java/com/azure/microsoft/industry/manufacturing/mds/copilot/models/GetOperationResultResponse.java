// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The GetOperationResultResponse model.
 */
@Immutable
public final class GetOperationResultResponse implements JsonSerializable<GetOperationResultResponse> {
    /*
     * The operation status.
     */
    @Generated
    private final OperationStatusValue status;

    /*
     * The error message.
     */
    @Generated
    private final List<String> errorMessage;

    /**
     * Creates an instance of GetOperationResultResponse class.
     * 
     * @param status the status value to set.
     * @param errorMessage the errorMessage value to set.
     */
    @Generated
    private GetOperationResultResponse(OperationStatusValue status, List<String> errorMessage) {
        this.status = status;
        this.errorMessage = errorMessage;
    }

    /**
     * Get the status property: The operation status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatusValue getStatus() {
        return this.status;
    }

    /**
     * Get the errorMessage property: The error message.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public List<String> getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("errorMessage", this.errorMessage, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetOperationResultResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetOperationResultResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetOperationResultResponse.
     */
    @Generated
    public static GetOperationResultResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationStatusValue status = null;
            List<String> errorMessage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = OperationStatusValue.fromString(reader.getString());
                } else if ("errorMessage".equals(fieldName)) {
                    errorMessage = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new GetOperationResultResponse(status, errorMessage);
        });
    }
}
