// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SubmitFeedbackResponse model.
 */
@Immutable
public final class SubmitFeedbackResponse implements JsonSerializable<SubmitFeedbackResponse> {
    /*
     * conversation id
     */
    @Generated
    private String conversationId;

    /*
     * The feedback
     */
    @Generated
    private final FeedbackCategory feedback;

    /*
     * QueryEndpoint
     */
    @Generated
    private final QueryEndpoint queryEndpoint;

    /**
     * Creates an instance of SubmitFeedbackResponse class.
     * 
     * @param feedback the feedback value to set.
     * @param queryEndpoint the queryEndpoint value to set.
     */
    @Generated
    private SubmitFeedbackResponse(FeedbackCategory feedback, QueryEndpoint queryEndpoint) {
        this.feedback = feedback;
        this.queryEndpoint = queryEndpoint;
    }

    /**
     * Get the conversationId property: conversation id.
     * 
     * @return the conversationId value.
     */
    @Generated
    public String getConversationId() {
        return this.conversationId;
    }

    /**
     * Get the feedback property: The feedback.
     * 
     * @return the feedback value.
     */
    @Generated
    public FeedbackCategory getFeedback() {
        return this.feedback;
    }

    /**
     * Get the queryEndpoint property: QueryEndpoint.
     * 
     * @return the queryEndpoint value.
     */
    @Generated
    public QueryEndpoint getQueryEndpoint() {
        return this.queryEndpoint;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("feedback", this.feedback == null ? null : this.feedback.toString());
        jsonWriter.writeStringField("queryEndpoint", this.queryEndpoint == null ? null : this.queryEndpoint.toString());
        jsonWriter.writeStringField("conversationId", this.conversationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubmitFeedbackResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubmitFeedbackResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SubmitFeedbackResponse.
     */
    @Generated
    public static SubmitFeedbackResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeedbackCategory feedback = null;
            QueryEndpoint queryEndpoint = null;
            String conversationId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("feedback".equals(fieldName)) {
                    feedback = FeedbackCategory.fromString(reader.getString());
                } else if ("queryEndpoint".equals(fieldName)) {
                    queryEndpoint = QueryEndpoint.fromString(reader.getString());
                } else if ("conversationId".equals(fieldName)) {
                    conversationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SubmitFeedbackResponse deserializedSubmitFeedbackResponse
                = new SubmitFeedbackResponse(feedback, queryEndpoint);
            deserializedSubmitFeedbackResponse.conversationId = conversationId;

            return deserializedSubmitFeedbackResponse;
        });
    }
}
