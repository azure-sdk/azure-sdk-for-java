// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.FeedbackServiceFeedbacksImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.FeedbackRequest;

/**
 * Initializes a new instance of the synchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class)
public final class FeedbackServiceFeedbackClient {
    @Generated
    private final FeedbackServiceFeedbacksImpl serviceClient;

    /**
     * Initializes an instance of FeedbackServiceFeedbackClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FeedbackServiceFeedbackClient(FeedbackServiceFeedbacksImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Send feedback for a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     operationId: String (Required)
     *     conversationId: String (Required)
     *     feedback: String(Neutral/ThumbUp/ThumbDown) (Required)
     *     queryEndpoint: String(V3/Assistant) (Required)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> submitWithResponse(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.submitWithResponse(resource, requestOptions);
    }

    /**
     * Send feedback for a query.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void submit(FeedbackRequest resource) {
        // Generated convenience method for submitWithResponse
        RequestOptions requestOptions = new RequestOptions();
        submitWithResponse(BinaryData.fromObject(resource), requestOptions).getValue();
    }
}
