// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.microsoft.industry.manufacturing.mds.copilot.CopilotServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in HeathServiceClients.
 */
public final class HeathServiceClientsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HeathServiceClientsService service;

    /**
     * The service client containing this operation class.
     */
    private final CopilotServiceClientImpl client;

    /**
     * Initializes an instance of HeathServiceClientsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    HeathServiceClientsImpl(CopilotServiceClientImpl client) {
        this.service = RestProxy.create(HeathServiceClientsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public CopilotServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for CopilotServiceClientHeathServiceClients to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://mds-{mdsUniqueId}.{location}.cloudapp.azure.com/")
    @ServiceInterface(name = "CopilotServiceClient")
    public interface HeathServiceClientsService {
        @Get("/copilot/health")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServiceHealth(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/copilot/health")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getServiceHealthSync(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get the health status of the service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     message: String (Required)
     *     operationStatus: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     errorMessage (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health status of the service along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceHealthWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getServiceHealth(this.client.getMdsUniqueId(),
            this.client.getLocation(), this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get the health status of the service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     message: String (Required)
     *     operationStatus: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     errorMessage (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the health status of the service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServiceHealthWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getServiceHealthSync(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }
}
