// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.ValidateQueryServiceValidateQueryApisImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models.RunRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryValidationJobDetails;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryValidationJobRun;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryValidationJobScheduleConfirmation;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryValidationTestCase;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class, isAsync = true)
public final class ValidateQueryServiceValidateQueryApiAsyncClient {
    @Generated
    private final ValidateQueryServiceValidateQueryApisImpl serviceClient;

    /**
     * Initializes an instance of ValidateQueryServiceValidateQueryApiAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ValidateQueryServiceValidateQueryApiAsyncClient(ValidateQueryServiceValidateQueryApisImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Validate a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testCases (Required): [
     *          (Required){
     *             ask: String (Optional)
     *             expectedKqlQuery: String (Optional)
     *             skipTestRun: boolean (Required)
     *         }
     *     ]
     *     runInConversationContext: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param runRequest The runRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validate Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> runWithResponse(BinaryData runRequest, RequestOptions requestOptions) {
        return this.serviceClient.runWithResponseAsync(runRequest, requestOptions);
    }

    /**
     * Get the details of a validation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     testRunStatus: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     testResults (Required): [
     *          (Required){
     *             ask: String (Required)
     *             expectedKqlQuery: String (Required)
     *             consolidatedScore: long (Required)
     *             status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param testId Test Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a validation job along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueryValidationJobDetailsWithResponse(String testId,
        RequestOptions requestOptions) {
        return this.serviceClient.getQueryValidationJobDetailsWithResponseAsync(testId, requestOptions);
    }

    /**
     * List validate test requests.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fromDate</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * <tr><td>endDate</td><td>OffsetDateTime</td><td>No</td><td>end date</td></tr>
     * <tr><td>testRunId</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listQueryValidationJobHistory(RequestOptions requestOptions) {
        return this.serviceClient.listQueryValidationJobHistoryAsync(requestOptions);
    }

    /**
     * Validate a query.
     * 
     * @param testCases The test cases for validation.
     * @param runInConversationContext run in the conversation context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validate Response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryValidationJobScheduleConfirmation> run(List<QueryValidationTestCase> testCases,
        boolean runInConversationContext) {
        // Generated convenience method for runWithResponse
        RequestOptions requestOptions = new RequestOptions();
        RunRequest runRequestObj = new RunRequest(testCases, runInConversationContext);
        BinaryData runRequest = BinaryData.fromObject(runRequestObj);
        return runWithResponse(runRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(QueryValidationJobScheduleConfirmation.class));
    }

    /**
     * Get the details of a validation job.
     * 
     * @param testId Test Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a validation job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryValidationJobDetails> getQueryValidationJobDetails(String testId) {
        // Generated convenience method for getQueryValidationJobDetailsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueryValidationJobDetailsWithResponse(testId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(QueryValidationJobDetails.class));
    }

    /**
     * List validate test requests.
     * 
     * @param fromDate start date.
     * @param endDate end date.
     * @param testRunId start date.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of QueryValidationJobRun items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<QueryValidationJobRun> listQueryValidationJobHistory(OffsetDateTime fromDate,
        OffsetDateTime endDate, OffsetDateTime testRunId) {
        // Generated convenience method for listQueryValidationJobHistory
        RequestOptions requestOptions = new RequestOptions();
        if (fromDate != null) {
            requestOptions.addQueryParam("fromDate", String.valueOf(fromDate), false);
        }
        if (endDate != null) {
            requestOptions.addQueryParam("endDate", String.valueOf(endDate), false);
        }
        if (testRunId != null) {
            requestOptions.addQueryParam("testRunId", String.valueOf(testRunId), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listQueryValidationJobHistory(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, QueryValidationJobRun>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(QueryValidationJobRun.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List validate test requests.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of QueryValidationJobRun items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<QueryValidationJobRun> listQueryValidationJobHistory() {
        // Generated convenience method for listQueryValidationJobHistory
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listQueryValidationJobHistory(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, QueryValidationJobRun>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(QueryValidationJobRun.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }
}
