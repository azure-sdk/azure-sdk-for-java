// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.QueryServiceClientsImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models.SubmitFeedbackRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Choice;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.DataTableFormat;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.FeedbackCategory;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryEndpoint;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryResponse;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.SubmitFeedbackResponse;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.UserQueryRequest;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class, isAsync = true)
public final class QueryServiceAsyncClient {
    @Generated
    private final QueryServiceClientsImpl serviceClient;

    /**
     * Initializes an instance of QueryServiceAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    QueryServiceAsyncClient(QueryServiceClientsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * execute the query.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxRetry</td><td>Integer</td><td>No</td><td>maximum number of retries</td></tr>
     * <tr><td>dataTableFormat</td><td>String</td><td>No</td><td>Supported datatable format: Markdown, Json. Default is
     * Json. Allowed values: "Markdown", "Json".</td></tr>
     * <tr><td>includeSummary</td><td>String</td><td>No</td><td>Include summary in the response. Allowed values: "Yes",
     * "No".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>conversation-id</td><td>String</td><td>No</td><td>conversation id</td></tr>
     * <tr><td>Accept-Language</td><td>String</td><td>No</td><td>Accept-Language header</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ask: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result: String (Optional)
     *     summary: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param request request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return query Response Result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> queryExecuteWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.queryExecuteWithResponseAsync(request, requestOptions);
    }

    /**
     * Share feedback for the copilot's query response.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     conversationId: String (Optional)
     *     feedback: String(Neutral/ThumbUp/ThumbDown) (Required)
     *     queryEndpoint: String(V3/Assistant) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     conversationId: String (Optional)
     *     feedback: String(Neutral/ThumbUp/ThumbDown) (Required)
     *     queryEndpoint: String(V3/Assistant) (Required)
     * }
     * }
     * </pre>
     * 
     * @param submitFeedbackRequest The submitFeedbackRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitFeedbackWithResponse(BinaryData submitFeedbackRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.submitFeedbackWithResponseAsync(submitFeedbackRequest, requestOptions);
    }

    /**
     * execute the query.
     * 
     * @param request request body.
     * @param conversationId conversation id.
     * @param acceptLanguage Accept-Language header.
     * @param maxRetry maximum number of retries.
     * @param dataTableFormat Supported datatable format: Markdown, Json. Default is Json.
     * @param includeSummary Include summary in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Response Result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryResponse> queryExecute(UserQueryRequest request, String conversationId, String acceptLanguage,
        Integer maxRetry, DataTableFormat dataTableFormat, Choice includeSummary) {
        // Generated convenience method for queryExecuteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (conversationId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("conversation-id"), conversationId);
        }
        if (acceptLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_LANGUAGE, acceptLanguage);
        }
        if (maxRetry != null) {
            requestOptions.addQueryParam("maxRetry", String.valueOf(maxRetry), false);
        }
        if (dataTableFormat != null) {
            requestOptions.addQueryParam("dataTableFormat", dataTableFormat.toString(), false);
        }
        if (includeSummary != null) {
            requestOptions.addQueryParam("includeSummary", includeSummary.toString(), false);
        }
        return queryExecuteWithResponse(BinaryData.fromObject(request), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(QueryResponse.class));
    }

    /**
     * execute the query.
     * 
     * @param request request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Response Result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryResponse> queryExecute(UserQueryRequest request) {
        // Generated convenience method for queryExecuteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return queryExecuteWithResponse(BinaryData.fromObject(request), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(QueryResponse.class));
    }

    /**
     * Share feedback for the copilot's query response.
     * 
     * @param feedback The feedback.
     * @param queryEndpoint QueryEndpoint.
     * @param conversationId conversation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubmitFeedbackResponse> submitFeedback(FeedbackCategory feedback, QueryEndpoint queryEndpoint,
        String conversationId) {
        // Generated convenience method for submitFeedbackWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SubmitFeedbackRequest submitFeedbackRequestObj
            = new SubmitFeedbackRequest(feedback, queryEndpoint).setConversationId(conversationId);
        BinaryData submitFeedbackRequest = BinaryData.fromObject(submitFeedbackRequestObj);
        return submitFeedbackWithResponse(submitFeedbackRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SubmitFeedbackResponse.class));
    }

    /**
     * Share feedback for the copilot's query response.
     * 
     * @param feedback The feedback.
     * @param queryEndpoint QueryEndpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubmitFeedbackResponse> submitFeedback(FeedbackCategory feedback, QueryEndpoint queryEndpoint) {
        // Generated convenience method for submitFeedbackWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SubmitFeedbackRequest submitFeedbackRequestObj = new SubmitFeedbackRequest(feedback, queryEndpoint);
        BinaryData submitFeedbackRequest = BinaryData.fromObject(submitFeedbackRequestObj);
        return submitFeedbackWithResponse(submitFeedbackRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SubmitFeedbackResponse.class));
    }
}
