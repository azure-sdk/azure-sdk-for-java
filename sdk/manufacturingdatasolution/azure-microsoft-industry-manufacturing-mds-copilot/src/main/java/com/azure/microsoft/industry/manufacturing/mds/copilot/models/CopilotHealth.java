// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Copilot Health Response.
 */
@Immutable
public final class CopilotHealth implements JsonSerializable<CopilotHealth> {
    /*
     * The message.
     */
    @Generated
    private final String message;

    /*
     * The operation status.
     */
    @Generated
    private final OperationStatusValue operationStatus;

    /*
     * copilot setup info
     */
    @Generated
    private final CopilotSetupInfo copilotSetupInfo;

    /*
     * The error message.
     */
    @Generated
    private final List<String> errorMessage;

    /**
     * Creates an instance of CopilotHealth class.
     * 
     * @param message the message value to set.
     * @param operationStatus the operationStatus value to set.
     * @param copilotSetupInfo the copilotSetupInfo value to set.
     * @param errorMessage the errorMessage value to set.
     */
    @Generated
    private CopilotHealth(String message, OperationStatusValue operationStatus, CopilotSetupInfo copilotSetupInfo,
        List<String> errorMessage) {
        this.message = message;
        this.operationStatus = operationStatus;
        this.copilotSetupInfo = copilotSetupInfo;
        this.errorMessage = errorMessage;
    }

    /**
     * Get the message property: The message.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the operationStatus property: The operation status.
     * 
     * @return the operationStatus value.
     */
    @Generated
    public OperationStatusValue getOperationStatus() {
        return this.operationStatus;
    }

    /**
     * Get the copilotSetupInfo property: copilot setup info.
     * 
     * @return the copilotSetupInfo value.
     */
    @Generated
    public CopilotSetupInfo getCopilotSetupInfo() {
        return this.copilotSetupInfo;
    }

    /**
     * Get the errorMessage property: The error message.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public List<String> getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("operationStatus",
            this.operationStatus == null ? null : this.operationStatus.toString());
        jsonWriter.writeJsonField("copilotSetupInfo", this.copilotSetupInfo);
        jsonWriter.writeArrayField("errorMessage", this.errorMessage, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopilotHealth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopilotHealth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CopilotHealth.
     */
    @Generated
    public static CopilotHealth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String message = null;
            OperationStatusValue operationStatus = null;
            CopilotSetupInfo copilotSetupInfo = null;
            List<String> errorMessage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else if ("operationStatus".equals(fieldName)) {
                    operationStatus = OperationStatusValue.fromString(reader.getString());
                } else if ("copilotSetupInfo".equals(fieldName)) {
                    copilotSetupInfo = CopilotSetupInfo.fromJson(reader);
                } else if ("errorMessage".equals(fieldName)) {
                    errorMessage = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new CopilotHealth(message, operationStatus, copilotSetupInfo, errorMessage);
        });
    }
}
