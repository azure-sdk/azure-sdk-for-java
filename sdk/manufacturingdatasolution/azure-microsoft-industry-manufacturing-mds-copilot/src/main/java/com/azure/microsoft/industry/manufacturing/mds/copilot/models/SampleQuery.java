// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sample query resource.
 */
@Immutable
public final class SampleQuery implements JsonSerializable<SampleQuery> {
    /*
     * The query language.
     */
    @Generated
    private final String language;

    /*
     * The query string.
     */
    @Generated
    private final String query;

    /**
     * Creates an instance of SampleQuery class.
     * 
     * @param language the language value to set.
     * @param query the query value to set.
     */
    @Generated
    public SampleQuery(String language, String query) {
        this.language = language;
        this.query = query;
    }

    /**
     * Get the language property: The query language.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Get the query property: The query string.
     * 
     * @return the query value.
     */
    @Generated
    public String getQuery() {
        return this.query;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("query", this.query);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SampleQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SampleQuery if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SampleQuery.
     */
    @Generated
    public static SampleQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String language = null;
            String query = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("query".equals(fieldName)) {
                    query = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SampleQuery(language, query);
        });
    }
}
