// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The content properties of the instruction.
 */
@Immutable
public final class ContentProperties implements JsonSerializable<ContentProperties> {
    /*
     * The semantic content of the instruction.
     */
    @Generated
    private final SemanticContent semanticContent;

    /**
     * Creates an instance of ContentProperties class.
     * 
     * @param semanticContent the semanticContent value to set.
     */
    @Generated
    public ContentProperties(SemanticContent semanticContent) {
        this.semanticContent = semanticContent;
    }

    /**
     * Get the semanticContent property: The semantic content of the instruction.
     * 
     * @return the semanticContent value.
     */
    @Generated
    public SemanticContent getSemanticContent() {
        return this.semanticContent;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("semanticContent", this.semanticContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentProperties.
     */
    @Generated
    public static ContentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SemanticContent semanticContent = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("semanticContent".equals(fieldName)) {
                    semanticContent = SemanticContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new ContentProperties(semanticContent);
        });
    }
}
