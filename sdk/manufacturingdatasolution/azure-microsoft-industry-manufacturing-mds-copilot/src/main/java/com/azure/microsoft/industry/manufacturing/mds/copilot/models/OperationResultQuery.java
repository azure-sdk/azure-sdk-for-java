// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Operation Response Model.
 */
@Immutable
public final class OperationResultQuery implements JsonSerializable<OperationResultQuery> {
    /*
     * The operation status.
     */
    @Generated
    private OperationStatusValue status;

    /*
     * The operation id.
     */
    @Generated
    private String operationId;

    /*
     * The error message.
     */
    @Generated
    private List<String> errorMessage;

    /**
     * Creates an instance of OperationResultQuery class.
     */
    @Generated
    private OperationResultQuery() {
    }

    /**
     * Get the status property: The operation status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatusValue getStatus() {
        return this.status;
    }

    /**
     * Get the operationId property: The operation id.
     * 
     * @return the operationId value.
     */
    @Generated
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the errorMessage property: The error message.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public List<String> getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationResultQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationResultQuery if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationResultQuery.
     */
    @Generated
    public static OperationResultQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationResultQuery deserializedOperationResultQuery = new OperationResultQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedOperationResultQuery.status = OperationStatusValue.fromString(reader.getString());
                } else if ("operationId".equals(fieldName)) {
                    deserializedOperationResultQuery.operationId = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    List<String> errorMessage = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperationResultQuery.errorMessage = errorMessage;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationResultQuery;
        });
    }
}
