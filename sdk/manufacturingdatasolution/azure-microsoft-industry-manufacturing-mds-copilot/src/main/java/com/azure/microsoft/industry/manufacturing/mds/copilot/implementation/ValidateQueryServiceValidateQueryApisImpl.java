// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.microsoft.industry.manufacturing.mds.copilot.CopilotServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ValidateQueryServiceValidateQueryApis.
 */
public final class ValidateQueryServiceValidateQueryApisImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ValidateQueryServiceValidateQueryApisService service;

    /**
     * The service client containing this operation class.
     */
    private final CopilotServiceClientImpl client;

    /**
     * Initializes an instance of ValidateQueryServiceValidateQueryApisImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ValidateQueryServiceValidateQueryApisImpl(CopilotServiceClientImpl client) {
        this.service = RestProxy.create(ValidateQueryServiceValidateQueryApisService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public CopilotServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for CopilotServiceClientValidateQueryServiceValidateQueryApis to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://mds-{mdsUniqueId}.{location}.cloudapp.azure.com/")
    @ServiceInterface(name = "CopilotServiceClient")
    public interface ValidateQueryServiceValidateQueryApisService {
        @Post("/copilot/validationJob:run")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> run(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData runRequest, RequestOptions requestOptions, Context context);

        @Post("/copilot/validationJob:run")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> runSync(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData runRequest, RequestOptions requestOptions, Context context);

        @Get("/copilot/validationJob/{testId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getQueryValidationJobDetails(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @PathParam("testId") String testId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/copilot/validationJob/{testId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getQueryValidationJobDetailsSync(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @PathParam("testId") String testId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/copilot/validationJob/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listQueryValidationJobHistory(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/copilot/validationJob/runs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listQueryValidationJobHistorySync(@HostParam("mdsUniqueId") String mdsUniqueId,
            @HostParam("location") String location, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listQueryValidationJobHistoryNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("mdsUniqueId") String mdsUniqueId, @HostParam("location") String location,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listQueryValidationJobHistoryNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("mdsUniqueId") String mdsUniqueId, @HostParam("location") String location,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Validate a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testCases (Required): [
     *          (Required){
     *             ask: String (Optional)
     *             expectedKqlQuery: String (Optional)
     *             skipTestRun: boolean (Required)
     *         }
     *     ]
     *     runInConversationContext: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param runRequest The runRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validate Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> runWithResponseAsync(BinaryData runRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.run(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), contentType, accept, runRequest, requestOptions, context));
    }

    /**
     * Validate a query.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testCases (Required): [
     *          (Required){
     *             ask: String (Optional)
     *             expectedKqlQuery: String (Optional)
     *             skipTestRun: boolean (Required)
     *         }
     *     ]
     *     runInConversationContext: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testRunId: String (Required)
     *     status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param runRequest The runRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validate Response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> runWithResponse(BinaryData runRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.runSync(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), contentType, accept, runRequest, requestOptions,
            Context.NONE);
    }

    /**
     * Get the details of a validation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     testRunStatus: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     testResults (Required): [
     *          (Required){
     *             ask: String (Required)
     *             expectedKqlQuery: String (Required)
     *             consolidatedScore: long (Required)
     *             status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param testId Test Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a validation job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueryValidationJobDetailsWithResponseAsync(String testId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getQueryValidationJobDetails(this.client.getMdsUniqueId(), this.client.getLocation(),
                this.client.getServiceVersion().getVersion(), testId, accept, requestOptions, context));
    }

    /**
     * Get the details of a validation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     testRunStatus: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *     testResults (Required): [
     *          (Required){
     *             ask: String (Required)
     *             expectedKqlQuery: String (Required)
     *             consolidatedScore: long (Required)
     *             status: String(Accepted/InProgress/TransientFailure/Succeeded/Failed/Deleting/Canceled/Unknown/Skipped) (Required)
     *             errorMessage: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param testId Test Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a validation job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueryValidationJobDetailsWithResponse(String testId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getQueryValidationJobDetailsSync(this.client.getMdsUniqueId(), this.client.getLocation(),
            this.client.getServiceVersion().getVersion(), testId, accept, requestOptions, Context.NONE);
    }

    /**
     * List validate test requests.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fromDate</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * <tr><td>endDate</td><td>OffsetDateTime</td><td>No</td><td>end date</td></tr>
     * <tr><td>testRunId</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>>
        listQueryValidationJobHistorySinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listQueryValidationJobHistory(this.client.getMdsUniqueId(),
            this.client.getLocation(), this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List validate test requests.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fromDate</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * <tr><td>endDate</td><td>OffsetDateTime</td><td>No</td><td>end date</td></tr>
     * <tr><td>testRunId</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listQueryValidationJobHistoryAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listQueryValidationJobHistorySinglePageAsync(requestOptions),
            nextLink -> listQueryValidationJobHistoryNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List validate test requests.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fromDate</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * <tr><td>endDate</td><td>OffsetDateTime</td><td>No</td><td>end date</td></tr>
     * <tr><td>testRunId</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listQueryValidationJobHistorySinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listQueryValidationJobHistorySync(this.client.getMdsUniqueId(), this.client.getLocation(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List validate test requests.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fromDate</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * <tr><td>endDate</td><td>OffsetDateTime</td><td>No</td><td>end date</td></tr>
     * <tr><td>testRunId</td><td>OffsetDateTime</td><td>No</td><td>start date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listQueryValidationJobHistory(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listQueryValidationJobHistorySinglePage(requestOptions),
            nextLink -> listQueryValidationJobHistoryNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listQueryValidationJobHistoryNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listQueryValidationJobHistoryNext(nextLink, this.client.getMdsUniqueId(),
                this.client.getLocation(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Required)
     *     createdAt: String (Required)
     *     createdBy: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of QueryValidationJobRun items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listQueryValidationJobHistoryNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listQueryValidationJobHistoryNextSync(nextLink, this.client.getMdsUniqueId(),
            this.client.getLocation(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
