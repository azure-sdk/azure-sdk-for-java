// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionStatusEnum;
import java.io.IOException;

/**
 * The UpdateStatusRequest model.
 */
@Immutable
public final class UpdateStatusRequest implements JsonSerializable<UpdateStatusRequest> {
    /*
     * status of the instruction
     */
    @Generated
    private final InstructionStatusEnum status;

    /**
     * Creates an instance of UpdateStatusRequest class.
     * 
     * @param status the status value to set.
     */
    @Generated
    public UpdateStatusRequest(InstructionStatusEnum status) {
        this.status = status;
    }

    /**
     * Get the status property: status of the instruction.
     * 
     * @return the status value.
     */
    @Generated
    public InstructionStatusEnum getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateStatusRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateStatusRequest.
     */
    @Generated
    public static UpdateStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstructionStatusEnum status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = InstructionStatusEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new UpdateStatusRequest(status);
        });
    }
}
