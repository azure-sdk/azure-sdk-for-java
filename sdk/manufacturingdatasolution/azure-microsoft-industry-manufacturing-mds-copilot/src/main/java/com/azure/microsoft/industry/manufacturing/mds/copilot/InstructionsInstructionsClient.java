// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.InstructionsInstructionsImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models.UpdateStatusRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.GetResponse;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Instruction;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionStatusEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.OperationResultQuery;

/**
 * Initializes a new instance of the synchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class)
public final class InstructionsInstructionsClient {
    @Generated
    private final InstructionsInstructionsImpl serviceClient;

    /**
     * Initializes an instance of InstructionsInstructionsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    InstructionsInstructionsClient(InstructionsInstructionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets single instruction.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(Active/Inactive) (Required)
     *     domain: String(MOM/SCM/DE) (Required)
     *     subDomain: String(Production/Quality/Maintenance/Inventory/Downtime/Scrap/Mixed) (Required)
     *     category: String(Transactional/Analytical/Trend/KPI) (Required)
     *     language: String(EN) (Required)
     *     retrieval (Required): {
     *         subTopics (Required): [
     *             String (Required)
     *         ]
     *         keywords (Required): [
     *             String (Required)
     *         ]
     *         sampleQuestions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     content (Required): {
     *         semanticContent (Required): {
     *             context: String (Required)
     *             steps: String (Required)
     *         }
     *     }
     *     relationships (Required): {
     *         dependencies (Required): [
     *             String (Required)
     *         ]
     *         exclusions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     administrativeDetails (Required): {
     *         source: String (Required)
     *         createdBy: String (Required)
     *         lastModifiedBy: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         comment: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Id for the instruction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return single instruction along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(id, requestOptions);
    }

    /**
     * List Instruction resources.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     instructionId: String (Required)
     *     instructionVersion: String (Required)
     *     status: String(Active/Inactive) (Required)
     *     domain: String(MOM/SCM/DE) (Required)
     *     subDomain: String(Production/Quality/Maintenance/Inventory/Downtime/Scrap/Mixed) (Required)
     *     category: String(Transactional/Analytical/Trend/KPI) (Required)
     *     language: String(EN) (Required)
     *     retrieval (Required): {
     *         subTopics (Required): [
     *             String (Required)
     *         ]
     *         keywords (Required): [
     *             String (Required)
     *         ]
     *         sampleQuestions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     content (Required): {
     *         semanticContent (Required): {
     *             context: String (Required)
     *             steps: String (Required)
     *         }
     *     }
     *     relationships (Required): {
     *         dependencies (Required): [
     *             String (Required)
     *         ]
     *         exclusions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     administrativeDetails (Required): {
     *         source: String (Required)
     *         createdBy: String (Required)
     *         lastModifiedBy: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         comment: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param showActive Get all active instructions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Instruction items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(boolean showActive, RequestOptions requestOptions) {
        return this.serviceClient.list(showActive, requestOptions);
    }

    /**
     * Create an instruction.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     instructionId: String (Required)
     *     instructionVersion: String (Required)
     *     status: String(Active/Inactive) (Required)
     *     domain: String(MOM/SCM/DE) (Required)
     *     subDomain: String(Production/Quality/Maintenance/Inventory/Downtime/Scrap/Mixed) (Required)
     *     category: String(Transactional/Analytical/Trend/KPI) (Required)
     *     language: String(EN) (Required)
     *     retrieval (Required): {
     *         subTopics (Required): [
     *             String (Required)
     *         ]
     *         keywords (Required): [
     *             String (Required)
     *         ]
     *         sampleQuestions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     content (Required): {
     *         semanticContent (Required): {
     *             context: String (Required)
     *             steps: String (Required)
     *         }
     *     }
     *     relationships (Required): {
     *         dependencies (Required): [
     *             String (Required)
     *         ]
     *         exclusions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     administrativeDetails (Required): {
     *         source: String (Required)
     *         createdBy: String (Required)
     *         lastModifiedBy: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         comment: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreate(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.beginCreate(resource, requestOptions);
    }

    /**
     * update instructions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     instructionId: String (Required)
     *     instructionVersion: String (Required)
     *     status: String(Active/Inactive) (Required)
     *     domain: String(MOM/SCM/DE) (Required)
     *     subDomain: String(Production/Quality/Maintenance/Inventory/Downtime/Scrap/Mixed) (Required)
     *     category: String(Transactional/Analytical/Trend/KPI) (Required)
     *     language: String(EN) (Required)
     *     retrieval (Required): {
     *         subTopics (Required): [
     *             String (Required)
     *         ]
     *         keywords (Required): [
     *             String (Required)
     *         ]
     *         sampleQuestions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     content (Required): {
     *         semanticContent (Required): {
     *             context: String (Required)
     *             steps: String (Required)
     *         }
     *     }
     *     relationships (Required): {
     *         dependencies (Required): [
     *             String (Required)
     *         ]
     *         exclusions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     administrativeDetails (Required): {
     *         source: String (Required)
     *         createdBy: String (Required)
     *         lastModifiedBy: String (Required)
     *         createdAt: OffsetDateTime (Required)
     *         comment: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param id Id for the instruction.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrReplace(String id, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrReplace(id, resource, requestOptions);
    }

    /**
     * Delete instructions.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Id for the instruction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDelete(String id, RequestOptions requestOptions) {
        return this.serviceClient.beginDelete(id, requestOptions);
    }

    /**
     * Update instruction status.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(Active/Inactive) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         status: String(Active/Inactive) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id Id for the instruction.
     * @param updateStatusRequest The updateStatusRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdateStatus(String id, BinaryData updateStatusRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateStatus(id, updateStatusRequest, requestOptions);
    }

    /**
     * Gets single instruction.
     * 
     * @param id Id for the instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return single instruction.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetResponse get(String id) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(id, requestOptions).getValue().toObject(GetResponse.class);
    }

    /**
     * List Instruction resources.
     * 
     * @param showActive Get all active instructions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Instruction items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Instruction> list(boolean showActive) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(showActive, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Instruction.class));
    }

    /**
     * Create an instruction.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationResultQuery, Instruction> beginCreate(Instruction resource) {
        // Generated convenience method for beginCreateWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateWithModel(BinaryData.fromObject(resource), requestOptions);
    }

    /**
     * update instructions.
     * 
     * @param id Id for the instruction.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationResultQuery, Instruction> beginCreateOrReplace(String id, Instruction resource) {
        // Generated convenience method for beginCreateOrReplaceWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrReplaceWithModel(id, BinaryData.fromObject(resource), requestOptions);
    }

    /**
     * Delete instructions.
     * 
     * @param id Id for the instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationResultQuery, Void> beginDelete(String id) {
        // Generated convenience method for beginDeleteWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteWithModel(id, requestOptions);
    }

    /**
     * Update instruction status.
     * 
     * @param id Id for the instruction.
     * @param status status of the instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationResultQuery, Void> beginUpdateStatus(String id, InstructionStatusEnum status) {
        // Generated convenience method for beginUpdateStatusWithModel
        RequestOptions requestOptions = new RequestOptions();
        UpdateStatusRequest updateStatusRequestObj = new UpdateStatusRequest(status);
        BinaryData updateStatusRequest = BinaryData.fromObject(updateStatusRequestObj);
        return serviceClient.beginUpdateStatusWithModel(id, updateStatusRequest, requestOptions);
    }
}
