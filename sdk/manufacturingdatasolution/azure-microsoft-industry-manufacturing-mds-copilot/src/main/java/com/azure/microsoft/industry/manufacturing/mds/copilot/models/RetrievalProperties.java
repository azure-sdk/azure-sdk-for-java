// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The retrieval properties of the instruction.
 */
@Immutable
public final class RetrievalProperties implements JsonSerializable<RetrievalProperties> {
    /*
     * The sub-topics related to the instruction.
     */
    @Generated
    private final List<String> subTopics;

    /*
     * The keywords associated with the instruction.
     */
    @Generated
    private final List<String> keywords;

    /*
     * The sample questions for the instruction.
     */
    @Generated
    private final List<String> sampleQuestions;

    /**
     * Creates an instance of RetrievalProperties class.
     * 
     * @param subTopics the subTopics value to set.
     * @param keywords the keywords value to set.
     * @param sampleQuestions the sampleQuestions value to set.
     */
    @Generated
    public RetrievalProperties(List<String> subTopics, List<String> keywords, List<String> sampleQuestions) {
        this.subTopics = subTopics;
        this.keywords = keywords;
        this.sampleQuestions = sampleQuestions;
    }

    /**
     * Get the subTopics property: The sub-topics related to the instruction.
     * 
     * @return the subTopics value.
     */
    @Generated
    public List<String> getSubTopics() {
        return this.subTopics;
    }

    /**
     * Get the keywords property: The keywords associated with the instruction.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Get the sampleQuestions property: The sample questions for the instruction.
     * 
     * @return the sampleQuestions value.
     */
    @Generated
    public List<String> getSampleQuestions() {
        return this.sampleQuestions;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subTopics", this.subTopics, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("sampleQuestions", this.sampleQuestions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetrievalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetrievalProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RetrievalProperties.
     */
    @Generated
    public static RetrievalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> subTopics = null;
            List<String> keywords = null;
            List<String> sampleQuestions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subTopics".equals(fieldName)) {
                    subTopics = reader.readArray(reader1 -> reader1.getString());
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("sampleQuestions".equals(fieldName)) {
                    sampleQuestions = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new RetrievalProperties(subTopics, keywords, sampleQuestions);
        });
    }
}
