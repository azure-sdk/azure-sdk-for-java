// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Test Details Response.
 */
@Immutable
public final class QueryValidationJobDetails implements JsonSerializable<QueryValidationJobDetails> {
    /*
     * Test Id
     */
    @Generated
    private String testId;

    /*
     * Test Run Status
     */
    @Generated
    private final OperationStatus testRunStatus;

    /*
     * Test Results
     */
    @Generated
    private final List<QueryValidationTestCaseResult> testResults;

    /**
     * Creates an instance of QueryValidationJobDetails class.
     * 
     * @param testRunStatus the testRunStatus value to set.
     * @param testResults the testResults value to set.
     */
    @Generated
    private QueryValidationJobDetails(OperationStatus testRunStatus, List<QueryValidationTestCaseResult> testResults) {
        this.testRunStatus = testRunStatus;
        this.testResults = testResults;
    }

    /**
     * Get the testId property: Test Id.
     * 
     * @return the testId value.
     */
    @Generated
    public String getTestId() {
        return this.testId;
    }

    /**
     * Get the testRunStatus property: Test Run Status.
     * 
     * @return the testRunStatus value.
     */
    @Generated
    public OperationStatus getTestRunStatus() {
        return this.testRunStatus;
    }

    /**
     * Get the testResults property: Test Results.
     * 
     * @return the testResults value.
     */
    @Generated
    public List<QueryValidationTestCaseResult> getTestResults() {
        return this.testResults;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("testRunStatus", this.testRunStatus == null ? null : this.testRunStatus.toString());
        jsonWriter.writeArrayField("testResults", this.testResults, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryValidationJobDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryValidationJobDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryValidationJobDetails.
     */
    @Generated
    public static QueryValidationJobDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String testId = null;
            OperationStatus testRunStatus = null;
            List<QueryValidationTestCaseResult> testResults = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testId".equals(fieldName)) {
                    testId = reader.getString();
                } else if ("testRunStatus".equals(fieldName)) {
                    testRunStatus = OperationStatus.fromString(reader.getString());
                } else if ("testResults".equals(fieldName)) {
                    testResults = reader.readArray(reader1 -> QueryValidationTestCaseResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            QueryValidationJobDetails deserializedQueryValidationJobDetails
                = new QueryValidationJobDetails(testRunStatus, testResults);
            deserializedQueryValidationJobDetails.testId = testId;

            return deserializedQueryValidationJobDetails;
        });
    }
}
