// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.QueryServicesImpl;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryRequest;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.QueryResponse;

/**
 * Initializes a new instance of the synchronous CopilotServiceClient type.
 */
@ServiceClient(builder = CopilotServiceClientBuilder.class)
public final class QueryServiceClient {
    @Generated
    private final QueryServicesImpl serviceClient;

    /**
     * Initializes an instance of QueryServiceClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    QueryServiceClient(QueryServicesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * execute the query.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxRetry</td><td>Integer</td><td>No</td><td>maximum number of retries</td></tr>
     * <tr><td>includeSummary</td><td>Boolean</td><td>No</td><td>Include summary in the response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>conversationId</td><td>String</td><td>No</td><td>conversation id</td></tr>
     * <tr><td>Accept-Language</td><td>String</td><td>No</td><td>Accept-Language header</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ask: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result: String (Optional)
     *     summary: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param request request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return query Response Result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> queryExecuteWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.queryExecuteWithResponse(request, requestOptions);
    }

    /**
     * execute the query.
     * 
     * @param request request body.
     * @param conversationId conversation id.
     * @param acceptLanguage Accept-Language header.
     * @param maxRetry maximum number of retries.
     * @param includeSummary Include summary in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Response Result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryResponse queryExecute(QueryRequest request, String conversationId, String acceptLanguage,
        Integer maxRetry, Boolean includeSummary) {
        // Generated convenience method for queryExecuteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (conversationId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("conversationId"), conversationId);
        }
        if (acceptLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_LANGUAGE, acceptLanguage);
        }
        if (maxRetry != null) {
            requestOptions.addQueryParam("maxRetry", String.valueOf(maxRetry), false);
        }
        if (includeSummary != null) {
            requestOptions.addQueryParam("includeSummary", String.valueOf(includeSummary), false);
        }
        return queryExecuteWithResponse(BinaryData.fromObject(request), requestOptions).getValue()
            .toObject(QueryResponse.class);
    }

    /**
     * execute the query.
     * 
     * @param request request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Response Result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryResponse queryExecute(QueryRequest request) {
        // Generated convenience method for queryExecuteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return queryExecuteWithResponse(BinaryData.fromObject(request), requestOptions).getValue()
            .toObject(QueryResponse.class);
    }
}
