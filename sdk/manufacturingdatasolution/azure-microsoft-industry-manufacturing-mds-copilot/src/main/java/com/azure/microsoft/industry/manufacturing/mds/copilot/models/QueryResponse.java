// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Query Response Result.
 */
@Immutable
public final class QueryResponse implements JsonSerializable<QueryResponse> {
    /*
     * Resultant Query Query or Query query execution response (JArray string). If Markdown format is requested, the
     * result will be in Markdown format and only first 100 records will be presented here.
     */
    @Generated
    private String result;

    /*
     * Summary of the Resultant Query Query or Query query execution response (JArray string)
     */
    @Generated
    private String summary;

    /**
     * Creates an instance of QueryResponse class.
     */
    @Generated
    private QueryResponse() {
    }

    /**
     * Get the result property: Resultant Query Query or Query query execution response (JArray string). If Markdown
     * format is requested, the result will be in Markdown format and only first 100 records will be presented here.
     * 
     * @return the result value.
     */
    @Generated
    public String getResult() {
        return this.result;
    }

    /**
     * Get the summary property: Summary of the Resultant Query Query or Query query execution response (JArray string).
     * 
     * @return the summary value.
     */
    @Generated
    public String getSummary() {
        return this.summary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("result", this.result);
        jsonWriter.writeStringField("summary", this.summary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryResponse.
     */
    @Generated
    public static QueryResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryResponse deserializedQueryResponse = new QueryResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("result".equals(fieldName)) {
                    deserializedQueryResponse.result = reader.getString();
                } else if ("summary".equals(fieldName)) {
                    deserializedQueryResponse.summary = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryResponse;
        });
    }
}
