// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Validate Response.
 */
@Immutable
public final class QueryValidationJobScheduleConfirmation
    implements JsonSerializable<QueryValidationJobScheduleConfirmation> {
    /*
     * Test Run Id
     */
    @Generated
    private final String testRunId;

    /*
     * Test Run Status
     */
    @Generated
    private final OperationStatus status;

    /*
     * creation date
     */
    @Generated
    private final OffsetDateTime createdAt;

    /*
     * created by
     */
    @Generated
    private final String createdBy;

    /**
     * Creates an instance of QueryValidationJobScheduleConfirmation class.
     * 
     * @param testRunId the testRunId value to set.
     * @param status the status value to set.
     * @param createdAt the createdAt value to set.
     * @param createdBy the createdBy value to set.
     */
    @Generated
    private QueryValidationJobScheduleConfirmation(String testRunId, OperationStatus status, OffsetDateTime createdAt,
        String createdBy) {
        this.testRunId = testRunId;
        this.status = status;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
    }

    /**
     * Get the testRunId property: Test Run Id.
     * 
     * @return the testRunId value.
     */
    @Generated
    public String getTestRunId() {
        return this.testRunId;
    }

    /**
     * Get the status property: Test Run Status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdAt property: creation date.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the createdBy property: created by.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("testRunId", this.testRunId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("createdBy", this.createdBy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryValidationJobScheduleConfirmation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryValidationJobScheduleConfirmation if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryValidationJobScheduleConfirmation.
     */
    @Generated
    public static QueryValidationJobScheduleConfirmation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String testRunId = null;
            OperationStatus status = null;
            OffsetDateTime createdAt = null;
            String createdBy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testRunId".equals(fieldName)) {
                    testRunId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("createdAt".equals(fieldName)) {
                    createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    createdBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new QueryValidationJobScheduleConfirmation(testRunId, status, createdAt, createdBy);
        });
    }
}
