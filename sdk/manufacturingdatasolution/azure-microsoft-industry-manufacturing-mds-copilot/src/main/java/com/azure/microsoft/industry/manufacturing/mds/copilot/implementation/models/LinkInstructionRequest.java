// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The LinkInstructionRequest model.
 */
@Fluent
public final class LinkInstructionRequest implements JsonSerializable<LinkInstructionRequest> {
    /*
     * The linked instructions for the example query.
     */
    @Generated
    private List<String> linkedInstructions;

    /**
     * Creates an instance of LinkInstructionRequest class.
     */
    @Generated
    public LinkInstructionRequest() {
    }

    /**
     * Get the linkedInstructions property: The linked instructions for the example query.
     * 
     * @return the linkedInstructions value.
     */
    @Generated
    public List<String> getLinkedInstructions() {
        return this.linkedInstructions;
    }

    /**
     * Set the linkedInstructions property: The linked instructions for the example query.
     * 
     * @param linkedInstructions the linkedInstructions value to set.
     * @return the LinkInstructionRequest object itself.
     */
    @Generated
    public LinkInstructionRequest setLinkedInstructions(List<String> linkedInstructions) {
        this.linkedInstructions = linkedInstructions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("linkedInstructions", this.linkedInstructions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkInstructionRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkInstructionRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkInstructionRequest.
     */
    @Generated
    public static LinkInstructionRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkInstructionRequest deserializedLinkInstructionRequest = new LinkInstructionRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedInstructions".equals(fieldName)) {
                    List<String> linkedInstructions = reader.readArray(reader1 -> reader1.getString());
                    deserializedLinkInstructionRequest.linkedInstructions = linkedInstructions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkInstructionRequest;
        });
    }
}
