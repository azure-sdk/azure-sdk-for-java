// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Test Case Result.
 */
@Immutable
public final class QueryValidationTestCaseResult implements JsonSerializable<QueryValidationTestCaseResult> {
    /*
     * The query to be asked.
     */
    @Generated
    private final String ask;

    /*
     * The expected KQL query.
     */
    @Generated
    private final String expectedKqlQuery;

    /*
     * The consolidated score of the test case.
     */
    @Generated
    private final long consolidatedScore;

    /*
     * The status of the operation.
     */
    @Generated
    private final OperationStatus status;

    /*
     * The error message, if any.
     */
    @Generated
    private String errorMessage;

    /**
     * Creates an instance of QueryValidationTestCaseResult class.
     * 
     * @param ask the ask value to set.
     * @param expectedKqlQuery the expectedKqlQuery value to set.
     * @param consolidatedScore the consolidatedScore value to set.
     * @param status the status value to set.
     */
    @Generated
    private QueryValidationTestCaseResult(String ask, String expectedKqlQuery, long consolidatedScore,
        OperationStatus status) {
        this.ask = ask;
        this.expectedKqlQuery = expectedKqlQuery;
        this.consolidatedScore = consolidatedScore;
        this.status = status;
    }

    /**
     * Get the ask property: The query to be asked.
     * 
     * @return the ask value.
     */
    @Generated
    public String getAsk() {
        return this.ask;
    }

    /**
     * Get the expectedKqlQuery property: The expected KQL query.
     * 
     * @return the expectedKqlQuery value.
     */
    @Generated
    public String getExpectedKqlQuery() {
        return this.expectedKqlQuery;
    }

    /**
     * Get the consolidatedScore property: The consolidated score of the test case.
     * 
     * @return the consolidatedScore value.
     */
    @Generated
    public long getConsolidatedScore() {
        return this.consolidatedScore;
    }

    /**
     * Get the status property: The status of the operation.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errorMessage property: The error message, if any.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ask", this.ask);
        jsonWriter.writeStringField("expectedKqlQuery", this.expectedKqlQuery);
        jsonWriter.writeLongField("consolidatedScore", this.consolidatedScore);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryValidationTestCaseResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryValidationTestCaseResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryValidationTestCaseResult.
     */
    @Generated
    public static QueryValidationTestCaseResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String ask = null;
            String expectedKqlQuery = null;
            long consolidatedScore = 0L;
            OperationStatus status = null;
            String errorMessage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ask".equals(fieldName)) {
                    ask = reader.getString();
                } else if ("expectedKqlQuery".equals(fieldName)) {
                    expectedKqlQuery = reader.getString();
                } else if ("consolidatedScore".equals(fieldName)) {
                    consolidatedScore = reader.getLong();
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("errorMessage".equals(fieldName)) {
                    errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            QueryValidationTestCaseResult deserializedQueryValidationTestCaseResult
                = new QueryValidationTestCaseResult(ask, expectedKqlQuery, consolidatedScore, status);
            deserializedQueryValidationTestCaseResult.errorMessage = errorMessage;

            return deserializedQueryValidationTestCaseResult;
        });
    }
}
