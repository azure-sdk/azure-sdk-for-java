// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Relationships.
 */
@Immutable
public final class Relationships implements JsonSerializable<Relationships> {
    /*
     * List of dependent instructions
     */
    @Generated
    private final List<String> dependencies;

    /*
     * List of InstructionIds to be excluded
     */
    @Generated
    private final List<String> exclusions;

    /**
     * Creates an instance of Relationships class.
     * 
     * @param dependencies the dependencies value to set.
     * @param exclusions the exclusions value to set.
     */
    @Generated
    public Relationships(List<String> dependencies, List<String> exclusions) {
        this.dependencies = dependencies;
        this.exclusions = exclusions;
    }

    /**
     * Get the dependencies property: List of dependent instructions.
     * 
     * @return the dependencies value.
     */
    @Generated
    public List<String> getDependencies() {
        return this.dependencies;
    }

    /**
     * Get the exclusions property: List of InstructionIds to be excluded.
     * 
     * @return the exclusions value.
     */
    @Generated
    public List<String> getExclusions() {
        return this.exclusions;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dependencies", this.dependencies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exclusions", this.exclusions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Relationships from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Relationships if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Relationships.
     */
    @Generated
    public static Relationships fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> dependencies = null;
            List<String> exclusions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dependencies".equals(fieldName)) {
                    dependencies = reader.readArray(reader1 -> reader1.getString());
                } else if ("exclusions".equals(fieldName)) {
                    exclusions = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new Relationships(dependencies, exclusions);
        });
    }
}
