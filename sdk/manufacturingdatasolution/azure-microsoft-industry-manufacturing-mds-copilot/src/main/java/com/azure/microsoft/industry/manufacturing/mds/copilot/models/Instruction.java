// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This is the request model for Instruction.
 */
@Immutable
public final class Instruction implements JsonSerializable<Instruction> {
    /*
     * Id for the instruction
     */
    @Generated
    private String id;

    /*
     * intruction Id for the instruction
     */
    @Generated
    private final String instructionId;

    /*
     * Version for the instruction
     */
    @Generated
    private final String instructionVersion;

    /*
     * Status for the instruction
     */
    @Generated
    private InstructionStatusEnum status;

    /*
     * Domain for the instruction
     */
    @Generated
    private InstrustionDomainEnum domain;

    /*
     * Sub-domain for the instruction
     */
    @Generated
    private InstructionSubDomainEnum subDomain;

    /*
     * Category for the instruction
     */
    @Generated
    private InstructionCategoryEnum category;

    /*
     * The language of the instruction.
     */
    @Generated
    private final InstructionLanguageEnum language;

    /*
     * The retrieval properties of the instruction.
     */
    @Generated
    private final RetrievalProperties retrieval;

    /*
     * The content properties of the instruction.
     */
    @Generated
    private final ContentProperties content;

    /*
     * The relationships of the instruction.
     */
    @Generated
    private final Relationships relationships;

    /*
     * audit record for the instruction
     */
    @Generated
    private final AdministrativeDetails administrativeDetails;

    /**
     * Creates an instance of Instruction class.
     * 
     * @param instructionId the instructionId value to set.
     * @param instructionVersion the instructionVersion value to set.
     * @param language the language value to set.
     * @param retrieval the retrieval value to set.
     * @param content the content value to set.
     * @param relationships the relationships value to set.
     * @param administrativeDetails the administrativeDetails value to set.
     */
    @Generated
    public Instruction(String instructionId, String instructionVersion, InstructionLanguageEnum language,
        RetrievalProperties retrieval, ContentProperties content, Relationships relationships,
        AdministrativeDetails administrativeDetails) {
        this.instructionId = instructionId;
        this.instructionVersion = instructionVersion;
        this.language = language;
        this.retrieval = retrieval;
        this.content = content;
        this.relationships = relationships;
        this.administrativeDetails = administrativeDetails;
    }

    /**
     * Get the id property: Id for the instruction.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the instructionId property: intruction Id for the instruction.
     * 
     * @return the instructionId value.
     */
    @Generated
    public String getInstructionId() {
        return this.instructionId;
    }

    /**
     * Get the instructionVersion property: Version for the instruction.
     * 
     * @return the instructionVersion value.
     */
    @Generated
    public String getInstructionVersion() {
        return this.instructionVersion;
    }

    /**
     * Get the status property: Status for the instruction.
     * 
     * @return the status value.
     */
    @Generated
    public InstructionStatusEnum getStatus() {
        return this.status;
    }

    /**
     * Get the domain property: Domain for the instruction.
     * 
     * @return the domain value.
     */
    @Generated
    public InstrustionDomainEnum getDomain() {
        return this.domain;
    }

    /**
     * Get the subDomain property: Sub-domain for the instruction.
     * 
     * @return the subDomain value.
     */
    @Generated
    public InstructionSubDomainEnum getSubDomain() {
        return this.subDomain;
    }

    /**
     * Get the category property: Category for the instruction.
     * 
     * @return the category value.
     */
    @Generated
    public InstructionCategoryEnum getCategory() {
        return this.category;
    }

    /**
     * Get the language property: The language of the instruction.
     * 
     * @return the language value.
     */
    @Generated
    public InstructionLanguageEnum getLanguage() {
        return this.language;
    }

    /**
     * Get the retrieval property: The retrieval properties of the instruction.
     * 
     * @return the retrieval value.
     */
    @Generated
    public RetrievalProperties getRetrieval() {
        return this.retrieval;
    }

    /**
     * Get the content property: The content properties of the instruction.
     * 
     * @return the content value.
     */
    @Generated
    public ContentProperties getContent() {
        return this.content;
    }

    /**
     * Get the relationships property: The relationships of the instruction.
     * 
     * @return the relationships value.
     */
    @Generated
    public Relationships getRelationships() {
        return this.relationships;
    }

    /**
     * Get the administrativeDetails property: audit record for the instruction.
     * 
     * @return the administrativeDetails value.
     */
    @Generated
    public AdministrativeDetails getAdministrativeDetails() {
        return this.administrativeDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instructionId", this.instructionId);
        jsonWriter.writeStringField("instructionVersion", this.instructionVersion);
        jsonWriter.writeStringField("language", this.language == null ? null : this.language.toString());
        jsonWriter.writeJsonField("retrieval", this.retrieval);
        jsonWriter.writeJsonField("content", this.content);
        jsonWriter.writeJsonField("relationships", this.relationships);
        jsonWriter.writeJsonField("administrativeDetails", this.administrativeDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Instruction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Instruction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Instruction.
     */
    @Generated
    public static Instruction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String instructionId = null;
            String instructionVersion = null;
            InstructionStatusEnum status = null;
            InstrustionDomainEnum domain = null;
            InstructionSubDomainEnum subDomain = null;
            InstructionCategoryEnum category = null;
            InstructionLanguageEnum language = null;
            RetrievalProperties retrieval = null;
            ContentProperties content = null;
            Relationships relationships = null;
            AdministrativeDetails administrativeDetails = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("instructionId".equals(fieldName)) {
                    instructionId = reader.getString();
                } else if ("instructionVersion".equals(fieldName)) {
                    instructionVersion = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = InstructionStatusEnum.fromString(reader.getString());
                } else if ("domain".equals(fieldName)) {
                    domain = InstrustionDomainEnum.fromString(reader.getString());
                } else if ("subDomain".equals(fieldName)) {
                    subDomain = InstructionSubDomainEnum.fromString(reader.getString());
                } else if ("category".equals(fieldName)) {
                    category = InstructionCategoryEnum.fromString(reader.getString());
                } else if ("language".equals(fieldName)) {
                    language = InstructionLanguageEnum.fromString(reader.getString());
                } else if ("retrieval".equals(fieldName)) {
                    retrieval = RetrievalProperties.fromJson(reader);
                } else if ("content".equals(fieldName)) {
                    content = ContentProperties.fromJson(reader);
                } else if ("relationships".equals(fieldName)) {
                    relationships = Relationships.fromJson(reader);
                } else if ("administrativeDetails".equals(fieldName)) {
                    administrativeDetails = AdministrativeDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            Instruction deserializedInstruction = new Instruction(instructionId, instructionVersion, language,
                retrieval, content, relationships, administrativeDetails);
            deserializedInstruction.id = id;
            deserializedInstruction.status = status;
            deserializedInstruction.domain = domain;
            deserializedInstruction.subDomain = subDomain;
            deserializedInstruction.category = category;

            return deserializedInstruction;
        });
    }
}
