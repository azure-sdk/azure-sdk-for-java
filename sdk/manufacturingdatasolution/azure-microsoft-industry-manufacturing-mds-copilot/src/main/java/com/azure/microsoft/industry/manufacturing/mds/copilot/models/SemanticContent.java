// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The semantic content of the instruction.
 */
@Immutable
public final class SemanticContent implements JsonSerializable<SemanticContent> {
    /*
     * The content of the instruction.
     */
    @Generated
    private final String context;

    /*
     * The source of the instruction.
     */
    @Generated
    private final String steps;

    /**
     * Creates an instance of SemanticContent class.
     * 
     * @param context the context value to set.
     * @param steps the steps value to set.
     */
    @Generated
    public SemanticContent(String context, String steps) {
        this.context = context;
        this.steps = steps;
    }

    /**
     * Get the context property: The content of the instruction.
     * 
     * @return the context value.
     */
    @Generated
    public String getContext() {
        return this.context;
    }

    /**
     * Get the steps property: The source of the instruction.
     * 
     * @return the steps value.
     */
    @Generated
    public String getSteps() {
        return this.steps;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("context", this.context);
        jsonWriter.writeStringField("steps", this.steps);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SemanticContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SemanticContent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SemanticContent.
     */
    @Generated
    public static SemanticContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String context = null;
            String steps = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("context".equals(fieldName)) {
                    context = reader.getString();
                } else if ("steps".equals(fieldName)) {
                    steps = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SemanticContent(context, steps);
        });
    }
}
