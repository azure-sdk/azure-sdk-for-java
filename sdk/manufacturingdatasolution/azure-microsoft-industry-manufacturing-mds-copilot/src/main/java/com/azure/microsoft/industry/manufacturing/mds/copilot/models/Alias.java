// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This is the request model for Alias.
 */
@Immutable
public final class Alias implements JsonSerializable<Alias> {
    /*
     * Id for the alias
     */
    @Generated
    private String id;

    /*
     * Key for the alias
     */
    @Generated
    private final String name;

    /*
     * List of aliases
     */
    @Generated
    private final List<String> aliases;

    /*
     * Indicates if the alias is enabled
     */
    @Generated
    private Choice isCustom;

    /*
     * Indicates if the alias is enabled
     */
    @Generated
    private final ResourceState state;

    /**
     * Creates an instance of Alias class.
     * 
     * @param name the name value to set.
     * @param aliases the aliases value to set.
     * @param state the state value to set.
     */
    @Generated
    public Alias(String name, List<String> aliases, ResourceState state) {
        this.name = name;
        this.aliases = aliases;
        this.state = state;
    }

    /**
     * Get the id property: Id for the alias.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Key for the alias.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the aliases property: List of aliases.
     * 
     * @return the aliases value.
     */
    @Generated
    public List<String> getAliases() {
        return this.aliases;
    }

    /**
     * Get the isCustom property: Indicates if the alias is enabled.
     * 
     * @return the isCustom value.
     */
    @Generated
    public Choice getIsCustom() {
        return this.isCustom;
    }

    /**
     * Get the state property: Indicates if the alias is enabled.
     * 
     * @return the state value.
     */
    @Generated
    public ResourceState getState() {
        return this.state;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("aliases", this.aliases, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Alias from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Alias if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Alias.
     */
    @Generated
    public static Alias fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            List<String> aliases = null;
            Choice isCustom = null;
            ResourceState state = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("aliases".equals(fieldName)) {
                    aliases = reader.readArray(reader1 -> reader1.getString());
                } else if ("isCustom".equals(fieldName)) {
                    isCustom = Choice.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    state = ResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Alias deserializedAlias = new Alias(name, aliases, state);
            deserializedAlias.id = id;
            deserializedAlias.isCustom = isCustom;

            return deserializedAlias;
        });
    }
}
