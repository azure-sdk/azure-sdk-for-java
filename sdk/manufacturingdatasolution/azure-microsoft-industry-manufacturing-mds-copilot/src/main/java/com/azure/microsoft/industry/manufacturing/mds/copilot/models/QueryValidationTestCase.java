// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Test Case for Test run.
 */
@Fluent
public final class QueryValidationTestCase implements JsonSerializable<QueryValidationTestCase> {
    /*
     * The natural language input for the test case.
     */
    @Generated
    private String ask;

    /*
     * The expected query for the test case.
     */
    @Generated
    private String expectedKqlQuery;

    /*
     * The expected entities for the test case.
     */
    @Generated
    private final boolean skipTestRun;

    /**
     * Creates an instance of QueryValidationTestCase class.
     * 
     * @param skipTestRun the skipTestRun value to set.
     */
    @Generated
    public QueryValidationTestCase(boolean skipTestRun) {
        this.skipTestRun = skipTestRun;
    }

    /**
     * Get the ask property: The natural language input for the test case.
     * 
     * @return the ask value.
     */
    @Generated
    public String getAsk() {
        return this.ask;
    }

    /**
     * Set the ask property: The natural language input for the test case.
     * 
     * @param ask the ask value to set.
     * @return the QueryValidationTestCase object itself.
     */
    @Generated
    public QueryValidationTestCase setAsk(String ask) {
        this.ask = ask;
        return this;
    }

    /**
     * Get the expectedKqlQuery property: The expected query for the test case.
     * 
     * @return the expectedKqlQuery value.
     */
    @Generated
    public String getExpectedKqlQuery() {
        return this.expectedKqlQuery;
    }

    /**
     * Set the expectedKqlQuery property: The expected query for the test case.
     * 
     * @param expectedKqlQuery the expectedKqlQuery value to set.
     * @return the QueryValidationTestCase object itself.
     */
    @Generated
    public QueryValidationTestCase setExpectedKqlQuery(String expectedKqlQuery) {
        this.expectedKqlQuery = expectedKqlQuery;
        return this;
    }

    /**
     * Get the skipTestRun property: The expected entities for the test case.
     * 
     * @return the skipTestRun value.
     */
    @Generated
    public boolean isSkipTestRun() {
        return this.skipTestRun;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("skipTestRun", this.skipTestRun);
        jsonWriter.writeStringField("ask", this.ask);
        jsonWriter.writeStringField("expectedKqlQuery", this.expectedKqlQuery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryValidationTestCase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryValidationTestCase if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryValidationTestCase.
     */
    @Generated
    public static QueryValidationTestCase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean skipTestRun = false;
            String ask = null;
            String expectedKqlQuery = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("skipTestRun".equals(fieldName)) {
                    skipTestRun = reader.getBoolean();
                } else if ("ask".equals(fieldName)) {
                    ask = reader.getString();
                } else if ("expectedKqlQuery".equals(fieldName)) {
                    expectedKqlQuery = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            QueryValidationTestCase deserializedQueryValidationTestCase = new QueryValidationTestCase(skipTestRun);
            deserializedQueryValidationTestCase.ask = ask;
            deserializedQueryValidationTestCase.expectedKqlQuery = expectedKqlQuery;

            return deserializedQueryValidationTestCase;
        });
    }
}
