// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.AdministrativeDetails;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.ContentProperties;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Instruction;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionCategoryEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionLanguageEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionSubDomainEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstrustionDomainEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Relationships;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.ResourceState;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.RetrievalProperties;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.SemanticContent;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class InstructionServiceClientListMaximumSetGeneratedByMaximumSetRuleTests
    extends CopilotServiceClientTestBase {
    @Test
    @Disabled
    public void testInstructionServiceClientListMaximumSetGeneratedByMaximumSetRuleTests() {
        // method invocation
        PagedIterable<Instruction> response = instructionsInstructionServiceClient.list(ResourceState.ACTIVE);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        Instruction firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("Instruction001", firstItem.getId());
        // verify property "instructionId"
        Assertions.assertEquals("wzcj", firstItem.getInstructionId());
        // verify property "instructionVersion"
        Assertions.assertEquals("cbkturdjgfbtzvgxtwhziwxssp", firstItem.getInstructionVersion());
        // verify property "domain"
        Assertions.assertEquals(InstrustionDomainEnum.MOM, firstItem.getDomain());
        // verify property "subDomain"
        Assertions.assertEquals(InstructionSubDomainEnum.PRODUCTION, firstItem.getSubDomain());
        // verify property "category"
        Assertions.assertEquals(InstructionCategoryEnum.TRANSACTIONAL, firstItem.getCategory());
        // verify property "language"
        Assertions.assertEquals(InstructionLanguageEnum.EN, firstItem.getLanguage());
        // verify property "retrieval"
        RetrievalProperties firstItemRetrieval = firstItem.getRetrieval();
        Assertions.assertNotNull(firstItemRetrieval);
        List<String> firstItemRetrievalSubTopics = firstItemRetrieval.getSubTopics();
        Assertions.assertEquals("rcrvbjpuuofcjsylrrvwychziw", firstItemRetrievalSubTopics.iterator().next());
        List<String> firstItemRetrievalKeywords = firstItemRetrieval.getKeywords();
        Assertions.assertEquals("sqrtvystkcwn", firstItemRetrievalKeywords.iterator().next());
        List<String> firstItemRetrievalSampleQuestions = firstItemRetrieval.getSampleQuestions();
        Assertions.assertEquals("eyxhzeeblgxqq", firstItemRetrievalSampleQuestions.iterator().next());
        // verify property "content"
        ContentProperties firstItemContent = firstItem.getContent();
        Assertions.assertNotNull(firstItemContent);
        SemanticContent firstItemContentSemanticContent = firstItemContent.getSemanticContent();
        Assertions.assertNotNull(firstItemContentSemanticContent);
        Assertions.assertEquals("cbmkdt", firstItemContentSemanticContent.getContext());
        Assertions.assertEquals("cghkyiiutuisqnct", firstItemContentSemanticContent.getSteps());
        // verify property "relationships"
        Relationships firstItemRelationships = firstItem.getRelationships();
        Assertions.assertNotNull(firstItemRelationships);
        List<String> firstItemRelationshipsDependencies = firstItemRelationships.getDependencies();
        Assertions.assertEquals("hzlrwrhqitkegisuvmnescsbxemhd", firstItemRelationshipsDependencies.iterator().next());
        List<String> firstItemRelationshipsExclusions = firstItemRelationships.getExclusions();
        Assertions.assertEquals("wopztrccxxiwrh", firstItemRelationshipsExclusions.iterator().next());
        // verify property "administrativeDetails"
        AdministrativeDetails firstItemAdministrativeDetails = firstItem.getAdministrativeDetails();
        Assertions.assertNotNull(firstItemAdministrativeDetails);
        Assertions.assertEquals("zchlwtxrsoiihikgivvcodboza", firstItemAdministrativeDetails.getSource());
        Assertions.assertEquals("crinzkltxvxwagfhnflyetedx", firstItemAdministrativeDetails.getCreatedBy());
        Assertions.assertEquals("xwhsmyekkfmuk", firstItemAdministrativeDetails.getLastModifiedBy());
        Assertions.assertNotNull(firstItemAdministrativeDetails.getCreatedAt());
        Assertions.assertEquals("rbc", firstItemAdministrativeDetails.getComment());
        // verify property "state"
        Assertions.assertEquals(ResourceState.ACTIVE, firstItem.getState());
    }
}
