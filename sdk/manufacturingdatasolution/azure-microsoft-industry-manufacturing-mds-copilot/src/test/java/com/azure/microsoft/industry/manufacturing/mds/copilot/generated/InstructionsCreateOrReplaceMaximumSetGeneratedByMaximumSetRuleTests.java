// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.microsoft.industry.manufacturing.mds.copilot.generated;

import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.SyncPoller;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.AdministrativeDetails;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.ContentProperties;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Instruction;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionLanguageEnum;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.OperationResultQuery;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.Relationships;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.RetrievalProperties;
import com.azure.microsoft.industry.manufacturing.mds.copilot.models.SemanticContent;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class InstructionsCreateOrReplaceMaximumSetGeneratedByMaximumSetRuleTests
    extends CopilotServiceClientTestBase {
    @Test
    @Disabled
    public void testInstructionsCreateOrReplaceMaximumSetGeneratedByMaximumSetRuleTests() {
        // method invocation
        SyncPoller<OperationResultQuery, Instruction> response = setPlaybackSyncPollerPollInterval(
            instructionsInstructionsClient.beginCreateOrReplace("bgxvwaxfnmggmdmioexzmdtyk",
                new Instruction("lc", "oqjnitfdopnmf", InstructionLanguageEnum.EN,
                    new RetrievalProperties(Arrays.asList("ncjziatzbkn"), Arrays.asList("xwbkjrwd"),
                        Arrays.asList("qmrgzdtouhonzzqjhlunvcmamwyqin")),
                    new ContentProperties(new SemanticContent("eazzaethdegqcpgalsjw", "bognszjgfpssrwvcwm")),
                    new Relationships(Arrays.asList("wkcw"), Arrays.asList("wlur")),
                    new AdministrativeDetails("iaaswzkdcf", "jdsosxpobdbsnvjybsignzvqwx", "mmgenazkjomsdsxwurs",
                        OffsetDateTime.parse("2025-03-10T14:41:38.643Z"), "cwq"))));

        // response assertion
        Assertions.assertEquals(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,
            response.waitForCompletion().getStatus());
    }
}
