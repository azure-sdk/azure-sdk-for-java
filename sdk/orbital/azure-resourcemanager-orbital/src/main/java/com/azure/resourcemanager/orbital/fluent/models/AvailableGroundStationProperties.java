// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.orbital.models.ReleaseMode;
import java.io.IOException;

/**
 * Properties object for Available groundstation.
 */
@Fluent
public final class AvailableGroundStationProperties implements JsonSerializable<AvailableGroundStationProperties> {
    /*
     * City of ground station.
     */
    private String city;

    /*
     * Ground station provider name.
     */
    private String providerName;

    /*
     * Longitude of the ground station in decimal degrees.
     */
    private Float longitudeDegrees;

    /*
     * Latitude of the ground station in decimal degrees.
     */
    private Float latitudeDegrees;

    /*
     * Altitude of the ground station.
     */
    private Float altitudeMeters;

    /*
     * Release Status of a ground station.
     */
    private ReleaseMode releaseMode;

    /**
     * Creates an instance of AvailableGroundStationProperties class.
     */
    public AvailableGroundStationProperties() {
    }

    /**
     * Get the city property: City of ground station.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: City of ground station.
     * 
     * @param city the city value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the providerName property: Ground station provider name.
     * 
     * @return the providerName value.
     */
    public String providerName() {
        return this.providerName;
    }

    /**
     * Set the providerName property: Ground station provider name.
     * 
     * @param providerName the providerName value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withProviderName(String providerName) {
        this.providerName = providerName;
        return this;
    }

    /**
     * Get the longitudeDegrees property: Longitude of the ground station in decimal degrees.
     * 
     * @return the longitudeDegrees value.
     */
    public Float longitudeDegrees() {
        return this.longitudeDegrees;
    }

    /**
     * Set the longitudeDegrees property: Longitude of the ground station in decimal degrees.
     * 
     * @param longitudeDegrees the longitudeDegrees value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withLongitudeDegrees(Float longitudeDegrees) {
        this.longitudeDegrees = longitudeDegrees;
        return this;
    }

    /**
     * Get the latitudeDegrees property: Latitude of the ground station in decimal degrees.
     * 
     * @return the latitudeDegrees value.
     */
    public Float latitudeDegrees() {
        return this.latitudeDegrees;
    }

    /**
     * Set the latitudeDegrees property: Latitude of the ground station in decimal degrees.
     * 
     * @param latitudeDegrees the latitudeDegrees value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withLatitudeDegrees(Float latitudeDegrees) {
        this.latitudeDegrees = latitudeDegrees;
        return this;
    }

    /**
     * Get the altitudeMeters property: Altitude of the ground station.
     * 
     * @return the altitudeMeters value.
     */
    public Float altitudeMeters() {
        return this.altitudeMeters;
    }

    /**
     * Set the altitudeMeters property: Altitude of the ground station.
     * 
     * @param altitudeMeters the altitudeMeters value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withAltitudeMeters(Float altitudeMeters) {
        this.altitudeMeters = altitudeMeters;
        return this;
    }

    /**
     * Get the releaseMode property: Release Status of a ground station.
     * 
     * @return the releaseMode value.
     */
    public ReleaseMode releaseMode() {
        return this.releaseMode;
    }

    /**
     * Set the releaseMode property: Release Status of a ground station.
     * 
     * @param releaseMode the releaseMode value to set.
     * @return the AvailableGroundStationProperties object itself.
     */
    public AvailableGroundStationProperties withReleaseMode(ReleaseMode releaseMode) {
        this.releaseMode = releaseMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("providerName", this.providerName);
        jsonWriter.writeNumberField("longitudeDegrees", this.longitudeDegrees);
        jsonWriter.writeNumberField("latitudeDegrees", this.latitudeDegrees);
        jsonWriter.writeNumberField("altitudeMeters", this.altitudeMeters);
        jsonWriter.writeStringField("releaseMode", this.releaseMode == null ? null : this.releaseMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableGroundStationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableGroundStationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailableGroundStationProperties.
     */
    public static AvailableGroundStationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableGroundStationProperties deserializedAvailableGroundStationProperties
                = new AvailableGroundStationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("city".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.city = reader.getString();
                } else if ("providerName".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.providerName = reader.getString();
                } else if ("longitudeDegrees".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.longitudeDegrees
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("latitudeDegrees".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.latitudeDegrees
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("altitudeMeters".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.altitudeMeters
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("releaseMode".equals(fieldName)) {
                    deserializedAvailableGroundStationProperties.releaseMode
                        = ReleaseMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableGroundStationProperties;
        });
    }
}
