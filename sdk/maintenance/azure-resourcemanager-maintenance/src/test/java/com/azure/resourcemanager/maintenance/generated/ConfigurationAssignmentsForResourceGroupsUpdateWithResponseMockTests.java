// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsForResourceGroupsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"uij\",\"properties\":{\"maintenanceConfigurationId\":\"xs\",\"resourceId\":\"prtujwsawdd\",\"filter\":{\"resourceTypes\":[\"bxv\",\"titvtzeexavox\"],\"resourceGroups\":[\"lecdmdqbw\",\"ypq\",\"gsfjac\",\"slhhxudbxv\"],\"osTypes\":[\"tnsi\",\"ud\"],\"locations\":[\"mes\"],\"tagSettings\":{\"tags\":{\"ckknhxkizvy\":[\"agzrcxfa\",\"lc\",\"xwmdboxd\",\"gsftufqobrjlnacg\"],\"roylaxxu\":[\"rzvul\",\"r\",\"aeranokqgukkjqnv\"]},\"filterOperator\":\"Any\"}}},\"id\":\"sdosfjbjsvgjr\",\"name\":\"hryvy\",\"type\":\"ytdc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfigurationAssignment response
            = manager.configurationAssignmentsForResourceGroups()
                .updateWithResponse("lrcivtsoxfrke", "xpmyyefrpmpdnq",
                    new ConfigurationAssignmentInner().withLocation("ka")
                        .withMaintenanceConfigurationId("qvmmbn")
                        .withResourceId("fr")
                        .withFilter(
                            new ConfigurationAssignmentFilterProperties()
                                .withResourceTypes(Arrays.asList("zmegnitgvk", "lzyqd", "fegcea", "zxwhcansymoyqhlw"))
                                .withResourceGroups(Arrays.asList("ivbkbxgomfaj"))
                                .withOsTypes(Arrays.asList("sqvdaeyygux", "kjsqzhzbezkgi"))
                                .withLocations(Arrays.asList("dxasicddyvv", "skgfmocwahpq"))
                                .withTagSettings(new TagSettingsProperties()
                                    .withTags(
                                        mapOf("bbjjidjksyxk", Arrays.asList("a", "hhvjhh", "akz"), "svxeizzgwklnsr",
                                            Arrays.asList("vxevblb", "ednljl", "geuaulx", "nsmjbnkppxynen"), "ekkkzd",
                                            Arrays.asList("feycxcktp", "ymerteeammxq")))
                                    .withFilterOperator(TagOperators.ANY))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("uij", response.location());
        Assertions.assertEquals("xs", response.maintenanceConfigurationId());
        Assertions.assertEquals("prtujwsawdd", response.resourceId());
        Assertions.assertEquals("bxv", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("lecdmdqbw", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("tnsi", response.filter().osTypes().get(0));
        Assertions.assertEquals("mes", response.filter().locations().get(0));
        Assertions.assertEquals("agzrcxfa", response.filter().tagSettings().tags().get("ckknhxkizvy").get(0));
        Assertions.assertEquals(TagOperators.ANY, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
