// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MaintenanceConfigurationOperationGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"namespace\":\"kwqqtchealmf\",\"extensionProperties\":{\"v\":\"aayg\"},\"maintenanceScope\":\"SQLDB\",\"maintenanceWindow\":{\"startDateTime\":\"ohgwxrtfudxepxg\",\"expirationDateTime\":\"agvrvmnpkuk\",\"duration\":\"i\",\"timeZone\":\"blxgwimf\",\"recurEvery\":\"hfjx\"},\"visibility\":\"Public\",\"installPatches\":{\"rebootSetting\":\"Never\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"rey\",\"kzikfjawneaivxwc\"],\"kbNumbersToInclude\":[\"pcirelsfeaen\",\"abfatkl\",\"dxbjhwuaanozj\"],\"classificationsToInclude\":[\"hyoulpjr\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"vimjwos\",\"tx\",\"tcs\",\"fcktqumiekke\"],\"packageNameMasksToInclude\":[\"khly\"],\"classificationsToInclude\":[\"dgqggebdu\",\"ygaeqidbqfatpxl\"]}}},\"location\":\"xcyjmoadsuvarmy\",\"tags\":{\"rw\":\"jsjqbjhhyx\",\"duhpk\":\"yc\"},\"id\":\"kgymareqnajxqug\",\"name\":\"hky\",\"type\":\"ubeddg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        MaintenanceConfiguration response = manager.maintenanceConfigurationOperationGroups()
            .define("hykojoxafnndlpic")
            .withRegion("mqg")
            .withExistingResourceGroup("dbutauvfbtkuwhh")
            .withTags(mapOf("zikywgg", "u", "uipiccjzk", "kallatmel"))
            .withNamespace("ymkcdyhb")
            .withExtensionProperties(mapOf("vljxywsu", "pwdreqnovvqf"))
            .withMaintenanceScope(MaintenanceScope.OSIMAGE)
            .withVisibility(Visibility.CUSTOM)
            .withInstallPatches(new InputPatchConfiguration().withRebootSetting(RebootOptions.NEVER)
                .withWindowsParameters(new InputWindowsParameters()
                    .withKbNumbersToExclude(Arrays.asList("hqkvpuvksgplsak", "ynfs", "n", "jphuopxodlqi"))
                    .withKbNumbersToInclude(Arrays.asList("orzihle", "sjswsrms"))
                    .withClassificationsToInclude(Arrays.asList("rpzbchckqqzqi", "xiy"))
                    .withExcludeKbsRequiringReboot(true))
                .withLinuxParameters(new InputLinuxParameters()
                    .withPackageNameMasksToExclude(
                        Arrays.asList("nkedyatrwyhqmib", "yhwitsmypyynpcdp", "mnzgmwznmabi", "nsorgjhxbldt"))
                    .withPackageNameMasksToInclude(Arrays.asList("rlkdmtncvokotl", "xdy"))
                    .withClassificationsToInclude(Arrays.asList("y", "cogjltdtbn", "hadoocrk", "cikhnv"))))
            .withStartDateTime("ndsytgadg")
            .withExpirationDateTime("aeaeneqnzarrw")
            .withDuration("uu")
            .withTimeZone("fqka")
            .withRecurEvery("wiipfpub")
            .create();

        Assertions.assertEquals("xcyjmoadsuvarmy", response.location());
        Assertions.assertEquals("jsjqbjhhyx", response.tags().get("rw"));
        Assertions.assertEquals("kwqqtchealmf", response.namespace());
        Assertions.assertEquals("aayg", response.extensionProperties().get("v"));
        Assertions.assertEquals(MaintenanceScope.SQLDB, response.maintenanceScope());
        Assertions.assertEquals(Visibility.PUBLIC, response.visibility());
        Assertions.assertEquals(RebootOptions.NEVER, response.installPatches().rebootSetting());
        Assertions.assertEquals("rey", response.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("pcirelsfeaen",
            response.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("hyoulpjr",
            response.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertFalse(response.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("vimjwos",
            response.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("khly", response.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("dgqggebdu",
            response.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("ohgwxrtfudxepxg", response.startDateTime());
        Assertions.assertEquals("agvrvmnpkuk", response.expirationDateTime());
        Assertions.assertEquals("i", response.duration());
        Assertions.assertEquals("blxgwimf", response.timeZone());
        Assertions.assertEquals("hfjx", response.recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
