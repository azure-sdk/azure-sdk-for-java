// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MaintenanceConfigurationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"namespace\":\"zq\",\"extensionProperties\":{\"jidsuyonobglaoc\":\"ywpmueefjzwfqkq\",\"udxytlmoyrx\":\"xtccmg\",\"qj\":\"wfudwpzntxhdzhl\",\"bkyvp\":\"hckfrlhrx\"},\"maintenanceScope\":\"Host\",\"maintenanceWindow\":{\"startDateTime\":\"z\",\"expirationDateTime\":\"zka\",\"duration\":\"uwbc\",\"timeZone\":\"wbme\",\"recurEvery\":\"seyvj\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"IfRequired\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"kdeemaofmxagkvtm\",\"lmqkrhahvlj\",\"ahaquh\",\"dhmdua\"],\"kbNumbersToInclude\":[\"xqpvfadmw\"],\"classificationsToInclude\":[\"r\",\"vxpvgomz\",\"fmisg\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"ldawkzbaliourqha\"],\"packageNameMasksToInclude\":[\"hashsfwxosow\",\"xcug\",\"cjooxdjebwpucwwf\"],\"classificationsToInclude\":[\"bvmeuecivy\",\"zceuojgjrw\"]}}},\"location\":\"eiotwmcdytdx\",\"tags\":{\"wgqwgxhn\":\"xnrj\",\"y\":\"skxfbk\"},\"id\":\"gklwn\",\"name\":\"nhjdauw\",\"type\":\"vylwzbtdhxuj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<MaintenanceConfiguration> response
            = manager.maintenanceConfigurations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("eiotwmcdytdx", response.iterator().next().location());
        Assertions.assertEquals("xnrj", response.iterator().next().tags().get("wgqwgxhn"));
        Assertions.assertEquals("zq", response.iterator().next().namespace());
        Assertions.assertEquals("ywpmueefjzwfqkq",
            response.iterator().next().extensionProperties().get("jidsuyonobglaoc"));
        Assertions.assertEquals(MaintenanceScope.HOST, response.iterator().next().maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, response.iterator().next().visibility());
        Assertions.assertEquals(RebootOptions.IF_REQUIRED, response.iterator().next().installPatches().rebootSetting());
        Assertions.assertEquals("kdeemaofmxagkvtm",
            response.iterator().next().installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("xqpvfadmw",
            response.iterator().next().installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("r",
            response.iterator().next().installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions
            .assertFalse(response.iterator().next().installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("ldawkzbaliourqha",
            response.iterator().next().installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("hashsfwxosow",
            response.iterator().next().installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("bvmeuecivy",
            response.iterator().next().installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("z", response.iterator().next().startDateTime());
        Assertions.assertEquals("zka", response.iterator().next().expirationDateTime());
        Assertions.assertEquals("uwbc", response.iterator().next().duration());
        Assertions.assertEquals("wbme", response.iterator().next().timeZone());
        Assertions.assertEquals("seyvj", response.iterator().next().recurEvery());
    }
}
