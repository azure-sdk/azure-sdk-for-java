// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsForSubscriptionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"jazysdzhezwwvaiq\",\"properties\":{\"maintenanceConfigurationId\":\"vfonkphhqyikvyl\",\"resourceId\":\"yavluwmncstt\",\"filter\":{\"resourceTypes\":[\"bvpoekrsgsgbdhu\"],\"resourceGroups\":[\"njdgkynscliq\",\"zvhxnk\",\"mtk\",\"bo\"],\"osTypes\":[\"nvdxzxhihfrbbc\",\"vqagtltdhlf\"],\"locations\":[\"jpykvgtrdcnifmzz\",\"dymbrny\",\"u\"],\"tagSettings\":{\"tags\":{\"fqroudas\":[\"fwgckhocxvdfffw\"],\"zydvfvf\":[\"vehhrvkbunzozu\",\"hcxgkmoyx\",\"dyuib\",\"mfdn\"],\"cvwmzhwplefa\":[\"naeo\",\"srvhmgorffuki\"],\"dggxdbeesmi\":[\"xilcbtgnhnzey\",\"xtjjfzqlqhycav\"]},\"filterOperator\":\"Any\"}}},\"id\":\"ra\",\"name\":\"iaa\",\"type\":\"iuagydwqfbylyrfg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfigurationAssignment response
            = manager.configurationAssignmentsForSubscriptions()
                .define("ilozapeewchpxlk")
                .withRegion("kuziycsle")
                .withMaintenanceConfigurationId("uztcktyhjtqed")
                .withResourceId("zulwmmrqzzrrj")
                .withFilter(new ConfigurationAssignmentFilterProperties()
                    .withResourceTypes(Arrays.asList("ydzgkrvqeevtoe", "r"))
                    .withResourceGroups(Arrays.asList("nwy"))
                    .withOsTypes(Arrays.asList("dmovzvfva", "wzqa"))
                    .withLocations(Arrays.asList("gzuriglaecxndt", "cokpv"))
                    .withTagSettings(new TagSettingsProperties()
                        .withTags(mapOf("npkc", Arrays.asList("mldgxobfirc"), "jlb", Arrays.asList("yzriykhy", "wf")))
                        .withFilterOperator(TagOperators.ANY)))
                .create();

        Assertions.assertEquals("jazysdzhezwwvaiq", response.location());
        Assertions.assertEquals("vfonkphhqyikvyl", response.maintenanceConfigurationId());
        Assertions.assertEquals("yavluwmncstt", response.resourceId());
        Assertions.assertEquals("bvpoekrsgsgbdhu", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("njdgkynscliq", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("nvdxzxhihfrbbc", response.filter().osTypes().get(0));
        Assertions.assertEquals("jpykvgtrdcnifmzz", response.filter().locations().get(0));
        Assertions.assertEquals("fwgckhocxvdfffw", response.filter().tagSettings().tags().get("fqroudas").get(0));
        Assertions.assertEquals(TagOperators.ANY, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
