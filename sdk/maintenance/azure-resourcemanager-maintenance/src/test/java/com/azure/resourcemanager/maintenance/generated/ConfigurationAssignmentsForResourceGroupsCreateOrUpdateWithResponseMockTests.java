// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsForResourceGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"dtutnwldu\",\"properties\":{\"maintenanceConfigurationId\":\"uzhyrmewipmvekdx\",\"resourceId\":\"uqgsj\",\"filter\":{\"resourceTypes\":[\"dxgketwzhhzjhfj\"],\"resourceGroups\":[\"vmuvgpmu\"],\"osTypes\":[\"sx\",\"mhfbuzjy\"],\"locations\":[\"as\",\"hudypohyuemsl\"],\"tagSettings\":{\"tags\":{\"fhqlyvi\":[\"rpfoobr\",\"ttymsjny\",\"qdnfwqzdz\",\"tilaxh\"]},\"filterOperator\":\"All\"}}},\"id\":\"iv\",\"name\":\"xoyzunbix\",\"type\":\"rtikvcpwpg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfigurationAssignment response = manager.configurationAssignmentsForResourceGroups()
            .createOrUpdateWithResponse("thwwn", "jhlfzswpchwahf",
                new ConfigurationAssignmentInner().withLocation("usnfepgfewet")
                    .withMaintenanceConfigurationId("xgncxyk")
                    .withResourceId("djhlimm")
                    .withFilter(new ConfigurationAssignmentFilterProperties().withResourceTypes(Arrays.asList("h"))
                        .withResourceGroups(Arrays.asList("orxvxcjzhqiz"))
                        .withOsTypes(Arrays.asList("xtgqscjavftjuh", "qaz", "mtggu"))
                        .withLocations(Arrays.asList("jrajcivm"))
                        .withTagSettings(
                            new TagSettingsProperties().withTags(mapOf("uvyinzqodfvpgs", Arrays.asList("fiwrxgkn")))
                                .withFilterOperator(TagOperators.ALL))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dtutnwldu", response.location());
        Assertions.assertEquals("uzhyrmewipmvekdx", response.maintenanceConfigurationId());
        Assertions.assertEquals("uqgsj", response.resourceId());
        Assertions.assertEquals("dxgketwzhhzjhfj", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("vmuvgpmu", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("sx", response.filter().osTypes().get(0));
        Assertions.assertEquals("as", response.filter().locations().get(0));
        Assertions.assertEquals("rpfoobr", response.filter().tagSettings().tags().get("fhqlyvi").get(0));
        Assertions.assertEquals(TagOperators.ALL, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
