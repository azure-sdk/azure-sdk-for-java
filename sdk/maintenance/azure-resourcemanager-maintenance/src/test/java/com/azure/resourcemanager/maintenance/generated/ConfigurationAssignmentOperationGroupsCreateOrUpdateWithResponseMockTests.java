// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentOperationGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"rsre\",\"properties\":{\"maintenanceConfigurationId\":\"xurisjnhnyt\",\"resourceId\":\"fq\",\"filter\":{\"resourceTypes\":[\"mrhublwpc\",\"sutrgjup\"],\"resourceGroups\":[\"tpwoqhihejq\",\"w\",\"pnfqntcyp\",\"xjvfoimwksl\"],\"osTypes\":[\"izjx\",\"ydfce\",\"cvlhv\",\"gdyftumrtwna\"],\"locations\":[\"lbiw\"],\"tagSettings\":{\"tags\":{\"bydvkhbejdz\":[\"yztsfmz\",\"baeqphc\",\"qnrnrpxehuwryk\",\"gaifmvik\"],\"volvtn\":[\"cvdsrhnj\"],\"ltducea\":[\"qfzgemjdftul\"],\"jpr\":[\"mczuo\",\"ejwcwwqiok\",\"ssxmojms\",\"p\"]},\"filterOperator\":\"Any\"}}},\"id\":\"fz\",\"name\":\"ljyxgtczhe\",\"type\":\"dbsdshm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfigurationAssignment response
            = manager.configurationAssignmentOperationGroups()
                .createOrUpdateWithResponse("rgnepttwqmsniffc", "mqnrojlpijnkr", "frddhcrati", "zronasxift", "zq",
                    new ConfigurationAssignmentInner().withLocation("hftwesgog")
                        .withMaintenanceConfigurationId("onnxkrlgnyhm")
                        .withResourceId("sxkkg")
                        .withFilter(new ConfigurationAssignmentFilterProperties()
                            .withResourceTypes(Arrays.asList("gh", "jbdhqxvc"))
                            .withResourceGroups(Arrays.asList("rpdsof", "shrnsvbuswdvz", "ybycnunvj", "rtkfawnopq"))
                            .withOsTypes(Arrays.asList("yzirtxdyuxzejn", "psew", "ioilqukrydxtq"))
                            .withLocations(Arrays.asList("ox", "rgguf", "yaomtb", "hhavgrvkffovjz"))
                            .withTagSettings(new TagSettingsProperties().withTags(mapOf("zbomvzzbtdcqvpni",
                                Arrays.asList("bgj", "fxumv", "cluyovwxnbkf", "zzxscyhwzdgiruj"), "rymsgaojfmw",
                                Arrays.asList("jviylwdshfs", "n", "bgye"), "piwyczuhxacpqjl",
                                Arrays.asList("otmrfhir", "tymoxoftp"))).withFilterOperator(TagOperators.ALL))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("rsre", response.location());
        Assertions.assertEquals("xurisjnhnyt", response.maintenanceConfigurationId());
        Assertions.assertEquals("fq", response.resourceId());
        Assertions.assertEquals("mrhublwpc", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("tpwoqhihejq", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("izjx", response.filter().osTypes().get(0));
        Assertions.assertEquals("lbiw", response.filter().locations().get(0));
        Assertions.assertEquals("yztsfmz", response.filter().tagSettings().tags().get("bydvkhbejdz").get(0));
        Assertions.assertEquals(TagOperators.ANY, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
