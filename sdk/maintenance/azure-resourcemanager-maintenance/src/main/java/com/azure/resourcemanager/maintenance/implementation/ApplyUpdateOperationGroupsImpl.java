// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.maintenance.fluent.ApplyUpdateOperationGroupsClient;
import com.azure.resourcemanager.maintenance.fluent.models.ApplyUpdateInner;
import com.azure.resourcemanager.maintenance.models.ApplyUpdate;
import com.azure.resourcemanager.maintenance.models.ApplyUpdateOperationGroups;

public final class ApplyUpdateOperationGroupsImpl implements ApplyUpdateOperationGroups {
    private static final ClientLogger LOGGER = new ClientLogger(ApplyUpdateOperationGroupsImpl.class);

    private final ApplyUpdateOperationGroupsClient innerClient;

    private final com.azure.resourcemanager.maintenance.MaintenanceManager serviceManager;

    public ApplyUpdateOperationGroupsImpl(ApplyUpdateOperationGroupsClient innerClient,
        com.azure.resourcemanager.maintenance.MaintenanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ApplyUpdate> getWithResponse(String resourceGroupName, String providerName, String resourceType,
        String resourceName, String applyUpdateName, Context context) {
        Response<ApplyUpdateInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, providerName, resourceType, resourceName, applyUpdateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApplyUpdateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplyUpdate get(String resourceGroupName, String providerName, String resourceType, String resourceName,
        String applyUpdateName) {
        ApplyUpdateInner inner
            = this.serviceClient().get(resourceGroupName, providerName, resourceType, resourceName, applyUpdateName);
        if (inner != null) {
            return new ApplyUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplyUpdate> createOrUpdateOrCancelWithResponse(String resourceGroupName, String providerName,
        String resourceType, String resourceName, String applyUpdateName, ApplyUpdateInner applyUpdate,
        Context context) {
        Response<ApplyUpdateInner> inner = this.serviceClient()
            .createOrUpdateOrCancelWithResponse(resourceGroupName, providerName, resourceType, resourceName,
                applyUpdateName, applyUpdate, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApplyUpdateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplyUpdate createOrUpdateOrCancel(String resourceGroupName, String providerName, String resourceType,
        String resourceName, String applyUpdateName, ApplyUpdateInner applyUpdate) {
        ApplyUpdateInner inner = this.serviceClient()
            .createOrUpdateOrCancel(resourceGroupName, providerName, resourceType, resourceName, applyUpdateName,
                applyUpdate);
        if (inner != null) {
            return new ApplyUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ApplyUpdate> list() {
        PagedIterable<ApplyUpdateInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ApplyUpdateImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplyUpdate> list(Context context) {
        PagedIterable<ApplyUpdateInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ApplyUpdateImpl(inner1, this.manager()));
    }

    private ApplyUpdateOperationGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.maintenance.MaintenanceManager manager() {
        return this.serviceManager;
    }
}
