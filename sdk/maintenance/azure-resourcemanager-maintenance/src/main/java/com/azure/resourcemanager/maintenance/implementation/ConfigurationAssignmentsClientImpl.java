// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.maintenance.fluent.ConfigurationAssignmentsClient;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.implementation.models.ListConfigurationAssignmentsResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConfigurationAssignmentsClient.
 */
public final class ConfigurationAssignmentsClientImpl implements ConfigurationAssignmentsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConfigurationAssignmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final MaintenanceClientImpl client;

    /**
     * Initializes an instance of ConfigurationAssignmentsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConfigurationAssignmentsClientImpl(MaintenanceClientImpl client) {
        this.service = RestProxy.create(ConfigurationAssignmentsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MaintenanceClientConfigurationAssignments to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MaintenanceClientCon")
    public interface ConfigurationAssignmentsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> getParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> getParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> createOrUpdateParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> createOrUpdateParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> deleteParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> deleteParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListConfigurationAssignmentsResult>> listParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ListConfigurationAssignmentsResult> listParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("providerName") String providerName,
            @PathParam("resourceParentType") String resourceParentType,
            @PathParam("resourceParentName") String resourceParentName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListConfigurationAssignmentsResult>> listParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ListConfigurationAssignmentsResult> listParentNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> getParentWithResponseAsync(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, String configurationAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType,
                resourceParentName, resourceType, resourceName, configurationAssignmentName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> getParentAsync(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName) {
        return getParentWithResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> getParentWithResponse(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, accept, context);
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner getParent(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName) {
        return getParentWithResponse(resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, Context.NONE).getValue();
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> createOrUpdateParentWithResponseAsync(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdateParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType,
                resourceParentName, resourceType, resourceName, configurationAssignmentName, contentType, accept,
                configurationAssignment, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> createOrUpdateParentAsync(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateParentWithResponseAsync(resourceGroupName, providerName, resourceParentType,
            resourceParentName, resourceType, resourceName, configurationAssignmentName, configurationAssignment)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> createOrUpdateParentWithResponse(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, contentType, accept, configurationAssignment,
            context);
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner createOrUpdateParent(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateParentWithResponse(resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, configurationAssignment, Context.NONE).getValue();
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> deleteParentWithResponseAsync(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, String configurationAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType,
                resourceParentName, resourceType, resourceName, configurationAssignmentName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> deleteParentAsync(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName) {
        return deleteParentWithResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> deleteParentWithResponse(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, String configurationAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, accept, context);
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner deleteParent(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        String configurationAssignmentName) {
        return deleteParentWithResponse(resourceGroupName, providerName, resourceParentType, resourceParentName,
            resourceType, resourceName, configurationAssignmentName, Context.NONE).getValue();
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationAssignmentInner>> listParentSinglePageAsync(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, providerName, resourceParentType,
                resourceParentName, resourceType, resourceName, accept, context))
            .<PagedResponse<ConfigurationAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfigurationAssignmentInner> listParentAsync(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        return new PagedFlux<>(() -> listParentSinglePageAsync(resourceGroupName, providerName, resourceParentType,
            resourceParentName, resourceType, resourceName), nextLink -> listParentNextSinglePageAsync(nextLink));
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationAssignmentInner> listParentSinglePage(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ListConfigurationAssignmentsResult> res = service.listParentSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, providerName,
            resourceParentType, resourceParentName, resourceType, resourceName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationAssignmentInner> listParentSinglePage(String resourceGroupName,
        String providerName, String resourceParentType, String resourceParentName, String resourceType,
        String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceParentType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentType is required and cannot be null."));
        }
        if (resourceParentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceParentName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ListConfigurationAssignmentsResult> res = service.listParentSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, providerName,
            resourceParentType, resourceParentName, resourceType, resourceName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationAssignmentInner> listParent(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        return new PagedIterable<>(() -> listParentSinglePage(resourceGroupName, providerName, resourceParentType,
            resourceParentName, resourceType, resourceName), nextLink -> listParentNextSinglePage(nextLink));
    }

    /**
     * List configurationAssignments for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Resource provider name.
     * @param resourceParentType Resource parent type.
     * @param resourceParentName Resource parent name.
     * @param resourceType Resource type.
     * @param resourceName Resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationAssignmentInner> listParent(String resourceGroupName, String providerName,
        String resourceParentType, String resourceParentName, String resourceType, String resourceName,
        Context context) {
        return new PagedIterable<>(() -> listParentSinglePage(resourceGroupName, providerName, resourceParentType,
            resourceParentName, resourceType, resourceName, context),
            nextLink -> listParentNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationAssignmentInner>> listParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConfigurationAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationAssignmentInner> listParentNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ListConfigurationAssignmentsResult> res
            = service.listParentNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ConfigurationAssignments list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationAssignmentInner> listParentNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ListConfigurationAssignmentsResult> res
            = service.listParentNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationAssignmentsClientImpl.class);
}
