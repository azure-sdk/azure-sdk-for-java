// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.maintenance.fluent.ConfigurationAssignmentsForResourceGroupsClient;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ConfigurationAssignmentsForResourceGroupsClient.
 */
public final class ConfigurationAssignmentsForResourceGroupsClientImpl
    implements ConfigurationAssignmentsForResourceGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConfigurationAssignmentsForResourceGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final MaintenanceClientImpl client;

    /**
     * Initializes an instance of ConfigurationAssignmentsForResourceGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConfigurationAssignmentsForResourceGroupsClientImpl(MaintenanceClientImpl client) {
        this.service = RestProxy.create(ConfigurationAssignmentsForResourceGroupsService.class,
            client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MaintenanceClientConfigurationAssignmentsForResourceGroups to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MaintenanceClientCon")
    public interface ConfigurationAssignmentsForResourceGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationAssignmentInner configurationAssignment, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationAssignmentInner>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ConfigurationAssignmentInner> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationAssignmentName") String configurationAssignmentName,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String configurationAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> getByResourceGroupAsync(String resourceGroupName,
        String configurationAssignmentName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, configurationAssignmentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource. along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> getByResourceGroupWithResponse(String resourceGroupName,
        String configurationAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, accept, context);
    }

    /**
     * Get configuration assignment for resource..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration assignment for resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner getByResourceGroup(String resourceGroupName,
        String configurationAssignmentName) {
        return getByResourceGroupWithResponse(resourceGroupName, configurationAssignmentName, Context.NONE).getValue();
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, contentType, accept,
                configurationAssignment, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> createOrUpdateAsync(String resourceGroupName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateWithResponseAsync(resourceGroupName, configurationAssignmentName, configurationAssignment)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> createOrUpdateWithResponse(String resourceGroupName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, contentType, accept,
            configurationAssignment, context);
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner createOrUpdate(String resourceGroupName, String configurationAssignmentName,
        ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateWithResponse(resourceGroupName, configurationAssignmentName, configurationAssignment,
            Context.NONE).getValue();
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> updateWithResponseAsync(String resourceGroupName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, contentType, accept,
                configurationAssignment, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> updateAsync(String resourceGroupName, String configurationAssignmentName,
        ConfigurationAssignmentInner configurationAssignment) {
        return updateWithResponseAsync(resourceGroupName, configurationAssignmentName, configurationAssignment)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> updateWithResponse(String resourceGroupName,
        String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        if (configurationAssignment == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null."));
        } else {
            configurationAssignment.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, contentType, accept,
            configurationAssignment, context);
    }

    /**
     * Register configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param configurationAssignment The configurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner update(String resourceGroupName, String configurationAssignmentName,
        ConfigurationAssignmentInner configurationAssignment) {
        return updateWithResponse(resourceGroupName, configurationAssignmentName, configurationAssignment, Context.NONE)
            .getValue();
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationAssignmentInner>> deleteWithResponseAsync(String resourceGroupName,
        String configurationAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationAssignmentInner> deleteAsync(String resourceGroupName,
        String configurationAssignmentName) {
        return deleteWithResponseAsync(resourceGroupName, configurationAssignmentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationAssignmentInner> deleteWithResponse(String resourceGroupName,
        String configurationAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationAssignmentName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter configurationAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationAssignmentName, accept, context);
    }

    /**
     * Unregister configuration for resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationAssignmentName The name of the ConfigurationAssignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationAssignmentInner delete(String resourceGroupName, String configurationAssignmentName) {
        return deleteWithResponse(resourceGroupName, configurationAssignmentName, Context.NONE).getValue();
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ConfigurationAssignmentsForResourceGroupsClientImpl.class);
}
