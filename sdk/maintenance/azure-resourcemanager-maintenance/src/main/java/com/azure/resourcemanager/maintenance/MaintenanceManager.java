// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.maintenance.fluent.MaintenanceClient;
import com.azure.resourcemanager.maintenance.implementation.ApplyUpdateForResourceGroupOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ApplyUpdateOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ApplyUpdatesImpl;
import com.azure.resourcemanager.maintenance.implementation.ApplyUpdatesOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ConfigurationAssignmentForResourceGroupOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ConfigurationAssignmentOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ConfigurationAssignmentsForResourceGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.ConfigurationAssignmentsForSubscriptionsImpl;
import com.azure.resourcemanager.maintenance.implementation.ConfigurationAssignmentsImpl;
import com.azure.resourcemanager.maintenance.implementation.MaintenanceClientBuilder;
import com.azure.resourcemanager.maintenance.implementation.MaintenanceConfigurationOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.MaintenanceConfigurationsImpl;
import com.azure.resourcemanager.maintenance.implementation.OperationsImpl;
import com.azure.resourcemanager.maintenance.implementation.ScheduledEventOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.implementation.UpdatesOperationGroupsImpl;
import com.azure.resourcemanager.maintenance.models.ApplyUpdateForResourceGroupOperationGroups;
import com.azure.resourcemanager.maintenance.models.ApplyUpdateOperationGroups;
import com.azure.resourcemanager.maintenance.models.ApplyUpdates;
import com.azure.resourcemanager.maintenance.models.ApplyUpdatesOperationGroups;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentForResourceGroupOperationGroups;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentOperationGroups;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignments;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentsForResourceGroups;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentsForSubscriptions;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfigurationOperationGroups;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfigurations;
import com.azure.resourcemanager.maintenance.models.Operations;
import com.azure.resourcemanager.maintenance.models.ScheduledEventOperationGroups;
import com.azure.resourcemanager.maintenance.models.UpdatesOperationGroups;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to MaintenanceManager.
 * Azure Maintenance Management Client.
 */
public final class MaintenanceManager {
    private Operations operations;

    private MaintenanceConfigurations maintenanceConfigurations;

    private MaintenanceConfigurationOperationGroups maintenanceConfigurationOperationGroups;

    private ApplyUpdates applyUpdates;

    private ApplyUpdateOperationGroups applyUpdateOperationGroups;

    private ConfigurationAssignments configurationAssignments;

    private ConfigurationAssignmentOperationGroups configurationAssignmentOperationGroups;

    private ConfigurationAssignmentsForSubscriptions configurationAssignmentsForSubscriptions;

    private ConfigurationAssignmentsForResourceGroups configurationAssignmentsForResourceGroups;

    private ScheduledEventOperationGroups scheduledEventOperationGroups;

    private ApplyUpdatesOperationGroups applyUpdatesOperationGroups;

    private ApplyUpdateForResourceGroupOperationGroups applyUpdateForResourceGroupOperationGroups;

    private ConfigurationAssignmentForResourceGroupOperationGroups configurationAssignmentForResourceGroupOperationGroups;

    private UpdatesOperationGroups updatesOperationGroups;

    private final MaintenanceClient clientObject;

    private MaintenanceManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new MaintenanceClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Maintenance service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Maintenance service API instance.
     */
    public static MaintenanceManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Maintenance service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Maintenance service API instance.
     */
    public static MaintenanceManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new MaintenanceManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create MaintenanceManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new MaintenanceManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);
        private static final String SDK_VERSION = "version";
        private static final Map<String, String> PROPERTIES
            = CoreUtils.getProperties("azure-resourcemanager-maintenance.properties");

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Maintenance service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Maintenance service API instance.
         */
        public MaintenanceManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.maintenance")
                .append("/")
                .append(clientVersion);
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new MaintenanceManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of MaintenanceConfigurations.
     * 
     * @return Resource collection API of MaintenanceConfigurations.
     */
    public MaintenanceConfigurations maintenanceConfigurations() {
        if (this.maintenanceConfigurations == null) {
            this.maintenanceConfigurations
                = new MaintenanceConfigurationsImpl(clientObject.getMaintenanceConfigurations(), this);
        }
        return maintenanceConfigurations;
    }

    /**
     * Gets the resource collection API of MaintenanceConfigurationOperationGroups. It manages MaintenanceConfiguration.
     * 
     * @return Resource collection API of MaintenanceConfigurationOperationGroups.
     */
    public MaintenanceConfigurationOperationGroups maintenanceConfigurationOperationGroups() {
        if (this.maintenanceConfigurationOperationGroups == null) {
            this.maintenanceConfigurationOperationGroups = new MaintenanceConfigurationOperationGroupsImpl(
                clientObject.getMaintenanceConfigurationOperationGroups(), this);
        }
        return maintenanceConfigurationOperationGroups;
    }

    /**
     * Gets the resource collection API of ApplyUpdates.
     * 
     * @return Resource collection API of ApplyUpdates.
     */
    public ApplyUpdates applyUpdates() {
        if (this.applyUpdates == null) {
            this.applyUpdates = new ApplyUpdatesImpl(clientObject.getApplyUpdates(), this);
        }
        return applyUpdates;
    }

    /**
     * Gets the resource collection API of ApplyUpdateOperationGroups.
     * 
     * @return Resource collection API of ApplyUpdateOperationGroups.
     */
    public ApplyUpdateOperationGroups applyUpdateOperationGroups() {
        if (this.applyUpdateOperationGroups == null) {
            this.applyUpdateOperationGroups
                = new ApplyUpdateOperationGroupsImpl(clientObject.getApplyUpdateOperationGroups(), this);
        }
        return applyUpdateOperationGroups;
    }

    /**
     * Gets the resource collection API of ConfigurationAssignments.
     * 
     * @return Resource collection API of ConfigurationAssignments.
     */
    public ConfigurationAssignments configurationAssignments() {
        if (this.configurationAssignments == null) {
            this.configurationAssignments
                = new ConfigurationAssignmentsImpl(clientObject.getConfigurationAssignments(), this);
        }
        return configurationAssignments;
    }

    /**
     * Gets the resource collection API of ConfigurationAssignmentOperationGroups.
     * 
     * @return Resource collection API of ConfigurationAssignmentOperationGroups.
     */
    public ConfigurationAssignmentOperationGroups configurationAssignmentOperationGroups() {
        if (this.configurationAssignmentOperationGroups == null) {
            this.configurationAssignmentOperationGroups = new ConfigurationAssignmentOperationGroupsImpl(
                clientObject.getConfigurationAssignmentOperationGroups(), this);
        }
        return configurationAssignmentOperationGroups;
    }

    /**
     * Gets the resource collection API of ConfigurationAssignmentsForSubscriptions. It manages ConfigurationAssignment.
     * 
     * @return Resource collection API of ConfigurationAssignmentsForSubscriptions.
     */
    public ConfigurationAssignmentsForSubscriptions configurationAssignmentsForSubscriptions() {
        if (this.configurationAssignmentsForSubscriptions == null) {
            this.configurationAssignmentsForSubscriptions = new ConfigurationAssignmentsForSubscriptionsImpl(
                clientObject.getConfigurationAssignmentsForSubscriptions(), this);
        }
        return configurationAssignmentsForSubscriptions;
    }

    /**
     * Gets the resource collection API of ConfigurationAssignmentsForResourceGroups.
     * 
     * @return Resource collection API of ConfigurationAssignmentsForResourceGroups.
     */
    public ConfigurationAssignmentsForResourceGroups configurationAssignmentsForResourceGroups() {
        if (this.configurationAssignmentsForResourceGroups == null) {
            this.configurationAssignmentsForResourceGroups = new ConfigurationAssignmentsForResourceGroupsImpl(
                clientObject.getConfigurationAssignmentsForResourceGroups(), this);
        }
        return configurationAssignmentsForResourceGroups;
    }

    /**
     * Gets the resource collection API of ScheduledEventOperationGroups.
     * 
     * @return Resource collection API of ScheduledEventOperationGroups.
     */
    public ScheduledEventOperationGroups scheduledEventOperationGroups() {
        if (this.scheduledEventOperationGroups == null) {
            this.scheduledEventOperationGroups
                = new ScheduledEventOperationGroupsImpl(clientObject.getScheduledEventOperationGroups(), this);
        }
        return scheduledEventOperationGroups;
    }

    /**
     * Gets the resource collection API of ApplyUpdatesOperationGroups.
     * 
     * @return Resource collection API of ApplyUpdatesOperationGroups.
     */
    public ApplyUpdatesOperationGroups applyUpdatesOperationGroups() {
        if (this.applyUpdatesOperationGroups == null) {
            this.applyUpdatesOperationGroups
                = new ApplyUpdatesOperationGroupsImpl(clientObject.getApplyUpdatesOperationGroups(), this);
        }
        return applyUpdatesOperationGroups;
    }

    /**
     * Gets the resource collection API of ApplyUpdateForResourceGroupOperationGroups.
     * 
     * @return Resource collection API of ApplyUpdateForResourceGroupOperationGroups.
     */
    public ApplyUpdateForResourceGroupOperationGroups applyUpdateForResourceGroupOperationGroups() {
        if (this.applyUpdateForResourceGroupOperationGroups == null) {
            this.applyUpdateForResourceGroupOperationGroups = new ApplyUpdateForResourceGroupOperationGroupsImpl(
                clientObject.getApplyUpdateForResourceGroupOperationGroups(), this);
        }
        return applyUpdateForResourceGroupOperationGroups;
    }

    /**
     * Gets the resource collection API of ConfigurationAssignmentForResourceGroupOperationGroups.
     * 
     * @return Resource collection API of ConfigurationAssignmentForResourceGroupOperationGroups.
     */
    public ConfigurationAssignmentForResourceGroupOperationGroups
        configurationAssignmentForResourceGroupOperationGroups() {
        if (this.configurationAssignmentForResourceGroupOperationGroups == null) {
            this.configurationAssignmentForResourceGroupOperationGroups
                = new ConfigurationAssignmentForResourceGroupOperationGroupsImpl(
                    clientObject.getConfigurationAssignmentForResourceGroupOperationGroups(), this);
        }
        return configurationAssignmentForResourceGroupOperationGroups;
    }

    /**
     * Gets the resource collection API of UpdatesOperationGroups.
     * 
     * @return Resource collection API of UpdatesOperationGroups.
     */
    public UpdatesOperationGroups updatesOperationGroups() {
        if (this.updatesOperationGroups == null) {
            this.updatesOperationGroups
                = new UpdatesOperationGroupsImpl(clientObject.getUpdatesOperationGroups(), this);
        }
        return updatesOperationGroups;
    }

    /**
     * Gets wrapped service client MaintenanceClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client MaintenanceClient.
     */
    public MaintenanceClient serviceClient() {
        return this.clientObject;
    }
}
