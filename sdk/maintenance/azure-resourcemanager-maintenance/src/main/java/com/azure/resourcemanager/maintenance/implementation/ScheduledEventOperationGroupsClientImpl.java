// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.maintenance.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.maintenance.fluent.ScheduledEventOperationGroupsClient;
import com.azure.resourcemanager.maintenance.fluent.models.ScheduledEventApproveResponseInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ScheduledEventOperationGroupsClient.
 */
public final class ScheduledEventOperationGroupsClientImpl implements ScheduledEventOperationGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ScheduledEventOperationGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final MaintenanceClientImpl client;

    /**
     * Initializes an instance of ScheduledEventOperationGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ScheduledEventOperationGroupsClientImpl(MaintenanceClientImpl client) {
        this.service = RestProxy.create(ScheduledEventOperationGroupsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MaintenanceClientScheduledEventOperationGroups to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MaintenanceClientSch")
    public interface ScheduledEventOperationGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Compute/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/scheduledevents/{scheduledEventId}/acknowledge")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScheduledEventApproveResponseInner>> acknowledge(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName, @PathParam("scheduledEventId") String scheduledEventId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Compute/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/scheduledevents/{scheduledEventId}/acknowledge")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ScheduledEventApproveResponseInner> acknowledgeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceType") String resourceType,
            @PathParam("resourceName") String resourceName, @PathParam("scheduledEventId") String scheduledEventId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Post Scheduled Event Acknowledgement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceType Resource type.
     * @param resourceName Resource Name.
     * @param scheduledEventId Scheduled Event Id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of scheduled event acknowledge along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScheduledEventApproveResponseInner>> acknowledgeWithResponseAsync(String resourceGroupName,
        String resourceType, String resourceName, String scheduledEventId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (scheduledEventId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledEventId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.acknowledge(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceType, resourceName, scheduledEventId,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Post Scheduled Event Acknowledgement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceType Resource type.
     * @param resourceName Resource Name.
     * @param scheduledEventId Scheduled Event Id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of scheduled event acknowledge on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScheduledEventApproveResponseInner> acknowledgeAsync(String resourceGroupName, String resourceType,
        String resourceName, String scheduledEventId) {
        return acknowledgeWithResponseAsync(resourceGroupName, resourceType, resourceName, scheduledEventId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Post Scheduled Event Acknowledgement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceType Resource type.
     * @param resourceName Resource Name.
     * @param scheduledEventId Scheduled Event Id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of scheduled event acknowledge along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScheduledEventApproveResponseInner> acknowledgeWithResponse(String resourceGroupName,
        String resourceType, String resourceName, String scheduledEventId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (scheduledEventId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledEventId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.acknowledgeSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, resourceType, resourceName, scheduledEventId, accept,
            context);
    }

    /**
     * Post Scheduled Event Acknowledgement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceType Resource type.
     * @param resourceName Resource Name.
     * @param scheduledEventId Scheduled Event Id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of scheduled event acknowledge.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScheduledEventApproveResponseInner acknowledge(String resourceGroupName, String resourceType,
        String resourceName, String scheduledEventId) {
        return acknowledgeWithResponse(resourceGroupName, resourceType, resourceName, scheduledEventId, Context.NONE)
            .getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduledEventOperationGroupsClientImpl.class);
}
