// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.generated;

import com.azure.resourcemanager.premonition.models.AnalysisProperties;
import com.azure.resourcemanager.premonition.models.MetagenomicsAnalysisSettings;
import com.azure.resourcemanager.premonition.models.TaxonomyVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AnalysisOperations Create.
 */
public final class AnalysisOperationsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/premonition/resource-manager/Microsoft.Premonition/preview/2024-09-01-preview/examples/
     * AnalysisOperations_Create.json
     */
    /**
     * Sample code: AnalysisOperations_Create.
     * 
     * @param manager Entry point to PremonitionManager.
     */
    public static void analysisOperationsCreate(com.azure.resourcemanager.premonition.PremonitionManager manager) {
        manager.analysisOperations()
            .define("metagenomic-analysis")
            .withRegion("uswest2")
            .withExistingLibrary("default-rg", "fastlib")
            .withTags(mapOf())
            .withProperties(new AnalysisProperties().withSamples(Arrays.asList("fastsample"))
                .withSettings(new MetagenomicsAnalysisSettings().withTaxonomyVersion(TaxonomyVersion.V2020_07_06)))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
