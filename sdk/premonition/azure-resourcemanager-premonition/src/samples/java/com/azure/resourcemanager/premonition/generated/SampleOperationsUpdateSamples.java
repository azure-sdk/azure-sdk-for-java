// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.generated;

import com.azure.resourcemanager.premonition.models.Sample;
import com.azure.resourcemanager.premonition.models.SamplePropertiesUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SampleOperations Update.
 */
public final class SampleOperationsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/premonition/resource-manager/Microsoft.Premonition/preview/2024-09-01-preview/examples/
     * SampleOperations_Update.json
     */
    /**
     * Sample code: SampleOperations_Update.
     * 
     * @param manager Entry point to PremonitionManager.
     */
    public static void sampleOperationsUpdate(com.azure.resourcemanager.premonition.PremonitionManager manager) {
        Sample resource = manager.sampleOperations()
            .getWithResponse("default-rg", "fastlib", "sample0001", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf())
            .withProperties(new SamplePropertiesUpdate().withDescription("N/A")
                .withPaths(Arrays.asList("fastlib/fastsample/fast5.zip")))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
