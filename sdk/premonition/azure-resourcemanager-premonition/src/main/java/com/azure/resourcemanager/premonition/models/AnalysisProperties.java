// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The properties of Analysis.
 */
@Fluent
public final class AnalysisProperties implements JsonSerializable<AnalysisProperties> {
    /*
     * The sample names being analyzed
     */
    private List<String> samples;

    /*
     * The settings for the analysis
     */
    private AnalysisSettings settings;

    /*
     * The time this analysis started
     */
    private OffsetDateTime startedAt;

    /*
     * The time this analysis finished
     */
    private OffsetDateTime finishedAt;

    /*
     * Provisioning state of the resource
     */
    private AnalysisState provisioningState;

    /*
     * The result if the analysis succeeded
     */
    private AnalysisResult result;

    /*
     * The error if the analysis failed
     */
    private AnalysisPropertiesError error;

    /**
     * Creates an instance of AnalysisProperties class.
     */
    public AnalysisProperties() {
    }

    /**
     * Get the samples property: The sample names being analyzed.
     * 
     * @return the samples value.
     */
    public List<String> samples() {
        return this.samples;
    }

    /**
     * Set the samples property: The sample names being analyzed.
     * 
     * @param samples the samples value to set.
     * @return the AnalysisProperties object itself.
     */
    public AnalysisProperties withSamples(List<String> samples) {
        this.samples = samples;
        return this;
    }

    /**
     * Get the settings property: The settings for the analysis.
     * 
     * @return the settings value.
     */
    public AnalysisSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: The settings for the analysis.
     * 
     * @param settings the settings value to set.
     * @return the AnalysisProperties object itself.
     */
    public AnalysisProperties withSettings(AnalysisSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the startedAt property: The time this analysis started.
     * 
     * @return the startedAt value.
     */
    public OffsetDateTime startedAt() {
        return this.startedAt;
    }

    /**
     * Get the finishedAt property: The time this analysis finished.
     * 
     * @return the finishedAt value.
     */
    public OffsetDateTime finishedAt() {
        return this.finishedAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public AnalysisState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the result property: The result if the analysis succeeded.
     * 
     * @return the result value.
     */
    public AnalysisResult result() {
        return this.result;
    }

    /**
     * Get the error property: The error if the analysis failed.
     * 
     * @return the error value.
     */
    public AnalysisPropertiesError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (samples() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property samples in model AnalysisProperties"));
        }
        if (settings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property settings in model AnalysisProperties"));
        } else {
            settings().validate();
        }
        if (result() != null) {
            result().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalysisProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("samples", this.samples, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("settings", this.settings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalysisProperties.
     */
    public static AnalysisProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisProperties deserializedAnalysisProperties = new AnalysisProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("samples".equals(fieldName)) {
                    List<String> samples = reader.readArray(reader1 -> reader1.getString());
                    deserializedAnalysisProperties.samples = samples;
                } else if ("settings".equals(fieldName)) {
                    deserializedAnalysisProperties.settings = AnalysisSettings.fromJson(reader);
                } else if ("startedAt".equals(fieldName)) {
                    deserializedAnalysisProperties.startedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("finishedAt".equals(fieldName)) {
                    deserializedAnalysisProperties.finishedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAnalysisProperties.provisioningState = AnalysisState.fromString(reader.getString());
                } else if ("result".equals(fieldName)) {
                    deserializedAnalysisProperties.result = AnalysisResult.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    deserializedAnalysisProperties.error = AnalysisPropertiesError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisProperties;
        });
    }
}
