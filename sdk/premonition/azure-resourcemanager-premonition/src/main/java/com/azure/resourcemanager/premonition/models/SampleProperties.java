// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of Sample.
 */
@Fluent
public final class SampleProperties implements JsonSerializable<SampleProperties> {
    /*
     * Description of this sample, such as source, collection method, etc.
     */
    private String description;

    /*
     * Location of the fastq files
     */
    private List<String> paths;

    /*
     * Provisioning state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of SampleProperties class.
     */
    public SampleProperties() {
    }

    /**
     * Get the description property: Description of this sample, such as source, collection method, etc.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of this sample, such as source, collection method, etc.
     * 
     * @param description the description value to set.
     * @return the SampleProperties object itself.
     */
    public SampleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the paths property: Location of the fastq files.
     * 
     * @return the paths value.
     */
    public List<String> paths() {
        return this.paths;
    }

    /**
     * Set the paths property: Location of the fastq files.
     * 
     * @param paths the paths value to set.
     * @return the SampleProperties object itself.
     */
    public SampleProperties withPaths(List<String> paths) {
        this.paths = paths;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (paths() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property paths in model SampleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SampleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("paths", this.paths, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SampleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SampleProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SampleProperties.
     */
    public static SampleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SampleProperties deserializedSampleProperties = new SampleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("paths".equals(fieldName)) {
                    List<String> paths = reader.readArray(reader1 -> reader1.getString());
                    deserializedSampleProperties.paths = paths;
                } else if ("description".equals(fieldName)) {
                    deserializedSampleProperties.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSampleProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSampleProperties;
        });
    }
}
