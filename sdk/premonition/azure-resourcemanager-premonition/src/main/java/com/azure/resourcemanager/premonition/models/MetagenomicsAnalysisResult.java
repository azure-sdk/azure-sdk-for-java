// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Result for a Metagenomics analysis.
 */
@Fluent
public final class MetagenomicsAnalysisResult extends AnalysisResult {
    /*
     * The type of the analysis
     */
    private AnalysisKind kind = AnalysisKind.METAGENOMICS;

    /*
     * The version of taxonomy database used
     */
    private TaxonomyVersion taxonomyVersion;

    /*
     * The number of base pairs read
     */
    private int totalReads;

    /**
     * Creates an instance of MetagenomicsAnalysisResult class.
     */
    public MetagenomicsAnalysisResult() {
    }

    /**
     * Get the kind property: The type of the analysis.
     * 
     * @return the kind value.
     */
    @Override
    public AnalysisKind kind() {
        return this.kind;
    }

    /**
     * Get the taxonomyVersion property: The version of taxonomy database used.
     * 
     * @return the taxonomyVersion value.
     */
    public TaxonomyVersion taxonomyVersion() {
        return this.taxonomyVersion;
    }

    /**
     * Set the taxonomyVersion property: The version of taxonomy database used.
     * 
     * @param taxonomyVersion the taxonomyVersion value to set.
     * @return the MetagenomicsAnalysisResult object itself.
     */
    public MetagenomicsAnalysisResult withTaxonomyVersion(TaxonomyVersion taxonomyVersion) {
        this.taxonomyVersion = taxonomyVersion;
        return this;
    }

    /**
     * Get the totalReads property: The number of base pairs read.
     * 
     * @return the totalReads value.
     */
    public int totalReads() {
        return this.totalReads;
    }

    /**
     * Set the totalReads property: The number of base pairs read.
     * 
     * @param totalReads the totalReads value to set.
     * @return the MetagenomicsAnalysisResult object itself.
     */
    public MetagenomicsAnalysisResult withTotalReads(int totalReads) {
        this.totalReads = totalReads;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetagenomicsAnalysisResult withFiles(List<String> files) {
        super.withFiles(files);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (taxonomyVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property taxonomyVersion in model MetagenomicsAnalysisResult"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetagenomicsAnalysisResult.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("files", files(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("taxonomyVersion",
            this.taxonomyVersion == null ? null : this.taxonomyVersion.toString());
        jsonWriter.writeIntField("totalReads", this.totalReads);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetagenomicsAnalysisResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetagenomicsAnalysisResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetagenomicsAnalysisResult.
     */
    public static MetagenomicsAnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetagenomicsAnalysisResult deserializedMetagenomicsAnalysisResult = new MetagenomicsAnalysisResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("files".equals(fieldName)) {
                    List<String> files = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetagenomicsAnalysisResult.withFiles(files);
                } else if ("taxonomyVersion".equals(fieldName)) {
                    deserializedMetagenomicsAnalysisResult.taxonomyVersion
                        = TaxonomyVersion.fromString(reader.getString());
                } else if ("totalReads".equals(fieldName)) {
                    deserializedMetagenomicsAnalysisResult.totalReads = reader.getInt();
                } else if ("kind".equals(fieldName)) {
                    deserializedMetagenomicsAnalysisResult.kind = AnalysisKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetagenomicsAnalysisResult;
        });
    }
}
