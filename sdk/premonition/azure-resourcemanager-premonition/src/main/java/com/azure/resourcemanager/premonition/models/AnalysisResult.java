// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Base result of an analysis.
 */
@Fluent
public class AnalysisResult implements JsonSerializable<AnalysisResult> {
    /*
     * The type of the analysis
     */
    private AnalysisKind kind = AnalysisKind.fromString("AnalysisResult");

    /*
     * The path to the output files
     */
    private List<String> files;

    /**
     * Creates an instance of AnalysisResult class.
     */
    public AnalysisResult() {
    }

    /**
     * Get the kind property: The type of the analysis.
     * 
     * @return the kind value.
     */
    public AnalysisKind kind() {
        return this.kind;
    }

    /**
     * Get the files property: The path to the output files.
     * 
     * @return the files value.
     */
    public List<String> files() {
        return this.files;
    }

    /**
     * Set the files property: The path to the output files.
     * 
     * @param files the files value to set.
     * @return the AnalysisResult object itself.
     */
    public AnalysisResult withFiles(List<String> files) {
        this.files = files;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalysisResult.
     */
    public static AnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Metagenomics".equals(discriminatorValue)) {
                    return MetagenomicsAnalysisResult.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AnalysisResult fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisResult deserializedAnalysisResult = new AnalysisResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedAnalysisResult.kind = AnalysisKind.fromString(reader.getString());
                } else if ("files".equals(fieldName)) {
                    List<String> files = reader.readArray(reader1 -> reader1.getString());
                    deserializedAnalysisResult.files = files;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisResult;
        });
    }
}
