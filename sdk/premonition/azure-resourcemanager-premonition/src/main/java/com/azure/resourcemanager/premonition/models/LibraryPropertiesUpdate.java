// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of Library.
 */
@Fluent
public final class LibraryPropertiesUpdate implements JsonSerializable<LibraryPropertiesUpdate> {
    /*
     * The blob container URL where data files are stored
     */
    private String container;

    /**
     * Creates an instance of LibraryPropertiesUpdate class.
     */
    public LibraryPropertiesUpdate() {
    }

    /**
     * Get the container property: The blob container URL where data files are stored.
     * 
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: The blob container URL where data files are stored.
     * 
     * @param container the container value to set.
     * @return the LibraryPropertiesUpdate object itself.
     */
    public LibraryPropertiesUpdate withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("container", this.container);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryPropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryPropertiesUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LibraryPropertiesUpdate.
     */
    public static LibraryPropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryPropertiesUpdate deserializedLibraryPropertiesUpdate = new LibraryPropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("container".equals(fieldName)) {
                    deserializedLibraryPropertiesUpdate.container = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryPropertiesUpdate;
        });
    }
}
