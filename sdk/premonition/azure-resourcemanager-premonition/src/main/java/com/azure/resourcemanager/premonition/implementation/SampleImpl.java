// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.premonition.fluent.models.SampleInner;
import com.azure.resourcemanager.premonition.models.Analysis;
import com.azure.resourcemanager.premonition.models.IdentifyRequest;
import com.azure.resourcemanager.premonition.models.Sample;
import com.azure.resourcemanager.premonition.models.SampleProperties;
import com.azure.resourcemanager.premonition.models.SamplePropertiesUpdate;
import com.azure.resourcemanager.premonition.models.SampleUpdate;
import java.util.Collections;
import java.util.Map;

public final class SampleImpl implements Sample, Sample.Definition, Sample.Update {
    private SampleInner innerObject;

    private final com.azure.resourcemanager.premonition.PremonitionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SampleProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SampleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.premonition.PremonitionManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String libraryName;

    private String sampleName;

    private SampleUpdate updateProperties;

    public SampleImpl withExistingLibrary(String resourceGroupName, String libraryName) {
        this.resourceGroupName = resourceGroupName;
        this.libraryName = libraryName;
        return this;
    }

    public Sample create() {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .createWithResponse(resourceGroupName, libraryName, sampleName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public Sample create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .createWithResponse(resourceGroupName, libraryName, sampleName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SampleImpl(String name, com.azure.resourcemanager.premonition.PremonitionManager serviceManager) {
        this.innerObject = new SampleInner();
        this.serviceManager = serviceManager;
        this.sampleName = name;
    }

    public SampleImpl update() {
        this.updateProperties = new SampleUpdate();
        return this;
    }

    public Sample apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .updateWithResponse(resourceGroupName, libraryName, sampleName, updateProperties, Context.NONE)
            .getValue();
        return this;
    }

    public Sample apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .updateWithResponse(resourceGroupName, libraryName, sampleName, updateProperties, context)
            .getValue();
        return this;
    }

    SampleImpl(SampleInner innerObject, com.azure.resourcemanager.premonition.PremonitionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.libraryName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "libraries");
        this.sampleName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "samples");
    }

    public Sample refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .getWithResponse(resourceGroupName, libraryName, sampleName, Context.NONE)
            .getValue();
        return this;
    }

    public Sample refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSampleOperations()
            .getWithResponse(resourceGroupName, libraryName, sampleName, context)
            .getValue();
        return this;
    }

    public Analysis identify(IdentifyRequest body) {
        return serviceManager.sampleOperations().identify(resourceGroupName, libraryName, sampleName, body);
    }

    public Analysis identify(IdentifyRequest body, Context context) {
        return serviceManager.sampleOperations().identify(resourceGroupName, libraryName, sampleName, body, context);
    }

    public SampleImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SampleImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SampleImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public SampleImpl withProperties(SampleProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public SampleImpl withProperties(SamplePropertiesUpdate properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
