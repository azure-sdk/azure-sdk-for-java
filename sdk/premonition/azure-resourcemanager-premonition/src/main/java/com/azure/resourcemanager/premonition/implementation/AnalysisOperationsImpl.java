// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.premonition.fluent.AnalysisOperationsClient;
import com.azure.resourcemanager.premonition.fluent.models.AnalysisInner;
import com.azure.resourcemanager.premonition.models.Analysis;
import com.azure.resourcemanager.premonition.models.AnalysisOperations;

public final class AnalysisOperationsImpl implements AnalysisOperations {
    private static final ClientLogger LOGGER = new ClientLogger(AnalysisOperationsImpl.class);

    private final AnalysisOperationsClient innerClient;

    private final com.azure.resourcemanager.premonition.PremonitionManager serviceManager;

    public AnalysisOperationsImpl(AnalysisOperationsClient innerClient,
        com.azure.resourcemanager.premonition.PremonitionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Analysis> listByParent(String resourceGroupName, String libraryName) {
        PagedIterable<AnalysisInner> inner = this.serviceClient().listByParent(resourceGroupName, libraryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AnalysisImpl(inner1, this.manager()));
    }

    public PagedIterable<Analysis> listByParent(String resourceGroupName, String libraryName, Context context) {
        PagedIterable<AnalysisInner> inner = this.serviceClient().listByParent(resourceGroupName, libraryName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AnalysisImpl(inner1, this.manager()));
    }

    public Response<Analysis> getWithResponse(String resourceGroupName, String libraryName, String analysisName,
        Context context) {
        Response<AnalysisInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, libraryName, analysisName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AnalysisImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Analysis get(String resourceGroupName, String libraryName, String analysisName) {
        AnalysisInner inner = this.serviceClient().get(resourceGroupName, libraryName, analysisName);
        if (inner != null) {
            return new AnalysisImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String libraryName, String analysisName) {
        this.serviceClient().delete(resourceGroupName, libraryName, analysisName);
    }

    public void delete(String resourceGroupName, String libraryName, String analysisName, Context context) {
        this.serviceClient().delete(resourceGroupName, libraryName, analysisName, context);
    }

    public Analysis getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String analysisName = ResourceManagerUtils.getValueFromIdByName(id, "analyses");
        if (analysisName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'analyses'.", id)));
        }
        return this.getWithResponse(resourceGroupName, libraryName, analysisName, Context.NONE).getValue();
    }

    public Response<Analysis> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String analysisName = ResourceManagerUtils.getValueFromIdByName(id, "analyses");
        if (analysisName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'analyses'.", id)));
        }
        return this.getWithResponse(resourceGroupName, libraryName, analysisName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String analysisName = ResourceManagerUtils.getValueFromIdByName(id, "analyses");
        if (analysisName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'analyses'.", id)));
        }
        this.delete(resourceGroupName, libraryName, analysisName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String analysisName = ResourceManagerUtils.getValueFromIdByName(id, "analyses");
        if (analysisName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'analyses'.", id)));
        }
        this.delete(resourceGroupName, libraryName, analysisName, context);
    }

    private AnalysisOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.premonition.PremonitionManager manager() {
        return this.serviceManager;
    }

    public AnalysisImpl define(String name) {
        return new AnalysisImpl(name, this.manager());
    }
}
