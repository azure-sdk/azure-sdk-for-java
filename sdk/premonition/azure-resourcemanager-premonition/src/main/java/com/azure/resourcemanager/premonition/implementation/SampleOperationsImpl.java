// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.premonition.fluent.SampleOperationsClient;
import com.azure.resourcemanager.premonition.fluent.models.AnalysisInner;
import com.azure.resourcemanager.premonition.fluent.models.SampleInner;
import com.azure.resourcemanager.premonition.models.Analysis;
import com.azure.resourcemanager.premonition.models.IdentifyRequest;
import com.azure.resourcemanager.premonition.models.Sample;
import com.azure.resourcemanager.premonition.models.SampleOperations;

public final class SampleOperationsImpl implements SampleOperations {
    private static final ClientLogger LOGGER = new ClientLogger(SampleOperationsImpl.class);

    private final SampleOperationsClient innerClient;

    private final com.azure.resourcemanager.premonition.PremonitionManager serviceManager;

    public SampleOperationsImpl(SampleOperationsClient innerClient,
        com.azure.resourcemanager.premonition.PremonitionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Sample> listByParent(String resourceGroupName, String libraryName) {
        PagedIterable<SampleInner> inner = this.serviceClient().listByParent(resourceGroupName, libraryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SampleImpl(inner1, this.manager()));
    }

    public PagedIterable<Sample> listByParent(String resourceGroupName, String libraryName, Context context) {
        PagedIterable<SampleInner> inner = this.serviceClient().listByParent(resourceGroupName, libraryName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SampleImpl(inner1, this.manager()));
    }

    public Response<Sample> getWithResponse(String resourceGroupName, String libraryName, String sampleName,
        Context context) {
        Response<SampleInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, libraryName, sampleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SampleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Sample get(String resourceGroupName, String libraryName, String sampleName) {
        SampleInner inner = this.serviceClient().get(resourceGroupName, libraryName, sampleName);
        if (inner != null) {
            return new SampleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String libraryName, String sampleName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, libraryName, sampleName, context);
    }

    public void delete(String resourceGroupName, String libraryName, String sampleName) {
        this.serviceClient().delete(resourceGroupName, libraryName, sampleName);
    }

    public Analysis identify(String resourceGroupName, String libraryName, String sampleName, IdentifyRequest body) {
        AnalysisInner inner = this.serviceClient().identify(resourceGroupName, libraryName, sampleName, body);
        if (inner != null) {
            return new AnalysisImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Analysis identify(String resourceGroupName, String libraryName, String sampleName, IdentifyRequest body,
        Context context) {
        AnalysisInner inner = this.serviceClient().identify(resourceGroupName, libraryName, sampleName, body, context);
        if (inner != null) {
            return new AnalysisImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Sample getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String sampleName = ResourceManagerUtils.getValueFromIdByName(id, "samples");
        if (sampleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'samples'.", id)));
        }
        return this.getWithResponse(resourceGroupName, libraryName, sampleName, Context.NONE).getValue();
    }

    public Response<Sample> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String sampleName = ResourceManagerUtils.getValueFromIdByName(id, "samples");
        if (sampleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'samples'.", id)));
        }
        return this.getWithResponse(resourceGroupName, libraryName, sampleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String sampleName = ResourceManagerUtils.getValueFromIdByName(id, "samples");
        if (sampleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'samples'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, libraryName, sampleName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        String sampleName = ResourceManagerUtils.getValueFromIdByName(id, "samples");
        if (sampleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'samples'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, libraryName, sampleName, context);
    }

    private SampleOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.premonition.PremonitionManager manager() {
        return this.serviceManager;
    }

    public SampleImpl define(String name) {
        return new SampleImpl(name, this.manager());
    }
}
