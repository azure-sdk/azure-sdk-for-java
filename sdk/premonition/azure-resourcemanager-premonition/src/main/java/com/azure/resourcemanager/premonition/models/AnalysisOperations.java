// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of AnalysisOperations.
 */
public interface AnalysisOperations {
    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Analysis> listByParent(String resourceGroupName, String libraryName);

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Analysis> listByParent(String resourceGroupName, String libraryName, Context context);

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response}.
     */
    Response<Analysis> getWithResponse(String resourceGroupName, String libraryName, String analysisName,
        Context context);

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis.
     */
    Analysis get(String resourceGroupName, String libraryName, String analysisName);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String libraryName, String analysisName);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String libraryName, String analysisName, Context context);

    /**
     * Get a Analysis.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response}.
     */
    Analysis getById(String id);

    /**
     * Get a Analysis.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response}.
     */
    Response<Analysis> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Analysis.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Analysis.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Analysis resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Analysis definition.
     */
    Analysis.DefinitionStages.Blank define(String name);
}
