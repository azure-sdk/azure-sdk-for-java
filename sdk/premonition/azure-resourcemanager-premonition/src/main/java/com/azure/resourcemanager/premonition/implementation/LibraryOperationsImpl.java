// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.premonition.fluent.LibraryOperationsClient;
import com.azure.resourcemanager.premonition.fluent.models.LibraryInner;
import com.azure.resourcemanager.premonition.models.Library;
import com.azure.resourcemanager.premonition.models.LibraryOperations;

public final class LibraryOperationsImpl implements LibraryOperations {
    private static final ClientLogger LOGGER = new ClientLogger(LibraryOperationsImpl.class);

    private final LibraryOperationsClient innerClient;

    private final com.azure.resourcemanager.premonition.PremonitionManager serviceManager;

    public LibraryOperationsImpl(LibraryOperationsClient innerClient,
        com.azure.resourcemanager.premonition.PremonitionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Library> list() {
        PagedIterable<LibraryInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LibraryImpl(inner1, this.manager()));
    }

    public PagedIterable<Library> list(Context context) {
        PagedIterable<LibraryInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LibraryImpl(inner1, this.manager()));
    }

    public PagedIterable<Library> listByResourceGroup(String resourceGroupName) {
        PagedIterable<LibraryInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LibraryImpl(inner1, this.manager()));
    }

    public PagedIterable<Library> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<LibraryInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LibraryImpl(inner1, this.manager()));
    }

    public Response<Library> getByResourceGroupWithResponse(String resourceGroupName, String libraryName,
        Context context) {
        Response<LibraryInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, libraryName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LibraryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Library getByResourceGroup(String resourceGroupName, String libraryName) {
        LibraryInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, libraryName);
        if (inner != null) {
            return new LibraryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String libraryName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, libraryName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String libraryName) {
        this.serviceClient().delete(resourceGroupName, libraryName);
    }

    public Library getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, libraryName, Context.NONE).getValue();
    }

    public Response<Library> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, libraryName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, libraryName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String libraryName = ResourceManagerUtils.getValueFromIdByName(id, "libraries");
        if (libraryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'libraries'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, libraryName, context);
    }

    private LibraryOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.premonition.PremonitionManager manager() {
        return this.serviceManager;
    }

    public LibraryImpl define(String name) {
        return new LibraryImpl(name, this.manager());
    }
}
