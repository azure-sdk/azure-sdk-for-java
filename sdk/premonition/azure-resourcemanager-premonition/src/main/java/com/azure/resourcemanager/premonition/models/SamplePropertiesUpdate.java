// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of Sample.
 */
@Fluent
public final class SamplePropertiesUpdate implements JsonSerializable<SamplePropertiesUpdate> {
    /*
     * Description of this sample, such as source, collection method, etc.
     */
    private String description;

    /*
     * Location of the fastq files
     */
    private List<String> paths;

    /**
     * Creates an instance of SamplePropertiesUpdate class.
     */
    public SamplePropertiesUpdate() {
    }

    /**
     * Get the description property: Description of this sample, such as source, collection method, etc.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of this sample, such as source, collection method, etc.
     * 
     * @param description the description value to set.
     * @return the SamplePropertiesUpdate object itself.
     */
    public SamplePropertiesUpdate withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the paths property: Location of the fastq files.
     * 
     * @return the paths value.
     */
    public List<String> paths() {
        return this.paths;
    }

    /**
     * Set the paths property: Location of the fastq files.
     * 
     * @param paths the paths value to set.
     * @return the SamplePropertiesUpdate object itself.
     */
    public SamplePropertiesUpdate withPaths(List<String> paths) {
        this.paths = paths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("paths", this.paths, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SamplePropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SamplePropertiesUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SamplePropertiesUpdate.
     */
    public static SamplePropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SamplePropertiesUpdate deserializedSamplePropertiesUpdate = new SamplePropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedSamplePropertiesUpdate.description = reader.getString();
                } else if ("paths".equals(fieldName)) {
                    List<String> paths = reader.readArray(reader1 -> reader1.getString());
                    deserializedSamplePropertiesUpdate.paths = paths;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSamplePropertiesUpdate;
        });
    }
}
