// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.premonition.fluent.models.AnalysisInner;
import com.azure.resourcemanager.premonition.models.AnalysisUpdate;

/**
 * An instance of this class provides access to all the operations defined in AnalysisOperationsClient.
 */
public interface AnalysisOperationsClient {
    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AnalysisInner> listByParent(String resourceGroupName, String libraryName);

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AnalysisInner> listByParent(String resourceGroupName, String libraryName, Context context);

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AnalysisInner> getWithResponse(String resourceGroupName, String libraryName, String analysisName,
        Context context);

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AnalysisInner get(String resourceGroupName, String libraryName, String analysisName);

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AnalysisInner>, AnalysisInner> beginCreate(String resourceGroupName, String libraryName,
        String analysisName, AnalysisInner resource);

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AnalysisInner>, AnalysisInner> beginCreate(String resourceGroupName, String libraryName,
        String analysisName, AnalysisInner resource, Context context);

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AnalysisInner create(String resourceGroupName, String libraryName, String analysisName, AnalysisInner resource);

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AnalysisInner create(String resourceGroupName, String libraryName, String analysisName, AnalysisInner resource,
        Context context);

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AnalysisInner> updateWithResponse(String resourceGroupName, String libraryName, String analysisName,
        AnalysisUpdate properties, Context context);

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AnalysisInner update(String resourceGroupName, String libraryName, String analysisName, AnalysisUpdate properties);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String libraryName, String analysisName);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String libraryName, String analysisName,
        Context context);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String libraryName, String analysisName);

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String libraryName, String analysisName, Context context);
}
