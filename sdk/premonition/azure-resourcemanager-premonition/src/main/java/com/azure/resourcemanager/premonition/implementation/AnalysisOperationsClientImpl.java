// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.premonition.fluent.AnalysisOperationsClient;
import com.azure.resourcemanager.premonition.fluent.models.AnalysisInner;
import com.azure.resourcemanager.premonition.models.AnalysisListResult;
import com.azure.resourcemanager.premonition.models.AnalysisUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AnalysisOperationsClient.
 */
public final class AnalysisOperationsClientImpl implements AnalysisOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AnalysisOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftPremonitionInsightsImpl client;

    /**
     * Initializes an instance of AnalysisOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AnalysisOperationsClientImpl(MicrosoftPremonitionInsightsImpl client) {
        this.service = RestProxy.create(AnalysisOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftPremonitionInsightsAnalysisOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftPremonition")
    public interface AnalysisOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisListResult>> listByParent(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("libraryName") String libraryName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("libraryName") String libraryName,
            @PathParam("analysisName") String analysisName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("libraryName") String libraryName,
            @PathParam("analysisName") String analysisName, @BodyParam("application/json") AnalysisInner resource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisInner>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("libraryName") String libraryName,
            @PathParam("analysisName") String analysisName, @BodyParam("application/json") AnalysisUpdate properties,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("libraryName") String libraryName,
            @PathParam("analysisName") String analysisName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisInner>> listByParentSinglePageAsync(String resourceGroupName,
        String libraryName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, libraryName, accept, context))
            .<PagedResponse<AnalysisInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisInner>> listByParentSinglePageAsync(String resourceGroupName, String libraryName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByParent(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, libraryName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AnalysisInner> listByParentAsync(String resourceGroupName, String libraryName) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, libraryName),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AnalysisInner> listByParentAsync(String resourceGroupName, String libraryName, Context context) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, libraryName, context),
            nextLink -> listByParentNextSinglePageAsync(nextLink, context));
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisInner> listByParent(String resourceGroupName, String libraryName) {
        return new PagedIterable<>(listByParentAsync(resourceGroupName, libraryName));
    }

    /**
     * List Analysis resources by Library.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisInner> listByParent(String resourceGroupName, String libraryName, Context context) {
        return new PagedIterable<>(listByParentAsync(resourceGroupName, libraryName, context));
    }

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisInner>> getWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, libraryName, analysisName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisInner>> getWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, libraryName, analysisName, accept, context);
    }

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisInner> getAsync(String resourceGroupName, String libraryName, String analysisName) {
        return getWithResponseAsync(resourceGroupName, libraryName, analysisName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnalysisInner> getWithResponse(String resourceGroupName, String libraryName, String analysisName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, libraryName, analysisName, context).block();
    }

    /**
     * Get a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisInner get(String resourceGroupName, String libraryName, String analysisName) {
        return getWithResponse(resourceGroupName, libraryName, analysisName, Context.NONE).getValue();
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, AnalysisInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, libraryName, analysisName, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, AnalysisInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, libraryName, analysisName, resource, accept, context);
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalysisInner>, AnalysisInner> beginCreateAsync(String resourceGroupName,
        String libraryName, String analysisName, AnalysisInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, libraryName, analysisName, resource);
        return this.client.<AnalysisInner, AnalysisInner>getLroResult(mono, this.client.getHttpPipeline(),
            AnalysisInner.class, AnalysisInner.class, this.client.getContext());
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalysisInner>, AnalysisInner> beginCreateAsync(String resourceGroupName,
        String libraryName, String analysisName, AnalysisInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, libraryName, analysisName, resource, context);
        return this.client.<AnalysisInner, AnalysisInner>getLroResult(mono, this.client.getHttpPipeline(),
            AnalysisInner.class, AnalysisInner.class, context);
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalysisInner>, AnalysisInner> beginCreate(String resourceGroupName,
        String libraryName, String analysisName, AnalysisInner resource) {
        return this.beginCreateAsync(resourceGroupName, libraryName, analysisName, resource).getSyncPoller();
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalysisInner>, AnalysisInner> beginCreate(String resourceGroupName,
        String libraryName, String analysisName, AnalysisInner resource, Context context) {
        return this.beginCreateAsync(resourceGroupName, libraryName, analysisName, resource, context).getSyncPoller();
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisInner> createAsync(String resourceGroupName, String libraryName, String analysisName,
        AnalysisInner resource) {
        return beginCreateAsync(resourceGroupName, libraryName, analysisName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisInner> createAsync(String resourceGroupName, String libraryName, String analysisName,
        AnalysisInner resource, Context context) {
        return beginCreateAsync(resourceGroupName, libraryName, analysisName, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisInner create(String resourceGroupName, String libraryName, String analysisName,
        AnalysisInner resource) {
        return createAsync(resourceGroupName, libraryName, analysisName, resource).block();
    }

    /**
     * Create a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisInner create(String resourceGroupName, String libraryName, String analysisName,
        AnalysisInner resource, Context context) {
        return createAsync(resourceGroupName, libraryName, analysisName, resource, context).block();
    }

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisInner>> updateWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, AnalysisUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, libraryName, analysisName, properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisInner>> updateWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, AnalysisUpdate properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, libraryName, analysisName, properties, accept, context);
    }

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisInner> updateAsync(String resourceGroupName, String libraryName, String analysisName,
        AnalysisUpdate properties) {
        return updateWithResponseAsync(resourceGroupName, libraryName, analysisName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnalysisInner> updateWithResponse(String resourceGroupName, String libraryName, String analysisName,
        AnalysisUpdate properties, Context context) {
        return updateWithResponseAsync(resourceGroupName, libraryName, analysisName, properties, context).block();
    }

    /**
     * Update a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analysis of one or more samples.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisInner update(String resourceGroupName, String libraryName, String analysisName,
        AnalysisUpdate properties) {
        return updateWithResponse(resourceGroupName, libraryName, analysisName, properties, Context.NONE).getValue();
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, libraryName, analysisName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String libraryName,
        String analysisName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (libraryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter libraryName is required and cannot be null."));
        }
        if (analysisName == null) {
            return Mono.error(new IllegalArgumentException("Parameter analysisName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, libraryName, analysisName, accept, context);
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String libraryName,
        String analysisName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, libraryName, analysisName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String libraryName,
        String analysisName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, libraryName, analysisName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String libraryName,
        String analysisName) {
        return this.beginDeleteAsync(resourceGroupName, libraryName, analysisName).getSyncPoller();
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String libraryName,
        String analysisName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, libraryName, analysisName, context).getSyncPoller();
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String libraryName, String analysisName) {
        return beginDeleteAsync(resourceGroupName, libraryName, analysisName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String libraryName, String analysisName, Context context) {
        return beginDeleteAsync(resourceGroupName, libraryName, analysisName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String libraryName, String analysisName) {
        deleteAsync(resourceGroupName, libraryName, analysisName).block();
    }

    /**
     * Delete a Analysis.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Name of the library.
     * @param analysisName Name of the analysis.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String libraryName, String analysisName, Context context) {
        deleteAsync(resourceGroupName, libraryName, analysisName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisInner>> listByParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AnalysisInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Analysis list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisInner>> listByParentNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
