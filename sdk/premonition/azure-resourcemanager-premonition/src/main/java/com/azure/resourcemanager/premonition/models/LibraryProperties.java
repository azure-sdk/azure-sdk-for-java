// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.premonition.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of Library.
 */
@Fluent
public final class LibraryProperties implements JsonSerializable<LibraryProperties> {
    /*
     * The blob container URL where data files are stored
     */
    private String container;

    /*
     * Provisioning state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of LibraryProperties class.
     */
    public LibraryProperties() {
    }

    /**
     * Get the container property: The blob container URL where data files are stored.
     * 
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: The blob container URL where data files are stored.
     * 
     * @param container the container value to set.
     * @return the LibraryProperties object itself.
     */
    public LibraryProperties withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (container() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property container in model LibraryProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LibraryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("container", this.container);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LibraryProperties.
     */
    public static LibraryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryProperties deserializedLibraryProperties = new LibraryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("container".equals(fieldName)) {
                    deserializedLibraryProperties.container = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLibraryProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryProperties;
        });
    }
}
