// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServiceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsServicesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"xdgd\",\"dnsServiceIp\":\"abgdexj\",\"defaultDnsZone\":\"vjsaqwotm\",\"fqdnZones\":[\"lcol\",\"rsxaptefh\",\"xcgjokjljnhvlq\",\"bekpeeksnbksdqhj\"],\"logLevel\":\"FATAL\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":2414038759646863580},\"id\":\"ustcpoq\",\"name\":\"avnwqj\",\"type\":\"g\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworkDnsServices()
            .define("hhkuuip")
            .withExistingPrivateCloud("wqapfgsdp", "vessm")
            .withProperties(new WorkloadNetworkDnsServiceProperties().withDisplayName("qctekvalb")
                .withDnsServiceIp("tjqvqyvweht")
                .withDefaultDnsZone("mxhzzysevus")
                .withFqdnZones(Arrays.asList("zrrryv", "imipskdyzatvfuz", "aftjvvruxwigsy"))
                .withLogLevel(DnsServiceLogLevelEnum.INFO)
                .withRevision(3521751266515762395L))
            .create();

        Assertions.assertEquals("xdgd", response.properties().displayName());
        Assertions.assertEquals("abgdexj", response.properties().dnsServiceIp());
        Assertions.assertEquals("vjsaqwotm", response.properties().defaultDnsZone());
        Assertions.assertEquals("lcol", response.properties().fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, response.properties().logLevel());
        Assertions.assertEquals(2414038759646863580L, response.properties().revision());
    }
}
