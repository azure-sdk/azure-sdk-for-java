// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.PortMirroringDirectionEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroring;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroringProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkPortMirroringProfilesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"atbwbqam\",\"direction\":\"BIDIRECTIONAL\",\"source\":\"iyslpkcvmwfaux\",\"destination\":\"pmywbormcq\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":7611529353269628597},\"id\":\"zfboj\",\"name\":\"jmcsmyqwixvcpwn\",\"type\":\"wy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkPortMirroring response = manager.workloadNetworkPortMirroringProfiles()
            .define("kyeclcdigpta")
            .withExistingPrivateCloud("mpheqdur", "lyujlfyoump")
            .withProperties(new WorkloadNetworkPortMirroringProperties().withDisplayName("zmqxucyci")
                .withDirection(PortMirroringDirectionEnum.BIDIRECTIONAL)
                .withSource("xiutgjcyzyzj")
                .withDestination("r")
                .withRevision(3981777240603053252L))
            .create();

        Assertions.assertEquals("atbwbqam", response.properties().displayName());
        Assertions.assertEquals(PortMirroringDirectionEnum.BIDIRECTIONAL, response.properties().direction());
        Assertions.assertEquals("iyslpkcvmwfaux", response.properties().source());
        Assertions.assertEquals("pmywbormcq", response.properties().destination());
        Assertions.assertEquals(7611529353269628597L, response.properties().revision());
    }
}
