// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.PortMirroringDirectionEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroring;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListPortMirroringMockTests {
    @Test
    public void testListPortMirroring() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"yibcy\",\"direction\":\"INGRESS\",\"source\":\"gqcwdhohsdtmc\",\"destination\":\"sufco\",\"status\":\"SUCCESS\",\"provisioningState\":\"Updating\",\"revision\":7808079684010366581},\"id\":\"uapcvhdbevwqqxe\",\"name\":\"skonqzinkf\",\"type\":\"bgbzbowxeqoclj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkloadNetworkPortMirroring> response = manager.workloadNetworks()
            .listPortMirroring("vopvp", "dbzqgqqihed", "vqwt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yibcy", response.iterator().next().properties().displayName());
        Assertions.assertEquals(PortMirroringDirectionEnum.INGRESS,
            response.iterator().next().properties().direction());
        Assertions.assertEquals("gqcwdhohsdtmc", response.iterator().next().properties().source());
        Assertions.assertEquals("sufco", response.iterator().next().properties().destination());
        Assertions.assertEquals(7808079684010366581L, response.iterator().next().properties().revision());
    }
}
