// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"t\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lr\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"cyjmoadsuvarmy\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"dmjsjqb\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"yxxrwlycoduh\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"kxkgymareqna\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xqugjhkycubedd\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ssofwqmzqa\"}],\"failureReason\":\"rmnjijpx\",\"timeout\":\"cqqudf\",\"retention\":\"yxbaaabjyvayf\",\"submittedAt\":\"2021-07-23T05:30:54Z\",\"startedAt\":\"2021-08-11T21:58:13Z\",\"finishedAt\":\"2021-09-11T16:38:17Z\",\"provisioningState\":\"Canceled\",\"output\":[\"gsexne\"],\"namedOutputs\":{\"nwnwme\":{}},\"information\":[\"yyceuzsoi\",\"judpfrxt\",\"thzvaytdwkqbrqu\",\"paxh\"],\"warnings\":[\"i\",\"ivpdtiir\",\"tdqoaxoruzfgsq\",\"yfxrx\"],\"errors\":[\"ptramxj\",\"zwl\"]},\"id\":\"wxuqlcvydypatdoo\",\"name\":\"ojknio\",\"type\":\"kooebwnu\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("t", model.properties().scriptCmdletId());
        Assertions.assertEquals("lr", model.properties().parameters().get(0).name());
        Assertions.assertEquals("yxxrwlycoduh", model.properties().hiddenParameters().get(0).name());
        Assertions.assertEquals("rmnjijpx", model.properties().failureReason());
        Assertions.assertEquals("cqqudf", model.properties().timeout());
        Assertions.assertEquals("yxbaaabjyvayf", model.properties().retention());
        Assertions.assertEquals("gsexne", model.properties().output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model
            = new ScriptExecutionInner().withProperties(new ScriptExecutionProperties().withScriptCmdletId("t")
                .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("lr"),
                    new ScriptExecutionParameter().withName("cyjmoadsuvarmy"),
                    new ScriptExecutionParameter().withName("dmjsjqb")))
                .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("yxxrwlycoduh"),
                    new ScriptExecutionParameter().withName("kxkgymareqna"),
                    new ScriptExecutionParameter().withName("xqugjhkycubedd"),
                    new ScriptExecutionParameter().withName("ssofwqmzqa")))
                .withFailureReason("rmnjijpx")
                .withTimeout("cqqudf")
                .withRetention("yxbaaabjyvayf")
                .withOutput(Arrays.asList("gsexne"))
                .withNamedOutputs(mapOf("nwnwme", new ScriptExecutionPropertiesNamedOutput())));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("t", model.properties().scriptCmdletId());
        Assertions.assertEquals("lr", model.properties().parameters().get(0).name());
        Assertions.assertEquals("yxxrwlycoduh", model.properties().hiddenParameters().get(0).name());
        Assertions.assertEquals("rmnjijpx", model.properties().failureReason());
        Assertions.assertEquals("cqqudf", model.properties().timeout());
        Assertions.assertEquals("yxbaaabjyvayf", model.properties().retention());
        Assertions.assertEquals("gsexne", model.properties().output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
