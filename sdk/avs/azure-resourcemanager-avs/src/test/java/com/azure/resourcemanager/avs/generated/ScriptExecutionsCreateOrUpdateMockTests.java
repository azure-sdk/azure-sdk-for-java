// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"beonrlkwzdq\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ceakxc\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"oqfyiaseqch\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"rttzrazisgykiu\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"mvanbwzo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"mnrxxbsojkl\"}],\"failureReason\":\"hmdp\",\"timeout\":\"ysprq\",\"retention\":\"nzxojpslsvjgpli\",\"submittedAt\":\"2021-07-15T02:42:23Z\",\"startedAt\":\"2021-07-10T14:05:30Z\",\"finishedAt\":\"2021-12-08T21:04:16Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"pcohhoucqpqojx\",\"x\",\"rzdcgdzbenribcaw\"],\"namedOutputs\":{\"qd\":{},\"tjwfljhznamtua\":{},\"mzwcjjncqt\":{},\"z\":{}},\"information\":[\"vgbgatzuuvbxng\",\"ebwgga\"],\"warnings\":[\"zlswvajqf\",\"t\"],\"errors\":[\"oqza\",\"unwqr\"]},\"id\":\"frgqhaohcm\",\"name\":\"uocnjrohmbpyr\",\"type\":\"xameblydyvkfkm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScriptExecution response = manager.scriptExecutions()
            .define("zydmxzjijpvuaurk")
            .withExistingPrivateCloud("qzrdzsylollg", "rc")
            .withProperties(new ScriptExecutionProperties().withScriptCmdletId("irldefxr")
                .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("xnbkkj"),
                    new ScriptExecutionParameter().withName("nurnnq"), new ScriptExecutionParameter().withName("nqbpi"),
                    new ScriptExecutionParameter().withName("xqltgrd")))
                .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("pxrxvbfihwu"),
                    new ScriptExecutionParameter().withName("vctafsrb")))
                .withFailureReason("blml")
                .withTimeout("owxih")
                .withRetention("nxw")
                .withOutput(Arrays.asList("sbs"))
                .withNamedOutputs(mapOf("qagwwrxaomz", new ScriptExecutionPropertiesNamedOutput(), "sgl",
                    new ScriptExecutionPropertiesNamedOutput())))
            .create();

        Assertions.assertEquals("beonrlkwzdq", response.properties().scriptCmdletId());
        Assertions.assertEquals("ceakxc", response.properties().parameters().get(0).name());
        Assertions.assertEquals("oqfyiaseqch", response.properties().hiddenParameters().get(0).name());
        Assertions.assertEquals("hmdp", response.properties().failureReason());
        Assertions.assertEquals("ysprq", response.properties().timeout());
        Assertions.assertEquals("nzxojpslsvjgpli", response.properties().retention());
        Assertions.assertEquals("pcohhoucqpqojx", response.properties().output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
