// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"selpkpbaf\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"hlbylccbevxr\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"yzd\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"wrso\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"td\"}],\"failureReason\":\"airrhvhfnracw\",\"timeout\":\"pqigtuujwouhd\",\"retention\":\"s\",\"submittedAt\":\"2021-09-12T08:30:14Z\",\"startedAt\":\"2021-03-06T17:38:31Z\",\"finishedAt\":\"2021-07-09T10:35:13Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"vitvqkjyaz\",\"umtggmuwdchozfn\",\"fexl\"],\"namedOutputs\":{\"oakizvoai\":{},\"naqln\":{}},\"information\":[\"guyxlyk\",\"phvxz\",\"wxh\"],\"warnings\":[\"jtlkexaonwivkcqh\",\"xhxknlc\"],\"errors\":[\"mkyupijub\",\"qjfkakfqfrkemyi\"]},\"id\":\"udxjascowv\",\"name\":\"djkpdxph\",\"type\":\"kk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScriptExecution response = manager.scriptExecutions()
            .define("xjd")
            .withExistingPrivateCloud("orvvmqfloygbdgw", "mgxdgdhpabgd")
            .withProperties(new ScriptExecutionProperties().withScriptCmdletId("saq")
                .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("mmwllc")))
                .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("rsxaptefh"),
                    new ScriptExecutionParameter().withName("xcgjokjljnhvlq"),
                    new ScriptExecutionParameter().withName("bekpeeksnbksdqhj")))
                .withFailureReason("klxesl")
                .withTimeout("hhus")
                .withRetention("poq")
                .withOutput(Arrays.asList("nlejjjkxybwf", "bkjbz", "ensvkzykjtj", "nsxfwu"))
                .withNamedOutputs(mapOf("dpkupnqrmgjf", new ScriptExecutionPropertiesNamedOutput())))
            .create();

        Assertions.assertEquals("selpkpbaf", response.properties().scriptCmdletId());
        Assertions.assertEquals("hlbylccbevxr", response.properties().parameters().get(0).name());
        Assertions.assertEquals("td", response.properties().hiddenParameters().get(0).name());
        Assertions.assertEquals("airrhvhfnracw", response.properties().failureReason());
        Assertions.assertEquals("pqigtuujwouhd", response.properties().timeout());
        Assertions.assertEquals("s", response.properties().retention());
        Assertions.assertEquals("vitvqkjyaz", response.properties().output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
