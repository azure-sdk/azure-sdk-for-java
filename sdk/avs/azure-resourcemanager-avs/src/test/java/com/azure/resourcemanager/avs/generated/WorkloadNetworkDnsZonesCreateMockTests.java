// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZoneProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsZonesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"uowtljvfwhrea\",\"domain\":[\"yxvrqtvbczsul\",\"dgglmepjpfs\"],\"dnsServerIps\":[\"g\",\"angpszngafpgyl\",\"vecjujcn\"],\"sourceIp\":\"adyedmzrgjfok\",\"dnsServices\":4876609357725456575,\"provisioningState\":\"Succeeded\",\"revision\":7518014445872967591},\"id\":\"ztrgdgxvcoq\",\"name\":\"aswugyxpqitw\",\"type\":\"ialwv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsZone response = manager.workloadNetworkDnsZones()
            .define("xzcwxhmpejt")
            .withExistingPrivateCloud("yxl", "kwph")
            .withProperties(new WorkloadNetworkDnsZoneProperties().withDisplayName("xaonwivkcqh")
                .withDomain(Arrays.asList("xk", "lccrmmkyupi", "ubyqj", "kakfqfr"))
                .withDnsServerIps(Arrays.asList("yildudxjascow", "f", "jkpdxphlkksnm"))
                .withSourceIp("vyfijdkzuqnw")
                .withDnsServices(3828875144216790270L)
                .withRevision(1997767014545772619L))
            .create();

        Assertions.assertEquals("uowtljvfwhrea", response.properties().displayName());
        Assertions.assertEquals("yxvrqtvbczsul", response.properties().domain().get(0));
        Assertions.assertEquals("g", response.properties().dnsServerIps().get(0));
        Assertions.assertEquals("adyedmzrgjfok", response.properties().sourceIp());
        Assertions.assertEquals(4876609357725456575L, response.properties().dnsServices());
        Assertions.assertEquals(7518014445872967591L, response.properties().revision());
    }
}
