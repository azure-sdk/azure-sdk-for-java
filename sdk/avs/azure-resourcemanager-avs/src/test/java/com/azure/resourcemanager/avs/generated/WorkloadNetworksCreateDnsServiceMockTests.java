// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServiceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"obaxkjeytu\",\"dnsServiceIp\":\"bfjkw\",\"defaultDnsZone\":\"snkq\",\"fqdnZones\":[\"y\"],\"logLevel\":\"INFO\",\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":3083692456009895216},\"id\":\"aulk\",\"name\":\"akdkifmjnnawtqab\",\"type\":\"xuckpggqoweyir\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("tcqiosmg")
            .withExistingWorkloadNetwork("ksxwpnd", "cpfnznthjtwkja", "srxuzvoam")
            .withProperties(new WorkloadNetworkDnsServiceProperties().withDisplayName("hgxqdlyrt")
                .withDnsServiceIp("laprlt")
                .withDefaultDnsZone("atbhjmznn")
                .withFqdnZones(Arrays.asList("qeqala"))
                .withLogLevel(DnsServiceLogLevelEnum.ERROR)
                .withRevision(9185198515701434959L))
            .create();

        Assertions.assertEquals("obaxkjeytu", response.properties().displayName());
        Assertions.assertEquals("bfjkw", response.properties().dnsServiceIp());
        Assertions.assertEquals("snkq", response.properties().defaultDnsZone());
        Assertions.assertEquals("y", response.properties().fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.INFO, response.properties().logLevel());
        Assertions.assertEquals(3083692456009895216L, response.properties().revision());
    }
}
