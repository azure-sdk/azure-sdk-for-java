// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Datastore;
import com.azure.resourcemanager.avs.models.DatastoreProperties;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatastoresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"yomkxfbvfbhdy\"},\"diskPoolVolume\":{\"targetId\":\"hpwpgddeimawzovg\",\"lunName\":\"kumuikjcjca\",\"mountOption\":\"MOUNT\",\"path\":\"snsqowxwcoml\"},\"elasticSanVolume\":{\"targetId\":\"ytwvczcswkacve\"},\"pureStorageVolume\":{\"storagePoolId\":\"fdv\",\"sizeGb\":664192070},\"status\":\"Accessible\"},\"id\":\"rnfxtgddp\",\"name\":\"th\",\"type\":\"hn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Datastore response = manager.datastores()
            .define("wwsko")
            .withExistingCluster("rlpshhkv", "edwqslsrh", "pq")
            .withProperties(new DatastoreProperties().withNetAppVolume(new NetAppVolume().withId("wimuvqej"))
                .withDiskPoolVolume(new DiskPoolVolume().withTargetId("ovyrrleaesinu")
                    .withLunName("tljqobbpih")
                    .withMountOption(MountOptionEnum.ATTACH))
                .withElasticSanVolume(new ElasticSanVolume().withTargetId("rqbrjbbmpxdlvyk"))
                .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("e").withSizeGb(824374091)))
            .create();

        Assertions.assertEquals("yomkxfbvfbhdy", response.properties().netAppVolume().id());
        Assertions.assertEquals("hpwpgddeimawzovg", response.properties().diskPoolVolume().targetId());
        Assertions.assertEquals("kumuikjcjca", response.properties().diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, response.properties().diskPoolVolume().mountOption());
        Assertions.assertEquals("ytwvczcswkacve", response.properties().elasticSanVolume().targetId());
        Assertions.assertEquals("fdv", response.properties().pureStorageVolume().storagePoolId());
        Assertions.assertEquals(664192070, response.properties().pureStorageVolume().sizeGb());
    }
}
