// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Datastore;
import com.azure.resourcemanager.avs.models.DatastoreProperties;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatastoresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"jaosrxuzv\"},\"diskPoolVolume\":{\"targetId\":\"mktcqiosmgbza\",\"lunName\":\"gxq\",\"mountOption\":\"ATTACH\",\"path\":\"tlt\"},\"elasticSanVolume\":{\"targetId\":\"prltzkatbhjmz\"},\"pureStorageVolume\":{\"storagePoolId\":\"bsoqeqala\",\"sizeGb\":1462537110},\"status\":\"Inaccessible\"},\"id\":\"un\",\"name\":\"tgfebwln\",\"type\":\"mhyreeudz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Datastore response = manager.datastores()
            .define("haohdjhhflzokxc")
            .withExistingCluster("ycjsx", "wwixzvumw", "xqhndvnoamlds")
            .withProperties(new DatastoreProperties().withNetAppVolume(new NetAppVolume().withId("nje"))
                .withDiskPoolVolume(new DiskPoolVolume().withTargetId("gltsxoat")
                    .withLunName("tgzpnpb")
                    .withMountOption(MountOptionEnum.ATTACH))
                .withElasticSanVolume(new ElasticSanVolume().withTargetId("pgawtxxpkyjcxcjx"))
                .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("ytfmpc").withSizeGb(756303284)))
            .create();

        Assertions.assertEquals("jaosrxuzv", response.properties().netAppVolume().id());
        Assertions.assertEquals("mktcqiosmgbza", response.properties().diskPoolVolume().targetId());
        Assertions.assertEquals("gxq", response.properties().diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, response.properties().diskPoolVolume().mountOption());
        Assertions.assertEquals("prltzkatbhjmz", response.properties().elasticSanVolume().targetId());
        Assertions.assertEquals("bsoqeqala", response.properties().pureStorageVolume().storagePoolId());
        Assertions.assertEquals(1462537110, response.properties().pureStorageVolume().sizeGb());
    }
}
