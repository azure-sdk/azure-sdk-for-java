// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZoneProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"flqo\",\"domain\":[\"vrehmrnjhvsujzt\"],\"dnsServerIps\":[\"tqjtwhauu\"],\"sourceIp\":\"prnjletlxsmr\",\"dnsServices\":1873182568438303490,\"provisioningState\":\"Succeeded\",\"revision\":8833257266764779164},\"id\":\"waziy\",\"name\":\"knlqwzdvpiwhxqsz\",\"type\":\"tmaaj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("saasiixtmkzj")
            .withExistingWorkloadNetwork("hlisngw", "lqqmpiz", "uwnpqxpxiwfcng")
            .withProperties(new WorkloadNetworkDnsZoneProperties().withDisplayName("iirhgfgrwsd")
                .withDomain(Arrays.asList("atzv"))
                .withDnsServerIps(Arrays.asList("lbyvictctbrxkjzw", "gxffmshkwf"))
                .withSourceIp("gozxw")
                .withDnsServices(2779918745787217831L)
                .withRevision(5960879142196125616L))
            .create();

        Assertions.assertEquals("flqo", response.properties().displayName());
        Assertions.assertEquals("vrehmrnjhvsujzt", response.properties().domain().get(0));
        Assertions.assertEquals("tqjtwhauu", response.properties().dnsServerIps().get(0));
        Assertions.assertEquals("prnjletlxsmr", response.properties().sourceIp());
        Assertions.assertEquals(1873182568438303490L, response.properties().dnsServices());
        Assertions.assertEquals(8833257266764779164L, response.properties().revision());
    }
}
