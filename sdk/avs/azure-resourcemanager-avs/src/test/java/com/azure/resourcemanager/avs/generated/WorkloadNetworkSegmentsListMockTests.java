// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkSegmentsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"n\",\"connectedGateway\":\"op\",\"subnet\":{\"dhcpRanges\":[\"vcnrly\"],\"gatewayAddress\":\"ucae\"},\"portVif\":[{\"portName\":\"kwqpat\"},{\"portName\":\"qsdtcjbctvivuzq\"},{\"portName\":\"tuowogtgitsqh\"}],\"status\":\"SUCCESS\",\"provisioningState\":\"Failed\",\"revision\":8198135706144232355},\"id\":\"nfzndscxmxeat\",\"name\":\"db\",\"type\":\"wnrdjyibqbnaom\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkloadNetworkSegment> response = manager.workloadNetworkSegments()
            .list("odnaienhqhskndn", "lqkaadlknwf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("n", response.iterator().next().properties().displayName());
        Assertions.assertEquals("op", response.iterator().next().properties().connectedGateway());
        Assertions.assertEquals("vcnrly", response.iterator().next().properties().subnet().dhcpRanges().get(0));
        Assertions.assertEquals("ucae", response.iterator().next().properties().subnet().gatewayAddress());
        Assertions.assertEquals(8198135706144232355L, response.iterator().next().properties().revision());
    }
}
