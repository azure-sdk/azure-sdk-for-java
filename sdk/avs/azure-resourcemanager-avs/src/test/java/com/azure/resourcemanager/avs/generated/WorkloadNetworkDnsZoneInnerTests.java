// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZoneProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsZoneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsZoneInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"glae\",\"domain\":[\"dticokpvzml\",\"t\"],\"dnsServerIps\":[\"gxobfirclnp\",\"ciayzriykhya\",\"fvjlboxqvkjlmx\"],\"sourceIp\":\"mdy\",\"dnsServices\":8975628624340233031,\"provisioningState\":\"Building\",\"revision\":2807759469982329757},\"id\":\"nraauzz\",\"name\":\"tj\",\"type\":\"zysdzh\"}")
            .toObject(WorkloadNetworkDnsZoneInner.class);
        Assertions.assertEquals("glae", model.properties().displayName());
        Assertions.assertEquals("dticokpvzml", model.properties().domain().get(0));
        Assertions.assertEquals("gxobfirclnp", model.properties().dnsServerIps().get(0));
        Assertions.assertEquals("mdy", model.properties().sourceIp());
        Assertions.assertEquals(8975628624340233031L, model.properties().dnsServices());
        Assertions.assertEquals(2807759469982329757L, model.properties().revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsZoneInner model = new WorkloadNetworkDnsZoneInner()
            .withProperties(new WorkloadNetworkDnsZoneProperties().withDisplayName("glae")
                .withDomain(Arrays.asList("dticokpvzml", "t"))
                .withDnsServerIps(Arrays.asList("gxobfirclnp", "ciayzriykhya", "fvjlboxqvkjlmx"))
                .withSourceIp("mdy")
                .withDnsServices(8975628624340233031L)
                .withRevision(2807759469982329757L));
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsZoneInner.class);
        Assertions.assertEquals("glae", model.properties().displayName());
        Assertions.assertEquals("dticokpvzml", model.properties().domain().get(0));
        Assertions.assertEquals("gxobfirclnp", model.properties().dnsServerIps().get(0));
        Assertions.assertEquals("mdy", model.properties().sourceIp());
        Assertions.assertEquals(8975628624340233031L, model.properties().dnsServices());
        Assertions.assertEquals(2807759469982329757L, model.properties().revision());
    }
}
