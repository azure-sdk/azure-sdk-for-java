// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVMGroup;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVMGroupProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkVmGroupsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"kiofkbt\",\"members\":[\"kl\",\"nldpvcbhhezyquwu\",\"qxutrpbrruyuua\"],\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":9171918442354377344},\"id\":\"lbmxlbnwtpcpah\",\"name\":\"rzrv\",\"type\":\"hmtfho\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkVMGroup response = manager.workloadNetworkVmGroups()
            .define("kuztdsbezaxyfu")
            .withExistingPrivateCloud("rrcoi", "sbamnppcc")
            .withProperties(new WorkloadNetworkVMGroupProperties().withDisplayName("uizh")
                .withMembers(Arrays.asList("epkpe"))
                .withRevision(176278501464246828L))
            .create();

        Assertions.assertEquals("kiofkbt", response.properties().displayName());
        Assertions.assertEquals("kl", response.properties().members().get(0));
        Assertions.assertEquals(9171918442354377344L, response.properties().revision());
    }
}
