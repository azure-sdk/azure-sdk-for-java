// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsZonesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"nsxfwu\",\"domain\":[\"dpkupnqrmgjf\"],\"dnsServerIps\":[\"uwxeoiojfizf\",\"vkjzwfbcyaykm\",\"fz\",\"bfw\"],\"sourceIp\":\"zxmdew\",\"dnsServices\":5897750454813877665,\"provisioningState\":\"Canceled\",\"revision\":407045465078492711},\"id\":\"aze\",\"name\":\"wwviyo\",\"type\":\"ps\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkloadNetworkDnsZone> response = manager.workloadNetworkDnsZones()
            .list("knlejjjkxybwfd", "kjbztensvkzykj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nsxfwu", response.iterator().next().properties().displayName());
        Assertions.assertEquals("dpkupnqrmgjf", response.iterator().next().properties().domain().get(0));
        Assertions.assertEquals("uwxeoiojfizf", response.iterator().next().properties().dnsServerIps().get(0));
        Assertions.assertEquals("zxmdew", response.iterator().next().properties().sourceIp());
        Assertions.assertEquals(5897750454813877665L, response.iterator().next().properties().dnsServices());
        Assertions.assertEquals(407045465078492711L, response.iterator().next().properties().revision());
    }
}
