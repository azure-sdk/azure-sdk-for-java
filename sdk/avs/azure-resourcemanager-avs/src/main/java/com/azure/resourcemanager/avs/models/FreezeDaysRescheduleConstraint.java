// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

/**
 * The deadline constraint for rescheduling maintenance.
 */
@Immutable
public final class FreezeDaysRescheduleConstraint extends RescheduleConstraint {
    /*
     * The kind of constraint
     */
    private RescheduleConstraintKind kind = RescheduleConstraintKind.FREEZE_DAYS;

    /*
     * Freeze days
     */
    private List<LocalDate> freezeDays;

    /**
     * Creates an instance of FreezeDaysRescheduleConstraint class.
     */
    public FreezeDaysRescheduleConstraint() {
    }

    /**
     * Get the kind property: The kind of constraint.
     * 
     * @return the kind value.
     */
    @Override
    public RescheduleConstraintKind kind() {
        return this.kind;
    }

    /**
     * Get the freezeDays property: Freeze days.
     * 
     * @return the freezeDays value.
     */
    public List<LocalDate> freezeDays() {
        return this.freezeDays;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FreezeDaysRescheduleConstraint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FreezeDaysRescheduleConstraint if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FreezeDaysRescheduleConstraint.
     */
    public static FreezeDaysRescheduleConstraint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FreezeDaysRescheduleConstraint deserializedFreezeDaysRescheduleConstraint
                = new FreezeDaysRescheduleConstraint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("freezeDays".equals(fieldName)) {
                    List<LocalDate> freezeDays = reader.readArray(
                        reader1 -> reader1.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                    deserializedFreezeDaysRescheduleConstraint.freezeDays = freezeDays;
                } else if ("kind".equals(fieldName)) {
                    deserializedFreezeDaysRescheduleConstraint.kind
                        = RescheduleConstraintKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFreezeDaysRescheduleConstraint;
        });
    }
}
