// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The deadline constraint for rescheduling maintenance.
 */
@Immutable
public final class DeadlineRescheduleConstraint extends RescheduleConstraint {
    /*
     * The kind of constraint
     */
    private RescheduleConstraintKind kind = RescheduleConstraintKind.DEADLINE;

    /*
     * The deadline
     */
    private OffsetDateTime deadline;

    /**
     * Creates an instance of DeadlineRescheduleConstraint class.
     */
    public DeadlineRescheduleConstraint() {
    }

    /**
     * Get the kind property: The kind of constraint.
     * 
     * @return the kind value.
     */
    @Override
    public RescheduleConstraintKind kind() {
        return this.kind;
    }

    /**
     * Get the deadline property: The deadline.
     * 
     * @return the deadline value.
     */
    public OffsetDateTime deadline() {
        return this.deadline;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeadlineRescheduleConstraint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeadlineRescheduleConstraint if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeadlineRescheduleConstraint.
     */
    public static DeadlineRescheduleConstraint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeadlineRescheduleConstraint deserializedDeadlineRescheduleConstraint = new DeadlineRescheduleConstraint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deadline".equals(fieldName)) {
                    deserializedDeadlineRescheduleConstraint.deadline = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    deserializedDeadlineRescheduleConstraint.kind
                        = RescheduleConstraintKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeadlineRescheduleConstraint;
        });
    }
}
