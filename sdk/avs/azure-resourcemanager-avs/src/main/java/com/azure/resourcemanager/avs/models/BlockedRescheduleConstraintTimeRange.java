// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Blocked Time range Constraints for maintenance.
 */
@Immutable
public final class BlockedRescheduleConstraintTimeRange
    implements JsonSerializable<BlockedRescheduleConstraintTimeRange> {
    /*
     * Start date time
     */
    private OffsetDateTime startAt;

    /*
     * End date Time
     */
    private OffsetDateTime endAt;

    /*
     * Reason category for blocking maintenance reschedule
     */
    private String reason;

    /**
     * Creates an instance of BlockedRescheduleConstraintTimeRange class.
     */
    public BlockedRescheduleConstraintTimeRange() {
    }

    /**
     * Get the startAt property: Start date time.
     * 
     * @return the startAt value.
     */
    public OffsetDateTime startAt() {
        return this.startAt;
    }

    /**
     * Get the endAt property: End date Time.
     * 
     * @return the endAt value.
     */
    public OffsetDateTime endAt() {
        return this.endAt;
    }

    /**
     * Get the reason property: Reason category for blocking maintenance reschedule.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockedRescheduleConstraintTimeRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockedRescheduleConstraintTimeRange if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlockedRescheduleConstraintTimeRange.
     */
    public static BlockedRescheduleConstraintTimeRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockedRescheduleConstraintTimeRange deserializedBlockedRescheduleConstraintTimeRange
                = new BlockedRescheduleConstraintTimeRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startAt".equals(fieldName)) {
                    deserializedBlockedRescheduleConstraintTimeRange.startAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endAt".equals(fieldName)) {
                    deserializedBlockedRescheduleConstraintTimeRange.endAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reason".equals(fieldName)) {
                    deserializedBlockedRescheduleConstraintTimeRange.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockedRescheduleConstraintTimeRange;
        });
    }
}
