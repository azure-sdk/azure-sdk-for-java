// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.WorkloadNetworkPublicIpsClient;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkPublicIPInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPublicIP;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPublicIps;

public final class WorkloadNetworkPublicIpsImpl implements WorkloadNetworkPublicIps {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadNetworkPublicIpsImpl.class);

    private final WorkloadNetworkPublicIpsClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public WorkloadNetworkPublicIpsImpl(WorkloadNetworkPublicIpsClient innerClient,
        com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkloadNetworkPublicIP> list(String resourceGroupName, String privateCloudName) {
        PagedIterable<WorkloadNetworkPublicIPInner> inner
            = this.serviceClient().list(resourceGroupName, privateCloudName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkPublicIPImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadNetworkPublicIP> list(String resourceGroupName, String privateCloudName,
        Context context) {
        PagedIterable<WorkloadNetworkPublicIPInner> inner
            = this.serviceClient().list(resourceGroupName, privateCloudName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkPublicIPImpl(inner1, this.manager()));
    }

    public Response<WorkloadNetworkPublicIP> getWithResponse(String resourceGroupName, String privateCloudName,
        String publicIPId, Context context) {
        Response<WorkloadNetworkPublicIPInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, privateCloudName, publicIPId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadNetworkPublicIPImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadNetworkPublicIP get(String resourceGroupName, String privateCloudName, String publicIPId) {
        WorkloadNetworkPublicIPInner inner = this.serviceClient().get(resourceGroupName, privateCloudName, publicIPId);
        if (inner != null) {
            return new WorkloadNetworkPublicIPImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String publicIPId, String privateCloudName) {
        this.serviceClient().delete(resourceGroupName, publicIPId, privateCloudName);
    }

    public void delete(String resourceGroupName, String publicIPId, String privateCloudName, Context context) {
        this.serviceClient().delete(resourceGroupName, publicIPId, privateCloudName, context);
    }

    public WorkloadNetworkPublicIP getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String publicIPId = ResourceManagerUtils.getValueFromIdByName(id, "publicIPs");
        if (publicIPId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicIPs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, publicIPId, Context.NONE).getValue();
    }

    public Response<WorkloadNetworkPublicIP> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String publicIPId = ResourceManagerUtils.getValueFromIdByName(id, "publicIPs");
        if (publicIPId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicIPs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, publicIPId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicIPId = ResourceManagerUtils.getValueFromIdByName(id, "publicIPs");
        if (publicIPId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicIPs'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, publicIPId, privateCloudName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicIPId = ResourceManagerUtils.getValueFromIdByName(id, "publicIPs");
        if (publicIPId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicIPs'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, publicIPId, privateCloudName, context);
    }

    private WorkloadNetworkPublicIpsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }

    public WorkloadNetworkPublicIPImpl define(String name) {
        return new WorkloadNetworkPublicIPImpl(name, this.manager());
    }
}
