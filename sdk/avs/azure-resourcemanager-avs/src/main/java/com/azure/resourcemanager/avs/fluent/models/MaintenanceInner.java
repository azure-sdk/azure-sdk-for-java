// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.MaintenanceManagementOperation;
import com.azure.resourcemanager.avs.models.MaintenanceProvisioningState;
import com.azure.resourcemanager.avs.models.MaintenanceReadiness;
import com.azure.resourcemanager.avs.models.MaintenanceState;
import com.azure.resourcemanager.avs.models.MaintenanceType;
import com.azure.resourcemanager.avs.models.Reschedule;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * A cluster resource.
 */
@Immutable
public final class MaintenanceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private MaintenanceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MaintenanceInner class.
     */
    public MaintenanceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private MaintenanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the component property: type of maintenance.
     * 
     * @return the component value.
     */
    public MaintenanceType component() {
        return this.innerProperties() == null ? null : this.innerProperties().component();
    }

    /**
     * Get the displayName property: Display name for maintenance.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the clusterId property: Cluster ID for on which maintenance will be applied. Empty if maintenance is at
     * private cloud level.
     * 
     * @return the clusterId value.
     */
    public Integer clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Get the infoLink property: Link to maintenance info.
     * 
     * @return the infoLink value.
     */
    public String infoLink() {
        return this.innerProperties() == null ? null : this.innerProperties().infoLink();
    }

    /**
     * Get the impact property: Impact on the resource during maintenance period.
     * 
     * @return the impact value.
     */
    public String impact() {
        return this.innerProperties() == null ? null : this.innerProperties().impact();
    }

    /**
     * Get the scheduledByMicrosoft property: If maintenance is scheduled by Microsoft.
     * 
     * @return the scheduledByMicrosoft value.
     */
    public Boolean scheduledByMicrosoft() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledByMicrosoft();
    }

    /**
     * Get the state property: The state of the maintenance.
     * 
     * @return the state value.
     */
    public MaintenanceState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the scheduledStartTime property: Scheduled maintenance start time.
     * 
     * @return the scheduledStartTime value.
     */
    public OffsetDateTime scheduledStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledStartTime();
    }

    /**
     * Get the estimatedDurationInMinutes property: Estimated time maintenance will take in minutes.
     * 
     * @return the estimatedDurationInMinutes value.
     */
    public Long estimatedDurationInMinutes() {
        return this.innerProperties() == null ? null : this.innerProperties().estimatedDurationInMinutes();
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public MaintenanceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the reschedule property: Constraints for rescheduling maintenance.
     * 
     * @return the reschedule value.
     */
    public Reschedule reschedule() {
        return this.innerProperties() == null ? null : this.innerProperties().reschedule();
    }

    /**
     * Get the operations property: Operations on maintenance.
     * 
     * @return the operations value.
     */
    public List<MaintenanceManagementOperation> operations() {
        return this.innerProperties() == null ? null : this.innerProperties().operations();
    }

    /**
     * Get the maintenanceReadiness property: Indicates whether the maintenance is ready to proceed.
     * 
     * @return the maintenanceReadiness value.
     */
    public MaintenanceReadiness maintenanceReadiness() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceReadiness();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MaintenanceInner.
     */
    public static MaintenanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceInner deserializedMaintenanceInner = new MaintenanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMaintenanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMaintenanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMaintenanceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMaintenanceInner.innerProperties = MaintenanceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMaintenanceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceInner;
        });
    }
}
