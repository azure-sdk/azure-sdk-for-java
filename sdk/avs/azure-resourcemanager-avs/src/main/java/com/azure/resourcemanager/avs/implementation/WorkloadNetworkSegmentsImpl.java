// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.WorkloadNetworkSegmentsClient;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkSegmentInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegments;

public final class WorkloadNetworkSegmentsImpl implements WorkloadNetworkSegments {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadNetworkSegmentsImpl.class);

    private final WorkloadNetworkSegmentsClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public WorkloadNetworkSegmentsImpl(WorkloadNetworkSegmentsClient innerClient,
        com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkloadNetworkSegment> listByPrivateCloud(String resourceGroupName, String privateCloudName) {
        PagedIterable<WorkloadNetworkSegmentInner> inner
            = this.serviceClient().listByPrivateCloud(resourceGroupName, privateCloudName);
        return Utils.mapPage(inner, inner1 -> new WorkloadNetworkSegmentImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadNetworkSegment> listByPrivateCloud(String resourceGroupName, String privateCloudName,
        Context context) {
        PagedIterable<WorkloadNetworkSegmentInner> inner
            = this.serviceClient().listByPrivateCloud(resourceGroupName, privateCloudName, context);
        return Utils.mapPage(inner, inner1 -> new WorkloadNetworkSegmentImpl(inner1, this.manager()));
    }

    public Response<WorkloadNetworkSegment> getSegmentWithResponse(String resourceGroupName, String privateCloudName,
        String segmentId, Context context) {
        Response<WorkloadNetworkSegmentInner> inner
            = this.serviceClient().getSegmentWithResponse(resourceGroupName, privateCloudName, segmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadNetworkSegmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadNetworkSegment getSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        WorkloadNetworkSegmentInner inner
            = this.serviceClient().getSegment(resourceGroupName, privateCloudName, segmentId);
        if (inner != null) {
            return new WorkloadNetworkSegmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        this.serviceClient().deleteSegment(resourceGroupName, privateCloudName, segmentId);
    }

    public void deleteSegment(String resourceGroupName, String privateCloudName, String segmentId, Context context) {
        this.serviceClient().deleteSegment(resourceGroupName, privateCloudName, segmentId, context);
    }

    public WorkloadNetworkSegment getSegmentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String segmentId = Utils.getValueFromIdByName(id, "segments");
        if (segmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'segments'.", id)));
        }
        return this.getSegmentWithResponse(resourceGroupName, privateCloudName, segmentId, Context.NONE).getValue();
    }

    public Response<WorkloadNetworkSegment> getSegmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String segmentId = Utils.getValueFromIdByName(id, "segments");
        if (segmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'segments'.", id)));
        }
        return this.getSegmentWithResponse(resourceGroupName, privateCloudName, segmentId, context);
    }

    public void deleteSegmentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String segmentId = Utils.getValueFromIdByName(id, "segments");
        if (segmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'segments'.", id)));
        }
        this.deleteSegment(resourceGroupName, privateCloudName, segmentId, Context.NONE);
    }

    public void deleteSegmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String segmentId = Utils.getValueFromIdByName(id, "segments");
        if (segmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'segments'.", id)));
        }
        this.deleteSegment(resourceGroupName, privateCloudName, segmentId, context);
    }

    private WorkloadNetworkSegmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }

    public WorkloadNetworkSegmentImpl define(String name) {
        return new WorkloadNetworkSegmentImpl(name, this.manager());
    }
}
