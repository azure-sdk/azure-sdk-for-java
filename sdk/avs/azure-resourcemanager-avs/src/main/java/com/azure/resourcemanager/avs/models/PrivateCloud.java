// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.avs.fluent.models.PrivateCloudInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of PrivateCloud.
 */
public interface PrivateCloud {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the properties property: The resource-specific properties for this resource.
     * 
     * @return the properties value.
     */
    PrivateCloudProperties properties();

    /**
     * Gets the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    PrivateCloudIdentity identity();

    /**
     * Gets the zones property: The availability zones.
     * 
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.avs.fluent.models.PrivateCloudInner object.
     * 
     * @return the inner object.
     */
    PrivateCloudInner innerModel();

    /**
     * The entirety of the PrivateCloud definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithSku, DefinitionStages.WithCreate {
    }

    /**
     * The PrivateCloud definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the PrivateCloud definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithSku withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU (Stock Keeping Unit) assigned to this resource..
             * 
             * @param sku The SKU (Stock Keeping Unit) assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the PrivateCloud definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithProperties,
            DefinitionStages.WithIdentity, DefinitionStages.WithZones {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            PrivateCloud create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PrivateCloud create(Context context);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The resource-specific properties for this resource..
             * 
             * @param properties The resource-specific properties for this resource.
             * @return the next definition stage.
             */
            WithCreate withProperties(PrivateCloudProperties properties);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(PrivateCloudIdentity identity);
        }

        /**
         * The stage of the PrivateCloud definition allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: The availability zones..
             * 
             * @param zones The availability zones.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
    }

    /**
     * Begins update for the PrivateCloud resource.
     * 
     * @return the stage of resource update.
     */
    PrivateCloud.Update update();

    /**
     * The template for PrivateCloud update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithSku, UpdateStages.WithIdentity,
        UpdateStages.WithManagementCluster, UpdateStages.WithInternet, UpdateStages.WithIdentitySources,
        UpdateStages.WithEncryption, UpdateStages.WithExtendedNetworkBlocks, UpdateStages.WithDnsZoneType {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        PrivateCloud apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PrivateCloud apply(Context context);
    }

    /**
     * The PrivateCloud update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the PrivateCloud update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU (Stock Keeping Unit) assigned to this resource..
             * 
             * @param sku The SKU (Stock Keeping Unit) assigned to this resource.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            Update withIdentity(PrivateCloudIdentity identity);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify managementCluster.
         */
        interface WithManagementCluster {
            /**
             * Specifies the managementCluster property: The default cluster used for management.
             * 
             * @param managementCluster The default cluster used for management.
             * @return the next definition stage.
             */
            Update withManagementCluster(ManagementCluster managementCluster);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify internet.
         */
        interface WithInternet {
            /**
             * Specifies the internet property: Connectivity to internet is enabled or disabled.
             * 
             * @param internet Connectivity to internet is enabled or disabled.
             * @return the next definition stage.
             */
            Update withInternet(InternetEnum internet);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify identitySources.
         */
        interface WithIdentitySources {
            /**
             * Specifies the identitySources property: vCenter Single Sign On Identity Sources.
             * 
             * @param identitySources vCenter Single Sign On Identity Sources.
             * @return the next definition stage.
             */
            Update withIdentitySources(List<IdentitySource> identitySources);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify encryption.
         */
        interface WithEncryption {
            /**
             * Specifies the encryption property: Customer managed key encryption, can be enabled or disabled.
             * 
             * @param encryption Customer managed key encryption, can be enabled or disabled.
             * @return the next definition stage.
             */
            Update withEncryption(Encryption encryption);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify extendedNetworkBlocks.
         */
        interface WithExtendedNetworkBlocks {
            /**
             * Specifies the extendedNetworkBlocks property: Array of additional networks noncontiguous with
             * networkBlock. Networks must be
             * unique and non-overlapping across VNet in your subscription, on-premise, and
             * this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
             * (A.B.C.D/X)..
             * 
             * @param extendedNetworkBlocks Array of additional networks noncontiguous with networkBlock. Networks must
             * be
             * unique and non-overlapping across VNet in your subscription, on-premise, and
             * this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
             * (A.B.C.D/X).
             * @return the next definition stage.
             */
            Update withExtendedNetworkBlocks(List<String> extendedNetworkBlocks);
        }

        /**
         * The stage of the PrivateCloud update allowing to specify dnsZoneType.
         */
        interface WithDnsZoneType {
            /**
             * Specifies the dnsZoneType property: The type of DNS zone to use..
             * 
             * @param dnsZoneType The type of DNS zone to use.
             * @return the next definition stage.
             */
            Update withDnsZoneType(DnsZoneType dnsZoneType);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    PrivateCloud refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PrivateCloud refresh(Context context);

    /**
     * Rotate the vCenter password.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateVcenterPassword();

    /**
     * Rotate the vCenter password.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateVcenterPassword(Context context);

    /**
     * Rotate the NSX-T Manager password.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateNsxtPassword();

    /**
     * Rotate the NSX-T Manager password.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateNsxtPassword(Context context);

    /**
     * List the admin credentials for the private cloud.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return administrative credentials for accessing vCenter and NSX-T along with {@link Response}.
     */
    Response<AdminCredentials> listAdminCredentialsWithResponse(Context context);

    /**
     * List the admin credentials for the private cloud.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return administrative credentials for accessing vCenter and NSX-T.
     */
    AdminCredentials listAdminCredentials();
}
