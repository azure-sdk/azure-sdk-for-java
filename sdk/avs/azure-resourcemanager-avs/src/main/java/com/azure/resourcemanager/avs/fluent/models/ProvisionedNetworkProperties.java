// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.avs.models.CloudLinkProvisioningState;
import com.azure.resourcemanager.avs.models.ProvisionedNetworkTypes;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of a provisioned network.
 */
@Immutable
public final class ProvisionedNetworkProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private CloudLinkProvisioningState provisioningState;

    /*
     * The address prefixes of the provisioned network in CIDR notation.
     */
    @JsonProperty(value = "addressPrefix", access = JsonProperty.Access.WRITE_ONLY)
    private String addressPrefix;

    /*
     * The type of network provisioned.
     */
    @JsonProperty(value = "networkType", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisionedNetworkTypes networkType;

    /**
     * Creates an instance of ProvisionedNetworkProperties class.
     */
    public ProvisionedNetworkProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public CloudLinkProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the addressPrefix property: The address prefixes of the provisioned network in CIDR notation.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.addressPrefix;
    }

    /**
     * Get the networkType property: The type of network provisioned.
     * 
     * @return the networkType value.
     */
    public ProvisionedNetworkTypes networkType() {
        return this.networkType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
