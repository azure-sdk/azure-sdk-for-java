// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.avs.models.Circuit;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The updatable properties of the PrivateCloud.
 */
@Fluent
public final class PrivateCloudUpdateProperties {
    /*
     * An ExpressRoute Circuit
     */
    @JsonProperty(value = "circuit")
    private Circuit circuit;

    /*
     * Optionally, set the vCenter admin password when the private cloud is created
     */
    @JsonProperty(value = "vcenterPassword")
    private String vcenterPassword;

    /*
     * Optionally, set the NSX-T Manager password when the private cloud is created
     */
    @JsonProperty(value = "nsxtPassword")
    private String nsxtPassword;

    /*
     * A secondary expressRoute circuit from a separate AZ. Only present in a stretched private cloud
     */
    @JsonProperty(value = "secondaryCircuit")
    private Circuit secondaryCircuit;

    /**
     * Creates an instance of PrivateCloudUpdateProperties class.
     */
    public PrivateCloudUpdateProperties() {
    }

    /**
     * Get the circuit property: An ExpressRoute Circuit.
     * 
     * @return the circuit value.
     */
    public Circuit circuit() {
        return this.circuit;
    }

    /**
     * Set the circuit property: An ExpressRoute Circuit.
     * 
     * @param circuit the circuit value to set.
     * @return the PrivateCloudUpdateProperties object itself.
     */
    public PrivateCloudUpdateProperties withCircuit(Circuit circuit) {
        this.circuit = circuit;
        return this;
    }

    /**
     * Get the vcenterPassword property: Optionally, set the vCenter admin password when the private cloud is created.
     * 
     * @return the vcenterPassword value.
     */
    public String vcenterPassword() {
        return this.vcenterPassword;
    }

    /**
     * Set the vcenterPassword property: Optionally, set the vCenter admin password when the private cloud is created.
     * 
     * @param vcenterPassword the vcenterPassword value to set.
     * @return the PrivateCloudUpdateProperties object itself.
     */
    public PrivateCloudUpdateProperties withVcenterPassword(String vcenterPassword) {
        this.vcenterPassword = vcenterPassword;
        return this;
    }

    /**
     * Get the nsxtPassword property: Optionally, set the NSX-T Manager password when the private cloud is created.
     * 
     * @return the nsxtPassword value.
     */
    public String nsxtPassword() {
        return this.nsxtPassword;
    }

    /**
     * Set the nsxtPassword property: Optionally, set the NSX-T Manager password when the private cloud is created.
     * 
     * @param nsxtPassword the nsxtPassword value to set.
     * @return the PrivateCloudUpdateProperties object itself.
     */
    public PrivateCloudUpdateProperties withNsxtPassword(String nsxtPassword) {
        this.nsxtPassword = nsxtPassword;
        return this;
    }

    /**
     * Get the secondaryCircuit property: A secondary expressRoute circuit from a separate AZ. Only present in a
     * stretched private cloud.
     * 
     * @return the secondaryCircuit value.
     */
    public Circuit secondaryCircuit() {
        return this.secondaryCircuit;
    }

    /**
     * Set the secondaryCircuit property: A secondary expressRoute circuit from a separate AZ. Only present in a
     * stretched private cloud.
     * 
     * @param secondaryCircuit the secondaryCircuit value to set.
     * @return the PrivateCloudUpdateProperties object itself.
     */
    public PrivateCloudUpdateProperties withSecondaryCircuit(Circuit secondaryCircuit) {
        this.secondaryCircuit = secondaryCircuit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (circuit() != null) {
            circuit().validate();
        }
        if (secondaryCircuit() != null) {
            secondaryCircuit().validate();
        }
    }
}
