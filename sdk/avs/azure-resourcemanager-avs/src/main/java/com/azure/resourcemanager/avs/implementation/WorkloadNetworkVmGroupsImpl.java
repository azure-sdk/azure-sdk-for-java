// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.WorkloadNetworkVmGroupsClient;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkVMGroupInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVMGroup;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVmGroups;

public final class WorkloadNetworkVmGroupsImpl implements WorkloadNetworkVmGroups {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadNetworkVmGroupsImpl.class);

    private final WorkloadNetworkVmGroupsClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public WorkloadNetworkVmGroupsImpl(WorkloadNetworkVmGroupsClient innerClient,
        com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkloadNetworkVMGroup> listByPrivateCloud(String resourceGroupName, String privateCloudName) {
        PagedIterable<WorkloadNetworkVMGroupInner> inner
            = this.serviceClient().listByPrivateCloud(resourceGroupName, privateCloudName);
        return Utils.mapPage(inner, inner1 -> new WorkloadNetworkVMGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadNetworkVMGroup> listByPrivateCloud(String resourceGroupName, String privateCloudName,
        Context context) {
        PagedIterable<WorkloadNetworkVMGroupInner> inner
            = this.serviceClient().listByPrivateCloud(resourceGroupName, privateCloudName, context);
        return Utils.mapPage(inner, inner1 -> new WorkloadNetworkVMGroupImpl(inner1, this.manager()));
    }

    public Response<WorkloadNetworkVMGroup> getVmGroupWithResponse(String resourceGroupName, String privateCloudName,
        String vmGroupId, Context context) {
        Response<WorkloadNetworkVMGroupInner> inner
            = this.serviceClient().getVmGroupWithResponse(resourceGroupName, privateCloudName, vmGroupId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadNetworkVMGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadNetworkVMGroup getVmGroup(String resourceGroupName, String privateCloudName, String vmGroupId) {
        WorkloadNetworkVMGroupInner inner
            = this.serviceClient().getVmGroup(resourceGroupName, privateCloudName, vmGroupId);
        if (inner != null) {
            return new WorkloadNetworkVMGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteVmGroup(String resourceGroupName, String privateCloudName, String vmGroupId) {
        this.serviceClient().deleteVmGroup(resourceGroupName, privateCloudName, vmGroupId);
    }

    public void deleteVmGroup(String resourceGroupName, String privateCloudName, String vmGroupId, Context context) {
        this.serviceClient().deleteVmGroup(resourceGroupName, privateCloudName, vmGroupId, context);
    }

    public WorkloadNetworkVMGroup getVmGroupById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String vmGroupId = Utils.getValueFromIdByName(id, "vmGroups");
        if (vmGroupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vmGroups'.", id)));
        }
        return this.getVmGroupWithResponse(resourceGroupName, privateCloudName, vmGroupId, Context.NONE).getValue();
    }

    public Response<WorkloadNetworkVMGroup> getVmGroupByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String vmGroupId = Utils.getValueFromIdByName(id, "vmGroups");
        if (vmGroupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vmGroups'.", id)));
        }
        return this.getVmGroupWithResponse(resourceGroupName, privateCloudName, vmGroupId, context);
    }

    public void deleteVmGroupById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String vmGroupId = Utils.getValueFromIdByName(id, "vmGroups");
        if (vmGroupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vmGroups'.", id)));
        }
        this.deleteVmGroup(resourceGroupName, privateCloudName, vmGroupId, Context.NONE);
    }

    public void deleteVmGroupByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = Utils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String vmGroupId = Utils.getValueFromIdByName(id, "vmGroups");
        if (vmGroupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vmGroups'.", id)));
        }
        this.deleteVmGroup(resourceGroupName, privateCloudName, vmGroupId, context);
    }

    private WorkloadNetworkVmGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }

    public WorkloadNetworkVMGroupImpl define(String name) {
        return new WorkloadNetworkVMGroupImpl(name, this.manager());
    }
}
