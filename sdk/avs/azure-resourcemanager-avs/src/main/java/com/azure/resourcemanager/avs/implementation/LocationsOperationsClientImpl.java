// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.avs.fluent.LocationsOperationsClient;
import com.azure.resourcemanager.avs.fluent.models.QuotaInner;
import com.azure.resourcemanager.avs.fluent.models.TrialInner;
import com.azure.resourcemanager.avs.models.AzureCoreFoundationsErrorException;
import com.azure.resourcemanager.avs.models.Sku;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LocationsOperationsClient.
 */
public final class LocationsOperationsClientImpl implements LocationsOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LocationsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AvsClientImpl client;

    /**
     * Initializes an instance of LocationsOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LocationsOperationsClientImpl(AvsClientImpl client) {
        this.service = RestProxy.create(LocationsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AvsClientLocationsOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AvsClientLocationsOp")
    public interface LocationsOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(AzureCoreFoundationsErrorException.class)
        Mono<Response<QuotaInner>> checkQuotaAvailability(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(AzureCoreFoundationsErrorException.class)
        Mono<Response<TrialInner>> checkTrialAvailability(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @BodyParam("application/json") Sku sku,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Return quota for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quotas along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QuotaInner>> checkQuotaAvailabilityWithResponseAsync(String subscriptionId, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkQuotaAvailability(this.client.getEndpoint(),
                this.client.getApiVersion(), subscriptionId, location, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Return quota for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quotas along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QuotaInner>> checkQuotaAvailabilityWithResponseAsync(String subscriptionId, String location,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.checkQuotaAvailability(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            location, accept, context);
    }

    /**
     * Return quota for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quotas on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<QuotaInner> checkQuotaAvailabilityAsync(String subscriptionId, String location) {
        return checkQuotaAvailabilityWithResponseAsync(subscriptionId, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Return quota for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quotas along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QuotaInner> checkQuotaAvailabilityWithResponse(String subscriptionId, String location,
        Context context) {
        return checkQuotaAvailabilityWithResponseAsync(subscriptionId, location, context).block();
    }

    /**
     * Return quota for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QuotaInner checkQuotaAvailability(String subscriptionId, String location) {
        return checkQuotaAvailabilityWithResponse(subscriptionId, location, Context.NONE).getValue();
    }

    /**
     * Return trial status for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @param sku The sku to check for trial availability.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription trial availability along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrialInner>> checkTrialAvailabilityWithResponseAsync(String subscriptionId, String location,
        Sku sku) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (sku != null) {
            sku.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkTrialAvailability(this.client.getEndpoint(),
                this.client.getApiVersion(), subscriptionId, location, sku, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Return trial status for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @param sku The sku to check for trial availability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription trial availability along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrialInner>> checkTrialAvailabilityWithResponseAsync(String subscriptionId, String location,
        Sku sku, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (sku != null) {
            sku.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.checkTrialAvailability(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            location, sku, accept, context);
    }

    /**
     * Return trial status for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription trial availability on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrialInner> checkTrialAvailabilityAsync(String subscriptionId, String location) {
        final Sku sku = null;
        return checkTrialAvailabilityWithResponseAsync(subscriptionId, location, sku)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Return trial status for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @param sku The sku to check for trial availability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription trial availability along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TrialInner> checkTrialAvailabilityWithResponse(String subscriptionId, String location, Sku sku,
        Context context) {
        return checkTrialAvailabilityWithResponseAsync(subscriptionId, location, sku, context).block();
    }

    /**
     * Return trial status for subscription by region.
     * 
     * @param subscriptionId The ID of the target subscription.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription trial availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrialInner checkTrialAvailability(String subscriptionId, String location) {
        final Sku sku = null;
        return checkTrialAvailabilityWithResponse(subscriptionId, location, sku, Context.NONE).getValue();
    }
}
