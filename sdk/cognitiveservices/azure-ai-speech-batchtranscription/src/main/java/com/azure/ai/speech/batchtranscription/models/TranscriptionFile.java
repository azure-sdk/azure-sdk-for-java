// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * TranscriptionFile.
 */
@Immutable
public final class TranscriptionFile implements JsonSerializable<TranscriptionFile> {
    /*
     * The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see
     * https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     */
    @Generated
    private final OffsetDateTime created;

    /*
     * FileKind
     */
    @Generated
    private final FileKind kind;

    /*
     * FileLinks
     */
    @Generated
    private final FileLinks links;

    /*
     * The name of this file.
     */
    @Generated
    private final String displayName;

    /*
     * FileProperties
     */
    @Generated
    private final FileProperties properties;

    /*
     * The location of this entity.
     */
    @Generated
    private String self;

    /**
     * Creates an instance of TranscriptionFile class.
     * 
     * @param created the created value to set.
     * @param kind the kind value to set.
     * @param links the links value to set.
     * @param displayName the displayName value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private TranscriptionFile(OffsetDateTime created, FileKind kind, FileLinks links, String displayName,
        FileProperties properties) {
        this.created = created;
        this.kind = kind;
        this.links = links;
        this.displayName = displayName;
        this.properties = properties;
    }

    /**
     * Get the created property: The creation time of this file. The time stamp is encoded as ISO 8601 date and time
     * format (see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the kind property: FileKind.
     * 
     * @return the kind value.
     */
    @Generated
    public FileKind getKind() {
        return this.kind;
    }

    /**
     * Get the links property: FileLinks.
     * 
     * @return the links value.
     */
    @Generated
    public FileLinks getLinks() {
        return this.links;
    }

    /**
     * Get the displayName property: The name of this file.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the properties property: FileProperties.
     * 
     * @return the properties value.
     */
    @Generated
    public FileProperties getProperties() {
        return this.properties;
    }

    /**
     * Get the self property: The location of this entity.
     * 
     * @return the self value.
     */
    @Generated
    public String getSelf() {
        return this.self;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdDateTime",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("links", this.links);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionFile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionFile.
     */
    @Generated
    public static TranscriptionFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime created = null;
            FileKind kind = null;
            FileLinks links = null;
            String displayName = null;
            FileProperties properties = null;
            String self = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdDateTime".equals(fieldName)) {
                    created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    kind = FileKind.fromString(reader.getString());
                } else if ("links".equals(fieldName)) {
                    links = FileLinks.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = FileProperties.fromJson(reader);
                } else if ("self".equals(fieldName)) {
                    self = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TranscriptionFile deserializedTranscriptionFile
                = new TranscriptionFile(created, kind, links, displayName, properties);
            deserializedTranscriptionFile.self = self;

            return deserializedTranscriptionFile;
        });
    }
}
