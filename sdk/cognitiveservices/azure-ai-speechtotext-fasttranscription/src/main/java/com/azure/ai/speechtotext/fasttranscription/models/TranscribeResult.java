// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.fasttranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of the transcribe operation.
 */
@Immutable
public final class TranscribeResult implements JsonSerializable<TranscribeResult> {
    /*
     * The duration of the audio in milliseconds.
     */
    @Generated
    private final int durationMilliseconds;

    /*
     * The full transcript for each channel.
     */
    @Generated
    private final List<ChannelCombinedPhrases> combinedPhrases;

    /*
     * The transcription results segmented into phrases.
     */
    @Generated
    private final List<Phrase> phrases;

    /**
     * Creates an instance of TranscribeResult class.
     * 
     * @param durationMilliseconds the durationMilliseconds value to set.
     * @param combinedPhrases the combinedPhrases value to set.
     * @param phrases the phrases value to set.
     */
    @Generated
    private TranscribeResult(int durationMilliseconds, List<ChannelCombinedPhrases> combinedPhrases,
        List<Phrase> phrases) {
        this.durationMilliseconds = durationMilliseconds;
        this.combinedPhrases = combinedPhrases;
        this.phrases = phrases;
    }

    /**
     * Get the durationMilliseconds property: The duration of the audio in milliseconds.
     * 
     * @return the durationMilliseconds value.
     */
    @Generated
    public int getDurationMilliseconds() {
        return this.durationMilliseconds;
    }

    /**
     * Get the combinedPhrases property: The full transcript for each channel.
     * 
     * @return the combinedPhrases value.
     */
    @Generated
    public List<ChannelCombinedPhrases> getCombinedPhrases() {
        return this.combinedPhrases;
    }

    /**
     * Get the phrases property: The transcription results segmented into phrases.
     * 
     * @return the phrases value.
     */
    @Generated
    public List<Phrase> getPhrases() {
        return this.phrases;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("durationMilliseconds", this.durationMilliseconds);
        jsonWriter.writeArrayField("combinedPhrases", this.combinedPhrases,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("phrases", this.phrases, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscribeResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscribeResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscribeResult.
     */
    @Generated
    public static TranscribeResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int durationMilliseconds = 0;
            List<ChannelCombinedPhrases> combinedPhrases = null;
            List<Phrase> phrases = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("durationMilliseconds".equals(fieldName)) {
                    durationMilliseconds = reader.getInt();
                } else if ("combinedPhrases".equals(fieldName)) {
                    combinedPhrases = reader.readArray(reader1 -> ChannelCombinedPhrases.fromJson(reader1));
                } else if ("phrases".equals(fieldName)) {
                    phrases = reader.readArray(reader1 -> Phrase.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TranscribeResult(durationMilliseconds, combinedPhrases, phrases);
        });
    }
}
