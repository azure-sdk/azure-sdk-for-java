// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.fasttranscription;

import com.azure.ai.speechtotext.fasttranscription.implementation.FastTranscriptionsImpl;
import com.azure.ai.speechtotext.fasttranscription.implementation.MultipartFormDataHelper;
import com.azure.ai.speechtotext.fasttranscription.implementation.models.TranscribeRequest;
import com.azure.ai.speechtotext.fasttranscription.models.AudioFileDetails;
import com.azure.ai.speechtotext.fasttranscription.models.TranscribeDefinition;
import com.azure.ai.speechtotext.fasttranscription.models.TranscribeResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous SpeechToTextClient type.
 */
@ServiceClient(builder = SpeechToTextClientBuilder.class, isAsync = true)
public final class SpeechToTextAsyncClient {
    @Generated
    private final FastTranscriptionsImpl serviceClient;

    /**
     * Initializes an instance of SpeechToTextAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SpeechToTextAsyncClient(FastTranscriptionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Transcribes the provided audio stream.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     durationMilliseconds: int (Required)
     *     combinedPhrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             text: String (Required)
     *         }
     *     ]
     *     phrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             speaker: Integer (Optional)
     *             offsetMilliseconds: int (Required)
     *             durationMilliseconds: int (Required)
     *             text: String (Required)
     *             words (Optional): [
     *                  (Optional){
     *                     text: String (Required)
     *                     offsetMilliseconds: int (Required)
     *                     durationMilliseconds: int (Required)
     *                 }
     *             ]
     *             locale: String (Optional)
     *             confidence: double (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param transcribeRequest The transcribeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the transcribe operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> transcribeWithResponse(BinaryData transcribeRequest, RequestOptions requestOptions) {
        // Operation 'transcribe' is of content-type 'multipart/form-data'. Protocol API is not usable and hence not
        // generated.
        return this.serviceClient.transcribeWithResponseAsync(transcribeRequest, requestOptions);
    }

    /**
     * Transcribes the provided audio stream.
     * 
     * @param audio The content of the audio file to be transcribed. The audio file must be shorter than 2 hours in
     * audio duration and smaller than 250 MB in size.
     * @param definition Metadata for a fast transcription request. This field contains a JSON-serialized object of type
     * `TranscribeDefinition`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the transcribe operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TranscribeResult> transcribe(AudioFileDetails audio, TranscribeDefinition definition) {
        // Generated convenience method for transcribeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        TranscribeRequest transcribeRequestObj = new TranscribeRequest(audio).setDefinition(definition);
        BinaryData transcribeRequest = new MultipartFormDataHelper(requestOptions)
            .serializeJsonField("definition", transcribeRequestObj.getDefinition())
            .serializeFileField("audio", transcribeRequestObj.getAudio().getContent(),
                transcribeRequestObj.getAudio().getContentType(), transcribeRequestObj.getAudio().getFilename())
            .end()
            .getRequestBody();
        return transcribeWithResponse(transcribeRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TranscribeResult.class));
    }

    /**
     * Transcribes the provided audio stream.
     * 
     * @param audio The content of the audio file to be transcribed. The audio file must be shorter than 2 hours in
     * audio duration and smaller than 250 MB in size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the transcribe operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TranscribeResult> transcribe(AudioFileDetails audio) {
        // Generated convenience method for transcribeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        TranscribeRequest transcribeRequestObj = new TranscribeRequest(audio);
        BinaryData transcribeRequest = new MultipartFormDataHelper(requestOptions)
            .serializeJsonField("definition", transcribeRequestObj.getDefinition())
            .serializeFileField("audio", transcribeRequestObj.getAudio().getContent(),
                transcribeRequestObj.getAudio().getContentType(), transcribeRequestObj.getAudio().getFilename())
            .end()
            .getRequestBody();
        return transcribeWithResponse(transcribeRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TranscribeResult.class));
    }
}
