// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.transcription.implementation;

import com.azure.ai.speechtotext.transcription.models.DiarizationProperties;
import com.azure.ai.speechtotext.transcription.models.EntityError;
import com.azure.ai.speechtotext.transcription.models.EntityReference;
import com.azure.ai.speechtotext.transcription.models.LanguageIdentificationProperties;
import com.azure.ai.speechtotext.transcription.models.TranscriptionJob;
import com.azure.ai.speechtotext.transcription.models.TranscriptionLinks;
import com.azure.ai.speechtotext.transcription.models.TranscriptionProperties;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static TranscriptionJobAccessor transcriptionJobAccessor;

    public interface TranscriptionJobAccessor {
        TranscriptionJob prepareModelForJsonMergePatch(TranscriptionJob transcriptionJob,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TranscriptionJob transcriptionJob);
    }

    public static void setTranscriptionJobAccessor(TranscriptionJobAccessor accessor) {
        transcriptionJobAccessor = accessor;
    }

    public static TranscriptionJobAccessor getTranscriptionJobAccessor() {
        return transcriptionJobAccessor;
    }

    private static TranscriptionLinksAccessor transcriptionLinksAccessor;

    public interface TranscriptionLinksAccessor {
        TranscriptionLinks prepareModelForJsonMergePatch(TranscriptionLinks transcriptionLinks,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TranscriptionLinks transcriptionLinks);
    }

    public static void setTranscriptionLinksAccessor(TranscriptionLinksAccessor accessor) {
        transcriptionLinksAccessor = accessor;
    }

    public static TranscriptionLinksAccessor getTranscriptionLinksAccessor() {
        return transcriptionLinksAccessor;
    }

    private static TranscriptionPropertiesAccessor transcriptionPropertiesAccessor;

    public interface TranscriptionPropertiesAccessor {
        TranscriptionProperties prepareModelForJsonMergePatch(TranscriptionProperties transcriptionProperties,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TranscriptionProperties transcriptionProperties);
    }

    public static void setTranscriptionPropertiesAccessor(TranscriptionPropertiesAccessor accessor) {
        transcriptionPropertiesAccessor = accessor;
    }

    public static TranscriptionPropertiesAccessor getTranscriptionPropertiesAccessor() {
        return transcriptionPropertiesAccessor;
    }

    private static EntityErrorAccessor entityErrorAccessor;

    public interface EntityErrorAccessor {
        EntityError prepareModelForJsonMergePatch(EntityError entityError, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(EntityError entityError);
    }

    public static void setEntityErrorAccessor(EntityErrorAccessor accessor) {
        entityErrorAccessor = accessor;
    }

    public static EntityErrorAccessor getEntityErrorAccessor() {
        return entityErrorAccessor;
    }

    private static DiarizationPropertiesAccessor diarizationPropertiesAccessor;

    public interface DiarizationPropertiesAccessor {
        DiarizationProperties prepareModelForJsonMergePatch(DiarizationProperties diarizationProperties,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(DiarizationProperties diarizationProperties);
    }

    public static void setDiarizationPropertiesAccessor(DiarizationPropertiesAccessor accessor) {
        diarizationPropertiesAccessor = accessor;
    }

    public static DiarizationPropertiesAccessor getDiarizationPropertiesAccessor() {
        return diarizationPropertiesAccessor;
    }

    private static LanguageIdentificationPropertiesAccessor languageIdentificationPropertiesAccessor;

    public interface LanguageIdentificationPropertiesAccessor {
        LanguageIdentificationProperties prepareModelForJsonMergePatch(
            LanguageIdentificationProperties languageIdentificationProperties, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LanguageIdentificationProperties languageIdentificationProperties);
    }

    public static void setLanguageIdentificationPropertiesAccessor(LanguageIdentificationPropertiesAccessor accessor) {
        languageIdentificationPropertiesAccessor = accessor;
    }

    public static LanguageIdentificationPropertiesAccessor getLanguageIdentificationPropertiesAccessor() {
        return languageIdentificationPropertiesAccessor;
    }

    private static EntityReferenceAccessor entityReferenceAccessor;

    public interface EntityReferenceAccessor {
        EntityReference prepareModelForJsonMergePatch(EntityReference entityReference, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(EntityReference entityReference);
    }

    public static void setEntityReferenceAccessor(EntityReferenceAccessor accessor) {
        entityReferenceAccessor = accessor;
    }

    public static EntityReferenceAccessor getEntityReferenceAccessor() {
        return entityReferenceAccessor;
    }
}
