// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.transcription.models;

import com.azure.ai.speechtotext.transcription.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * EntityReference.
 */
@Fluent
public final class EntityReference implements JsonSerializable<EntityReference> {
    /*
     * The location of the referenced entity.
     */
    @Generated
    private String self;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setEntityReferenceAccessor(new JsonMergePatchHelper.EntityReferenceAccessor() {
            @Override
            public EntityReference prepareModelForJsonMergePatch(EntityReference model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(EntityReference model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of EntityReference class.
     */
    @Generated
    public EntityReference() {
    }

    /**
     * Get the self property: The location of the referenced entity.
     * 
     * @return the self value.
     */
    @Generated
    public String getSelf() {
        return this.self;
    }

    /**
     * Set the self property: The location of the referenced entity.
     * <p>Required when create the resource.</p>
     * 
     * @param self the self value to set.
     * @return the EntityReference object itself.
     */
    @Generated
    public EntityReference setSelf(String self) {
        this.self = self;
        this.updatedProperties.add("self");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("self", this.self);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("self")) {
            if (this.self == null) {
                jsonWriter.writeNullField("self");
            } else {
                jsonWriter.writeStringField("self", this.self);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityReference.
     */
    @Generated
    public static EntityReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityReference deserializedEntityReference = new EntityReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("self".equals(fieldName)) {
                    deserializedEntityReference.self = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityReference;
        });
    }
}
