// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.transcription.models;

import com.azure.ai.speechtotext.transcription.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Speaker Identification Properties.
 */
@Fluent
public final class DiarizationProperties implements JsonSerializable<DiarizationProperties> {
    /*
     * A value indicating whether speaker identification is enabled.
     */
    @Generated
    private boolean enabled;

    /*
     * A hint for the maximum number of speakers for diarization. Must be greater than 1 and less than 36.
     */
    @Generated
    private int maxSpeakers;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setDiarizationPropertiesAccessor(new JsonMergePatchHelper.DiarizationPropertiesAccessor() {
            @Override
            public DiarizationProperties prepareModelForJsonMergePatch(DiarizationProperties model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(DiarizationProperties model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of DiarizationProperties class.
     */
    @Generated
    public DiarizationProperties() {
    }

    /**
     * Get the enabled property: A value indicating whether speaker identification is enabled.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: A value indicating whether speaker identification is enabled.
     * <p>Required when create the resource.</p>
     * 
     * @param enabled the enabled value to set.
     * @return the DiarizationProperties object itself.
     */
    @Generated
    public DiarizationProperties setEnabled(boolean enabled) {
        this.enabled = enabled;
        this.updatedProperties.add("enabled");
        return this;
    }

    /**
     * Get the maxSpeakers property: A hint for the maximum number of speakers for diarization. Must be greater than 1
     * and less than 36.
     * 
     * @return the maxSpeakers value.
     */
    @Generated
    public int getMaxSpeakers() {
        return this.maxSpeakers;
    }

    /**
     * Set the maxSpeakers property: A hint for the maximum number of speakers for diarization. Must be greater than 1
     * and less than 36.
     * <p>Required when create the resource.</p>
     * 
     * @param maxSpeakers the maxSpeakers value to set.
     * @return the DiarizationProperties object itself.
     */
    @Generated
    public DiarizationProperties setMaxSpeakers(int maxSpeakers) {
        this.maxSpeakers = maxSpeakers;
        this.updatedProperties.add("maxSpeakers");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeBooleanField("enabled", this.enabled);
            jsonWriter.writeIntField("maxSpeakers", this.maxSpeakers);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("enabled")) {
            jsonWriter.writeBooleanField("enabled", this.enabled);
        }
        if (updatedProperties.contains("maxSpeakers")) {
            jsonWriter.writeIntField("maxSpeakers", this.maxSpeakers);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiarizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiarizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiarizationProperties.
     */
    @Generated
    public static DiarizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiarizationProperties deserializedDiarizationProperties = new DiarizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedDiarizationProperties.enabled = reader.getBoolean();
                } else if ("maxSpeakers".equals(fieldName)) {
                    deserializedDiarizationProperties.maxSpeakers = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiarizationProperties;
        });
    }
}
