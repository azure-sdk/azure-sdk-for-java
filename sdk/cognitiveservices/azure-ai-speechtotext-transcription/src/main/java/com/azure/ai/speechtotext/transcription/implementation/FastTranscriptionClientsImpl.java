// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.transcription.implementation;

import com.azure.ai.speechtotext.transcription.SpeechToTextServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FastTranscriptionClients.
 */
public final class FastTranscriptionClientsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FastTranscriptionClientsService service;

    /**
     * The service client containing this operation class.
     */
    private final SpeechToTextClientImpl client;

    /**
     * Initializes an instance of FastTranscriptionClientsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FastTranscriptionClientsImpl(SpeechToTextClientImpl client) {
        this.service = RestProxy.create(FastTranscriptionClientsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SpeechToTextServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SpeechToTextClientFastTranscriptionClients to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}/speechtotext")
    @ServiceInterface(name = "SpeechToTextClientFa")
    public interface FastTranscriptionClientsService {
        // @Multipart not supported by RestProxy
        @Post("/transcriptions:transcribe")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> transcribe(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData transcribeRequest,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/transcriptions:transcribe")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> transcribeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData transcribeRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Transcribes the provided audio stream.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     durationMilliseconds: int (Required)
     *     combinedPhrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             text: String (Required)
     *         }
     *     ]
     *     phrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             speaker: Integer (Optional)
     *             offsetMilliseconds: int (Required)
     *             durationMilliseconds: int (Required)
     *             text: String (Required)
     *             words (Optional): [
     *                  (Optional){
     *                     text: String (Required)
     *                     offsetMilliseconds: int (Required)
     *                     durationMilliseconds: int (Required)
     *                 }
     *             ]
     *             locale: String (Optional)
     *             confidence: double (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param transcribeRequest The transcribeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the transcribe operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> transcribeWithResponseAsync(BinaryData transcribeRequest,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.transcribe(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, transcribeRequest, requestOptions, context));
    }

    /**
     * Transcribes the provided audio stream.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     durationMilliseconds: int (Required)
     *     combinedPhrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             text: String (Required)
     *         }
     *     ]
     *     phrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             speaker: Integer (Optional)
     *             offsetMilliseconds: int (Required)
     *             durationMilliseconds: int (Required)
     *             text: String (Required)
     *             words (Optional): [
     *                  (Optional){
     *                     text: String (Required)
     *                     offsetMilliseconds: int (Required)
     *                     durationMilliseconds: int (Required)
     *                 }
     *             ]
     *             locale: String (Optional)
     *             confidence: double (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param transcribeRequest The transcribeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the transcribe operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> transcribeWithResponse(BinaryData transcribeRequest, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.transcribeSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, transcribeRequest, requestOptions, Context.NONE);
    }
}
