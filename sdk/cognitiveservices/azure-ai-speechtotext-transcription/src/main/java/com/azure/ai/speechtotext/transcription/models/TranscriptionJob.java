// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.transcription.models;

import com.azure.ai.speechtotext.transcription.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Transcription.
 */
@Fluent
public final class TranscriptionJob implements JsonSerializable<TranscriptionJob> {
    /*
     * TranscriptionLinks
     */
    @Generated
    private TranscriptionLinks links;

    /*
     * TranscriptionProperties
     */
    @Generated
    private TranscriptionProperties properties;

    /*
     * The id of this entity.
     */
    @Generated
    private String id;

    /*
     * The location of this entity.
     */
    @Generated
    private String self;

    /*
     * EntityReference
     */
    @Generated
    private EntityReference model;

    /*
     * EntityReference
     */
    @Generated
    private EntityReference dataset;

    /*
     * A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
     * This property will not be returned in a response.
     */
    @Generated
    private List<String> contents;

    /*
     * A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of
     * 5GB and a maximum number of 10000 blobs.
     * The maximum size for a blob is 2.5GB.
     * Container SAS should contain 'r' (read) and 'l' (list) permissions.
     * This property will not be returned in a response.
     */
    @Generated
    private String contentContainerUrl;

    /*
     * The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech
     * for which no language could be detected.
     */
    @Generated
    private String locale;

    /*
     * The display name of the object.
     */
    @Generated
    private String displayName;

    /*
     * The description of the object.
     */
    @Generated
    private String description;

    /*
     * The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
     * allowed value length is 256 characters and the count of allowed entries is 10.
     */
    @Generated
    private Map<String, String> customProperties;

    /*
     * The time-stamp when the current status was entered.
     * The time stamp is encoded as ISO 8601 date and time format
     * ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     */
    @Generated
    private OffsetDateTime lastActionDateTime;

    /*
     * The status of the object
     */
    @Generated
    private JobStatus status;

    /*
     * The time-stamp when the object was created.
     * The time stamp is encoded as ISO 8601 date and time format
     * ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTranscriptionJobAccessor(new JsonMergePatchHelper.TranscriptionJobAccessor() {
            @Override
            public TranscriptionJob prepareModelForJsonMergePatch(TranscriptionJob model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TranscriptionJob model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TranscriptionJob class.
     */
    @Generated
    public TranscriptionJob() {
    }

    /**
     * Get the links property: TranscriptionLinks.
     * 
     * @return the links value.
     */
    @Generated
    public TranscriptionLinks getLinks() {
        return this.links;
    }

    /**
     * Set the links property: TranscriptionLinks.
     * 
     * @param links the links value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setLinks(TranscriptionLinks links) {
        this.links = links;
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * Get the properties property: TranscriptionProperties.
     * 
     * @return the properties value.
     */
    @Generated
    public TranscriptionProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: TranscriptionProperties.
     * <p>Required when create the resource.</p>
     * 
     * @param properties the properties value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setProperties(TranscriptionProperties properties) {
        this.properties = properties;
        this.updatedProperties.add("properties");
        return this;
    }

    /**
     * Get the id property: The id of this entity.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the self property: The location of this entity.
     * 
     * @return the self value.
     */
    @Generated
    public String getSelf() {
        return this.self;
    }

    /**
     * Get the model property: EntityReference.
     * 
     * @return the model value.
     */
    @Generated
    public EntityReference getModel() {
        return this.model;
    }

    /**
     * Set the model property: EntityReference.
     * 
     * @param model the model value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setModel(EntityReference model) {
        this.model = model;
        this.updatedProperties.add("model");
        return this;
    }

    /**
     * Get the dataset property: EntityReference.
     * 
     * @return the dataset value.
     */
    @Generated
    public EntityReference getDataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: EntityReference.
     * 
     * @param dataset the dataset value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setDataset(EntityReference dataset) {
        this.dataset = dataset;
        this.updatedProperties.add("dataset");
        return this;
    }

    /**
     * Get the contents property: A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
     * This property will not be returned in a response.
     * 
     * @return the contents value.
     */
    @Generated
    public List<String> getContents() {
        return this.contents;
    }

    /**
     * Set the contents property: A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
     * This property will not be returned in a response.
     * 
     * @param contents the contents value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setContents(List<String> contents) {
        this.contents = contents;
        this.updatedProperties.add("contents");
        return this;
    }

    /**
     * Get the contentContainerUrl property: A URL for an Azure blob container that contains the audio files. A
     * container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
     * The maximum size for a blob is 2.5GB.
     * Container SAS should contain 'r' (read) and 'l' (list) permissions.
     * This property will not be returned in a response.
     * 
     * @return the contentContainerUrl value.
     */
    @Generated
    public String getContentContainerUrl() {
        return this.contentContainerUrl;
    }

    /**
     * Set the contentContainerUrl property: A URL for an Azure blob container that contains the audio files. A
     * container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
     * The maximum size for a blob is 2.5GB.
     * Container SAS should contain 'r' (read) and 'l' (list) permissions.
     * This property will not be returned in a response.
     * 
     * @param contentContainerUrl the contentContainerUrl value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setContentContainerUrl(String contentContainerUrl) {
        this.contentContainerUrl = contentContainerUrl;
        this.updatedProperties.add("contentContainerUrl");
        return this;
    }

    /**
     * Get the locale property: The locale of the contained data. If Language Identification is used, this locale is
     * used to transcribe speech for which no language could be detected.
     * 
     * @return the locale value.
     */
    @Generated
    public String getLocale() {
        return this.locale;
    }

    /**
     * Set the locale property: The locale of the contained data. If Language Identification is used, this locale is
     * used to transcribe speech for which no language could be detected.
     * <p>Required when create the resource.</p>
     * 
     * @param locale the locale value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setLocale(String locale) {
        this.locale = locale;
        this.updatedProperties.add("locale");
        return this;
    }

    /**
     * Get the displayName property: The display name of the object.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the object.
     * <p>Required when create the resource.</p>
     * 
     * @param displayName the displayName value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the description property: The description of the object.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the object.
     * 
     * @param description the description value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the customProperties property: The custom properties of this entity. The maximum allowed key length is 64
     * characters, the maximum
     * allowed value length is 256 characters and the count of allowed entries is 10.
     * 
     * @return the customProperties value.
     */
    @Generated
    public Map<String, String> getCustomProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: The custom properties of this entity. The maximum allowed key length is 64
     * characters, the maximum
     * allowed value length is 256 characters and the count of allowed entries is 10.
     * 
     * @param customProperties the customProperties value to set.
     * @return the TranscriptionJob object itself.
     */
    @Generated
    public TranscriptionJob setCustomProperties(Map<String, String> customProperties) {
        this.customProperties = customProperties;
        this.updatedProperties.add("customProperties");
        return this;
    }

    /**
     * Get the lastActionDateTime property: The time-stamp when the current status was entered.
     * The time stamp is encoded as ISO 8601 date and time format
     * ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     * 
     * @return the lastActionDateTime value.
     */
    @Generated
    public OffsetDateTime getLastActionDateTime() {
        return this.lastActionDateTime;
    }

    /**
     * Get the status property: The status of the object.
     * 
     * @return the status value.
     */
    @Generated
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: The time-stamp when the object was created.
     * The time stamp is encoded as ISO 8601 date and time format
     * ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("links", this.links);
            jsonWriter.writeJsonField("properties", this.properties);
            jsonWriter.writeJsonField("model", this.model);
            jsonWriter.writeJsonField("dataset", this.dataset);
            jsonWriter.writeArrayField("contentUrls", this.contents, (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("contentContainerUrl", this.contentContainerUrl);
            jsonWriter.writeStringField("locale", this.locale);
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeMapField("customProperties", this.customProperties,
                (writer, element) -> writer.writeString(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("links")) {
            if (this.links == null) {
                jsonWriter.writeNullField("links");
            } else {
                JsonMergePatchHelper.getTranscriptionLinksAccessor().prepareModelForJsonMergePatch(this.links, true);
                jsonWriter.writeJsonField("links", this.links);
                JsonMergePatchHelper.getTranscriptionLinksAccessor().prepareModelForJsonMergePatch(this.links, false);
            }
        }
        if (updatedProperties.contains("properties")) {
            if (this.properties == null) {
                jsonWriter.writeNullField("properties");
            } else {
                JsonMergePatchHelper.getTranscriptionPropertiesAccessor()
                    .prepareModelForJsonMergePatch(this.properties, true);
                jsonWriter.writeJsonField("properties", this.properties);
                JsonMergePatchHelper.getTranscriptionPropertiesAccessor()
                    .prepareModelForJsonMergePatch(this.properties, false);
            }
        }
        if (updatedProperties.contains("model")) {
            if (this.model == null) {
                jsonWriter.writeNullField("model");
            } else {
                JsonMergePatchHelper.getEntityReferenceAccessor().prepareModelForJsonMergePatch(this.model, true);
                jsonWriter.writeJsonField("model", this.model);
                JsonMergePatchHelper.getEntityReferenceAccessor().prepareModelForJsonMergePatch(this.model, false);
            }
        }
        if (updatedProperties.contains("dataset")) {
            if (this.dataset == null) {
                jsonWriter.writeNullField("dataset");
            } else {
                JsonMergePatchHelper.getEntityReferenceAccessor().prepareModelForJsonMergePatch(this.dataset, true);
                jsonWriter.writeJsonField("dataset", this.dataset);
                JsonMergePatchHelper.getEntityReferenceAccessor().prepareModelForJsonMergePatch(this.dataset, false);
            }
        }
        if (updatedProperties.contains("contents")) {
            if (this.contents == null) {
                jsonWriter.writeNullField("contentUrls");
            } else {
                jsonWriter.writeArrayField("contentUrls", this.contents,
                    (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("contentContainerUrl")) {
            if (this.contentContainerUrl == null) {
                jsonWriter.writeNullField("contentContainerUrl");
            } else {
                jsonWriter.writeStringField("contentContainerUrl", this.contentContainerUrl);
            }
        }
        if (updatedProperties.contains("locale")) {
            if (this.locale == null) {
                jsonWriter.writeNullField("locale");
            } else {
                jsonWriter.writeStringField("locale", this.locale);
            }
        }
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("customProperties")) {
            if (this.customProperties == null) {
                jsonWriter.writeNullField("customProperties");
            } else {
                jsonWriter.writeMapField("customProperties", this.customProperties, (writer, element) -> {
                    if (element != null) {
                        writer.writeString(element);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionJob.
     */
    @Generated
    public static TranscriptionJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TranscriptionJob deserializedTranscriptionJob = new TranscriptionJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTranscriptionJob.id = reader.getString();
                } else if ("self".equals(fieldName)) {
                    deserializedTranscriptionJob.self = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedTranscriptionJob.status = JobStatus.fromString(reader.getString());
                } else if ("links".equals(fieldName)) {
                    deserializedTranscriptionJob.links = TranscriptionLinks.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedTranscriptionJob.properties = TranscriptionProperties.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    deserializedTranscriptionJob.model = EntityReference.fromJson(reader);
                } else if ("dataset".equals(fieldName)) {
                    deserializedTranscriptionJob.dataset = EntityReference.fromJson(reader);
                } else if ("contentUrls".equals(fieldName)) {
                    List<String> contents = reader.readArray(reader1 -> reader1.getString());
                    deserializedTranscriptionJob.contents = contents;
                } else if ("contentContainerUrl".equals(fieldName)) {
                    deserializedTranscriptionJob.contentContainerUrl = reader.getString();
                } else if ("locale".equals(fieldName)) {
                    deserializedTranscriptionJob.locale = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTranscriptionJob.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTranscriptionJob.description = reader.getString();
                } else if ("customProperties".equals(fieldName)) {
                    Map<String, String> customProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedTranscriptionJob.customProperties = customProperties;
                } else if ("lastActionDateTime".equals(fieldName)) {
                    deserializedTranscriptionJob.lastActionDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTranscriptionJob.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTranscriptionJob;
        });
    }
}
