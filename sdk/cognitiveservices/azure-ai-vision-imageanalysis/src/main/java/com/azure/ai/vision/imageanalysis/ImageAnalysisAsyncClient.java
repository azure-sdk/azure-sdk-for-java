// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.vision.imageanalysis;

import com.azure.ai.vision.imageanalysis.implementation.ImageAnalysisClientImpl;
import com.azure.ai.vision.imageanalysis.models.ImageAnalysisResult;
import com.azure.ai.vision.imageanalysis.models.ImageUrl;
import com.azure.ai.vision.imageanalysis.models.SegmentationMode;
import com.azure.ai.vision.imageanalysis.models.VisualFeatures;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ImageAnalysisClient type. */
@ServiceClient(builder = ImageAnalysisClientBuilder.class, isAsync = true)
public final class ImageAnalysisAsyncClient {
    @Generated private final ImageAnalysisClientImpl serviceClient;

    /**
     * Initializes an instance of ImageAnalysisAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ImageAnalysisAsyncClient(ImageAnalysisClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops, People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>List&lt;Double&gt;</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive). In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: int (Required)
     *                         y: int (Required)
     *                         w: int (Required)
     *                         h: int (Required)
     *                     }
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: int (Required)
     *         width: int (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: int (Required)
     *                                 offset: int (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: int (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         modelVersion: String (Required)
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeFromStreamWithResponse(
            BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.analyzeFromStreamWithResponseAsync(imageContent, requestOptions);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops, People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>List&lt;Double&gt;</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive). In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: int (Required)
     *                         y: int (Required)
     *                         w: int (Required)
     *                         h: int (Required)
     *                     }
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: int (Required)
     *         width: int (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: int (Required)
     *                                 offset: int (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: int (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         modelVersion: String (Required)
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeFromUrlWithResponse(
            BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.analyzeFromUrlWithResponseAsync(imageContent, requestOptions);
    }

    /**
     * Segment the input image. An image stream of content type 'image/png' is returned, where the pixel values depend
     * on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting.
     * The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16
     * megapixels for modes: backgroundRemoval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param mode The type of segmentation to perform. Allowed values: "backgroundRemoval", "foregroundMatting".
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> segmentFromUrlWithResponse(
            String mode, BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.segmentFromUrlWithResponseAsync(mode, imageContent, requestOptions);
    }

    /**
     * Segment the input image. An image stream of content type 'image/png' is returned, where the pixel values depend
     * on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting.
     * The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16
     * megapixels for modes: backgroundRemoval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param mode The type of segmentation to perform. Allowed values: "backgroundRemoval", "foregroundMatting".
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> segmentFromStreamWithResponse(
            String mode, BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.segmentFromStreamWithResponseAsync(mode, imageContent, requestOptions);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContent The image to be analyzed.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be
     *     comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops,
     *     People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the
     *     response by default.
     * @param language The desired language for output generation. If this parameter is not specified, the default value
     *     is "en". See https://aka.ms/cv-languages for a list of supported languages.
     * @param genderNeutralCaption Boolean flag for enabling gender-neutral captioning for caption and denseCaptions
     *     features. If this parameter is not specified, the default value is "false".
     * @param smartCropsAspectRatios A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated
     *     by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive).
     *     Multiple values should be comma-separated. If this parameter is not specified, the service will return one
     *     crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).
     * @param modelName The name of the custom trained model. This parameter needs to be specified if the parameter
     *     "features" is not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysisResult> analyzeFromStream(
            BinaryData imageContent,
            List<VisualFeatures> visualFeatures,
            String language,
            Boolean genderNeutralCaption,
            List<Double> smartCropsAspectRatios,
            String modelName) {
        // Generated convenience method for analyzeFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (visualFeatures != null) {
            requestOptions.addQueryParam(
                    "features",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(visualFeatures, CollectionFormat.CSV),
                    false);
        }
        if (language != null) {
            requestOptions.addQueryParam("language", language, false);
        }
        if (genderNeutralCaption != null) {
            requestOptions.addQueryParam("gender-neutral-caption", String.valueOf(genderNeutralCaption), false);
        }
        if (smartCropsAspectRatios != null) {
            requestOptions.addQueryParam(
                    "smartcrops-aspect-ratios",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(smartCropsAspectRatios, CollectionFormat.CSV),
                    false);
        }
        if (modelName != null) {
            requestOptions.addQueryParam("model-name", modelName, false);
        }
        return analyzeFromStreamWithResponse(imageContent, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(ImageAnalysisResult.class));
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysisResult> analyzeFromStream(BinaryData imageContent) {
        // Generated convenience method for analyzeFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeFromStreamWithResponse(imageContent, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(ImageAnalysisResult.class));
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContent The image to be analyzed.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be
     *     comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops,
     *     People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the
     *     response by default.
     * @param language The desired language for output generation. If this parameter is not specified, the default value
     *     is "en". See https://aka.ms/cv-languages for a list of supported languages.
     * @param genderNeutralCaption Boolean flag for enabling gender-neutral captioning for caption and denseCaptions
     *     features. If this parameter is not specified, the default value is "false".
     * @param smartCropsAspectRatios A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated
     *     by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive).
     *     Multiple values should be comma-separated. If this parameter is not specified, the service will return one
     *     crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).
     * @param modelName The name of the custom trained model. This parameter needs to be specified if the parameter
     *     "features" is not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysisResult> analyzeFromUrl(
            ImageUrl imageContent,
            List<VisualFeatures> visualFeatures,
            String language,
            Boolean genderNeutralCaption,
            List<Double> smartCropsAspectRatios,
            String modelName) {
        // Generated convenience method for analyzeFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (visualFeatures != null) {
            requestOptions.addQueryParam(
                    "features",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(visualFeatures, CollectionFormat.CSV),
                    false);
        }
        if (language != null) {
            requestOptions.addQueryParam("language", language, false);
        }
        if (genderNeutralCaption != null) {
            requestOptions.addQueryParam("gender-neutral-caption", String.valueOf(genderNeutralCaption), false);
        }
        if (smartCropsAspectRatios != null) {
            requestOptions.addQueryParam(
                    "smartcrops-aspect-ratios",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(smartCropsAspectRatios, CollectionFormat.CSV),
                    false);
        }
        if (modelName != null) {
            requestOptions.addQueryParam("model-name", modelName, false);
        }
        return analyzeFromUrlWithResponse(BinaryData.fromObject(imageContent), requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(ImageAnalysisResult.class));
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysisResult> analyzeFromUrl(ImageUrl imageContent) {
        // Generated convenience method for analyzeFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeFromUrlWithResponse(BinaryData.fromObject(imageContent), requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(ImageAnalysisResult.class));
    }

    /**
     * Segment the input image. An image stream of content type 'image/png' is returned, where the pixel values depend
     * on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting.
     * The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16
     * megapixels for modes: backgroundRemoval.
     *
     * @param mode The type of segmentation to perform.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> segmentFromUrl(SegmentationMode mode, ImageUrl imageContent) {
        // Generated convenience method for segmentFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return segmentFromUrlWithResponse(mode.toString(), BinaryData.fromObject(imageContent), requestOptions)
                .flatMap(FluxUtil::toMono);
    }

    /**
     * Segment the input image. An image stream of content type 'image/png' is returned, where the pixel values depend
     * on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting.
     * The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16
     * megapixels for modes: backgroundRemoval.
     *
     * @param mode The type of segmentation to perform.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> segmentFromStream(SegmentationMode mode, BinaryData imageContent) {
        // Generated convenience method for segmentFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return segmentFromStreamWithResponse(mode.toString(), imageContent, requestOptions).flatMap(FluxUtil::toMono);
    }
}
