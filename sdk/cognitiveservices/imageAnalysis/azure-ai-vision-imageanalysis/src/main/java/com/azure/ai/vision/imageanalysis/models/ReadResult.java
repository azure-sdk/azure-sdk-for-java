// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The results of an Read operation. */
@Immutable
public final class ReadResult {
    /*
     * Concatenate string representation of all textual and visual elements in reading order.
     */
    @Generated
    @JsonProperty(value = "content")
    private String content;

    /*
     * A list of analyzed pages.
     */
    @Generated
    @JsonProperty(value = "pages")
    private List<DocumentPage> pages;

    /*
     * The method used to compute string offset and length, possible values include: 'textElements',
     * 'unicodeCodePoint', 'utf16CodeUnit' etc.
     */
    @Generated
    @JsonProperty(value = "stringIndexType")
    private String stringIndexType;

    /*
     * Extracted font styles.
     */
    @Generated
    @JsonProperty(value = "styles")
    private List<DocumentStyle> styles;

    /**
     * Creates an instance of ReadResult class.
     *
     * @param content the content value to set.
     * @param pages the pages value to set.
     * @param stringIndexType the stringIndexType value to set.
     * @param styles the styles value to set.
     */
    @Generated
    @JsonCreator
    private ReadResult(
            @JsonProperty(value = "content") String content,
            @JsonProperty(value = "pages") List<DocumentPage> pages,
            @JsonProperty(value = "stringIndexType") String stringIndexType,
            @JsonProperty(value = "styles") List<DocumentStyle> styles) {
        this.content = content;
        this.pages = pages;
        this.stringIndexType = stringIndexType;
        this.styles = styles;
    }

    /**
     * Get the content property: Concatenate string representation of all textual and visual elements in reading order.
     *
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the pages property: A list of analyzed pages.
     *
     * @return the pages value.
     */
    @Generated
    public List<DocumentPage> getPages() {
        return this.pages;
    }

    /**
     * Get the stringIndexType property: The method used to compute string offset and length, possible values include:
     * 'textElements', 'unicodeCodePoint', 'utf16CodeUnit' etc.
     *
     * @return the stringIndexType value.
     */
    @Generated
    public String getStringIndexType() {
        return this.stringIndexType;
    }

    /**
     * Get the styles property: Extracted font styles.
     *
     * @return the styles value.
     */
    @Generated
    public List<DocumentStyle> getStyles() {
        return this.styles;
    }
}
