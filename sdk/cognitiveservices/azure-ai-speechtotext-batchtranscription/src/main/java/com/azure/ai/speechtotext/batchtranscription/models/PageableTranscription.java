// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.batchtranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Page of entities.
 */
@Immutable
public final class PageableTranscription implements JsonSerializable<PageableTranscription> {
    /*
     * A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
     * 
     * When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped
     * in the results.
     * It's recommended to build a list on the client and delete after the fetching of the complete list.
     */
    @Generated
    private List<Transcription> values;

    /*
     * A link to the next set of paginated results if there are more entities available; otherwise null.
     */
    @Generated
    private String nextLink;

    /**
     * Creates an instance of PageableTranscription class.
     */
    @Generated
    private PageableTranscription() {
    }

    /**
     * Get the values property: A list of entities limited by either the passed query parameters 'skip' and 'top' or
     * their default values.
     * 
     * When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped
     * in the results.
     * It's recommended to build a list on the client and delete after the fetching of the complete list.
     * 
     * @return the values value.
     */
    @Generated
    public List<Transcription> getValues() {
        return this.values;
    }

    /**
     * Get the nextLink property: A link to the next set of paginated results if there are more entities available;
     * otherwise null.
     * 
     * @return the nextLink value.
     */
    @Generated
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageableTranscription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageableTranscription if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PageableTranscription.
     */
    @Generated
    public static PageableTranscription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PageableTranscription deserializedPageableTranscription = new PageableTranscription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("values".equals(fieldName)) {
                    List<Transcription> values = reader.readArray(reader1 -> Transcription.fromJson(reader1));
                    deserializedPageableTranscription.values = values;
                } else if ("@nextLink".equals(fieldName)) {
                    deserializedPageableTranscription.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPageableTranscription;
        });
    }
}
