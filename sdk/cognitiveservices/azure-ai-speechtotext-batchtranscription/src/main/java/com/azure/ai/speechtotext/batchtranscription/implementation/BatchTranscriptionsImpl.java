// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.batchtranscription.implementation;

import com.azure.ai.speechtotext.batchtranscription.SpeechToTextServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BatchTranscriptions.
 */
public final class BatchTranscriptionsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BatchTranscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final SpeechToTextClientImpl client;

    /**
     * Initializes an instance of BatchTranscriptionsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BatchTranscriptionsImpl(SpeechToTextClientImpl client) {
        this.service = RestProxy.create(BatchTranscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SpeechToTextServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SpeechToTextClientBatchTranscriptions to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}/speechtotext")
    @ServiceInterface(name = "SpeechToTextClientBa")
    public interface BatchTranscriptionsService {
        @Post("/transcriptions:submit")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> submitTranscription(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData transcription,
            RequestOptions requestOptions, Context context);

        @Post("/transcriptions:submit")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> submitTranscriptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData transcription,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranscriptions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranscriptionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranscriptionFiles(@HostParam("endpoint") String endpoint,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranscriptionFilesSync(@HostParam("endpoint") String endpoint,
            @PathParam("id") String id, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranscription(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranscriptionSync(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Patch("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> patchTranscription(@HostParam("endpoint") String endpoint,
            @PathParam("id") String id, @HeaderParam("content-type") String contentType,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData transcriptionUpdate, RequestOptions requestOptions,
            Context context);

        @Patch("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> patchTranscriptionSync(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @HeaderParam("content-type") String contentType, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData transcriptionUpdate,
            RequestOptions requestOptions, Context context);

        @Delete("/transcriptions/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTranscription(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);

        @Delete("/transcriptions/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTranscriptionSync(@HostParam("endpoint") String endpoint, @PathParam("id") String id,
            @QueryParam("api-version") String apiVersion, RequestOptions requestOptions, Context context);
    }

    /**
     * Submits a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param transcription Transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitTranscriptionWithResponseAsync(BinaryData transcription,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.submitTranscription(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, transcription, requestOptions, context));
    }

    /**
     * Submits a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param transcription Transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitTranscriptionWithResponse(BinaryData transcription,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.submitTranscriptionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, transcription, requestOptions, Context.NONE);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be included after
     * skipping.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>A filtering expression for selecting a subset of the available
     * transcriptions.
     * - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
     * - Operators:
     * - eq, ne are supported for all properties.
     * - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
     * - and, or, not are supported.
     * - Example:
     * filter=createdDateTime gt 2022-02-01T11:00:00Z</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             links (Optional): {
     *                 files: String (Optional)
     *             }
     *             properties (Required): {
     *                 wordLevelTimestampsEnabled: Boolean (Optional)
     *                 displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *                 durationMilliseconds: Integer (Optional)
     *                 channels (Optional): [
     *                     int (Optional)
     *                 ]
     *                 destinationContainerUrl: String (Optional)
     *                 punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *                 profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *                 timeToLiveHours: int (Required)
     *                 error (Optional): {
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                 }
     *                 diarization (Optional): {
     *                     enabled: boolean (Required)
     *                     maxSpeakers: int (Required)
     *                 }
     *                 languageIdentification (Optional): {
     *                     mode: String(Continuous/Single) (Optional)
     *                     candidateLocales (Required): [
     *                         String (Required)
     *                     ]
     *                     speechModelMapping (Optional): {
     *                         String (Required): {
     *                             self: String (Required)
     *                         }
     *                     }
     *                 }
     *             }
     *             self: String (Optional)
     *             model (Optional): (recursive schema, see model above)
     *             dataset (Optional): (recursive schema, see dataset above)
     *             contentUrls (Optional): [
     *                 String (Optional)
     *             ]
     *             contentContainerUrl: String (Optional)
     *             locale: String (Required)
     *             displayName: String (Required)
     *             description: String (Optional)
     *             customProperties (Optional): {
     *                 String: String (Required)
     *             }
     *             lastActionDateTime: OffsetDateTime (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranscriptionsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTranscriptions(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be included after
     * skipping.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>A filtering expression for selecting a subset of the available
     * transcriptions.
     * - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
     * - Operators:
     * - eq, ne are supported for all properties.
     * - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
     * - and, or, not are supported.
     * - Example:
     * filter=createdDateTime gt 2022-02-01T11:00:00Z</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             links (Optional): {
     *                 files: String (Optional)
     *             }
     *             properties (Required): {
     *                 wordLevelTimestampsEnabled: Boolean (Optional)
     *                 displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *                 durationMilliseconds: Integer (Optional)
     *                 channels (Optional): [
     *                     int (Optional)
     *                 ]
     *                 destinationContainerUrl: String (Optional)
     *                 punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *                 profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *                 timeToLiveHours: int (Required)
     *                 error (Optional): {
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                 }
     *                 diarization (Optional): {
     *                     enabled: boolean (Required)
     *                     maxSpeakers: int (Required)
     *                 }
     *                 languageIdentification (Optional): {
     *                     mode: String(Continuous/Single) (Optional)
     *                     candidateLocales (Required): [
     *                         String (Required)
     *                     ]
     *                     speechModelMapping (Optional): {
     *                         String (Required): {
     *                             self: String (Required)
     *                         }
     *                     }
     *                 }
     *             }
     *             self: String (Optional)
     *             model (Optional): (recursive schema, see model above)
     *             dataset (Optional): (recursive schema, see dataset above)
     *             contentUrls (Optional): [
     *                 String (Optional)
     *             ]
     *             contentContainerUrl: String (Optional)
     *             locale: String (Required)
     *             displayName: String (Required)
     *             description: String (Optional)
     *             customProperties (Optional): {
     *                 String: String (Required)
     *             }
     *             lastActionDateTime: OffsetDateTime (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTranscriptionsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcription files that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcription files that will be included after
     * skipping.</td></tr>
     * <tr><td>sasLifetimeMinutes</td><td>Integer</td><td>No</td><td>This parameter defines the duration in minutes for
     * which an SAS url should be valid.
     * The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions
     * without a destinationContainerUrl. For speech resources
     * that don't have BYOS enabled, the default SAS validity duration is 12 hours.
     * For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an
     * SAS token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             createdDateTime: OffsetDateTime (Required)
     *             kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *             links (Required): {
     *                 contentUrl: String (Required)
     *             }
     *             name: String (Required)
     *             properties (Required): {
     *                 durationMilliseconds: int (Required)
     *                 size: int (Required)
     *             }
     *             self: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranscriptionFilesWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTranscriptionFiles(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcription files that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcription files that will be included after
     * skipping.</td></tr>
     * <tr><td>sasLifetimeMinutes</td><td>Integer</td><td>No</td><td>This parameter defines the duration in minutes for
     * which an SAS url should be valid.
     * The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions
     * without a destinationContainerUrl. For speech resources
     * that don't have BYOS enabled, the default SAS validity duration is 12 hours.
     * For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an
     * SAS token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             createdDateTime: OffsetDateTime (Required)
     *             kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *             links (Required): {
     *                 contentUrl: String (Required)
     *             }
     *             name: String (Required)
     *             properties (Required): {
     *                 durationMilliseconds: int (Required)
     *                 size: int (Required)
     *             }
     *             self: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionFilesWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTranscriptionFilesSync(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranscriptionWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTranscription(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTranscriptionSync(this.client.getEndpoint(), id, this.client.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Updates the mutable details of the transcription identified by its ID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param contentType request content type. Allowed values: "application/json", "application/merge-patch+json".
     * @param transcriptionUpdate Transcription Update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> patchTranscriptionWithResponseAsync(String id, String contentType,
        BinaryData transcriptionUpdate, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.patchTranscription(this.client.getEndpoint(), id, contentType,
            this.client.getServiceVersion().getVersion(), accept, transcriptionUpdate, requestOptions, context));
    }

    /**
     * Updates the mutable details of the transcription identified by its ID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param contentType request content type. Allowed values: "application/json", "application/merge-patch+json".
     * @param transcriptionUpdate Transcription Update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> patchTranscriptionWithResponse(String id, String contentType,
        BinaryData transcriptionUpdate, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.patchTranscriptionSync(this.client.getEndpoint(), id, contentType,
            this.client.getServiceVersion().getVersion(), accept, transcriptionUpdate, requestOptions, Context.NONE);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTranscriptionWithResponseAsync(String id, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.deleteTranscription(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), requestOptions, context));
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return service.deleteTranscriptionSync(this.client.getEndpoint(), id,
            this.client.getServiceVersion().getVersion(), requestOptions, Context.NONE);
    }
}
