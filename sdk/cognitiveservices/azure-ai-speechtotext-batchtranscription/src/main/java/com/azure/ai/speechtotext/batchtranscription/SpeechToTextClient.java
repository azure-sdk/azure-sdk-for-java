// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speechtotext.batchtranscription;

import com.azure.ai.speechtotext.batchtranscription.implementation.BatchTranscriptionsImpl;
import com.azure.ai.speechtotext.batchtranscription.models.PageableFile;
import com.azure.ai.speechtotext.batchtranscription.models.PageableTranscription;
import com.azure.ai.speechtotext.batchtranscription.models.Transcription;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous SpeechToTextClient type.
 */
@ServiceClient(builder = SpeechToTextClientBuilder.class)
public final class SpeechToTextClient {
    @Generated
    private final BatchTranscriptionsImpl serviceClient;

    /**
     * Initializes an instance of SpeechToTextClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SpeechToTextClient(BatchTranscriptionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Submits a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param transcription Transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitTranscriptionWithResponse(BinaryData transcription,
        RequestOptions requestOptions) {
        return this.serviceClient.submitTranscriptionWithResponse(transcription, requestOptions);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcriptions that will be included after
     * skipping.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>A filtering expression for selecting a subset of the available
     * transcriptions.
     * - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
     * - Operators:
     * - eq, ne are supported for all properties.
     * - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
     * - and, or, not are supported.
     * - Example:
     * filter=createdDateTime gt 2022-02-01T11:00:00Z</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             links (Optional): {
     *                 files: String (Optional)
     *             }
     *             properties (Required): {
     *                 wordLevelTimestampsEnabled: Boolean (Optional)
     *                 displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *                 durationMilliseconds: Integer (Optional)
     *                 channels (Optional): [
     *                     int (Optional)
     *                 ]
     *                 destinationContainerUrl: String (Optional)
     *                 punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *                 profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *                 timeToLiveHours: int (Required)
     *                 error (Optional): {
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                 }
     *                 diarization (Optional): {
     *                     enabled: boolean (Required)
     *                     maxSpeakers: int (Required)
     *                 }
     *                 languageIdentification (Optional): {
     *                     mode: String(Continuous/Single) (Optional)
     *                     candidateLocales (Required): [
     *                         String (Required)
     *                     ]
     *                     speechModelMapping (Optional): {
     *                         String (Required): {
     *                             self: String (Required)
     *                         }
     *                     }
     *                 }
     *             }
     *             self: String (Optional)
     *             model (Optional): (recursive schema, see model above)
     *             dataset (Optional): (recursive schema, see dataset above)
     *             contentUrls (Optional): [
     *                 String (Optional)
     *             ]
     *             contentContainerUrl: String (Optional)
     *             locale: String (Required)
     *             displayName: String (Required)
     *             description: String (Optional)
     *             customProperties (Optional): {
     *                 String: String (Required)
     *             }
     *             lastActionDateTime: OffsetDateTime (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getTranscriptionsWithResponse(requestOptions);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Number of transcription files that will be skipped.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>Number of transcription files that will be included after
     * skipping.</td></tr>
     * <tr><td>sasLifetimeMinutes</td><td>Integer</td><td>No</td><td>This parameter defines the duration in minutes for
     * which an SAS url should be valid.
     * The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions
     * without a destinationContainerUrl. For speech resources
     * that don't have BYOS enabled, the default SAS validity duration is 12 hours.
     * For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an
     * SAS token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             createdDateTime: OffsetDateTime (Required)
     *             kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *             links (Required): {
     *                 contentUrl: String (Required)
     *             }
     *             name: String (Required)
     *             properties (Required): {
     *                 durationMilliseconds: int (Required)
     *                 size: int (Required)
     *             }
     *             self: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionFilesWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getTranscriptionFilesWithResponse(id, requestOptions);
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getTranscriptionWithResponse(id, requestOptions);
    }

    /**
     * Updates the mutable details of the transcription identified by its ID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     self: String (Optional)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The identifier of the transcription.
     * @param contentType request content type. Allowed values: "application/json", "application/merge-patch+json".
     * @param transcriptionUpdate Transcription Update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> patchTranscriptionWithResponse(String id, String contentType,
        BinaryData transcriptionUpdate, RequestOptions requestOptions) {
        // Operation 'patchTranscription' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.patchTranscriptionWithResponse(id, contentType, transcriptionUpdate, requestOptions);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The identifier of the transcription.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteTranscriptionWithResponse(id, requestOptions);
    }

    /**
     * Submits a new transcription job.
     * 
     * @param transcription Transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return transcription.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Transcription submitTranscription(Transcription transcription) {
        // Generated convenience method for submitTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return submitTranscriptionWithResponse(BinaryData.fromObject(transcription), requestOptions).getValue()
            .toObject(Transcription.class);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * 
     * @param skip Number of transcriptions that will be skipped.
     * @param top Number of transcriptions that will be included after skipping.
     * @param filter A filtering expression for selecting a subset of the available transcriptions.
     * - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
     * - Operators:
     * - eq, ne are supported for all properties.
     * - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
     * - and, or, not are supported.
     * - Example:
     * filter=createdDateTime gt 2022-02-01T11:00:00Z.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of transcriptions for the authenticated subscription.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableTranscription getTranscriptions(Integer skip, Integer top, String filter) {
        // Generated convenience method for getTranscriptionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return getTranscriptionsWithResponse(requestOptions).getValue().toObject(PageableTranscription.class);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of transcriptions for the authenticated subscription.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableTranscription getTranscriptions() {
        // Generated convenience method for getTranscriptionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTranscriptionsWithResponse(requestOptions).getValue().toObject(PageableTranscription.class);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * 
     * @param id The identifier of the transcription.
     * @param skip Number of transcription files that will be skipped.
     * @param top Number of transcription files that will be included after skipping.
     * @param sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.
     * The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions
     * without a destinationContainerUrl. For speech resources
     * that don't have BYOS enabled, the default SAS validity duration is 12 hours.
     * For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an
     * SAS token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the files of the transcription identified by the given ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableFile getTranscriptionFiles(String id, Integer skip, Integer top, Integer sasLifetimeMinutes) {
        // Generated convenience method for getTranscriptionFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (sasLifetimeMinutes != null) {
            requestOptions.addQueryParam("sasLifetimeMinutes", String.valueOf(sasLifetimeMinutes), false);
        }
        return getTranscriptionFilesWithResponse(id, requestOptions).getValue().toObject(PageableFile.class);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * 
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the files of the transcription identified by the given ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableFile getTranscriptionFiles(String id) {
        // Generated convenience method for getTranscriptionFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTranscriptionFilesWithResponse(id, requestOptions).getValue().toObject(PageableFile.class);
    }

    /**
     * Gets the transcription identified by the given ID.
     * 
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transcription identified by the given ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Transcription getTranscription(String id) {
        // Generated convenience method for getTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTranscriptionWithResponse(id, requestOptions).getValue().toObject(Transcription.class);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTranscription(String id) {
        // Generated convenience method for deleteTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTranscriptionWithResponse(id, requestOptions).getValue();
    }
}
