// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cognitiveservices.fluent.RaiBlocklistItemOperationsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RaiBlocklistItemOperationsClient. */
public final class RaiBlocklistItemOperationsClientImpl implements RaiBlocklistItemOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final RaiBlocklistItemOperationsService service;

    /** The service client containing this operation class. */
    private final CognitiveServicesManagementClientImpl client;

    /**
     * Initializes an instance of RaiBlocklistItemOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RaiBlocklistItemOperationsClientImpl(CognitiveServicesManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    RaiBlocklistItemOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CognitiveServicesManagementClientRaiBlocklistItemOperations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CognitiveServicesMan")
    public interface RaiBlocklistItemOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RaiBlocklistItemInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("raiBlocklistName") String raiBlocklistName,
            @PathParam("raiBlocklistItemName") String raiBlocklistItemName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RaiBlocklistItemInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("raiBlocklistName") String raiBlocklistName,
            @PathParam("raiBlocklistItemName") String raiBlocklistItemName,
            @BodyParam("application/json") RaiBlocklistItemInner raiBlocklistItem,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("raiBlocklistName") String raiBlocklistName,
            @PathParam("raiBlocklistItemName") String raiBlocklistItemName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist Item associated with the custom blocklist along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiBlocklistItemInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            accountName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            raiBlocklistName,
                            raiBlocklistItemName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist Item associated with the custom blocklist along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiBlocklistItemInner>> getWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceGroupName,
                accountName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                raiBlocklistName,
                raiBlocklistItemName,
                accept,
                context);
    }

    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist Item associated with the custom blocklist on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiBlocklistItemInner> getAsync(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        return getWithResponseAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist Item associated with the custom blocklist along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RaiBlocklistItemInner> getWithResponse(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context)
            .block();
    }

    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist Item associated with the custom blocklist.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiBlocklistItemInner get(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        return getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, Context.NONE)
            .getValue();
    }

    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cognitive Services RaiBlocklist Item along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiBlocklistItemInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        RaiBlocklistItemInner raiBlocklistItem) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        if (raiBlocklistItem == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItem is required and cannot be null."));
        } else {
            raiBlocklistItem.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            accountName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            raiBlocklistName,
                            raiBlocklistItemName,
                            raiBlocklistItem,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cognitive Services RaiBlocklist Item along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiBlocklistItemInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        RaiBlocklistItemInner raiBlocklistItem,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        if (raiBlocklistItem == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItem is required and cannot be null."));
        } else {
            raiBlocklistItem.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                resourceGroupName,
                accountName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                raiBlocklistName,
                raiBlocklistItemName,
                raiBlocklistItem,
                accept,
                context);
    }

    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cognitive Services RaiBlocklist Item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiBlocklistItemInner> createOrUpdateAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        RaiBlocklistItemInner raiBlocklistItem) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, raiBlocklistItem)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cognitive Services RaiBlocklist Item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RaiBlocklistItemInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        RaiBlocklistItemInner raiBlocklistItem,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, raiBlocklistItem, context)
            .block();
    }

    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cognitive Services RaiBlocklist Item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiBlocklistItemInner createOrUpdate(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        RaiBlocklistItemInner raiBlocklistItem) {
        return createOrUpdateWithResponse(
                resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, raiBlocklistItem, Context.NONE)
            .getValue();
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            accountName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            raiBlocklistName,
                            raiBlocklistItemName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (raiBlocklistItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                accountName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                raiBlocklistName,
                raiBlocklistItemName,
                accept,
                context);
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        return this
            .beginDeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName)
            .getSyncPoller();
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        return this
            .beginDeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        return beginDeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        deleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName).block();
    }

    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account.
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        deleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context).block();
    }
}
