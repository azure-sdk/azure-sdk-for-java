// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties to EncryptionScope.
 */
@Fluent
public final class EncryptionScopeProperties extends Encryption {
    /*
     * Gets the status of the resource at the time the operation was called.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private EncryptionScopeProvisioningState provisioningState;

    /*
     * The encryptionScope state.
     */
    @JsonProperty(value = "state")
    private EncryptionScopeState state;

    /**
     * Creates an instance of EncryptionScopeProperties class.
     */
    public EncryptionScopeProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the resource at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public EncryptionScopeProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the state property: The encryptionScope state.
     * 
     * @return the state value.
     */
    public EncryptionScopeState state() {
        return this.state;
    }

    /**
     * Set the state property: The encryptionScope state.
     * 
     * @param state the state value to set.
     * @return the EncryptionScopeProperties object itself.
     */
    public EncryptionScopeProperties withState(EncryptionScopeState state) {
        this.state = state;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionScopeProperties withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        super.withKeyVaultProperties(keyVaultProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionScopeProperties withKeySource(KeySource keySource) {
        super.withKeySource(keySource);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
