// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Cognitive Services Rai Monitor Config.
 */
@Fluent
public final class RaiMonitorConfig {
    /*
     * The storage resource Id.
     */
    @JsonProperty(value = "adxStorageResourceId")
    private String adxStorageResourceId;

    /*
     * The identity client Id to access the storage.
     */
    @JsonProperty(value = "identityClientId")
    private String identityClientId;

    /**
     * Creates an instance of RaiMonitorConfig class.
     */
    public RaiMonitorConfig() {
    }

    /**
     * Get the adxStorageResourceId property: The storage resource Id.
     * 
     * @return the adxStorageResourceId value.
     */
    public String adxStorageResourceId() {
        return this.adxStorageResourceId;
    }

    /**
     * Set the adxStorageResourceId property: The storage resource Id.
     * 
     * @param adxStorageResourceId the adxStorageResourceId value to set.
     * @return the RaiMonitorConfig object itself.
     */
    public RaiMonitorConfig withAdxStorageResourceId(String adxStorageResourceId) {
        this.adxStorageResourceId = adxStorageResourceId;
        return this;
    }

    /**
     * Get the identityClientId property: The identity client Id to access the storage.
     * 
     * @return the identityClientId value.
     */
    public String identityClientId() {
        return this.identityClientId;
    }

    /**
     * Set the identityClientId property: The identity client Id to access the storage.
     * 
     * @param identityClientId the identityClientId value to set.
     * @return the RaiMonitorConfig object itself.
     */
    public RaiMonitorConfig withIdentityClientId(String identityClientId) {
        this.identityClientId = identityClientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
