// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.RaiBlocklistItemOperationsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItem;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemOperations;

public final class RaiBlocklistItemOperationsImpl implements RaiBlocklistItemOperations {
    private static final ClientLogger LOGGER = new ClientLogger(RaiBlocklistItemOperationsImpl.class);

    private final RaiBlocklistItemOperationsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public RaiBlocklistItemOperationsImpl(
        RaiBlocklistItemOperationsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RaiBlocklistItem> getWithResponse(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        Response<RaiBlocklistItemInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RaiBlocklistItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiBlocklistItem get(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        RaiBlocklistItemInner inner =
            this.serviceClient().get(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName);
        if (inner != null) {
            return new RaiBlocklistItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String accountName, String raiBlocklistName, String raiBlocklistItemName) {
        this.serviceClient().delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName);
    }

    public void delete(
        String resourceGroupName,
        String accountName,
        String raiBlocklistName,
        String raiBlocklistItemName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    public RaiBlocklistItem getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = Utils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = Utils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, Context.NONE)
            .getValue();
    }

    public Response<RaiBlocklistItem> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = Utils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = Utils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = Utils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = Utils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        this.delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = Utils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = Utils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        this.delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    private RaiBlocklistItemOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }

    public RaiBlocklistItemImpl define(String name) {
        return new RaiBlocklistItemImpl(name, this.manager());
    }
}
