// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of AgentPool.
 */
public interface AgentPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the extendedLocation property: Extended location pointing to the underlying infrastructure.
     * 
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the osType property: The particular KubernetesVersion Image OS Type (Linux, Windows).
     * 
     * @return the osType value.
     */
    OsType osType();

    /**
     * Gets the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is
     * Linux. The default is Windows2019 when OSType is Windows.
     * 
     * @return the osSku value.
     */
    Ossku osSku();

    /**
     * Gets the nodeLabels property: The node labels to be persisted across all nodes in agent pool.
     * 
     * @return the nodeLabels value.
     */
    Map<String, String> nodeLabels();

    /**
     * Gets the nodeTaints property: Taints added to new nodes during node pool create and scale. For example,
     * key=value:NoSchedule.
     * 
     * @return the nodeTaints value.
     */
    List<String> nodeTaints();

    /**
     * Gets the maxCount property: The maximum number of nodes for auto-scaling.
     * 
     * @return the maxCount value.
     */
    Integer maxCount();

    /**
     * Gets the minCount property: The minimum number of nodes for auto-scaling.
     * 
     * @return the minCount value.
     */
    Integer minCount();

    /**
     * Gets the enableAutoScaling property: Whether to enable auto-scaler. Default value is false.
     * 
     * @return the enableAutoScaling value.
     */
    Boolean enableAutoScaling();

    /**
     * Gets the maxPods property: The maximum number of pods that can run on a node.
     * 
     * @return the maxPods value.
     */
    Integer maxPods();

    /**
     * Gets the count property: Number of nodes in the agent pool. The default value is 1.
     * 
     * @return the count value.
     */
    Integer count();

    /**
     * Gets the vmSize property: The VM sku size of the agent pool node VMs.
     * 
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * Gets the kubernetesVersion property: Version of Kubernetes in use by the agent pool. This is inherited from the
     * kubernetesVersion of the provisioned cluster.
     * 
     * @return the kubernetesVersion value.
     */
    String kubernetesVersion();

    /**
     * Gets the provisioningState property: The status of the latest long running operation for the agent pool.
     * 
     * @return the provisioningState value.
     */
    ResourceProvisioningState provisioningState();

    /**
     * Gets the status property: The observed status of the agent pool.
     * 
     * @return the status value.
     */
    AgentPoolProvisioningStatusStatus status();

    /**
     * Gets the inner com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner object.
     * 
     * @return the inner object.
     */
    AgentPoolInner innerModel();

    /**
     * The entirety of the AgentPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }

    /**
     * The AgentPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the AgentPool definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the AgentPool definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies resourceUri.
             * 
             * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceUri(String resourceUri);
        }

        /**
         * The stage of the AgentPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithExtendedLocation, DefinitionStages.WithOsType, DefinitionStages.WithOsSku,
            DefinitionStages.WithNodeLabels, DefinitionStages.WithNodeTaints, DefinitionStages.WithMaxCount,
            DefinitionStages.WithMinCount, DefinitionStages.WithEnableAutoScaling, DefinitionStages.WithMaxPods,
            DefinitionStages.WithCount, DefinitionStages.WithVmSize, DefinitionStages.WithStatus {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            AgentPool create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AgentPool create(Context context);
        }

        /**
         * The stage of the AgentPool definition allowing to specify extendedLocation.
         */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: Extended location pointing to the underlying infrastructure.
             * 
             * @param extendedLocation Extended location pointing to the underlying infrastructure.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(ExtendedLocation extendedLocation);
        }

        /**
         * The stage of the AgentPool definition allowing to specify osType.
         */
        interface WithOsType {
            /**
             * Specifies the osType property: The particular KubernetesVersion Image OS Type (Linux, Windows).
             * 
             * @param osType The particular KubernetesVersion Image OS Type (Linux, Windows).
             * @return the next definition stage.
             */
            WithCreate withOsType(OsType osType);
        }

        /**
         * The stage of the AgentPool definition allowing to specify osSku.
         */
        interface WithOsSku {
            /**
             * Specifies the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
             * OSType is Linux. The default is Windows2019 when OSType is Windows..
             * 
             * @param osSku Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux.
             * The default is Windows2019 when OSType is Windows.
             * @return the next definition stage.
             */
            WithCreate withOsSku(Ossku osSku);
        }

        /**
         * The stage of the AgentPool definition allowing to specify nodeLabels.
         */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: The node labels to be persisted across all nodes in agent pool..
             * 
             * @param nodeLabels The node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            WithCreate withNodeLabels(Map<String, String> nodeLabels);
        }

        /**
         * The stage of the AgentPool definition allowing to specify nodeTaints.
         */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: Taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             * 
             * @param nodeTaints Taints added to new nodes during node pool create and scale. For example,
             * key=value:NoSchedule.
             * @return the next definition stage.
             */
            WithCreate withNodeTaints(List<String> nodeTaints);
        }

        /**
         * The stage of the AgentPool definition allowing to specify maxCount.
         */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: The maximum number of nodes for auto-scaling.
             * 
             * @param maxCount The maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMaxCount(Integer maxCount);
        }

        /**
         * The stage of the AgentPool definition allowing to specify minCount.
         */
        interface WithMinCount {
            /**
             * Specifies the minCount property: The minimum number of nodes for auto-scaling.
             * 
             * @param minCount The minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMinCount(Integer minCount);
        }

        /**
         * The stage of the AgentPool definition allowing to specify enableAutoScaling.
         */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler. Default value is false.
             * 
             * @param enableAutoScaling Whether to enable auto-scaler. Default value is false.
             * @return the next definition stage.
             */
            WithCreate withEnableAutoScaling(Boolean enableAutoScaling);
        }

        /**
         * The stage of the AgentPool definition allowing to specify maxPods.
         */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: The maximum number of pods that can run on a node..
             * 
             * @param maxPods The maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            WithCreate withMaxPods(Integer maxPods);
        }

        /**
         * The stage of the AgentPool definition allowing to specify count.
         */
        interface WithCount {
            /**
             * Specifies the count property: Number of nodes in the agent pool. The default value is 1..
             * 
             * @param count Number of nodes in the agent pool. The default value is 1.
             * @return the next definition stage.
             */
            WithCreate withCount(Integer count);
        }

        /**
         * The stage of the AgentPool definition allowing to specify vmSize.
         */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: The VM sku size of the agent pool node VMs..
             * 
             * @param vmSize The VM sku size of the agent pool node VMs.
             * @return the next definition stage.
             */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the AgentPool definition allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The observed status of the agent pool..
             * 
             * @param status The observed status of the agent pool.
             * @return the next definition stage.
             */
            WithCreate withStatus(AgentPoolProvisioningStatusStatus status);
        }
    }

    /**
     * Begins update for the AgentPool resource.
     * 
     * @return the stage of resource update.
     */
    AgentPool.Update update();

    /**
     * The template for AgentPool update.
     */
    interface Update extends UpdateStages.WithExtendedLocation, UpdateStages.WithOsType, UpdateStages.WithOsSku,
        UpdateStages.WithNodeLabels, UpdateStages.WithNodeTaints, UpdateStages.WithMaxCount, UpdateStages.WithMinCount,
        UpdateStages.WithEnableAutoScaling, UpdateStages.WithMaxPods, UpdateStages.WithCount, UpdateStages.WithVmSize,
        UpdateStages.WithStatus {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        AgentPool apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AgentPool apply(Context context);
    }

    /**
     * The AgentPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the AgentPool update allowing to specify extendedLocation.
         */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: Extended location pointing to the underlying infrastructure.
             * 
             * @param extendedLocation Extended location pointing to the underlying infrastructure.
             * @return the next definition stage.
             */
            Update withExtendedLocation(ExtendedLocation extendedLocation);
        }

        /**
         * The stage of the AgentPool update allowing to specify osType.
         */
        interface WithOsType {
            /**
             * Specifies the osType property: The particular KubernetesVersion Image OS Type (Linux, Windows).
             * 
             * @param osType The particular KubernetesVersion Image OS Type (Linux, Windows).
             * @return the next definition stage.
             */
            Update withOsType(OsType osType);
        }

        /**
         * The stage of the AgentPool update allowing to specify osSku.
         */
        interface WithOsSku {
            /**
             * Specifies the osSku property: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
             * OSType is Linux. The default is Windows2019 when OSType is Windows..
             * 
             * @param osSku Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux.
             * The default is Windows2019 when OSType is Windows.
             * @return the next definition stage.
             */
            Update withOsSku(Ossku osSku);
        }

        /**
         * The stage of the AgentPool update allowing to specify nodeLabels.
         */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: The node labels to be persisted across all nodes in agent pool..
             * 
             * @param nodeLabels The node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            Update withNodeLabels(Map<String, String> nodeLabels);
        }

        /**
         * The stage of the AgentPool update allowing to specify nodeTaints.
         */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: Taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             * 
             * @param nodeTaints Taints added to new nodes during node pool create and scale. For example,
             * key=value:NoSchedule.
             * @return the next definition stage.
             */
            Update withNodeTaints(List<String> nodeTaints);
        }

        /**
         * The stage of the AgentPool update allowing to specify maxCount.
         */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: The maximum number of nodes for auto-scaling.
             * 
             * @param maxCount The maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMaxCount(Integer maxCount);
        }

        /**
         * The stage of the AgentPool update allowing to specify minCount.
         */
        interface WithMinCount {
            /**
             * Specifies the minCount property: The minimum number of nodes for auto-scaling.
             * 
             * @param minCount The minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMinCount(Integer minCount);
        }

        /**
         * The stage of the AgentPool update allowing to specify enableAutoScaling.
         */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler. Default value is false.
             * 
             * @param enableAutoScaling Whether to enable auto-scaler. Default value is false.
             * @return the next definition stage.
             */
            Update withEnableAutoScaling(Boolean enableAutoScaling);
        }

        /**
         * The stage of the AgentPool update allowing to specify maxPods.
         */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: The maximum number of pods that can run on a node..
             * 
             * @param maxPods The maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            Update withMaxPods(Integer maxPods);
        }

        /**
         * The stage of the AgentPool update allowing to specify count.
         */
        interface WithCount {
            /**
             * Specifies the count property: Number of nodes in the agent pool. The default value is 1..
             * 
             * @param count Number of nodes in the agent pool. The default value is 1.
             * @return the next definition stage.
             */
            Update withCount(Integer count);
        }

        /**
         * The stage of the AgentPool update allowing to specify vmSize.
         */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: The VM sku size of the agent pool node VMs..
             * 
             * @param vmSize The VM sku size of the agent pool node VMs.
             * @return the next definition stage.
             */
            Update withVmSize(String vmSize);
        }

        /**
         * The stage of the AgentPool update allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The observed status of the agent pool..
             * 
             * @param status The observed status of the agent pool.
             * @return the next definition stage.
             */
            Update withStatus(AgentPoolProvisioningStatusStatus status);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    AgentPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AgentPool refresh(Context context);
}
