// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcontainerservice.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.KubernetesVersionProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.VmSkuProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.models.KubernetesVersionProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.ResourceProviders;
import com.azure.resourcemanager.hybridcontainerservice.models.VmSkuProfile;

public final class ResourceProvidersImpl implements ResourceProviders {
    private static final ClientLogger LOGGER = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public ResourceProvidersImpl(ResourceProvidersClient innerClient,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<KubernetesVersionProfile> getKubernetesVersionsWithResponse(String resourceUri, Context context) {
        Response<KubernetesVersionProfileInner> inner
            = this.serviceClient().getKubernetesVersionsWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new KubernetesVersionProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public KubernetesVersionProfile getKubernetesVersions(String resourceUri) {
        KubernetesVersionProfileInner inner = this.serviceClient().getKubernetesVersions(resourceUri);
        if (inner != null) {
            return new KubernetesVersionProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public KubernetesVersionProfile putKubernetesVersions(String resourceUri, KubernetesVersionProfileInner resource) {
        KubernetesVersionProfileInner inner = this.serviceClient().putKubernetesVersions(resourceUri, resource);
        if (inner != null) {
            return new KubernetesVersionProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public KubernetesVersionProfile putKubernetesVersions(String resourceUri, KubernetesVersionProfileInner resource,
        Context context) {
        KubernetesVersionProfileInner inner
            = this.serviceClient().putKubernetesVersions(resourceUri, resource, context);
        if (inner != null) {
            return new KubernetesVersionProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteKubernetesVersions(String resourceUri) {
        this.serviceClient().deleteKubernetesVersions(resourceUri);
    }

    public void deleteKubernetesVersions(String resourceUri, Context context) {
        this.serviceClient().deleteKubernetesVersions(resourceUri, context);
    }

    public Response<VmSkuProfile> getVMSkusWithResponse(String resourceUri, Context context) {
        Response<VmSkuProfileInner> inner = this.serviceClient().getVMSkusWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VmSkuProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VmSkuProfile getVMSkus(String resourceUri) {
        VmSkuProfileInner inner = this.serviceClient().getVMSkus(resourceUri);
        if (inner != null) {
            return new VmSkuProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VmSkuProfile putVMSkus(String resourceUri, VmSkuProfileInner resource) {
        VmSkuProfileInner inner = this.serviceClient().putVMSkus(resourceUri, resource);
        if (inner != null) {
            return new VmSkuProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VmSkuProfile putVMSkus(String resourceUri, VmSkuProfileInner resource, Context context) {
        VmSkuProfileInner inner = this.serviceClient().putVMSkus(resourceUri, resource, context);
        if (inner != null) {
            return new VmSkuProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteVMSkus(String resourceUri) {
        this.serviceClient().deleteVMSkus(resourceUri);
    }

    public void deleteVMSkus(String resourceUri, Context context) {
        this.serviceClient().deleteVMSkus(resourceUri, context);
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }
}
