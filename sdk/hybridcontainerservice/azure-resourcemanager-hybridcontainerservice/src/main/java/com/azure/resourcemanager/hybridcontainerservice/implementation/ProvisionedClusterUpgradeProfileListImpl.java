// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterUpgradeProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterUpgradeProfileListInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterUpgradeProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterUpgradeProfileList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class ProvisionedClusterUpgradeProfileListImpl implements ProvisionedClusterUpgradeProfileList {
    private ProvisionedClusterUpgradeProfileListInner innerObject;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    ProvisionedClusterUpgradeProfileListImpl(ProvisionedClusterUpgradeProfileListInner innerObject,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String nextLink() {
        return this.innerModel().nextLink();
    }

    public List<ProvisionedClusterUpgradeProfile> value() {
        List<ProvisionedClusterUpgradeProfileInner> inner = this.innerModel().value();
        if (inner != null) {
            return Collections.unmodifiableList(
                inner.stream().map(inner1 -> new ProvisionedClusterUpgradeProfileImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisionedClusterUpgradeProfileListInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }
}
