// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisioningState;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetwork;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworkExtendedLocation;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfile;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworkPropertiesStatus;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworkPropertiesVipPoolItem;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworkPropertiesVmipPoolItem;
import com.azure.resourcemanager.hybridcontainerservice.models.VirtualNetworksPatch;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class VirtualNetworkImpl implements VirtualNetwork, VirtualNetwork.Definition, VirtualNetwork.Update {
    private VirtualNetworkInner innerObject;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public VirtualNetworkExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public VirtualNetworkPropertiesInfraVnetProfile infraVnetProfile() {
        return this.innerModel().infraVnetProfile();
    }

    public List<VirtualNetworkPropertiesVipPoolItem> vipPool() {
        List<VirtualNetworkPropertiesVipPoolItem> inner = this.innerModel().vipPool();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<VirtualNetworkPropertiesVmipPoolItem> vmipPool() {
        List<VirtualNetworkPropertiesVmipPoolItem> inner = this.innerModel().vmipPool();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> dnsServers() {
        List<String> inner = this.innerModel().dnsServers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String gateway() {
        return this.innerModel().gateway();
    }

    public String ipAddressPrefix() {
        return this.innerModel().ipAddressPrefix();
    }

    public Integer vlanId() {
        return this.innerModel().vlanId();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public VirtualNetworkPropertiesStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VirtualNetworkInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualNetworkName;

    private VirtualNetworksPatch updateProperties;

    public VirtualNetworkImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VirtualNetwork create() {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks().createOrUpdate(resourceGroupName,
            virtualNetworkName, this.innerModel(), Context.NONE);
        return this;
    }

    public VirtualNetwork create(Context context) {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks().createOrUpdate(resourceGroupName,
            virtualNetworkName, this.innerModel(), context);
        return this;
    }

    VirtualNetworkImpl(String name,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerObject = new VirtualNetworkInner();
        this.serviceManager = serviceManager;
        this.virtualNetworkName = name;
    }

    public VirtualNetworkImpl update() {
        this.updateProperties = new VirtualNetworksPatch();
        return this;
    }

    public VirtualNetwork apply() {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks().update(resourceGroupName,
            virtualNetworkName, updateProperties, Context.NONE);
        return this;
    }

    public VirtualNetwork apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks().update(resourceGroupName,
            virtualNetworkName, updateProperties, context);
        return this;
    }

    VirtualNetworkImpl(VirtualNetworkInner innerObject,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualNetworkName = Utils.getValueFromIdByName(innerObject.id(), "virtualNetworks");
    }

    public VirtualNetwork refresh() {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks()
            .getByResourceGroupWithResponse(resourceGroupName, virtualNetworkName, Context.NONE).getValue();
        return this;
    }

    public VirtualNetwork refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getVirtualNetworks()
            .getByResourceGroupWithResponse(resourceGroupName, virtualNetworkName, context).getValue();
        return this;
    }

    public VirtualNetworkImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VirtualNetworkImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VirtualNetworkImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public VirtualNetworkImpl withExtendedLocation(VirtualNetworkExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public VirtualNetworkImpl withInfraVnetProfile(VirtualNetworkPropertiesInfraVnetProfile infraVnetProfile) {
        this.innerModel().withInfraVnetProfile(infraVnetProfile);
        return this;
    }

    public VirtualNetworkImpl withVipPool(List<VirtualNetworkPropertiesVipPoolItem> vipPool) {
        this.innerModel().withVipPool(vipPool);
        return this;
    }

    public VirtualNetworkImpl withVmipPool(List<VirtualNetworkPropertiesVmipPoolItem> vmipPool) {
        this.innerModel().withVmipPool(vmipPool);
        return this;
    }

    public VirtualNetworkImpl withDnsServers(List<String> dnsServers) {
        this.innerModel().withDnsServers(dnsServers);
        return this;
    }

    public VirtualNetworkImpl withGateway(String gateway) {
        this.innerModel().withGateway(gateway);
        return this;
    }

    public VirtualNetworkImpl withIpAddressPrefix(String ipAddressPrefix) {
        this.innerModel().withIpAddressPrefix(ipAddressPrefix);
        return this;
    }

    public VirtualNetworkImpl withVlanId(Integer vlanId) {
        this.innerModel().withVlanId(vlanId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
