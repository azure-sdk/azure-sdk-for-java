// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcontainerservice.fluent.ProvisionedClusterInstancesClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ListCredentialResponseInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterInner;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.ProvisionedClusterUpgradeProfileInner;
import com.azure.resourcemanager.hybridcontainerservice.models.ListCredentialResponse;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedCluster;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterInstances;
import com.azure.resourcemanager.hybridcontainerservice.models.ProvisionedClusterUpgradeProfile;

public final class ProvisionedClusterInstancesImpl implements ProvisionedClusterInstances {
    private static final ClientLogger LOGGER = new ClientLogger(ProvisionedClusterInstancesImpl.class);

    private final ProvisionedClusterInstancesClient innerClient;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public ProvisionedClusterInstancesImpl(ProvisionedClusterInstancesClient innerClient,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProvisionedCluster> list(String resourceUri) {
        PagedIterable<ProvisionedClusterInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new ProvisionedClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisionedCluster> list(String resourceUri, Context context) {
        PagedIterable<ProvisionedClusterInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new ProvisionedClusterImpl(inner1, this.manager()));
    }

    public Response<ProvisionedCluster> getWithResponse(String resourceUri, Context context) {
        Response<ProvisionedClusterInner> inner = this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProvisionedClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProvisionedCluster get(String resourceUri) {
        ProvisionedClusterInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new ProvisionedClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProvisionedCluster createOrUpdate(String resourceUri, ProvisionedClusterInner resource) {
        ProvisionedClusterInner inner = this.serviceClient().createOrUpdate(resourceUri, resource);
        if (inner != null) {
            return new ProvisionedClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProvisionedCluster createOrUpdate(String resourceUri, ProvisionedClusterInner resource, Context context) {
        ProvisionedClusterInner inner = this.serviceClient().createOrUpdate(resourceUri, resource, context);
        if (inner != null) {
            return new ProvisionedClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceUri) {
        this.serviceClient().delete(resourceUri);
    }

    public void delete(String resourceUri, Context context) {
        this.serviceClient().delete(resourceUri, context);
    }

    public ListCredentialResponse listAdminKubeconfig(String resourceUri) {
        ListCredentialResponseInner inner = this.serviceClient().listAdminKubeconfig(resourceUri);
        if (inner != null) {
            return new ListCredentialResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ListCredentialResponse listAdminKubeconfig(String resourceUri, Context context) {
        ListCredentialResponseInner inner = this.serviceClient().listAdminKubeconfig(resourceUri, context);
        if (inner != null) {
            return new ListCredentialResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ListCredentialResponse listUserKubeconfig(String resourceUri) {
        ListCredentialResponseInner inner = this.serviceClient().listUserKubeconfig(resourceUri);
        if (inner != null) {
            return new ListCredentialResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ListCredentialResponse listUserKubeconfig(String resourceUri, Context context) {
        ListCredentialResponseInner inner = this.serviceClient().listUserKubeconfig(resourceUri, context);
        if (inner != null) {
            return new ListCredentialResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProvisionedClusterUpgradeProfile> getUpgradeProfileWithResponse(String resourceUri,
        Context context) {
        Response<ProvisionedClusterUpgradeProfileInner> inner
            = this.serviceClient().getUpgradeProfileWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProvisionedClusterUpgradeProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProvisionedClusterUpgradeProfile getUpgradeProfile(String resourceUri) {
        ProvisionedClusterUpgradeProfileInner inner = this.serviceClient().getUpgradeProfile(resourceUri);
        if (inner != null) {
            return new ProvisionedClusterUpgradeProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ProvisionedClusterInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }
}
