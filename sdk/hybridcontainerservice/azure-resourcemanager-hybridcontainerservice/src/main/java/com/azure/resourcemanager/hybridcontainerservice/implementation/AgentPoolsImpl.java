// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcontainerservice.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcontainerservice.fluent.AgentPoolsClient;
import com.azure.resourcemanager.hybridcontainerservice.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPool;
import com.azure.resourcemanager.hybridcontainerservice.models.AgentPools;

public final class AgentPoolsImpl implements AgentPools {
    private static final ClientLogger LOGGER = new ClientLogger(AgentPoolsImpl.class);

    private final AgentPoolsClient innerClient;

    private final com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager;

    public AgentPoolsImpl(AgentPoolsClient innerClient,
        com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AgentPool> listByProvisionedCluster(String resourceUri) {
        PagedIterable<AgentPoolInner> inner = this.serviceClient().listByProvisionedCluster(resourceUri);
        return Utils.mapPage(inner, inner1 -> new AgentPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<AgentPool> listByProvisionedCluster(String resourceUri, Context context) {
        PagedIterable<AgentPoolInner> inner = this.serviceClient().listByProvisionedCluster(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new AgentPoolImpl(inner1, this.manager()));
    }

    public Response<AgentPool> getWithResponse(String resourceUri, String agentPoolName, Context context) {
        Response<AgentPoolInner> inner = this.serviceClient().getWithResponse(resourceUri, agentPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AgentPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgentPool get(String resourceUri, String agentPoolName) {
        AgentPoolInner inner = this.serviceClient().get(resourceUri, agentPoolName);
        if (inner != null) {
            return new AgentPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String agentPoolName) {
        this.serviceClient().delete(resourceUri, agentPoolName);
    }

    public void delete(String resourceUri, String agentPoolName, Context context) {
        this.serviceClient().delete(resourceUri, agentPoolName, context);
    }

    public AgentPool getById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "agentPoolName");
        if (agentPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        return this.getWithResponse(resourceUri, agentPoolName, Context.NONE).getValue();
    }

    public Response<AgentPool> getByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "agentPoolName");
        if (agentPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        return this.getWithResponse(resourceUri, agentPoolName, context);
    }

    public void deleteById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "agentPoolName");
        if (agentPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        this.delete(resourceUri, agentPoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/agentPools/{agentPoolName}",
            "agentPoolName");
        if (agentPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        this.delete(resourceUri, agentPoolName, context);
    }

    private AgentPoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcontainerservice.HybridContainerServiceManager manager() {
        return this.serviceManager;
    }

    public AgentPoolImpl define(String name) {
        return new AgentPoolImpl(name, this.manager());
    }
}
