// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import java.io.IOException;

/**
 * The Managed Network resource.
 */
@Fluent
public final class ScopeAssignmentInner extends ProxyResource {
    /*
     * The Scope Assignment properties
     */
    private ScopeAssignmentProperties innerProperties;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ScopeAssignmentInner class.
     */
    public ScopeAssignmentInner() {
    }

    /**
     * Get the innerProperties property: The Scope Assignment properties.
     * 
     * @return the innerProperties value.
     */
    private ScopeAssignmentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the ScopeAssignmentInner object itself.
     */
    public ScopeAssignmentInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the assignedManagedNetwork property: The managed network ID with scope will be assigned to.
     * 
     * @return the assignedManagedNetwork value.
     */
    public String assignedManagedNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().assignedManagedNetwork();
    }

    /**
     * Set the assignedManagedNetwork property: The managed network ID with scope will be assigned to.
     * 
     * @param assignedManagedNetwork the assignedManagedNetwork value to set.
     * @return the ScopeAssignmentInner object itself.
     */
    public ScopeAssignmentInner withAssignedManagedNetwork(String assignedManagedNetwork) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScopeAssignmentProperties();
        }
        this.innerProperties().withAssignedManagedNetwork(assignedManagedNetwork);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.innerProperties() == null ? null : this.innerProperties().etag();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopeAssignmentInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopeAssignmentInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScopeAssignmentInner.
     */
    public static ScopeAssignmentInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopeAssignmentInner deserializedScopeAssignmentInner = new ScopeAssignmentInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedScopeAssignmentInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedScopeAssignmentInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedScopeAssignmentInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedScopeAssignmentInner.innerProperties = ScopeAssignmentProperties.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    deserializedScopeAssignmentInner.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopeAssignmentInner;
        });
    }
}
