// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.ResourceId;
import com.azure.resourcemanager.managednetwork.models.ResourceProperties;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Managed Network Group.
 */
@Fluent
public final class ManagedNetworkGroupProperties extends ResourceProperties {
    /*
     * The collection of management groups covered by the Managed Network
     */
    private List<ResourceId> managementGroups;

    /*
     * The collection of subscriptions covered by the Managed Network
     */
    private List<ResourceId> subscriptions;

    /*
     * The collection of virtual nets covered by the Managed Network
     */
    private List<ResourceId> virtualNetworks;

    /*
     * The collection of subnets covered by the Managed Network
     */
    private List<ResourceId> subnets;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Provisioning state of the ManagedNetwork resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ManagedNetworkGroupProperties class.
     */
    public ManagedNetworkGroupProperties() {
    }

    /**
     * Get the managementGroups property: The collection of management groups covered by the Managed Network.
     * 
     * @return the managementGroups value.
     */
    public List<ResourceId> managementGroups() {
        return this.managementGroups;
    }

    /**
     * Set the managementGroups property: The collection of management groups covered by the Managed Network.
     * 
     * @param managementGroups the managementGroups value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withManagementGroups(List<ResourceId> managementGroups) {
        this.managementGroups = managementGroups;
        return this;
    }

    /**
     * Get the subscriptions property: The collection of subscriptions covered by the Managed Network.
     * 
     * @return the subscriptions value.
     */
    public List<ResourceId> subscriptions() {
        return this.subscriptions;
    }

    /**
     * Set the subscriptions property: The collection of subscriptions covered by the Managed Network.
     * 
     * @param subscriptions the subscriptions value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withSubscriptions(List<ResourceId> subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }

    /**
     * Get the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     * 
     * @return the virtualNetworks value.
     */
    public List<ResourceId> virtualNetworks() {
        return this.virtualNetworks;
    }

    /**
     * Set the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     * 
     * @param virtualNetworks the virtualNetworks value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withVirtualNetworks(List<ResourceId> virtualNetworks) {
        this.virtualNetworks = virtualNetworks;
        return this;
    }

    /**
     * Get the subnets property: The collection of subnets covered by the Managed Network.
     * 
     * @return the subnets value.
     */
    public List<ResourceId> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The collection of subnets covered by the Managed Network.
     * 
     * @param subnets the subnets value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withSubnets(List<ResourceId> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    @Override
    public String etag() {
        return this.etag;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (managementGroups() != null) {
            managementGroups().forEach(e -> e.validate());
        }
        if (subscriptions() != null) {
            subscriptions().forEach(e -> e.validate());
        }
        if (virtualNetworks() != null) {
            virtualNetworks().forEach(e -> e.validate());
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("managementGroups", this.managementGroups,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("subscriptions", this.subscriptions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("virtualNetworks", this.virtualNetworks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkGroupProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedNetworkGroupProperties.
     */
    public static ManagedNetworkGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkGroupProperties deserializedManagedNetworkGroupProperties
                = new ManagedNetworkGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedNetworkGroupProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("etag".equals(fieldName)) {
                    deserializedManagedNetworkGroupProperties.etag = reader.getString();
                } else if ("managementGroups".equals(fieldName)) {
                    List<ResourceId> managementGroups = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkGroupProperties.managementGroups = managementGroups;
                } else if ("subscriptions".equals(fieldName)) {
                    List<ResourceId> subscriptions = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkGroupProperties.subscriptions = subscriptions;
                } else if ("virtualNetworks".equals(fieldName)) {
                    List<ResourceId> virtualNetworks = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkGroupProperties.virtualNetworks = virtualNetworks;
                } else if ("subnets".equals(fieldName)) {
                    List<ResourceId> subnets = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkGroupProperties.subnets = subnets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkGroupProperties;
        });
    }
}
