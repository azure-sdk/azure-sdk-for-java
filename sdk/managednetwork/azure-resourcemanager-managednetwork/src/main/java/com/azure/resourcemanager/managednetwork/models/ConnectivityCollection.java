// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkGroupInner;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkPeeringPolicyInner;
import java.io.IOException;
import java.util.List;

/**
 * The collection of Connectivity related groups and policies within the Managed Network.
 */
@Immutable
public final class ConnectivityCollection implements JsonSerializable<ConnectivityCollection> {
    /*
     * The collection of connectivity related Managed Network Groups within the Managed Network
     */
    private List<ManagedNetworkGroupInner> groups;

    /*
     * The collection of Managed Network Peering Policies within the Managed Network
     */
    private List<ManagedNetworkPeeringPolicyInner> peerings;

    /**
     * Creates an instance of ConnectivityCollection class.
     */
    public ConnectivityCollection() {
    }

    /**
     * Get the groups property: The collection of connectivity related Managed Network Groups within the Managed
     * Network.
     * 
     * @return the groups value.
     */
    public List<ManagedNetworkGroupInner> groups() {
        return this.groups;
    }

    /**
     * Get the peerings property: The collection of Managed Network Peering Policies within the Managed Network.
     * 
     * @return the peerings value.
     */
    public List<ManagedNetworkPeeringPolicyInner> peerings() {
        return this.peerings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
        if (peerings() != null) {
            peerings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectivityCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectivityCollection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectivityCollection.
     */
    public static ConnectivityCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectivityCollection deserializedConnectivityCollection = new ConnectivityCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groups".equals(fieldName)) {
                    List<ManagedNetworkGroupInner> groups
                        = reader.readArray(reader1 -> ManagedNetworkGroupInner.fromJson(reader1));
                    deserializedConnectivityCollection.groups = groups;
                } else if ("peerings".equals(fieldName)) {
                    List<ManagedNetworkPeeringPolicyInner> peerings
                        = reader.readArray(reader1 -> ManagedNetworkPeeringPolicyInner.fromJson(reader1));
                    deserializedConnectivityCollection.peerings = peerings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectivityCollection;
        });
    }
}
