// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetwork.models.Kind;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.ResourceId;
import java.io.IOException;
import java.util.List;

/**
 * The Managed Network Group resource.
 */
@Fluent
public final class ManagedNetworkGroupInner extends ProxyResource {
    /*
     * Gets or sets the properties of a network group
     */
    private ManagedNetworkGroupProperties innerProperties;

    /*
     * Responsibility role under which this Managed Network Group will be created
     */
    private Kind kind;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ManagedNetworkGroupInner class.
     */
    public ManagedNetworkGroupInner() {
    }

    /**
     * Get the innerProperties property: Gets or sets the properties of a network group.
     * 
     * @return the innerProperties value.
     */
    private ManagedNetworkGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: Responsibility role under which this Managed Network Group will be created.
     * 
     * @return the kind value.
     */
    public Kind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Responsibility role under which this Managed Network Group will be created.
     * 
     * @param kind the kind value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withKind(Kind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the managementGroups property: The collection of management groups covered by the Managed Network.
     * 
     * @return the managementGroups value.
     */
    public List<ResourceId> managementGroups() {
        return this.innerProperties() == null ? null : this.innerProperties().managementGroups();
    }

    /**
     * Set the managementGroups property: The collection of management groups covered by the Managed Network.
     * 
     * @param managementGroups the managementGroups value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withManagementGroups(List<ResourceId> managementGroups) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withManagementGroups(managementGroups);
        return this;
    }

    /**
     * Get the subscriptions property: The collection of subscriptions covered by the Managed Network.
     * 
     * @return the subscriptions value.
     */
    public List<ResourceId> subscriptions() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriptions();
    }

    /**
     * Set the subscriptions property: The collection of subscriptions covered by the Managed Network.
     * 
     * @param subscriptions the subscriptions value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withSubscriptions(List<ResourceId> subscriptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withSubscriptions(subscriptions);
        return this;
    }

    /**
     * Get the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     * 
     * @return the virtualNetworks value.
     */
    public List<ResourceId> virtualNetworks() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualNetworks();
    }

    /**
     * Set the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     * 
     * @param virtualNetworks the virtualNetworks value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withVirtualNetworks(List<ResourceId> virtualNetworks) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withVirtualNetworks(virtualNetworks);
        return this;
    }

    /**
     * Get the subnets property: The collection of subnets covered by the Managed Network.
     * 
     * @return the subnets value.
     */
    public List<ResourceId> subnets() {
        return this.innerProperties() == null ? null : this.innerProperties().subnets();
    }

    /**
     * Set the subnets property: The collection of subnets covered by the Managed Network.
     * 
     * @param subnets the subnets value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withSubnets(List<ResourceId> subnets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withSubnets(subnets);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.innerProperties() == null ? null : this.innerProperties().etag();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkGroupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkGroupInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedNetworkGroupInner.
     */
    public static ManagedNetworkGroupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkGroupInner deserializedManagedNetworkGroupInner = new ManagedNetworkGroupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.innerProperties
                        = ManagedNetworkGroupProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.kind = Kind.fromString(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedManagedNetworkGroupInner.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkGroupInner;
        });
    }
}
