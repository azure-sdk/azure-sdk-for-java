// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Managed Network Peering Policy.
 */
@Fluent
public class ManagedNetworkPeeringPolicyProperties extends ResourceProperties {
    /*
     * Gets or sets the connectivity type of a network structure policy
     */
    private Type type;

    /*
     * Gets or sets the hub virtual network ID
     */
    private ResourceId hub;

    /*
     * Gets or sets the spokes group IDs
     */
    private List<ResourceId> spokes;

    /*
     * Gets or sets the mesh group IDs
     */
    private List<ResourceId> mesh;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Provisioning state of the ManagedNetwork resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ManagedNetworkPeeringPolicyProperties class.
     */
    public ManagedNetworkPeeringPolicyProperties() {
    }

    /**
     * Get the type property: Gets or sets the connectivity type of a network structure policy.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the connectivity type of a network structure policy.
     * 
     * @param type the type value to set.
     * @return the ManagedNetworkPeeringPolicyProperties object itself.
     */
    public ManagedNetworkPeeringPolicyProperties withType(Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get the hub property: Gets or sets the hub virtual network ID.
     * 
     * @return the hub value.
     */
    public ResourceId hub() {
        return this.hub;
    }

    /**
     * Set the hub property: Gets or sets the hub virtual network ID.
     * 
     * @param hub the hub value to set.
     * @return the ManagedNetworkPeeringPolicyProperties object itself.
     */
    public ManagedNetworkPeeringPolicyProperties withHub(ResourceId hub) {
        this.hub = hub;
        return this;
    }

    /**
     * Get the spokes property: Gets or sets the spokes group IDs.
     * 
     * @return the spokes value.
     */
    public List<ResourceId> spokes() {
        return this.spokes;
    }

    /**
     * Set the spokes property: Gets or sets the spokes group IDs.
     * 
     * @param spokes the spokes value to set.
     * @return the ManagedNetworkPeeringPolicyProperties object itself.
     */
    public ManagedNetworkPeeringPolicyProperties withSpokes(List<ResourceId> spokes) {
        this.spokes = spokes;
        return this;
    }

    /**
     * Get the mesh property: Gets or sets the mesh group IDs.
     * 
     * @return the mesh value.
     */
    public List<ResourceId> mesh() {
        return this.mesh;
    }

    /**
     * Set the mesh property: Gets or sets the mesh group IDs.
     * 
     * @param mesh the mesh value to set.
     * @return the ManagedNetworkPeeringPolicyProperties object itself.
     */
    public ManagedNetworkPeeringPolicyProperties withMesh(List<ResourceId> mesh) {
        this.mesh = mesh;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    @Override
    public String etag() {
        return this.etag;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model ManagedNetworkPeeringPolicyProperties"));
        }
        if (hub() != null) {
            hub().validate();
        }
        if (spokes() != null) {
            spokes().forEach(e -> e.validate());
        }
        if (mesh() != null) {
            mesh().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedNetworkPeeringPolicyProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("hub", this.hub);
        jsonWriter.writeArrayField("spokes", this.spokes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mesh", this.mesh, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkPeeringPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkPeeringPolicyProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedNetworkPeeringPolicyProperties.
     */
    public static ManagedNetworkPeeringPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkPeeringPolicyProperties deserializedManagedNetworkPeeringPolicyProperties
                = new ManagedNetworkPeeringPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedNetworkPeeringPolicyProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("etag".equals(fieldName)) {
                    deserializedManagedNetworkPeeringPolicyProperties.etag = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedManagedNetworkPeeringPolicyProperties.type = Type.fromString(reader.getString());
                } else if ("hub".equals(fieldName)) {
                    deserializedManagedNetworkPeeringPolicyProperties.hub = ResourceId.fromJson(reader);
                } else if ("spokes".equals(fieldName)) {
                    List<ResourceId> spokes = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkPeeringPolicyProperties.spokes = spokes;
                } else if ("mesh".equals(fieldName)) {
                    List<ResourceId> mesh = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedManagedNetworkPeeringPolicyProperties.mesh = mesh;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkPeeringPolicyProperties;
        });
    }
}
