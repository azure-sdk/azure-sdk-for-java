// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Mesh Peering Policy.
 */
@Fluent
public final class MeshPeeringPolicyProperties extends ManagedNetworkPeeringPolicyProperties {
    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Provisioning state of the ManagedNetwork resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of MeshPeeringPolicyProperties class.
     */
    public MeshPeeringPolicyProperties() {
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    @Override
    public String etag() {
        return this.etag;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeshPeeringPolicyProperties withType(Type type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeshPeeringPolicyProperties withHub(ResourceId hub) {
        super.withHub(hub);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeshPeeringPolicyProperties withSpokes(List<ResourceId> spokes) {
        super.withSpokes(spokes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeshPeeringPolicyProperties withMesh(List<ResourceId> mesh) {
        super.withMesh(mesh);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model MeshPeeringPolicyProperties"));
        }
        if (hub() != null) {
            hub().validate();
        }
        if (spokes() != null) {
            spokes().forEach(e -> e.validate());
        }
        if (mesh() != null) {
            mesh().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MeshPeeringPolicyProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", type() == null ? null : type().toString());
        jsonWriter.writeJsonField("hub", hub());
        jsonWriter.writeArrayField("spokes", spokes(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mesh", mesh(), (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MeshPeeringPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MeshPeeringPolicyProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MeshPeeringPolicyProperties.
     */
    public static MeshPeeringPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MeshPeeringPolicyProperties deserializedMeshPeeringPolicyProperties = new MeshPeeringPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedMeshPeeringPolicyProperties.withType(Type.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMeshPeeringPolicyProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("etag".equals(fieldName)) {
                    deserializedMeshPeeringPolicyProperties.etag = reader.getString();
                } else if ("hub".equals(fieldName)) {
                    deserializedMeshPeeringPolicyProperties.withHub(ResourceId.fromJson(reader));
                } else if ("spokes".equals(fieldName)) {
                    List<ResourceId> spokes = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedMeshPeeringPolicyProperties.withSpokes(spokes);
                } else if ("mesh".equals(fieldName)) {
                    List<ResourceId> mesh = reader.readArray(reader1 -> ResourceId.fromJson(reader1));
                    deserializedMeshPeeringPolicyProperties.withMesh(mesh);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMeshPeeringPolicyProperties;
        });
    }
}
