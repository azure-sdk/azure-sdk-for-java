// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetwork.models.ConnectivityCollection;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.ResourceProperties;
import com.azure.resourcemanager.managednetwork.models.Scope;
import java.io.IOException;

/**
 * Properties of Managed Network.
 */
@Fluent
public final class ManagedNetworkProperties extends ResourceProperties {
    /*
     * The collection of management groups, subscriptions, virtual networks, and subnets by the Managed Network. This is
     * a read-only property that is reflective of all ScopeAssignments for this Managed Network
     */
    private Scope scope;

    /*
     * The collection of groups and policies concerned with connectivity
     */
    private ConnectivityCollection connectivity;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Provisioning state of the ManagedNetwork resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ManagedNetworkProperties class.
     */
    public ManagedNetworkProperties() {
    }

    /**
     * Get the scope property: The collection of management groups, subscriptions, virtual networks, and subnets by the
     * Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed
     * Network.
     * 
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The collection of management groups, subscriptions, virtual networks, and subnets by the
     * Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed
     * Network.
     * 
     * @param scope the scope value to set.
     * @return the ManagedNetworkProperties object itself.
     */
    public ManagedNetworkProperties withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the connectivity property: The collection of groups and policies concerned with connectivity.
     * 
     * @return the connectivity value.
     */
    public ConnectivityCollection connectivity() {
        return this.connectivity;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    @Override
    public String etag() {
        return this.etag;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (scope() != null) {
            scope().validate();
        }
        if (connectivity() != null) {
            connectivity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedNetworkProperties.
     */
    public static ManagedNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkProperties deserializedManagedNetworkProperties = new ManagedNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedNetworkProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("etag".equals(fieldName)) {
                    deserializedManagedNetworkProperties.etag = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedManagedNetworkProperties.scope = Scope.fromJson(reader);
                } else if ("connectivity".equals(fieldName)) {
                    deserializedManagedNetworkProperties.connectivity = ConnectivityCollection.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkProperties;
        });
    }
}
