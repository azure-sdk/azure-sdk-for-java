// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.generated;

import com.azure.resourcemanager.fairfieldgardens.models.AllocationEndpoint;
import com.azure.resourcemanager.fairfieldgardens.models.DeviceRegistryProvisioningPolicyResourceDetails;
import com.azure.resourcemanager.fairfieldgardens.models.EndpointType;
import com.azure.resourcemanager.fairfieldgardens.models.EvenlyDistributedAllocationRule;
import com.azure.resourcemanager.fairfieldgardens.models.IdentityInfo;
import com.azure.resourcemanager.fairfieldgardens.models.JitRule;
import com.azure.resourcemanager.fairfieldgardens.models.X509BootstrapAuthenticationRule;
import com.azure.resourcemanager.fairfieldgardens.models.X509Certificate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ProvisioningPolicies CreateOrUpdate.
 */
public final class ProvisioningPoliciesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/fairfieldgardens/resource-manager/Microsoft.FairfieldGardens/preview/2023-12-01-preview/examples/
     * ProvisioningPolicies_CreateOrUpdate.json
     */
    /**
     * Sample code: ProvisioningPolicies_CreateOrUpdate.
     * 
     * @param manager Entry point to FairfieldgardensManager.
     */
    public static void
        provisioningPoliciesCreateOrUpdate(com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager manager) {
        manager.provisioningPolicies().define("I--q").withRegion("ltkyyilngvwkirs")
            .withExistingProvisioningResource("rgopenapi", "3u2333IBL").withTags(mapOf())
            .withDescription("example description of the provisioning policy").withStatus(true)
            .withBootstrapAuthentication(new X509BootstrapAuthenticationRule()
                .withPrimaryCertificate(
                    new X509Certificate().withCertificate("ZXhhbXBsZSBjZXJ0aWZpY2F0ZSBmb3IgYXp1cmU="))
                .withSecondaryCertificate(
                    new X509Certificate().withCertificate("ZXhhbXBsZSBjZXJ0aWipY2F0ZSBmb3IgYXp1cmU=")))
            .withAllocations(Arrays.asList(new EvenlyDistributedAllocationRule().withName("grxgkqrzwudpsfmpo")
                .withEndpointType(EndpointType.MICROSOFT_EVENT_GRID_NAMESPACES)
                .withEndpoints(Arrays.asList(new AllocationEndpoint().withResourceId(
                    "/subscriptions/vzbhvmvyczrhnuzwd/resourceGroups/K_-/providers/Microsoft.EventGrid/namespaces/testStaticAllocationEndpoint")
                    .withHostname("testStaticAllocationEndpoint.azure.net")))))
            .withJit(
                new JitRule().withPriority(10).withSubscriptionId("vzbhvmvyczrhnuzwd").withResourceGroupName("K_-"))
            .withResourceDetails(new DeviceRegistryProvisioningPolicyResourceDetails()
                .withOperationalIdentityInfo(new IdentityInfo().withDeviceTemplateId("00000000-0000-0000-0000-00000000")
                    .withStaticGroupId("00000000-0000-0000-0000-00000000")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
