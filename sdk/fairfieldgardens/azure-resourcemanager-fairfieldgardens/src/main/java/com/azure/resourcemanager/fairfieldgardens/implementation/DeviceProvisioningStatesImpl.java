// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fairfieldgardens.fluent.DeviceProvisioningStatesClient;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.DeviceProvisioningStateInner;
import com.azure.resourcemanager.fairfieldgardens.models.DeviceProvisioningState;
import com.azure.resourcemanager.fairfieldgardens.models.DeviceProvisioningStateUpdate;
import com.azure.resourcemanager.fairfieldgardens.models.DeviceProvisioningStates;

public final class DeviceProvisioningStatesImpl implements DeviceProvisioningStates {
    private static final ClientLogger LOGGER = new ClientLogger(DeviceProvisioningStatesImpl.class);

    private final DeviceProvisioningStatesClient innerClient;

    private final com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager;

    public DeviceProvisioningStatesImpl(DeviceProvisioningStatesClient innerClient,
        com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DeviceProvisioningState> list(String resourceUri) {
        PagedIterable<DeviceProvisioningStateInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new DeviceProvisioningStateImpl(inner1, this.manager()));
    }

    public PagedIterable<DeviceProvisioningState> list(String resourceUri, Context context) {
        PagedIterable<DeviceProvisioningStateInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new DeviceProvisioningStateImpl(inner1, this.manager()));
    }

    public Response<DeviceProvisioningState> getWithResponse(String resourceUri, Context context) {
        Response<DeviceProvisioningStateInner> inner = this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeviceProvisioningStateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeviceProvisioningState get(String resourceUri) {
        DeviceProvisioningStateInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new DeviceProvisioningStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceProvisioningState> createOrUpdateWithResponse(String resourceUri,
        DeviceProvisioningStateInner resource, Context context) {
        Response<DeviceProvisioningStateInner> inner
            = this.serviceClient().createOrUpdateWithResponse(resourceUri, resource, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeviceProvisioningStateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeviceProvisioningState createOrUpdate(String resourceUri, DeviceProvisioningStateInner resource) {
        DeviceProvisioningStateInner inner = this.serviceClient().createOrUpdate(resourceUri, resource);
        if (inner != null) {
            return new DeviceProvisioningStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceProvisioningState> updateWithResponse(String resourceUri,
        DeviceProvisioningStateUpdate properties, Context context) {
        Response<DeviceProvisioningStateInner> inner
            = this.serviceClient().updateWithResponse(resourceUri, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeviceProvisioningStateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeviceProvisioningState update(String resourceUri, DeviceProvisioningStateUpdate properties) {
        DeviceProvisioningStateInner inner = this.serviceClient().update(resourceUri, properties);
        if (inner != null) {
            return new DeviceProvisioningStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceUri, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, context);
    }

    public void delete(String resourceUri) {
        this.serviceClient().delete(resourceUri);
    }

    private DeviceProvisioningStatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager manager() {
        return this.serviceManager;
    }
}
