// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fairfieldgardens.models.AllocatedEndpoint;
import com.azure.resourcemanager.fairfieldgardens.models.OnboardingStatus;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details of the DeviceProvisioningState.
 */
@Fluent
public final class DeviceProvisioningStateProperties {
    /*
     * Unique identifier for the device. Allow alphanumeric and '-', '.', '_', ':' only. Last character can only be
     * alphanumeric and '-'
     */
    @JsonProperty(value = "registrationId", required = true)
    private String registrationId;

    /*
     * Onboarding status of the resource this DeviceProvisioningState extends
     */
    @JsonProperty(value = "onboardingStatus", required = true)
    private OnboardingStatus onboardingStatus;

    /*
     * Indicates if the device is enabled for discovery
     */
    @JsonProperty(value = "discoveryEnabled")
    private Boolean discoveryEnabled;

    /*
     * The provisioning policy resource id
     */
    @JsonProperty(value = "provisioningPolicyResourceId", required = true)
    private String provisioningPolicyResourceId;

    /*
     * Array of previously allocated endpoints
     */
    @JsonProperty(value = "allocatedEndpoints")
    private List<AllocatedEndpoint> allocatedEndpoints;

    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DeviceProvisioningStateProperties class.
     */
    public DeviceProvisioningStateProperties() {
    }

    /**
     * Get the registrationId property: Unique identifier for the device. Allow alphanumeric and '-', '.', '_', ':'
     * only. Last character can only be alphanumeric and '-'.
     * 
     * @return the registrationId value.
     */
    public String registrationId() {
        return this.registrationId;
    }

    /**
     * Set the registrationId property: Unique identifier for the device. Allow alphanumeric and '-', '.', '_', ':'
     * only. Last character can only be alphanumeric and '-'.
     * 
     * @param registrationId the registrationId value to set.
     * @return the DeviceProvisioningStateProperties object itself.
     */
    public DeviceProvisioningStateProperties withRegistrationId(String registrationId) {
        this.registrationId = registrationId;
        return this;
    }

    /**
     * Get the onboardingStatus property: Onboarding status of the resource this DeviceProvisioningState extends.
     * 
     * @return the onboardingStatus value.
     */
    public OnboardingStatus onboardingStatus() {
        return this.onboardingStatus;
    }

    /**
     * Set the onboardingStatus property: Onboarding status of the resource this DeviceProvisioningState extends.
     * 
     * @param onboardingStatus the onboardingStatus value to set.
     * @return the DeviceProvisioningStateProperties object itself.
     */
    public DeviceProvisioningStateProperties withOnboardingStatus(OnboardingStatus onboardingStatus) {
        this.onboardingStatus = onboardingStatus;
        return this;
    }

    /**
     * Get the discoveryEnabled property: Indicates if the device is enabled for discovery.
     * 
     * @return the discoveryEnabled value.
     */
    public Boolean discoveryEnabled() {
        return this.discoveryEnabled;
    }

    /**
     * Set the discoveryEnabled property: Indicates if the device is enabled for discovery.
     * 
     * @param discoveryEnabled the discoveryEnabled value to set.
     * @return the DeviceProvisioningStateProperties object itself.
     */
    public DeviceProvisioningStateProperties withDiscoveryEnabled(Boolean discoveryEnabled) {
        this.discoveryEnabled = discoveryEnabled;
        return this;
    }

    /**
     * Get the provisioningPolicyResourceId property: The provisioning policy resource id.
     * 
     * @return the provisioningPolicyResourceId value.
     */
    public String provisioningPolicyResourceId() {
        return this.provisioningPolicyResourceId;
    }

    /**
     * Set the provisioningPolicyResourceId property: The provisioning policy resource id.
     * 
     * @param provisioningPolicyResourceId the provisioningPolicyResourceId value to set.
     * @return the DeviceProvisioningStateProperties object itself.
     */
    public DeviceProvisioningStateProperties withProvisioningPolicyResourceId(String provisioningPolicyResourceId) {
        this.provisioningPolicyResourceId = provisioningPolicyResourceId;
        return this;
    }

    /**
     * Get the allocatedEndpoints property: Array of previously allocated endpoints.
     * 
     * @return the allocatedEndpoints value.
     */
    public List<AllocatedEndpoint> allocatedEndpoints() {
        return this.allocatedEndpoints;
    }

    /**
     * Set the allocatedEndpoints property: Array of previously allocated endpoints.
     * 
     * @param allocatedEndpoints the allocatedEndpoints value to set.
     * @return the DeviceProvisioningStateProperties object itself.
     */
    public DeviceProvisioningStateProperties withAllocatedEndpoints(List<AllocatedEndpoint> allocatedEndpoints) {
        this.allocatedEndpoints = allocatedEndpoints;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registrationId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property registrationId in model DeviceProvisioningStateProperties"));
        }
        if (onboardingStatus() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property onboardingStatus in model DeviceProvisioningStateProperties"));
        }
        if (provisioningPolicyResourceId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property provisioningPolicyResourceId in model DeviceProvisioningStateProperties"));
        }
        if (allocatedEndpoints() != null) {
            allocatedEndpoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeviceProvisioningStateProperties.class);
}
