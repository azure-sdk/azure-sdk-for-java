// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Certificate issuance configurations.
 */
@Fluent
public final class CertificateIssuanceRule {
    /*
     * The type of authority for cert issuance.
     */
    @JsonProperty(value = "issuingAuthority", required = true)
    private SupportedIssuingAuthority issuingAuthority;

    /*
     * The configuration to set up an ICA.
     */
    @JsonProperty(value = "certificateAuthorityConfiguration", required = true)
    private CaConfig certificateAuthorityConfiguration;

    /*
     * The leaf certificate configuration.
     */
    @JsonProperty(value = "leafCertificateConfiguration", required = true)
    private CertPolicyConfig leafCertificateConfiguration;

    /*
     * Cert renewal interval.
     */
    @JsonProperty(value = "renewalInterval", required = true)
    private int renewalInterval;

    /**
     * Creates an instance of CertificateIssuanceRule class.
     */
    public CertificateIssuanceRule() {
    }

    /**
     * Get the issuingAuthority property: The type of authority for cert issuance.
     * 
     * @return the issuingAuthority value.
     */
    public SupportedIssuingAuthority issuingAuthority() {
        return this.issuingAuthority;
    }

    /**
     * Set the issuingAuthority property: The type of authority for cert issuance.
     * 
     * @param issuingAuthority the issuingAuthority value to set.
     * @return the CertificateIssuanceRule object itself.
     */
    public CertificateIssuanceRule withIssuingAuthority(SupportedIssuingAuthority issuingAuthority) {
        this.issuingAuthority = issuingAuthority;
        return this;
    }

    /**
     * Get the certificateAuthorityConfiguration property: The configuration to set up an ICA.
     * 
     * @return the certificateAuthorityConfiguration value.
     */
    public CaConfig certificateAuthorityConfiguration() {
        return this.certificateAuthorityConfiguration;
    }

    /**
     * Set the certificateAuthorityConfiguration property: The configuration to set up an ICA.
     * 
     * @param certificateAuthorityConfiguration the certificateAuthorityConfiguration value to set.
     * @return the CertificateIssuanceRule object itself.
     */
    public CertificateIssuanceRule withCertificateAuthorityConfiguration(CaConfig certificateAuthorityConfiguration) {
        this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
        return this;
    }

    /**
     * Get the leafCertificateConfiguration property: The leaf certificate configuration.
     * 
     * @return the leafCertificateConfiguration value.
     */
    public CertPolicyConfig leafCertificateConfiguration() {
        return this.leafCertificateConfiguration;
    }

    /**
     * Set the leafCertificateConfiguration property: The leaf certificate configuration.
     * 
     * @param leafCertificateConfiguration the leafCertificateConfiguration value to set.
     * @return the CertificateIssuanceRule object itself.
     */
    public CertificateIssuanceRule withLeafCertificateConfiguration(CertPolicyConfig leafCertificateConfiguration) {
        this.leafCertificateConfiguration = leafCertificateConfiguration;
        return this;
    }

    /**
     * Get the renewalInterval property: Cert renewal interval.
     * 
     * @return the renewalInterval value.
     */
    public int renewalInterval() {
        return this.renewalInterval;
    }

    /**
     * Set the renewalInterval property: Cert renewal interval.
     * 
     * @param renewalInterval the renewalInterval value to set.
     * @return the CertificateIssuanceRule object itself.
     */
    public CertificateIssuanceRule withRenewalInterval(int renewalInterval) {
        this.renewalInterval = renewalInterval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuingAuthority() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property issuingAuthority in model CertificateIssuanceRule"));
        }
        if (certificateAuthorityConfiguration() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property certificateAuthorityConfiguration in model CertificateIssuanceRule"));
        } else {
            certificateAuthorityConfiguration().validate();
        }
        if (leafCertificateConfiguration() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property leafCertificateConfiguration in model CertificateIssuanceRule"));
        } else {
            leafCertificateConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateIssuanceRule.class);
}
