// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Certificate properties.
 */
@Fluent
public final class CertificateProperties {
    /*
     * Crypto type: RSA or EC.
     */
    @JsonProperty(value = "keyType", required = true)
    private SupportedKeyType keyType;

    /*
     * Certificate subject.
     */
    @JsonProperty(value = "subject", access = JsonProperty.Access.WRITE_ONLY)
    private String subject;

    /*
     * System-assigned validity period.
     */
    @JsonProperty(value = "validityPeriodInDays", access = JsonProperty.Access.WRITE_ONLY)
    private Integer validityPeriodInDays;

    /*
     * Certificate is valid not before this date. Format ISO8601. Generated based on on validity period.
     */
    @JsonProperty(value = "validityNotBefore", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime validityNotBefore;

    /*
     * Certificate is valid not after this date. Format ISO8601. Generated based on validity period.
     */
    @JsonProperty(value = "validityNotAfter", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime validityNotAfter;

    /**
     * Creates an instance of CertificateProperties class.
     */
    public CertificateProperties() {
    }

    /**
     * Get the keyType property: Crypto type: RSA or EC.
     * 
     * @return the keyType value.
     */
    public SupportedKeyType keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: Crypto type: RSA or EC.
     * 
     * @param keyType the keyType value to set.
     * @return the CertificateProperties object itself.
     */
    public CertificateProperties withKeyType(SupportedKeyType keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the subject property: Certificate subject.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Get the validityPeriodInDays property: System-assigned validity period.
     * 
     * @return the validityPeriodInDays value.
     */
    public Integer validityPeriodInDays() {
        return this.validityPeriodInDays;
    }

    /**
     * Get the validityNotBefore property: Certificate is valid not before this date. Format ISO8601. Generated based
     * on on validity period.
     * 
     * @return the validityNotBefore value.
     */
    public OffsetDateTime validityNotBefore() {
        return this.validityNotBefore;
    }

    /**
     * Get the validityNotAfter property: Certificate is valid not after this date. Format ISO8601. Generated based on
     * validity period.
     * 
     * @return the validityNotAfter value.
     */
    public OffsetDateTime validityNotAfter() {
        return this.validityNotAfter;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property keyType in model CertificateProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateProperties.class);
}
