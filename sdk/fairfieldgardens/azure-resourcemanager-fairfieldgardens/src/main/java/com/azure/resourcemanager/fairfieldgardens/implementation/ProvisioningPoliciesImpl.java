// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fairfieldgardens.fluent.ProvisioningPoliciesClient;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningPolicyInner;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicies;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicy;

public final class ProvisioningPoliciesImpl implements ProvisioningPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(ProvisioningPoliciesImpl.class);

    private final ProvisioningPoliciesClient innerClient;

    private final com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager;

    public ProvisioningPoliciesImpl(ProvisioningPoliciesClient innerClient,
        com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProvisioningPolicy> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName) {
        PagedIterable<ProvisioningPolicyInner> inner
            = this.serviceClient().listByProvisioningResource(resourceGroupName, provisioningResourceName);
        return Utils.mapPage(inner, inner1 -> new ProvisioningPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisioningPolicy> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName, Context context) {
        PagedIterable<ProvisioningPolicyInner> inner
            = this.serviceClient().listByProvisioningResource(resourceGroupName, provisioningResourceName, context);
        return Utils.mapPage(inner, inner1 -> new ProvisioningPolicyImpl(inner1, this.manager()));
    }

    public Response<ProvisioningPolicy> getWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context) {
        Response<ProvisioningPolicyInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProvisioningPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProvisioningPolicy get(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName) {
        ProvisioningPolicyInner inner
            = this.serviceClient().get(resourceGroupName, provisioningResourceName, provisioningPolicyName);
        if (inner != null) {
            return new ProvisioningPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, provisioningResourceName,
            provisioningPolicyName, context);
    }

    public void delete(String resourceGroupName, String provisioningResourceName, String provisioningPolicyName) {
        this.serviceClient().delete(resourceGroupName, provisioningResourceName, provisioningPolicyName);
    }

    public ProvisioningPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        String provisioningPolicyName = Utils.getValueFromIdByName(id, "provisioningPolicies");
        if (provisioningPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, Context.NONE)
            .getValue();
    }

    public Response<ProvisioningPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        String provisioningPolicyName = Utils.getValueFromIdByName(id, "provisioningPolicies");
        if (provisioningPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        String provisioningPolicyName = Utils.getValueFromIdByName(id, "provisioningPolicies");
        if (provisioningPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningPolicies'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        String provisioningPolicyName = Utils.getValueFromIdByName(id, "provisioningPolicies");
        if (provisioningPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningPolicies'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, context);
    }

    private ProvisioningPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager manager() {
        return this.serviceManager;
    }

    public ProvisioningPolicyImpl define(String name) {
        return new ProvisioningPolicyImpl(name, this.manager());
    }
}
