// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningResourceInner;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningResourceUpdate;

/**
 * An instance of this class provides access to all the operations defined in ProvisioningResourcesClient.
 */
public interface ProvisioningResourcesClient {
    /**
     * List ProvisioningResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningResourceInner> list();

    /**
     * List ProvisioningResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningResourceInner> list(Context context);

    /**
     * List ProvisioningResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List ProvisioningResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProvisioningResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String provisioningResourceName, Context context);

    /**
     * Get a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningResourceInner getByResourceGroup(String resourceGroupName, String provisioningResourceName);

    /**
     * Create a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningResourceInner>, ProvisioningResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, ProvisioningResourceInner resource);

    /**
     * Create a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningResourceInner>, ProvisioningResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, ProvisioningResourceInner resource, Context context);

    /**
     * Create a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningResourceInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        ProvisioningResourceInner resource);

    /**
     * Create a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningResourceInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        ProvisioningResourceInner resource, Context context);

    /**
     * Update a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProvisioningResourceInner> updateWithResponse(String resourceGroupName, String provisioningResourceName,
        ProvisioningResourceUpdate properties, Context context);

    /**
     * Update a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningResourceInner update(String resourceGroupName, String provisioningResourceName,
        ProvisioningResourceUpdate properties);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String provisioningResourceName);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String provisioningResourceName,
        Context context);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String provisioningResourceName);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String provisioningResourceName, Context context);
}
