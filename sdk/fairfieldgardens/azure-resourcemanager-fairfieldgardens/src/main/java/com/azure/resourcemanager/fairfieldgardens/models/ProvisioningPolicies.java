// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of ProvisioningPolicies.
 */
public interface ProvisioningPolicies {
    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningPolicy> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName);

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningPolicy> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName, Context context);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response}.
     */
    Response<ProvisioningPolicy> getWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy.
     */
    ProvisioningPolicy get(String resourceGroupName, String provisioningResourceName, String provisioningPolicyName);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String provisioningResourceName, String provisioningPolicyName);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response}.
     */
    ProvisioningPolicy getById(String id);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response}.
     */
    Response<ProvisioningPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ProvisioningPolicy resource.
     * 
     * @param name resource name.
     * @return the first stage of the new ProvisioningPolicy definition.
     */
    ProvisioningPolicy.DefinitionStages.Blank define(String name);
}
