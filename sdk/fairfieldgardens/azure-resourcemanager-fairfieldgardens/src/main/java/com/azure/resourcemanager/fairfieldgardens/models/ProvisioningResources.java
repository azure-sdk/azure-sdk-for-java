// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of ProvisioningResources.
 */
public interface ProvisioningResources {
    /**
     * List ProvisioningResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningResource> list();

    /**
     * List ProvisioningResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningResource> list(Context context);

    /**
     * List ProvisioningResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningResource> listByResourceGroup(String resourceGroupName);

    /**
     * List ProvisioningResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProvisioningResource> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource along with {@link Response}.
     */
    Response<ProvisioningResource> getByResourceGroupWithResponse(String resourceGroupName,
        String provisioningResourceName, Context context);

    /**
     * Get a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource.
     */
    ProvisioningResource getByResourceGroup(String resourceGroupName, String provisioningResourceName);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String provisioningResourceName);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String provisioningResourceName, Context context);

    /**
     * Get a ProvisioningResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource along with {@link Response}.
     */
    ProvisioningResource getById(String id);

    /**
     * Get a ProvisioningResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningResource along with {@link Response}.
     */
    Response<ProvisioningResource> getByIdWithResponse(String id, Context context);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a ProvisioningResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ProvisioningResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new ProvisioningResource definition.
     */
    ProvisioningResource.DefinitionStages.Blank define(String name);
}
