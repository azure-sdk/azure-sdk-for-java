// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningPolicyInner;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicyUpdate;

/**
 * An instance of this class provides access to all the operations defined in ProvisioningPoliciesClient.
 */
public interface ProvisioningPoliciesClient {
    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningPolicyInner> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName);

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProvisioningPolicyInner> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName, Context context);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProvisioningPolicyInner> getWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context);

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningPolicyInner get(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName);

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource);

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource, Context context);

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningPolicyInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource);

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningPolicyInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource, Context context);

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdate(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyUpdate properties);

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdate(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyUpdate properties,
        Context context);

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningPolicyInner update(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties);

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProvisioningPolicyInner update(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties, Context context);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context);

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String provisioningResourceName, String provisioningPolicyName);
}
