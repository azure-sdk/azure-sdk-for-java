// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.fairfieldgardens.fluent.ProvisioningPoliciesClient;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningPolicyInner;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicyListResult;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicyUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ProvisioningPoliciesClient.
 */
public final class ProvisioningPoliciesClientImpl implements ProvisioningPoliciesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProvisioningPoliciesService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftFairfieldGardensImpl client;

    /**
     * Initializes an instance of ProvisioningPoliciesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProvisioningPoliciesClientImpl(MicrosoftFairfieldGardensImpl client) {
        this.service = RestProxy.create(ProvisioningPoliciesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftFairfieldGardensProvisioningPolicies to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftFairfieldGa")
    public interface ProvisioningPoliciesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisioningPolicyListResult>> listByProvisioningResource(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningResourceName") String provisioningResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisioningPolicyInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningResourceName") String provisioningResourceName,
            @PathParam("provisioningPolicyName") String provisioningPolicyName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningResourceName") String provisioningResourceName,
            @PathParam("provisioningPolicyName") String provisioningPolicyName,
            @BodyParam("application/json") ProvisioningPolicyInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningResourceName") String provisioningResourceName,
            @PathParam("provisioningPolicyName") String provisioningPolicyName,
            @BodyParam("application/json") ProvisioningPolicyUpdate properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningResourceName") String provisioningResourceName,
            @PathParam("provisioningPolicyName") String provisioningPolicyName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProvisioningPolicyListResult>> listByProvisioningResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisioningPolicyInner>>
        listByProvisioningResourceSinglePageAsync(String resourceGroupName, String provisioningResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByProvisioningResource(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, accept, context))
            .<PagedResponse<ProvisioningPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisioningPolicyInner>> listByProvisioningResourceSinglePageAsync(
        String resourceGroupName, String provisioningResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByProvisioningResource(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProvisioningPolicyInner> listByProvisioningResourceAsync(String resourceGroupName,
        String provisioningResourceName) {
        return new PagedFlux<>(
            () -> listByProvisioningResourceSinglePageAsync(resourceGroupName, provisioningResourceName),
            nextLink -> listByProvisioningResourceNextSinglePageAsync(nextLink));
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProvisioningPolicyInner> listByProvisioningResourceAsync(String resourceGroupName,
        String provisioningResourceName, Context context) {
        return new PagedFlux<>(
            () -> listByProvisioningResourceSinglePageAsync(resourceGroupName, provisioningResourceName, context),
            nextLink -> listByProvisioningResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProvisioningPolicyInner> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName) {
        return new PagedIterable<>(listByProvisioningResourceAsync(resourceGroupName, provisioningResourceName));
    }

    /**
     * List ProvisioningPolicy resources by ProvisioningResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProvisioningPolicyInner> listByProvisioningResource(String resourceGroupName,
        String provisioningResourceName, Context context) {
        return new PagedIterable<>(
            listByProvisioningResourceAsync(resourceGroupName, provisioningResourceName, context));
    }

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisioningPolicyInner>> getWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, provisioningPolicyName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProvisioningPolicyInner>> getWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, provisioningResourceName, provisioningPolicyName, accept, context);
    }

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisioningPolicyInner> getAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName) {
        return getWithResponseAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProvisioningPolicyInner> getWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context) {
        return getWithResponseAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, context)
            .block();
    }

    /**
     * Get a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ProvisioningPolicy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisioningPolicyInner get(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName) {
        return getWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, Context.NONE)
            .getValue();
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, provisioningPolicyName,
                resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, provisioningPolicyName,
            resource, accept, context);
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, resource);
        return this.client.<ProvisioningPolicyInner, ProvisioningPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisioningPolicyInner.class, ProvisioningPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, resource, context);
        return this.client.<ProvisioningPolicyInner, ProvisioningPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisioningPolicyInner.class, ProvisioningPolicyInner.class, context);
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, resource)
            .getSyncPoller();
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName,
            resource, context).getSyncPoller();
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisioningPolicyInner> createOrUpdateAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, resource)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisioningPolicyInner> createOrUpdateAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, resource,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisioningPolicyInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource) {
        return createOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, resource)
            .block();
    }

    /**
     * Create a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisioningPolicyInner createOrUpdate(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyInner resource, Context context) {
        return createOrUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, resource,
            context).block();
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, provisioningPolicyName,
                properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String provisioningResourceName, String provisioningPolicyName, ProvisioningPolicyUpdate properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, provisioningResourceName, provisioningPolicyName, properties, accept, context);
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdateAsync(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyUpdate properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties);
        return this.client.<ProvisioningPolicyInner, ProvisioningPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisioningPolicyInner.class, ProvisioningPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdateAsync(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyUpdate properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, provisioningResourceName,
            provisioningPolicyName, properties, context);
        return this.client.<ProvisioningPolicyInner, ProvisioningPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), ProvisioningPolicyInner.class, ProvisioningPolicyInner.class, context);
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyUpdate properties) {
        return this.beginUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties)
            .getSyncPoller();
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProvisioningPolicyInner>, ProvisioningPolicyInner> beginUpdate(
        String resourceGroupName, String provisioningResourceName, String provisioningPolicyName,
        ProvisioningPolicyUpdate properties, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties, context)
            .getSyncPoller();
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisioningPolicyInner> updateAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties) {
        return beginUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProvisioningPolicyInner> updateAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties, Context context) {
        return beginUpdateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisioningPolicyInner update(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties) {
        return updateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties).block();
    }

    /**
     * Update a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProvisioningPolicyInner update(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, ProvisioningPolicyUpdate properties, Context context) {
        return updateAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, properties, context)
            .block();
    }

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningResourceName, provisioningPolicyName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningResourceName is required and cannot be null."));
        }
        if (provisioningPolicyName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, provisioningResourceName, provisioningPolicyName, accept, context);
    }

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName) {
        return deleteWithResponseAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String provisioningResourceName,
        String provisioningPolicyName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, provisioningResourceName, provisioningPolicyName, context)
            .block();
    }

    /**
     * Delete a ProvisioningPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningResourceName The name of the Provisioning Resource.
     * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String provisioningResourceName, String provisioningPolicyName) {
        deleteWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisioningPolicyInner>>
        listByProvisioningResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByProvisioningResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProvisioningPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ProvisioningPolicy list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProvisioningPolicyInner>> listByProvisioningResourceNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByProvisioningResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
