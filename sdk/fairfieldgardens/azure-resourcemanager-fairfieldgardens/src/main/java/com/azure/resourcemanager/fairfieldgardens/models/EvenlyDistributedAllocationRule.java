// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * The allocation rule for evenly distributed allocation type.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("EvenlyDistributed")
@Fluent
public final class EvenlyDistributedAllocationRule extends AllocationRule {
    /*
     * List of endpoints for evenly distributed allocation type.
     */
    @JsonProperty(value = "endpoints", required = true)
    private List<AllocationEndpoint> endpoints;

    /**
     * Creates an instance of EvenlyDistributedAllocationRule class.
     */
    public EvenlyDistributedAllocationRule() {
    }

    /**
     * Get the endpoints property: List of endpoints for evenly distributed allocation type.
     * 
     * @return the endpoints value.
     */
    public List<AllocationEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: List of endpoints for evenly distributed allocation type.
     * 
     * @param endpoints the endpoints value to set.
     * @return the EvenlyDistributedAllocationRule object itself.
     */
    public EvenlyDistributedAllocationRule withEndpoints(List<AllocationEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EvenlyDistributedAllocationRule withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EvenlyDistributedAllocationRule withEndpointType(EndpointType endpointType) {
        super.withEndpointType(endpointType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (endpoints() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property endpoints in model EvenlyDistributedAllocationRule"));
        } else {
            endpoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EvenlyDistributedAllocationRule.class);
}
