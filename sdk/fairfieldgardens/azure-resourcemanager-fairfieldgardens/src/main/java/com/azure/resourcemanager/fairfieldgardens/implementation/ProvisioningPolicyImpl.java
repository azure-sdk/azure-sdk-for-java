// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningPolicyInner;
import com.azure.resourcemanager.fairfieldgardens.models.AllocationRule;
import com.azure.resourcemanager.fairfieldgardens.models.BootstrapAuthenticationRule;
import com.azure.resourcemanager.fairfieldgardens.models.JitRule;
import com.azure.resourcemanager.fairfieldgardens.models.JitRuleUpdate;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicy;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicyResourceDetails;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningPolicyUpdate;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ProvisioningPolicyImpl
    implements ProvisioningPolicy, ProvisioningPolicy.Definition, ProvisioningPolicy.Update {
    private ProvisioningPolicyInner innerObject;

    private final com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String description() {
        return this.innerModel().description();
    }

    public boolean status() {
        return this.innerModel().status();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public BootstrapAuthenticationRule bootstrapAuthentication() {
        return this.innerModel().bootstrapAuthentication();
    }

    public List<AllocationRule> allocations() {
        List<AllocationRule> inner = this.innerModel().allocations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public JitRule jit() {
        return this.innerModel().jit();
    }

    public ProvisioningPolicyResourceDetails resourceDetails() {
        return this.innerModel().resourceDetails();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ProvisioningPolicyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String provisioningResourceName;

    private String provisioningPolicyName;

    private ProvisioningPolicyUpdate updateProperties;

    public ProvisioningPolicyImpl withExistingProvisioningResource(String resourceGroupName,
        String provisioningResourceName) {
        this.resourceGroupName = resourceGroupName;
        this.provisioningResourceName = provisioningResourceName;
        return this;
    }

    public ProvisioningPolicy create() {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies().createOrUpdate(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, this.innerModel(), Context.NONE);
        return this;
    }

    public ProvisioningPolicy create(Context context) {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies().createOrUpdate(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, this.innerModel(), context);
        return this;
    }

    ProvisioningPolicyImpl(String name,
        com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager) {
        this.innerObject = new ProvisioningPolicyInner();
        this.serviceManager = serviceManager;
        this.provisioningPolicyName = name;
    }

    public ProvisioningPolicyImpl update() {
        this.updateProperties = new ProvisioningPolicyUpdate();
        return this;
    }

    public ProvisioningPolicy apply() {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies().update(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, updateProperties, Context.NONE);
        return this;
    }

    public ProvisioningPolicy apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies().update(resourceGroupName,
            provisioningResourceName, provisioningPolicyName, updateProperties, context);
        return this;
    }

    ProvisioningPolicyImpl(ProvisioningPolicyInner innerObject,
        com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.provisioningResourceName = Utils.getValueFromIdByName(innerObject.id(), "provisioningResources");
        this.provisioningPolicyName = Utils.getValueFromIdByName(innerObject.id(), "provisioningPolicies");
    }

    public ProvisioningPolicy refresh() {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies()
            .getWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, Context.NONE)
            .getValue();
        return this;
    }

    public ProvisioningPolicy refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getProvisioningPolicies()
            .getWithResponse(resourceGroupName, provisioningResourceName, provisioningPolicyName, context).getValue();
        return this;
    }

    public ProvisioningPolicyImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ProvisioningPolicyImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ProvisioningPolicyImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ProvisioningPolicyImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateProperties.withDescription(description);
            return this;
        }
    }

    public ProvisioningPolicyImpl withStatus(boolean status) {
        this.innerModel().withStatus(status);
        return this;
    }

    public ProvisioningPolicyImpl withBootstrapAuthentication(BootstrapAuthenticationRule bootstrapAuthentication) {
        if (isInCreateMode()) {
            this.innerModel().withBootstrapAuthentication(bootstrapAuthentication);
            return this;
        } else {
            this.updateProperties.withBootstrapAuthentication(bootstrapAuthentication);
            return this;
        }
    }

    public ProvisioningPolicyImpl withAllocations(List<AllocationRule> allocations) {
        if (isInCreateMode()) {
            this.innerModel().withAllocations(allocations);
            return this;
        } else {
            this.updateProperties.withAllocations(allocations);
            return this;
        }
    }

    public ProvisioningPolicyImpl withJit(JitRule jit) {
        this.innerModel().withJit(jit);
        return this;
    }

    public ProvisioningPolicyImpl withResourceDetails(ProvisioningPolicyResourceDetails resourceDetails) {
        if (isInCreateMode()) {
            this.innerModel().withResourceDetails(resourceDetails);
            return this;
        } else {
            this.updateProperties.withResourceDetails(resourceDetails);
            return this;
        }
    }

    public ProvisioningPolicyImpl withStatus(Boolean status) {
        this.updateProperties.withStatus(status);
        return this;
    }

    public ProvisioningPolicyImpl withJit(JitRuleUpdate jit) {
        this.updateProperties.withJit(jit);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
