// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fairfieldgardens.fluent.ProvisioningResourcesClient;
import com.azure.resourcemanager.fairfieldgardens.fluent.models.ProvisioningResourceInner;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningResource;
import com.azure.resourcemanager.fairfieldgardens.models.ProvisioningResources;

public final class ProvisioningResourcesImpl implements ProvisioningResources {
    private static final ClientLogger LOGGER = new ClientLogger(ProvisioningResourcesImpl.class);

    private final ProvisioningResourcesClient innerClient;

    private final com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager;

    public ProvisioningResourcesImpl(ProvisioningResourcesClient innerClient,
        com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProvisioningResource> list() {
        PagedIterable<ProvisioningResourceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ProvisioningResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisioningResource> list(Context context) {
        PagedIterable<ProvisioningResourceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ProvisioningResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisioningResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ProvisioningResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ProvisioningResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProvisioningResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ProvisioningResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ProvisioningResourceImpl(inner1, this.manager()));
    }

    public Response<ProvisioningResource> getByResourceGroupWithResponse(String resourceGroupName,
        String provisioningResourceName, Context context) {
        Response<ProvisioningResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, provisioningResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProvisioningResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProvisioningResource getByResourceGroup(String resourceGroupName, String provisioningResourceName) {
        ProvisioningResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, provisioningResourceName);
        if (inner != null) {
            return new ProvisioningResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String provisioningResourceName) {
        this.serviceClient().delete(resourceGroupName, provisioningResourceName);
    }

    public void delete(String resourceGroupName, String provisioningResourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, provisioningResourceName, context);
    }

    public ProvisioningResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, provisioningResourceName, Context.NONE)
            .getValue();
    }

    public Response<ProvisioningResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, provisioningResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        this.delete(resourceGroupName, provisioningResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningResourceName = Utils.getValueFromIdByName(id, "provisioningResources");
        if (provisioningResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningResources'.", id)));
        }
        this.delete(resourceGroupName, provisioningResourceName, context);
    }

    private ProvisioningResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fairfieldgardens.FairfieldgardensManager manager() {
        return this.serviceManager;
    }

    public ProvisioningResourceImpl define(String name) {
        return new ProvisioningResourceImpl(name, this.manager());
    }
}
