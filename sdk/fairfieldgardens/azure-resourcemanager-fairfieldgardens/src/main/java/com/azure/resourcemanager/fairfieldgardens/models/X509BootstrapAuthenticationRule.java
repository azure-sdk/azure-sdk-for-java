// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fairfieldgardens.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The x509-based authentication rule for bootstrapping.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("X509")
@Fluent
public final class X509BootstrapAuthenticationRule extends BootstrapAuthenticationRule {
    /*
     * The primary certificate. B64 x509 cert
     */
    @JsonProperty(value = "primaryCertificate", required = true)
    private X509Certificate primaryCertificate;

    /*
     * The secondary certificate.
     */
    @JsonProperty(value = "secondaryCertificate")
    private X509Certificate secondaryCertificate;

    /**
     * Creates an instance of X509BootstrapAuthenticationRule class.
     */
    public X509BootstrapAuthenticationRule() {
    }

    /**
     * Get the primaryCertificate property: The primary certificate. B64 x509 cert.
     * 
     * @return the primaryCertificate value.
     */
    public X509Certificate primaryCertificate() {
        return this.primaryCertificate;
    }

    /**
     * Set the primaryCertificate property: The primary certificate. B64 x509 cert.
     * 
     * @param primaryCertificate the primaryCertificate value to set.
     * @return the X509BootstrapAuthenticationRule object itself.
     */
    public X509BootstrapAuthenticationRule withPrimaryCertificate(X509Certificate primaryCertificate) {
        this.primaryCertificate = primaryCertificate;
        return this;
    }

    /**
     * Get the secondaryCertificate property: The secondary certificate.
     * 
     * @return the secondaryCertificate value.
     */
    public X509Certificate secondaryCertificate() {
        return this.secondaryCertificate;
    }

    /**
     * Set the secondaryCertificate property: The secondary certificate.
     * 
     * @param secondaryCertificate the secondaryCertificate value to set.
     * @return the X509BootstrapAuthenticationRule object itself.
     */
    public X509BootstrapAuthenticationRule withSecondaryCertificate(X509Certificate secondaryCertificate) {
        this.secondaryCertificate = secondaryCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (primaryCertificate() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property primaryCertificate in model X509BootstrapAuthenticationRule"));
        } else {
            primaryCertificate().validate();
        }
        if (secondaryCertificate() != null) {
            secondaryCertificate().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(X509BootstrapAuthenticationRule.class);
}
