// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of DbNodeResource.
 */
@Fluent
public final class ExascaleDbNodeProperties implements JsonSerializable<ExascaleDbNodeProperties> {
    /*
     * DbNode OCID
     */
    private String ocid;

    /*
     * Additional information about the planned maintenance.
     */
    private String additionalDetails;

    /*
     * The number of CPU cores enabled on the Db node.
     */
    private Integer cpuCoreCount;

    /*
     * The allocated local node storage in GBs on the Db node.
     */
    private Integer dbNodeStorageSizeInGbs;

    /*
     * The name of the Fault Domain the instance is contained in.
     */
    private String faultDomain;

    /*
     * The host name for the database node.
     */
    private String hostname;

    /*
     * The current state of the database node.
     */
    private DbNodeProvisioningState lifecycleState;

    /*
     * The type of database node maintenance.
     */
    private String maintenanceType;

    /*
     * The allocated memory in GBs on the Db node.
     */
    private Integer memorySizeInGbs;

    /*
     * The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for
     * virtual machine DB systems.
     */
    private Integer softwareStorageSizeInGb;

    /*
     * End date and time of maintenance window.
     */
    private OffsetDateTime timeMaintenanceWindowEnd;

    /*
     * Start date and time of maintenance window.
     */
    private OffsetDateTime timeMaintenanceWindowStart;

    /*
     * The total number of CPU cores reserved on the Db node.
     */
    private Integer totalCpuCoreCount;

    /**
     * Creates an instance of ExascaleDbNodeProperties class.
     */
    public ExascaleDbNodeProperties() {
    }

    /**
     * Get the ocid property: DbNode OCID.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Set the ocid property: DbNode OCID.
     * 
     * @param ocid the ocid value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withOcid(String ocid) {
        this.ocid = ocid;
        return this;
    }

    /**
     * Get the additionalDetails property: Additional information about the planned maintenance.
     * 
     * @return the additionalDetails value.
     */
    public String additionalDetails() {
        return this.additionalDetails;
    }

    /**
     * Set the additionalDetails property: Additional information about the planned maintenance.
     * 
     * @param additionalDetails the additionalDetails value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withAdditionalDetails(String additionalDetails) {
        this.additionalDetails = additionalDetails;
        return this;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores enabled on the Db node.
     * 
     * @return the cpuCoreCount value.
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * Set the cpuCoreCount property: The number of CPU cores enabled on the Db node.
     * 
     * @param cpuCoreCount the cpuCoreCount value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withCpuCoreCount(Integer cpuCoreCount) {
        this.cpuCoreCount = cpuCoreCount;
        return this;
    }

    /**
     * Get the dbNodeStorageSizeInGbs property: The allocated local node storage in GBs on the Db node.
     * 
     * @return the dbNodeStorageSizeInGbs value.
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }

    /**
     * Set the dbNodeStorageSizeInGbs property: The allocated local node storage in GBs on the Db node.
     * 
     * @param dbNodeStorageSizeInGbs the dbNodeStorageSizeInGbs value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withDbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
        this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
        return this;
    }

    /**
     * Get the faultDomain property: The name of the Fault Domain the instance is contained in.
     * 
     * @return the faultDomain value.
     */
    public String faultDomain() {
        return this.faultDomain;
    }

    /**
     * Set the faultDomain property: The name of the Fault Domain the instance is contained in.
     * 
     * @param faultDomain the faultDomain value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withFaultDomain(String faultDomain) {
        this.faultDomain = faultDomain;
        return this;
    }

    /**
     * Get the hostname property: The host name for the database node.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The host name for the database node.
     * 
     * @param hostname the hostname value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the lifecycleState property: The current state of the database node.
     * 
     * @return the lifecycleState value.
     */
    public DbNodeProvisioningState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Set the lifecycleState property: The current state of the database node.
     * 
     * @param lifecycleState the lifecycleState value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withLifecycleState(DbNodeProvisioningState lifecycleState) {
        this.lifecycleState = lifecycleState;
        return this;
    }

    /**
     * Get the maintenanceType property: The type of database node maintenance.
     * 
     * @return the maintenanceType value.
     */
    public String maintenanceType() {
        return this.maintenanceType;
    }

    /**
     * Set the maintenanceType property: The type of database node maintenance.
     * 
     * @param maintenanceType the maintenanceType value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withMaintenanceType(String maintenanceType) {
        this.maintenanceType = maintenanceType;
        return this;
    }

    /**
     * Get the memorySizeInGbs property: The allocated memory in GBs on the Db node.
     * 
     * @return the memorySizeInGbs value.
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }

    /**
     * Set the memorySizeInGbs property: The allocated memory in GBs on the Db node.
     * 
     * @param memorySizeInGbs the memorySizeInGbs value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withMemorySizeInGbs(Integer memorySizeInGbs) {
        this.memorySizeInGbs = memorySizeInGbs;
        return this;
    }

    /**
     * Get the softwareStorageSizeInGb property: The size (in GB) of the block storage volume allocation for the DB
     * system. This attribute applies only for virtual machine DB systems.
     * 
     * @return the softwareStorageSizeInGb value.
     */
    public Integer softwareStorageSizeInGb() {
        return this.softwareStorageSizeInGb;
    }

    /**
     * Set the softwareStorageSizeInGb property: The size (in GB) of the block storage volume allocation for the DB
     * system. This attribute applies only for virtual machine DB systems.
     * 
     * @param softwareStorageSizeInGb the softwareStorageSizeInGb value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withSoftwareStorageSizeInGb(Integer softwareStorageSizeInGb) {
        this.softwareStorageSizeInGb = softwareStorageSizeInGb;
        return this;
    }

    /**
     * Get the timeMaintenanceWindowEnd property: End date and time of maintenance window.
     * 
     * @return the timeMaintenanceWindowEnd value.
     */
    public OffsetDateTime timeMaintenanceWindowEnd() {
        return this.timeMaintenanceWindowEnd;
    }

    /**
     * Set the timeMaintenanceWindowEnd property: End date and time of maintenance window.
     * 
     * @param timeMaintenanceWindowEnd the timeMaintenanceWindowEnd value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withTimeMaintenanceWindowEnd(OffsetDateTime timeMaintenanceWindowEnd) {
        this.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
        return this;
    }

    /**
     * Get the timeMaintenanceWindowStart property: Start date and time of maintenance window.
     * 
     * @return the timeMaintenanceWindowStart value.
     */
    public OffsetDateTime timeMaintenanceWindowStart() {
        return this.timeMaintenanceWindowStart;
    }

    /**
     * Set the timeMaintenanceWindowStart property: Start date and time of maintenance window.
     * 
     * @param timeMaintenanceWindowStart the timeMaintenanceWindowStart value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withTimeMaintenanceWindowStart(OffsetDateTime timeMaintenanceWindowStart) {
        this.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
        return this;
    }

    /**
     * Get the totalCpuCoreCount property: The total number of CPU cores reserved on the Db node.
     * 
     * @return the totalCpuCoreCount value.
     */
    public Integer totalCpuCoreCount() {
        return this.totalCpuCoreCount;
    }

    /**
     * Set the totalCpuCoreCount property: The total number of CPU cores reserved on the Db node.
     * 
     * @param totalCpuCoreCount the totalCpuCoreCount value to set.
     * @return the ExascaleDbNodeProperties object itself.
     */
    public ExascaleDbNodeProperties withTotalCpuCoreCount(Integer totalCpuCoreCount) {
        this.totalCpuCoreCount = totalCpuCoreCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ocid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ocid in model ExascaleDbNodeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExascaleDbNodeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ocid", this.ocid);
        jsonWriter.writeStringField("additionalDetails", this.additionalDetails);
        jsonWriter.writeNumberField("cpuCoreCount", this.cpuCoreCount);
        jsonWriter.writeNumberField("dbNodeStorageSizeInGbs", this.dbNodeStorageSizeInGbs);
        jsonWriter.writeStringField("faultDomain", this.faultDomain);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("lifecycleState",
            this.lifecycleState == null ? null : this.lifecycleState.toString());
        jsonWriter.writeStringField("maintenanceType", this.maintenanceType);
        jsonWriter.writeNumberField("memorySizeInGbs", this.memorySizeInGbs);
        jsonWriter.writeNumberField("softwareStorageSizeInGb", this.softwareStorageSizeInGb);
        jsonWriter.writeStringField("timeMaintenanceWindowEnd",
            this.timeMaintenanceWindowEnd == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeMaintenanceWindowEnd));
        jsonWriter.writeStringField("timeMaintenanceWindowStart",
            this.timeMaintenanceWindowStart == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeMaintenanceWindowStart));
        jsonWriter.writeNumberField("totalCpuCoreCount", this.totalCpuCoreCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExascaleDbNodeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExascaleDbNodeProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExascaleDbNodeProperties.
     */
    public static ExascaleDbNodeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExascaleDbNodeProperties deserializedExascaleDbNodeProperties = new ExascaleDbNodeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ocid".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.ocid = reader.getString();
                } else if ("additionalDetails".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.additionalDetails = reader.getString();
                } else if ("cpuCoreCount".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.cpuCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("dbNodeStorageSizeInGbs".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.dbNodeStorageSizeInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("faultDomain".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.faultDomain = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.hostname = reader.getString();
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.lifecycleState
                        = DbNodeProvisioningState.fromString(reader.getString());
                } else if ("maintenanceType".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.maintenanceType = reader.getString();
                } else if ("memorySizeInGbs".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.memorySizeInGbs = reader.getNullable(JsonReader::getInt);
                } else if ("softwareStorageSizeInGb".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.softwareStorageSizeInGb
                        = reader.getNullable(JsonReader::getInt);
                } else if ("timeMaintenanceWindowEnd".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.timeMaintenanceWindowEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timeMaintenanceWindowStart".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.timeMaintenanceWindowStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalCpuCoreCount".equals(fieldName)) {
                    deserializedExascaleDbNodeProperties.totalCpuCoreCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExascaleDbNodeProperties;
        });
    }
}
