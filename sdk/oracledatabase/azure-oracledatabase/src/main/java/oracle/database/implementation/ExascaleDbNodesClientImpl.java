// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package oracle.database.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import java.nio.ByteBuffer;
import oracle.database.fluent.ExascaleDbNodesClient;
import oracle.database.fluent.models.DbActionResponseInner;
import oracle.database.fluent.models.ExascaleDbNodeInner;
import oracle.database.implementation.models.ExascaleDbNodeListResult;
import oracle.database.models.DbNodeAction;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ExascaleDbNodesClient.
 */
public final class ExascaleDbNodesClientImpl implements ExascaleDbNodesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ExascaleDbNodesService service;

    /**
     * The service client containing this operation class.
     */
    private final DatabaseClientImpl client;

    /**
     * Initializes an instance of ExascaleDbNodesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ExascaleDbNodesClientImpl(DatabaseClientImpl client) {
        this.service
            = RestProxy.create(ExascaleDbNodesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DatabaseClientExascaleDbNodes to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DatabaseClientExasca")
    public interface ExascaleDbNodesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exadbVmClusters/{exadbVmClusterName}/dbNodes/{exascaleDbNodeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExascaleDbNodeInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("exadbVmClusterName") String exadbVmClusterName,
            @PathParam("exascaleDbNodeName") String exascaleDbNodeName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exadbVmClusters/{exadbVmClusterName}/dbNodes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExascaleDbNodeListResult>> listByParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("exadbVmClusterName") String exadbVmClusterName, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exadbVmClusters/{exadbVmClusterName}/dbNodes/{exascaleDbNodeName}/action")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> action(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("exadbVmClusterName") String exadbVmClusterName,
            @PathParam("exascaleDbNodeName") String exascaleDbNodeName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DbNodeAction body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExascaleDbNodeListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a ExascaleDbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExascaleDbNode along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExascaleDbNodeInner>> getWithResponseAsync(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        if (exascaleDbNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exascaleDbNodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, exadbVmClusterName, exascaleDbNodeName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ExascaleDbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExascaleDbNode along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExascaleDbNodeInner>> getWithResponseAsync(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        if (exascaleDbNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exascaleDbNodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, exadbVmClusterName, exascaleDbNodeName, accept, context);
    }

    /**
     * Get a ExascaleDbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExascaleDbNode on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExascaleDbNodeInner> getAsync(String resourceGroupName, String exadbVmClusterName,
        String exascaleDbNodeName) {
        return getWithResponseAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ExascaleDbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExascaleDbNode along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExascaleDbNodeInner> getWithResponse(String resourceGroupName, String exadbVmClusterName,
        String exascaleDbNodeName, Context context) {
        return getWithResponseAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, context).block();
    }

    /**
     * Get a ExascaleDbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExascaleDbNode.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExascaleDbNodeInner get(String resourceGroupName, String exadbVmClusterName, String exascaleDbNodeName) {
        return getWithResponse(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, Context.NONE).getValue();
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExascaleDbNodeInner>> listByParentSinglePageAsync(String resourceGroupName,
        String exadbVmClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, exadbVmClusterName, accept, context))
            .<PagedResponse<ExascaleDbNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExascaleDbNodeInner>> listByParentSinglePageAsync(String resourceGroupName,
        String exadbVmClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByParent(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, exadbVmClusterName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExascaleDbNodeInner> listByParentAsync(String resourceGroupName, String exadbVmClusterName) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, exadbVmClusterName),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExascaleDbNodeInner> listByParentAsync(String resourceGroupName, String exadbVmClusterName,
        Context context) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, exadbVmClusterName, context),
            nextLink -> listByParentNextSinglePageAsync(nextLink, context));
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExascaleDbNodeInner> listByParent(String resourceGroupName, String exadbVmClusterName) {
        return new PagedIterable<>(listByParentAsync(resourceGroupName, exadbVmClusterName));
    }

    /**
     * List ExascaleDbNode resources by ExadbVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExascaleDbNodeInner> listByParent(String resourceGroupName, String exadbVmClusterName,
        Context context) {
        return new PagedIterable<>(listByParentAsync(resourceGroupName, exadbVmClusterName, context));
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> actionWithResponseAsync(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        if (exascaleDbNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exascaleDbNodeName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.action(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, exadbVmClusterName, exascaleDbNodeName, contentType,
                accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> actionWithResponseAsync(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (exadbVmClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exadbVmClusterName is required and cannot be null."));
        }
        if (exascaleDbNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exascaleDbNodeName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.action(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, exadbVmClusterName, exascaleDbNodeName, contentType, accept, body, context);
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DbActionResponseInner>, DbActionResponseInner> beginActionAsync(
        String resourceGroupName, String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = actionWithResponseAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body);
        return this.client.<DbActionResponseInner, DbActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), DbActionResponseInner.class, DbActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DbActionResponseInner>, DbActionResponseInner> beginActionAsync(
        String resourceGroupName, String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = actionWithResponseAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body, context);
        return this.client.<DbActionResponseInner, DbActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), DbActionResponseInner.class, DbActionResponseInner.class, context);
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DbActionResponseInner>, DbActionResponseInner> beginAction(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body) {
        return this.beginActionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body).getSyncPoller();
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DbActionResponseInner>, DbActionResponseInner> beginAction(String resourceGroupName,
        String exadbVmClusterName, String exascaleDbNodeName, DbNodeAction body, Context context) {
        return this.beginActionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body, context)
            .getSyncPoller();
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbActionResponseInner> actionAsync(String resourceGroupName, String exadbVmClusterName,
        String exascaleDbNodeName, DbNodeAction body) {
        return beginActionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbActionResponseInner> actionAsync(String resourceGroupName, String exadbVmClusterName,
        String exascaleDbNodeName, DbNodeAction body, Context context) {
        return beginActionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbActionResponseInner action(String resourceGroupName, String exadbVmClusterName, String exascaleDbNodeName,
        DbNodeAction body) {
        return actionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body).block();
    }

    /**
     * VM actions on DbNode of ExadbVmCluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param exadbVmClusterName The name of the ExadbVmCluster.
     * @param exascaleDbNodeName The name of the ExascaleDbNode.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbActionResponseInner action(String resourceGroupName, String exadbVmClusterName, String exascaleDbNodeName,
        DbNodeAction body, Context context) {
        return actionAsync(resourceGroupName, exadbVmClusterName, exascaleDbNodeName, body, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExascaleDbNodeInner>> listByParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExascaleDbNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExascaleDbNode list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExascaleDbNodeInner>> listByParentNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
