// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package oracle.database.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import oracle.database.fluent.DnsPrivateZonesClient;
import oracle.database.fluent.models.DnsPrivateZoneInner;
import oracle.database.models.DnsPrivateZone;
import oracle.database.models.DnsPrivateZones;

public final class DnsPrivateZonesImpl implements DnsPrivateZones {
    private static final ClientLogger LOGGER = new ClientLogger(DnsPrivateZonesImpl.class);

    private final DnsPrivateZonesClient innerClient;

    private final oracle.database.DatabaseManager serviceManager;

    public DnsPrivateZonesImpl(DnsPrivateZonesClient innerClient, oracle.database.DatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DnsPrivateZone> getWithResponse(String location, String dnsprivatezonename, Context context) {
        Response<DnsPrivateZoneInner> inner
            = this.serviceClient().getWithResponse(location, dnsprivatezonename, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DnsPrivateZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DnsPrivateZone get(String location, String dnsprivatezonename) {
        DnsPrivateZoneInner inner = this.serviceClient().get(location, dnsprivatezonename);
        if (inner != null) {
            return new DnsPrivateZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DnsPrivateZone> listByLocation(String location) {
        PagedIterable<DnsPrivateZoneInner> inner = this.serviceClient().listByLocation(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsPrivateZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsPrivateZone> listByLocation(String location, Context context) {
        PagedIterable<DnsPrivateZoneInner> inner = this.serviceClient().listByLocation(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsPrivateZoneImpl(inner1, this.manager()));
    }

    private DnsPrivateZonesClient serviceClient() {
        return this.innerClient;
    }

    private oracle.database.DatabaseManager manager() {
        return this.serviceManager;
    }
}
