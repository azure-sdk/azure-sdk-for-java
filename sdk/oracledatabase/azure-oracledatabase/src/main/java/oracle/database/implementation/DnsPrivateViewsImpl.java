// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package oracle.database.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import oracle.database.fluent.DnsPrivateViewsClient;
import oracle.database.fluent.models.DnsPrivateViewInner;
import oracle.database.models.DnsPrivateView;
import oracle.database.models.DnsPrivateViews;

public final class DnsPrivateViewsImpl implements DnsPrivateViews {
    private static final ClientLogger LOGGER = new ClientLogger(DnsPrivateViewsImpl.class);

    private final DnsPrivateViewsClient innerClient;

    private final oracle.database.DatabaseManager serviceManager;

    public DnsPrivateViewsImpl(DnsPrivateViewsClient innerClient, oracle.database.DatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DnsPrivateView> getWithResponse(String location, String dnsprivateviewocid, Context context) {
        Response<DnsPrivateViewInner> inner
            = this.serviceClient().getWithResponse(location, dnsprivateviewocid, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DnsPrivateViewImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DnsPrivateView get(String location, String dnsprivateviewocid) {
        DnsPrivateViewInner inner = this.serviceClient().get(location, dnsprivateviewocid);
        if (inner != null) {
            return new DnsPrivateViewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DnsPrivateView> listByLocation(String location) {
        PagedIterable<DnsPrivateViewInner> inner = this.serviceClient().listByLocation(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsPrivateViewImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsPrivateView> listByLocation(String location, Context context) {
        PagedIterable<DnsPrivateViewInner> inner = this.serviceClient().listByLocation(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsPrivateViewImpl(inner1, this.manager()));
    }

    private DnsPrivateViewsClient serviceClient() {
        return this.innerClient;
    }

    private oracle.database.DatabaseManager manager() {
        return this.serviceManager;
    }
}
