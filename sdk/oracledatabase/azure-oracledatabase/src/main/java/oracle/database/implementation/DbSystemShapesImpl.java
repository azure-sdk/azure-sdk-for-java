// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package oracle.database.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import oracle.database.fluent.DbSystemShapesClient;
import oracle.database.fluent.models.DbSystemShapeInner;
import oracle.database.models.DbSystemShape;
import oracle.database.models.DbSystemShapes;

public final class DbSystemShapesImpl implements DbSystemShapes {
    private static final ClientLogger LOGGER = new ClientLogger(DbSystemShapesImpl.class);

    private final DbSystemShapesClient innerClient;

    private final oracle.database.DatabaseManager serviceManager;

    public DbSystemShapesImpl(DbSystemShapesClient innerClient, oracle.database.DatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DbSystemShape> getWithResponse(String location, String dbsystemshapename, Context context) {
        Response<DbSystemShapeInner> inner = this.serviceClient().getWithResponse(location, dbsystemshapename, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DbSystemShapeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DbSystemShape get(String location, String dbsystemshapename) {
        DbSystemShapeInner inner = this.serviceClient().get(location, dbsystemshapename);
        if (inner != null) {
            return new DbSystemShapeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DbSystemShape> listByLocation(String location) {
        PagedIterable<DbSystemShapeInner> inner = this.serviceClient().listByLocation(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DbSystemShapeImpl(inner1, this.manager()));
    }

    public PagedIterable<DbSystemShape> listByLocation(String location, String zone, Context context) {
        PagedIterable<DbSystemShapeInner> inner = this.serviceClient().listByLocation(location, zone, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DbSystemShapeImpl(inner1, this.manager()));
    }

    private DbSystemShapesClient serviceClient() {
        return this.innerClient;
    }

    private oracle.database.DatabaseManager manager() {
        return this.serviceManager;
    }
}
