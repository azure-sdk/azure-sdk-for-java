// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package oracle.database.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import oracle.database.fluent.OracleSubscriptionsClient;
import oracle.database.fluent.models.ActivationLinksInner;
import oracle.database.fluent.models.CloudAccountDetailsInner;
import oracle.database.fluent.models.OracleSubscriptionInner;
import oracle.database.fluent.models.SaasSubscriptionDetailsInner;
import oracle.database.models.ActivationLinks;
import oracle.database.models.AzureSubscriptions;
import oracle.database.models.CloudAccountDetails;
import oracle.database.models.OracleSubscription;
import oracle.database.models.OracleSubscriptionUpdate;
import oracle.database.models.OracleSubscriptions;
import oracle.database.models.SaasSubscriptionDetails;

public final class OracleSubscriptionsImpl implements OracleSubscriptions {
    private static final ClientLogger LOGGER = new ClientLogger(OracleSubscriptionsImpl.class);

    private final OracleSubscriptionsClient innerClient;

    private final oracle.database.DatabaseManager serviceManager;

    public OracleSubscriptionsImpl(OracleSubscriptionsClient innerClient,
        oracle.database.DatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OracleSubscription> list() {
        PagedIterable<OracleSubscriptionInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OracleSubscriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<OracleSubscription> list(Context context) {
        PagedIterable<OracleSubscriptionInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OracleSubscriptionImpl(inner1, this.manager()));
    }

    public OracleSubscription createOrUpdate(OracleSubscriptionInner resource) {
        OracleSubscriptionInner inner = this.serviceClient().createOrUpdate(resource);
        if (inner != null) {
            return new OracleSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OracleSubscription createOrUpdate(OracleSubscriptionInner resource, Context context) {
        OracleSubscriptionInner inner = this.serviceClient().createOrUpdate(resource, context);
        if (inner != null) {
            return new OracleSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OracleSubscription> getWithResponse(Context context) {
        Response<OracleSubscriptionInner> inner = this.serviceClient().getWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OracleSubscriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OracleSubscription get() {
        OracleSubscriptionInner inner = this.serviceClient().get();
        if (inner != null) {
            return new OracleSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OracleSubscription update(OracleSubscriptionUpdate properties) {
        OracleSubscriptionInner inner = this.serviceClient().update(properties);
        if (inner != null) {
            return new OracleSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OracleSubscription update(OracleSubscriptionUpdate properties, Context context) {
        OracleSubscriptionInner inner = this.serviceClient().update(properties, context);
        if (inner != null) {
            return new OracleSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete() {
        this.serviceClient().delete();
    }

    public void delete(Context context) {
        this.serviceClient().delete(context);
    }

    public CloudAccountDetails listCloudAccountDetails() {
        CloudAccountDetailsInner inner = this.serviceClient().listCloudAccountDetails();
        if (inner != null) {
            return new CloudAccountDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CloudAccountDetails listCloudAccountDetails(Context context) {
        CloudAccountDetailsInner inner = this.serviceClient().listCloudAccountDetails(context);
        if (inner != null) {
            return new CloudAccountDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SaasSubscriptionDetails listSaasSubscriptionDetails() {
        SaasSubscriptionDetailsInner inner = this.serviceClient().listSaasSubscriptionDetails();
        if (inner != null) {
            return new SaasSubscriptionDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SaasSubscriptionDetails listSaasSubscriptionDetails(Context context) {
        SaasSubscriptionDetailsInner inner = this.serviceClient().listSaasSubscriptionDetails(context);
        if (inner != null) {
            return new SaasSubscriptionDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ActivationLinks listActivationLinks() {
        ActivationLinksInner inner = this.serviceClient().listActivationLinks();
        if (inner != null) {
            return new ActivationLinksImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ActivationLinks listActivationLinks(Context context) {
        ActivationLinksInner inner = this.serviceClient().listActivationLinks(context);
        if (inner != null) {
            return new ActivationLinksImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void addAzureSubscriptions(AzureSubscriptions body) {
        this.serviceClient().addAzureSubscriptions(body);
    }

    public void addAzureSubscriptions(AzureSubscriptions body, Context context) {
        this.serviceClient().addAzureSubscriptions(body, context);
    }

    private OracleSubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private oracle.database.DatabaseManager manager() {
        return this.serviceManager;
    }
}
