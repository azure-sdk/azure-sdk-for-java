// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeProfileProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.UpgradeChannel;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of the AutoUpgradeProfile.
 */
@Fluent
public final class AutoUpgradeProfileProperties {
    /*
     * The provisioning state of the AutoUpgradeProfile resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private AutoUpgradeProfileProvisioningState provisioningState;

    /*
     * The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all
     * clusters which are members of the fleet.
     */
    @JsonProperty(value = "updateStrategyId")
    private String updateStrategyId;

    /*
     * Configures how auto-upgrade will be run.
     */
    @JsonProperty(value = "channel", required = true)
    private UpgradeChannel channel;

    /*
     * The node image upgrade to be applied to the target clusters in auto upgrade.
     */
    @JsonProperty(value = "nodeImageSelection")
    private NodeImageSelection nodeImageSelection;

    /*
     * If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     */
    @JsonProperty(value = "disabled")
    private Boolean disabled;

    /**
     * Creates an instance of AutoUpgradeProfileProperties class.
     */
    public AutoUpgradeProfileProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the AutoUpgradeProfile resource.
     * 
     * @return the provisioningState value.
     */
    public AutoUpgradeProfileProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the updateStrategyId property: The resource id of the UpdateStrategy resource to reference. If not
     * specified, the auto upgrade will run on all clusters which are members of the fleet.
     * 
     * @return the updateStrategyId value.
     */
    public String updateStrategyId() {
        return this.updateStrategyId;
    }

    /**
     * Set the updateStrategyId property: The resource id of the UpdateStrategy resource to reference. If not
     * specified, the auto upgrade will run on all clusters which are members of the fleet.
     * 
     * @param updateStrategyId the updateStrategyId value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withUpdateStrategyId(String updateStrategyId) {
        this.updateStrategyId = updateStrategyId;
        return this;
    }

    /**
     * Get the channel property: Configures how auto-upgrade will be run.
     * 
     * @return the channel value.
     */
    public UpgradeChannel channel() {
        return this.channel;
    }

    /**
     * Set the channel property: Configures how auto-upgrade will be run.
     * 
     * @param channel the channel value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withChannel(UpgradeChannel channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Get the nodeImageSelection property: The node image upgrade to be applied to the target clusters in auto
     * upgrade.
     * 
     * @return the nodeImageSelection value.
     */
    public NodeImageSelection nodeImageSelection() {
        return this.nodeImageSelection;
    }

    /**
     * Set the nodeImageSelection property: The node image upgrade to be applied to the target clusters in auto
     * upgrade.
     * 
     * @param nodeImageSelection the nodeImageSelection value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withNodeImageSelection(NodeImageSelection nodeImageSelection) {
        this.nodeImageSelection = nodeImageSelection;
        return this;
    }

    /**
     * Get the disabled property: If set to False: the auto upgrade has effect - target managed clusters will be
     * upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     * 
     * @return the disabled value.
     */
    public Boolean disabled() {
        return this.disabled;
    }

    /**
     * Set the disabled property: If set to False: the auto upgrade has effect - target managed clusters will be
     * upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     * 
     * @param disabled the disabled value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (channel() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property channel in model AutoUpgradeProfileProperties"));
        }
        if (nodeImageSelection() != null) {
            nodeImageSelection().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutoUpgradeProfileProperties.class);
}
