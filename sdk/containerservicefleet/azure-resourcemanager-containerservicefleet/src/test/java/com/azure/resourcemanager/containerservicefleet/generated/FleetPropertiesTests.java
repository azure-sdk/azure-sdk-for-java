// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetProperties;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import org.junit.jupiter.api.Assertions;

public final class FleetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"f\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":false,\"enableVnetIntegration\":true,\"subnetId\":\"v\"},\"agentProfile\":{\"subnetId\":\"rwzoxxjtfelluwf\",\"vmSize\":\"tonpe\"},\"fqdn\":\"pjkjlxofpdv\",\"kubernetesVersion\":\"fxxypininmayhuy\",\"portalFqdn\":\"kpode\"}}")
            .toObject(FleetProperties.class);
        Assertions.assertEquals("f", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(false, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("v", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("rwzoxxjtfelluwf", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("tonpe", model.hubProfile().agentProfile().vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetProperties model = new FleetProperties().withHubProfile(new FleetHubProfile().withDnsPrefix("f")
            .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(false)
                .withEnableVnetIntegration(true)
                .withSubnetId("v"))
            .withAgentProfile(new AgentProfile().withSubnetId("rwzoxxjtfelluwf").withVmSize("tonpe")));
        model = BinaryData.fromObject(model).toObject(FleetProperties.class);
        Assertions.assertEquals("f", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(false, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("v", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("rwzoxxjtfelluwf", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("tonpe", model.hubProfile().agentProfile().vmSize());
    }
}
