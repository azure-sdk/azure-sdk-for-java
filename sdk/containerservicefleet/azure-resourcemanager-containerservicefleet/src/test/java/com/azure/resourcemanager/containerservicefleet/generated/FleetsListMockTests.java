// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"hubProfile\":{\"dnsPrefix\":\"yq\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":false,\"subnetId\":\"avhqlkth\"},\"agentProfile\":{\"subnetId\":\"qolbgyc\",\"vmSize\":\"iertgccymvaolp\"},\"fqdn\":\"lqlfm\",\"kubernetesVersion\":\"n\",\"portalFqdn\":\"glzpswiydm\"}},\"eTag\":\"yhz\",\"identity\":{\"principalId\":\"sadbz\",\"tenantId\":\"vdfznudaodvxzb\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"fiwjmygtdssls\":{\"clientId\":\"lpstdbhhxsrzdz\",\"principalId\":\"erscdntne\"},\"hhszh\":{\"clientId\":\"mweriofzpy\",\"principalId\":\"emwabnet\"}}},\"location\":\"plvwiwubmwmbes\",\"tags\":{\"wtppjflcxogaoko\":\"k\"},\"id\":\"z\",\"name\":\"nsikvmkqzeqqkdl\",\"type\":\"fzxmhhvhgureodkw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Fleet> response = manager.fleets().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("plvwiwubmwmbes", response.iterator().next().location());
        Assertions.assertEquals("k", response.iterator().next().tags().get("wtppjflcxogaoko"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("yq", response.iterator().next().hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            response.iterator().next().hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false,
            response.iterator().next().hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("avhqlkth",
            response.iterator().next().hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("qolbgyc", response.iterator().next().hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("iertgccymvaolp", response.iterator().next().hubProfile().agentProfile().vmSize());
    }
}
