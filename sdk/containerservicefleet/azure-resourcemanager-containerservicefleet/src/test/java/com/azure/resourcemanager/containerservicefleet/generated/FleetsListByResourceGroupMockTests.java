// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"hubProfile\":{\"dnsPrefix\":\"ujmkcjhwqy\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":false,\"enableVnetIntegration\":false,\"subnetId\":\"jewgdrjerv\"},\"agentProfile\":{\"subnetId\":\"nqpeh\",\"vmSize\":\"doy\"},\"fqdn\":\"ifthnz\",\"kubernetesVersion\":\"dslgnayqigynduh\",\"portalFqdn\":\"hqlkthumaqo\"}},\"eTag\":\"gycdu\",\"identity\":{\"principalId\":\"tgccymvaolpss\",\"tenantId\":\"lfmmdnbbglzpswi\",\"type\":\"None\",\"userAssignedIdentities\":{\"dbzm\":{\"clientId\":\"yhz\",\"principalId\":\"ss\"},\"rzdzucerscdnt\":{\"clientId\":\"dfznudaodv\",\"principalId\":\"bncblylpstdbhhx\"},\"zpyqsemwab\":{\"clientId\":\"vfiwjmygtdss\",\"principalId\":\"wtmwerio\"}}},\"location\":\"tshhszhedp\",\"tags\":{\"wtppjflcxogaoko\":\"iwubmwmbesldnk\",\"nsikvmkqzeqqkdl\":\"z\"},\"id\":\"fzxmhhvhgureodkw\",\"name\":\"bdagxt\",\"type\":\"bqdxbx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Fleet> response = manager.fleets().listByResourceGroup("vwpm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tshhszhedp", response.iterator().next().location());
        Assertions.assertEquals("iwubmwmbesldnk", response.iterator().next().tags().get("wtppjflcxogaoko"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("ujmkcjhwqy", response.iterator().next().hubProfile().dnsPrefix());
        Assertions.assertEquals(false,
            response.iterator().next().hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false,
            response.iterator().next().hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("jewgdrjerv",
            response.iterator().next().hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("nqpeh", response.iterator().next().hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("doy", response.iterator().next().hubProfile().agentProfile().vmSize());
    }
}
