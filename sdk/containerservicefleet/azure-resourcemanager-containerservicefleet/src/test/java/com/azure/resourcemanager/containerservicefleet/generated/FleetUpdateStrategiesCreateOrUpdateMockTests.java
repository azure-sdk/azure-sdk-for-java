// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategy;
import com.azure.resourcemanager.containerservicefleet.models.GateConfiguration;
import com.azure.resourcemanager.containerservicefleet.models.GateType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetUpdateStrategiesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"strategy\":{\"stages\":[{\"name\":\"kwcf\",\"groups\":[{\"name\":\"jyxgtczh\"},{\"name\":\"ydbsd\"},{\"name\":\"hmkxmaehvbb\"}],\"afterStageWaitInSeconds\":1510704768,\"beforeGates\":[{\"type\":\"Approval\"},{\"type\":\"Approval\"},{\"type\":\"Approval\"}],\"afterGates\":[{\"type\":\"Approval\"}]}]}},\"eTag\":\"axkgx\",\"id\":\"rc\",\"name\":\"pyklyhpluodpvru\",\"type\":\"dlgzibthostgkt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FleetUpdateStrategy response = manager.fleetUpdateStrategies()
            .define("wkojgcyztsfmzn")
            .withExistingFleet("gdyftumrtwna", "jslb")
            .withStrategy(new UpdateRunStrategy().withStages(Arrays.asList(new UpdateStage().withName("hchqnrnrpx")
                .withGroups(Arrays.asList(new UpdateGroup().withName("wrykqgai"), new UpdateGroup().withName("mvikl"),
                    new UpdateGroup().withName("ydv"), new UpdateGroup().withName("hbejdznxcvdsrhnj")))
                .withAfterStageWaitInSeconds(1028204807)
                .withBeforeGates(Arrays.asList(new GateConfiguration().withType(GateType.APPROVAL)))
                .withAfterGates(Arrays.asList(new GateConfiguration().withType(GateType.APPROVAL),
                    new GateConfiguration().withType(GateType.APPROVAL))))))
            .withIfMatch("ssxmojms")
            .withIfNoneMatch("p")
            .create();

        Assertions.assertEquals("kwcf", response.strategy().stages().get(0).name());
        Assertions.assertEquals("jyxgtczh", response.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(1510704768, response.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(GateType.APPROVAL, response.strategy().stages().get(0).beforeGates().get(0).type());
        Assertions.assertEquals(GateType.APPROVAL, response.strategy().stages().get(0).afterGates().get(0).type());
    }
}
