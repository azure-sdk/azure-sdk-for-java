// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.GateProperties;
import com.azure.resourcemanager.containerservicefleet.models.GateState;
import com.azure.resourcemanager.containerservicefleet.models.GateTarget;
import com.azure.resourcemanager.containerservicefleet.models.GateTargetType;
import com.azure.resourcemanager.containerservicefleet.models.GateType;
import org.junit.jupiter.api.Assertions;

public final class GatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GateProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"displayName\":\"rhcffcydd\",\"target\":{\"type\":\"UpdateRun\"},\"gateType\":\"Approval\",\"state\":\"Completed\"}")
            .toObject(GateProperties.class);
        Assertions.assertEquals("rhcffcydd", model.displayName());
        Assertions.assertEquals(GateTargetType.UPDATE_RUN, model.target().type());
        Assertions.assertEquals(GateType.APPROVAL, model.gateType());
        Assertions.assertEquals(GateState.COMPLETED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GateProperties model = new GateProperties().withDisplayName("rhcffcydd")
            .withTarget(new GateTarget().withType(GateTargetType.UPDATE_RUN))
            .withGateType(GateType.APPROVAL)
            .withState(GateState.COMPLETED);
        model = BinaryData.fromObject(model).toObject(GateProperties.class);
        Assertions.assertEquals("rhcffcydd", model.displayName());
        Assertions.assertEquals(GateTargetType.UPDATE_RUN, model.target().type());
        Assertions.assertEquals(GateType.APPROVAL, model.gateType());
        Assertions.assertEquals(GateState.COMPLETED, model.state());
    }
}
