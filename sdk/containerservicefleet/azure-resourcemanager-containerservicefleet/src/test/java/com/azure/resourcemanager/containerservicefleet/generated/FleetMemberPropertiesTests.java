// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetMemberProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetMemberPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetMemberProperties model = BinaryData.fromString(
            "{\"clusterResourceId\":\"zvdudgwdslfhotwm\",\"group\":\"npwlbjnpg\",\"provisioningState\":\"Canceled\",\"labels\":{\"uesnzwdejbavo\":\"dehxnltyfsoppu\",\"vudwx\":\"xzdmohctb\",\"gujjugwdkcglh\":\"ndnvo\",\"ofqweykhmenevfye\":\"lazjdyggdtjixhbk\"}}")
            .toObject(FleetMemberProperties.class);
        Assertions.assertEquals("zvdudgwdslfhotwm", model.clusterResourceId());
        Assertions.assertEquals("npwlbjnpg", model.group());
        Assertions.assertEquals("dehxnltyfsoppu", model.labels().get("uesnzwdejbavo"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetMemberProperties model = new FleetMemberProperties().withClusterResourceId("zvdudgwdslfhotwm")
            .withGroup("npwlbjnpg")
            .withLabels(mapOf("uesnzwdejbavo", "dehxnltyfsoppu", "vudwx", "xzdmohctb", "gujjugwdkcglh", "ndnvo",
                "ofqweykhmenevfye", "lazjdyggdtjixhbk"));
        model = BinaryData.fromObject(model).toObject(FleetMemberProperties.class);
        Assertions.assertEquals("zvdudgwdslfhotwm", model.clusterResourceId());
        Assertions.assertEquals("npwlbjnpg", model.group());
        Assertions.assertEquals("dehxnltyfsoppu", model.labels().get("uesnzwdejbavo"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
