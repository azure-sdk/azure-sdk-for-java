// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.GateInner;
import com.azure.resourcemanager.containerservicefleet.models.GateState;
import com.azure.resourcemanager.containerservicefleet.models.GateTarget;
import com.azure.resourcemanager.containerservicefleet.models.GateTargetType;
import com.azure.resourcemanager.containerservicefleet.models.GateType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GateInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"displayName\":\"maajrmvdjwzrlo\",\"target\":{\"type\":\"UpdateRun\"},\"gateType\":\"Approval\",\"state\":\"Completed\"},\"eTag\":\"hijco\",\"location\":\"ctbzaq\",\"tags\":{\"bkbfkgukdkex\":\"y\",\"ocjjxhvpmouexh\":\"ppofmxaxcfjpgdd\"},\"id\":\"zxibqeoj\",\"name\":\"xqbzvddntwnd\",\"type\":\"icbtwnpzao\"}")
            .toObject(GateInner.class);
        Assertions.assertEquals("ctbzaq", model.location());
        Assertions.assertEquals("y", model.tags().get("bkbfkgukdkex"));
        Assertions.assertEquals("maajrmvdjwzrlo", model.displayName());
        Assertions.assertEquals(GateTargetType.UPDATE_RUN, model.target().type());
        Assertions.assertEquals(GateType.APPROVAL, model.gateType());
        Assertions.assertEquals(GateState.COMPLETED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GateInner model = new GateInner().withLocation("ctbzaq")
            .withTags(mapOf("bkbfkgukdkex", "y", "ocjjxhvpmouexh", "ppofmxaxcfjpgdd"))
            .withDisplayName("maajrmvdjwzrlo")
            .withTarget(new GateTarget().withType(GateTargetType.UPDATE_RUN))
            .withGateType(GateType.APPROVAL)
            .withState(GateState.COMPLETED);
        model = BinaryData.fromObject(model).toObject(GateInner.class);
        Assertions.assertEquals("ctbzaq", model.location());
        Assertions.assertEquals("y", model.tags().get("bkbfkgukdkex"));
        Assertions.assertEquals("maajrmvdjwzrlo", model.displayName());
        Assertions.assertEquals(GateTargetType.UPDATE_RUN, model.target().type());
        Assertions.assertEquals(GateType.APPROVAL, model.gateType());
        Assertions.assertEquals(GateState.COMPLETED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
