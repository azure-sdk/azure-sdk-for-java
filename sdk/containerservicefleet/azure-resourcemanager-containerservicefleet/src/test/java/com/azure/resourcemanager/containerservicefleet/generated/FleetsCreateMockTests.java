// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"tohqkvpuvksgp\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":false,\"enableVnetIntegration\":false,\"subnetId\":\"fsynljphuop\"},\"agentProfile\":{\"subnetId\":\"lqiyntorzihl\",\"vmSize\":\"sjswsrms\"},\"fqdn\":\"zrpzb\",\"kubernetesVersion\":\"ckqqzqioxiysui\",\"portalFqdn\":\"ynkedyatrwyhqmib\"}},\"eTag\":\"hwit\",\"identity\":{\"principalId\":\"pyy\",\"tenantId\":\"cdpu\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"bldtlww\":{\"clientId\":\"wznm\",\"principalId\":\"iknsorgjh\"}}},\"location\":\"kdmtncvokotll\",\"tags\":{\"syocogjltdtbnnha\":\"h\",\"amqgxqquezikyw\":\"oocrkvcikhnv\"},\"id\":\"gxk\",\"name\":\"lla\",\"type\":\"melwuipiccjz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Fleet response = manager.fleets()
            .define("gk")
            .withRegion("rpqlp")
            .withExistingResourceGroup("wniyqsluicpd")
            .withTags(mapOf("t", "ciuqgbdb", "mhykojoxafnndl", "uvfbtkuwh", "kkpwdreqnovvq", "ichkoymkcdyhb",
                "syrsndsytgadgvra", "ovljxywsu"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("zoymibmrqyibahw", new UserAssignedIdentity(), "iwbwoenwashrtdtk",
                    new UserAssignedIdentity(), "obyu", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("mpaxmodfvuefywsb")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(false)
                    .withEnableVnetIntegration(true)
                    .withSubnetId("rfouyftaakcpw"))
                .withAgentProfile(new AgentProfile().withSubnetId("vqtmnub").withVmSize("kpzksmondjmq")))
            .withIfMatch("e")
            .withIfNoneMatch("iipfpubj")
            .create();

        Assertions.assertEquals("kdmtncvokotll", response.location());
        Assertions.assertEquals("h", response.tags().get("syocogjltdtbnnha"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("tohqkvpuvksgp", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(false, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false, response.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("fsynljphuop", response.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("lqiyntorzihl", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("sjswsrms", response.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
