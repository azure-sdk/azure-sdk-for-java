// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"smocmbq\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":true,\"subnetId\":\"oz\"},\"agentProfile\":{\"subnetId\":\"helxprglya\",\"vmSize\":\"dckcbc\"},\"fqdn\":\"jrjxgciqibrhosx\",\"kubernetesVersion\":\"qrhzoymibmrqyib\",\"portalFqdn\":\"wfluszdt\"}},\"eTag\":\"rkwofyyvoqa\",\"identity\":{\"principalId\":\"expbtg\",\"tenantId\":\"bwoenwashrt\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"obyu\":{\"clientId\":\"qxwbpokulpiu\",\"principalId\":\"aasipqi\"},\"fbtkuwhhmhyk\":{\"clientId\":\"rpqlp\",\"principalId\":\"cciuqgbdbutau\"},\"ymkcdyhb\":{\"clientId\":\"oxafn\",\"principalId\":\"lpichk\"},\"xywsuws\":{\"clientId\":\"kpw\",\"principalId\":\"eqnovvqfovl\"}}},\"location\":\"s\",\"tags\":{\"nzar\":\"ytgadgvraeaene\",\"iipfpubj\":\"wlquuijfqkace\",\"hqkvpuvksgplsak\":\"bwwift\"},\"id\":\"ynfs\",\"name\":\"n\",\"type\":\"jphuopxodlqi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Fleet response = manager.fleets()
            .define("xbmp")
            .withRegion("bobzdopcjwvnhd")
            .withExistingResourceGroup("tmuwlauwzi")
            .withTags(
                mapOf("twuoegrpkhjwni", "mgxcxrslpm", "ggkzzlvmbmpa", "qsluicp", "yhrfouyftaakcpw", "modfvuefywsbpfvm"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("fcnihgwq", new UserAssignedIdentity(), "rhvoods", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("zmuvpbttdumorppx")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(false)
                    .withEnableVnetIntegration(true)
                    .withSubnetId("bhjpglkfgohdne"))
                .withAgentProfile(new AgentProfile().withSubnetId("fphsdyhtozfikdow").withVmSize("uuvxz")))
            .withIfMatch("quxvypomgkop")
            .withIfNoneMatch("whojvp")
            .create();

        Assertions.assertEquals("s", response.location());
        Assertions.assertEquals("ytgadgvraeaene", response.tags().get("nzar"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("smocmbq", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("oz", response.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("helxprglya", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("dckcbc", response.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
