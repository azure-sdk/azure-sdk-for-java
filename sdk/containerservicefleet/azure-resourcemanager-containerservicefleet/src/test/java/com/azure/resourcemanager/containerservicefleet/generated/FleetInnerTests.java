// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"hubProfile\":{\"dnsPrefix\":\"zvgnwzs\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":false,\"subnetId\":\"cyzkohdbihanuf\"},\"agentProfile\":{\"subnetId\":\"bj\",\"vmSize\":\"a\"},\"fqdn\":\"th\",\"kubernetesVersion\":\"hab\",\"portalFqdn\":\"pikxwczbyscnpqxu\"}},\"eTag\":\"vyq\",\"identity\":{\"principalId\":\"b\",\"tenantId\":\"rkxvdum\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"yejhk\":{\"clientId\":\"wvukx\",\"principalId\":\"udccsnhsjc\"},\"jnchgej\":{\"clientId\":\"htnapczwlokjyem\",\"principalId\":\"vnipjox\"},\"wyahuxinpmqnja\":{\"clientId\":\"odmailzyd\",\"principalId\":\"o\"}}},\"location\":\"ixjsprozvcputeg\",\"tags\":{\"u\":\"mfdatscmdvpj\",\"kjozkrwfnd\":\"suuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(FleetInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zvgnwzs", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("cyzkohdbihanuf", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("bj", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("a", model.hubProfile().agentProfile().vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetInner model = new FleetInner().withLocation("ixjsprozvcputeg")
            .withTags(mapOf("u", "mfdatscmdvpj", "kjozkrwfnd", "suuv", "vwryoqpso", "odjpslwejd", "yffdfdos",
                "cctazakljlahbc"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("yejhk", new UserAssignedIdentity(), "jnchgej",
                    new UserAssignedIdentity(), "wyahuxinpmqnja", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("zvgnwzs")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true)
                    .withEnableVnetIntegration(false)
                    .withSubnetId("cyzkohdbihanuf"))
                .withAgentProfile(new AgentProfile().withSubnetId("bj").withVmSize("a")));
        model = BinaryData.fromObject(model).toObject(FleetInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zvgnwzs", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("cyzkohdbihanuf", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("bj", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("a", model.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
