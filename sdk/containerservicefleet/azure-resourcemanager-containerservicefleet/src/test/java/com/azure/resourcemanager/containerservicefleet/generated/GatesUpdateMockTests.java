// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.fluent.models.GateInner;
import com.azure.resourcemanager.containerservicefleet.models.Gate;
import com.azure.resourcemanager.containerservicefleet.models.GateState;
import com.azure.resourcemanager.containerservicefleet.models.GateTarget;
import com.azure.resourcemanager.containerservicefleet.models.GateTargetType;
import com.azure.resourcemanager.containerservicefleet.models.GateType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatesUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"displayName\":\"vc\",\"target\":{\"type\":\"UpdateRun\"},\"gateType\":\"Approval\",\"state\":\"Completed\"},\"eTag\":\"yrnxxmueedn\",\"location\":\"dvstkw\",\"tags\":{\"mfmtdaaygdvw\":\"chea\",\"xg\":\"gpiohgwxrtfudxe\"},\"id\":\"qagvrvm\",\"name\":\"pkukghi\",\"type\":\"dblx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Gate response = manager.gates()
            .update("suiizynkedyat", "wyhqmibzyhwits", "ypyynpcdpumnzg",
                new GateInner().withLocation("ok")
                    .withTags(mapOf("gsyocogj", "lxdy", "kvci", "tdtbnnhadooc"))
                    .withDisplayName("abikns")
                    .withTarget(new GateTarget().withType(GateTargetType.UPDATE_RUN))
                    .withGateType(GateType.APPROVAL)
                    .withState(GateState.PENDING),
                "kallatmel", "uipiccjzk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dvstkw", response.location());
        Assertions.assertEquals("chea", response.tags().get("mfmtdaaygdvw"));
        Assertions.assertEquals("vc", response.displayName());
        Assertions.assertEquals(GateTargetType.UPDATE_RUN, response.target().type());
        Assertions.assertEquals(GateType.APPROVAL, response.gateType());
        Assertions.assertEquals(GateState.COMPLETED, response.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
