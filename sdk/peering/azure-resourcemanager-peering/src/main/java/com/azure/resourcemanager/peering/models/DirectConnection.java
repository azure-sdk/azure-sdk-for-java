// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * The properties that define a direct connection.
 */
@Fluent
public final class DirectConnection implements JsonSerializable<DirectConnection> {
    /*
     * The bandwidth of the connection.
     */
    private Integer bandwidthInMbps;

    /*
     * The bandwidth that is actually provisioned.
     */
    private Integer provisionedBandwidthInMbps;

    /*
     * The field indicating if Microsoft provides session ip addresses.
     */
    private SessionAddressProvider sessionAddressProvider;

    /*
     * The flag that indicates whether or not the connection is used for peering service.
     */
    private Boolean useForPeeringService;

    /*
     * The ID used within Microsoft's peering provisioning system to track the connection
     */
    private String microsoftTrackingId;

    /*
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     */
    private Integer peeringDBFacilityId;

    /*
     * The state of the connection.
     */
    private ConnectionState connectionState;

    /*
     * The BGP session associated with the connection.
     */
    private BgpSession bgpSession;

    /*
     * The old V4 BGP session associated with the connection during migration on the same device. Will be used for
     * Work-Window validation
     */
    private Map<String, Enum11> migrationWorkWindowBgpSessionSameDevice;

    /*
     * Gets or sets the time corresponding to when the connection was last set to ProvisioningFailed.
     */
    private OffsetDateTime lastFailureTimeUtc;

    /*
     * The unique identifier (GUID) for the connection.
     */
    private String connectionIdentifier;

    /*
     * The error message related to the connection state, if any.
     */
    private String errorMessage;

    /*
     * The previous connection provisioning state, used to resume provisioning after connection has been blocked.
     */
    private PreviousConnectionProvisioningState previousConnectionProvisioningState;

    /*
     * Gets or sets the migration work window tracker. Format = "DateTime String Format|WorkWindowInitiator Email ID"
     */
    private String migrationWorkWindowTracker;

    /**
     * Creates an instance of DirectConnection class.
     */
    public DirectConnection() {
    }

    /**
     * Get the bandwidthInMbps property: The bandwidth of the connection.
     * 
     * @return the bandwidthInMbps value.
     */
    public Integer bandwidthInMbps() {
        return this.bandwidthInMbps;
    }

    /**
     * Set the bandwidthInMbps property: The bandwidth of the connection.
     * 
     * @param bandwidthInMbps the bandwidthInMbps value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withBandwidthInMbps(Integer bandwidthInMbps) {
        this.bandwidthInMbps = bandwidthInMbps;
        return this;
    }

    /**
     * Get the provisionedBandwidthInMbps property: The bandwidth that is actually provisioned.
     * 
     * @return the provisionedBandwidthInMbps value.
     */
    public Integer provisionedBandwidthInMbps() {
        return this.provisionedBandwidthInMbps;
    }

    /**
     * Get the sessionAddressProvider property: The field indicating if Microsoft provides session ip addresses.
     * 
     * @return the sessionAddressProvider value.
     */
    public SessionAddressProvider sessionAddressProvider() {
        return this.sessionAddressProvider;
    }

    /**
     * Set the sessionAddressProvider property: The field indicating if Microsoft provides session ip addresses.
     * 
     * @param sessionAddressProvider the sessionAddressProvider value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withSessionAddressProvider(SessionAddressProvider sessionAddressProvider) {
        this.sessionAddressProvider = sessionAddressProvider;
        return this;
    }

    /**
     * Get the useForPeeringService property: The flag that indicates whether or not the connection is used for peering
     * service.
     * 
     * @return the useForPeeringService value.
     */
    public Boolean useForPeeringService() {
        return this.useForPeeringService;
    }

    /**
     * Set the useForPeeringService property: The flag that indicates whether or not the connection is used for peering
     * service.
     * 
     * @param useForPeeringService the useForPeeringService value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withUseForPeeringService(Boolean useForPeeringService) {
        this.useForPeeringService = useForPeeringService;
        return this;
    }

    /**
     * Get the microsoftTrackingId property: The ID used within Microsoft's peering provisioning system to track the
     * connection.
     * 
     * @return the microsoftTrackingId value.
     */
    public String microsoftTrackingId() {
        return this.microsoftTrackingId;
    }

    /**
     * Get the peeringDBFacilityId property: The PeeringDB.com ID of the facility at which the connection has to be set
     * up.
     * 
     * @return the peeringDBFacilityId value.
     */
    public Integer peeringDBFacilityId() {
        return this.peeringDBFacilityId;
    }

    /**
     * Set the peeringDBFacilityId property: The PeeringDB.com ID of the facility at which the connection has to be set
     * up.
     * 
     * @param peeringDBFacilityId the peeringDBFacilityId value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withPeeringDBFacilityId(Integer peeringDBFacilityId) {
        this.peeringDBFacilityId = peeringDBFacilityId;
        return this;
    }

    /**
     * Get the connectionState property: The state of the connection.
     * 
     * @return the connectionState value.
     */
    public ConnectionState connectionState() {
        return this.connectionState;
    }

    /**
     * Get the bgpSession property: The BGP session associated with the connection.
     * 
     * @return the bgpSession value.
     */
    public BgpSession bgpSession() {
        return this.bgpSession;
    }

    /**
     * Set the bgpSession property: The BGP session associated with the connection.
     * 
     * @param bgpSession the bgpSession value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withBgpSession(BgpSession bgpSession) {
        this.bgpSession = bgpSession;
        return this;
    }

    /**
     * Get the migrationWorkWindowBgpSessionSameDevice property: The old V4 BGP session associated with the connection
     * during migration on the same device. Will be used for Work-Window validation.
     * 
     * @return the migrationWorkWindowBgpSessionSameDevice value.
     */
    public Map<String, Enum11> migrationWorkWindowBgpSessionSameDevice() {
        return this.migrationWorkWindowBgpSessionSameDevice;
    }

    /**
     * Set the migrationWorkWindowBgpSessionSameDevice property: The old V4 BGP session associated with the connection
     * during migration on the same device. Will be used for Work-Window validation.
     * 
     * @param migrationWorkWindowBgpSessionSameDevice the migrationWorkWindowBgpSessionSameDevice value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection
        withMigrationWorkWindowBgpSessionSameDevice(Map<String, Enum11> migrationWorkWindowBgpSessionSameDevice) {
        this.migrationWorkWindowBgpSessionSameDevice = migrationWorkWindowBgpSessionSameDevice;
        return this;
    }

    /**
     * Get the lastFailureTimeUtc property: Gets or sets the time corresponding to when the connection was last set to
     * ProvisioningFailed.
     * 
     * @return the lastFailureTimeUtc value.
     */
    public OffsetDateTime lastFailureTimeUtc() {
        return this.lastFailureTimeUtc;
    }

    /**
     * Set the lastFailureTimeUtc property: Gets or sets the time corresponding to when the connection was last set to
     * ProvisioningFailed.
     * 
     * @param lastFailureTimeUtc the lastFailureTimeUtc value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withLastFailureTimeUtc(OffsetDateTime lastFailureTimeUtc) {
        this.lastFailureTimeUtc = lastFailureTimeUtc;
        return this;
    }

    /**
     * Get the connectionIdentifier property: The unique identifier (GUID) for the connection.
     * 
     * @return the connectionIdentifier value.
     */
    public String connectionIdentifier() {
        return this.connectionIdentifier;
    }

    /**
     * Set the connectionIdentifier property: The unique identifier (GUID) for the connection.
     * 
     * @param connectionIdentifier the connectionIdentifier value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withConnectionIdentifier(String connectionIdentifier) {
        this.connectionIdentifier = connectionIdentifier;
        return this;
    }

    /**
     * Get the errorMessage property: The error message related to the connection state, if any.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the previousConnectionProvisioningState property: The previous connection provisioning state, used to resume
     * provisioning after connection has been blocked.
     * 
     * @return the previousConnectionProvisioningState value.
     */
    public PreviousConnectionProvisioningState previousConnectionProvisioningState() {
        return this.previousConnectionProvisioningState;
    }

    /**
     * Set the previousConnectionProvisioningState property: The previous connection provisioning state, used to resume
     * provisioning after connection has been blocked.
     * 
     * @param previousConnectionProvisioningState the previousConnectionProvisioningState value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withPreviousConnectionProvisioningState(
        PreviousConnectionProvisioningState previousConnectionProvisioningState) {
        this.previousConnectionProvisioningState = previousConnectionProvisioningState;
        return this;
    }

    /**
     * Get the migrationWorkWindowTracker property: Gets or sets the migration work window tracker. Format = "DateTime
     * String Format|WorkWindowInitiator Email ID".
     * 
     * @return the migrationWorkWindowTracker value.
     */
    public String migrationWorkWindowTracker() {
        return this.migrationWorkWindowTracker;
    }

    /**
     * Set the migrationWorkWindowTracker property: Gets or sets the migration work window tracker. Format = "DateTime
     * String Format|WorkWindowInitiator Email ID".
     * 
     * @param migrationWorkWindowTracker the migrationWorkWindowTracker value to set.
     * @return the DirectConnection object itself.
     */
    public DirectConnection withMigrationWorkWindowTracker(String migrationWorkWindowTracker) {
        this.migrationWorkWindowTracker = migrationWorkWindowTracker;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bgpSession() != null) {
            bgpSession().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("bandwidthInMbps", this.bandwidthInMbps);
        jsonWriter.writeStringField("sessionAddressProvider",
            this.sessionAddressProvider == null ? null : this.sessionAddressProvider.toString());
        jsonWriter.writeBooleanField("useForPeeringService", this.useForPeeringService);
        jsonWriter.writeNumberField("peeringDBFacilityId", this.peeringDBFacilityId);
        jsonWriter.writeJsonField("bgpSession", this.bgpSession);
        jsonWriter.writeMapField("migrationWorkWindowBgpSessionSameDevice",
            this.migrationWorkWindowBgpSessionSameDevice,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("lastFailureTimeUtc",
            this.lastFailureTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastFailureTimeUtc));
        jsonWriter.writeStringField("connectionIdentifier", this.connectionIdentifier);
        jsonWriter.writeStringField("previousConnectionProvisioningState",
            this.previousConnectionProvisioningState == null
                ? null
                : this.previousConnectionProvisioningState.toString());
        jsonWriter.writeStringField("migrationWorkWindowTracker", this.migrationWorkWindowTracker);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DirectConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DirectConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DirectConnection.
     */
    public static DirectConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DirectConnection deserializedDirectConnection = new DirectConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bandwidthInMbps".equals(fieldName)) {
                    deserializedDirectConnection.bandwidthInMbps = reader.getNullable(JsonReader::getInt);
                } else if ("provisionedBandwidthInMbps".equals(fieldName)) {
                    deserializedDirectConnection.provisionedBandwidthInMbps = reader.getNullable(JsonReader::getInt);
                } else if ("sessionAddressProvider".equals(fieldName)) {
                    deserializedDirectConnection.sessionAddressProvider
                        = SessionAddressProvider.fromString(reader.getString());
                } else if ("useForPeeringService".equals(fieldName)) {
                    deserializedDirectConnection.useForPeeringService = reader.getNullable(JsonReader::getBoolean);
                } else if ("microsoftTrackingId".equals(fieldName)) {
                    deserializedDirectConnection.microsoftTrackingId = reader.getString();
                } else if ("peeringDBFacilityId".equals(fieldName)) {
                    deserializedDirectConnection.peeringDBFacilityId = reader.getNullable(JsonReader::getInt);
                } else if ("connectionState".equals(fieldName)) {
                    deserializedDirectConnection.connectionState = ConnectionState.fromString(reader.getString());
                } else if ("bgpSession".equals(fieldName)) {
                    deserializedDirectConnection.bgpSession = BgpSession.fromJson(reader);
                } else if ("migrationWorkWindowBgpSessionSameDevice".equals(fieldName)) {
                    Map<String, Enum11> migrationWorkWindowBgpSessionSameDevice
                        = reader.readMap(reader1 -> Enum11.fromString(reader1.getString()));
                    deserializedDirectConnection.migrationWorkWindowBgpSessionSameDevice
                        = migrationWorkWindowBgpSessionSameDevice;
                } else if ("lastFailureTimeUtc".equals(fieldName)) {
                    deserializedDirectConnection.lastFailureTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("connectionIdentifier".equals(fieldName)) {
                    deserializedDirectConnection.connectionIdentifier = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedDirectConnection.errorMessage = reader.getString();
                } else if ("previousConnectionProvisioningState".equals(fieldName)) {
                    deserializedDirectConnection.previousConnectionProvisioningState
                        = PreviousConnectionProvisioningState.fromString(reader.getString());
                } else if ("migrationWorkWindowTracker".equals(fieldName)) {
                    deserializedDirectConnection.migrationWorkWindowTracker = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDirectConnection;
        });
    }
}
