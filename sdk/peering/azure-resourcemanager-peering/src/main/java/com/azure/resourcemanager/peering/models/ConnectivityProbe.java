// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Represents a connectivity probe, a configuration peers can add to direct and exchange peerings to create ping tests.
 * These ping
 * tests will allow us to generate availability, jitter, and latency data for traffic (using ICMP or TCP) from Azure to
 * an endpoint
 * IP address given by the customer. This data will be emitted such that the peer can view these metrics in the Azure
 * portal in the
 * Connectivity probe blade of their peering.
 */
@Fluent
public final class ConnectivityProbe implements JsonSerializable<ConnectivityProbe> {
    /*
     * The endpoint IP address where traffic will be sent to from Azure.
     */
    private String endpoint;

    /*
     * The Azure region where traffic will originate from.
     */
    private String azureRegion;

    /*
     * The protocol of the traffic that will be sent.
     */
    private Protocol protocol;

    /*
     * Set to contain the prefixes that agents in Azure will send traffic from. For peers to allow into their
     * network the connectivity probe traffic can reach their endpoint.
     */
    private List<String> prefixesToAccesslist;

    /*
     * Time when {Microsoft.Peering.PeeringContract.Public.Data.ConnectivityProbe} was created in UTC.
     */
    private OffsetDateTime createdTimeUtc;

    /**
     * Creates an instance of ConnectivityProbe class.
     */
    public ConnectivityProbe() {
    }

    /**
     * Get the endpoint property: The endpoint IP address where traffic will be sent to from Azure.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the azureRegion property: The Azure region where traffic will originate from.
     * 
     * @return the azureRegion value.
     */
    public String azureRegion() {
        return this.azureRegion;
    }

    /**
     * Get the protocol property: The protocol of the traffic that will be sent.
     * 
     * @return the protocol value.
     */
    public Protocol protocol() {
        return this.protocol;
    }

    /**
     * Get the prefixesToAccesslist property: Set to contain the prefixes that agents in Azure will send traffic from.
     * For peers to allow into their
     * network the connectivity probe traffic can reach their endpoint.
     * 
     * @return the prefixesToAccesslist value.
     */
    public List<String> prefixesToAccesslist() {
        return this.prefixesToAccesslist;
    }

    /**
     * Get the createdTimeUtc property: Time when {Microsoft.Peering.PeeringContract.Public.Data.ConnectivityProbe} was
     * created in UTC.
     * 
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Set the createdTimeUtc property: Time when {Microsoft.Peering.PeeringContract.Public.Data.ConnectivityProbe} was
     * created in UTC.
     * 
     * @param createdTimeUtc the createdTimeUtc value to set.
     * @return the ConnectivityProbe object itself.
     */
    public ConnectivityProbe withCreatedTimeUtc(OffsetDateTime createdTimeUtc) {
        this.createdTimeUtc = createdTimeUtc;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdTimeUtc",
            this.createdTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTimeUtc));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectivityProbe from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectivityProbe if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectivityProbe.
     */
    public static ConnectivityProbe fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectivityProbe deserializedConnectivityProbe = new ConnectivityProbe();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    deserializedConnectivityProbe.endpoint = reader.getString();
                } else if ("azureRegion".equals(fieldName)) {
                    deserializedConnectivityProbe.azureRegion = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedConnectivityProbe.protocol = Protocol.fromString(reader.getString());
                } else if ("prefixesToAccesslist".equals(fieldName)) {
                    List<String> prefixesToAccesslist = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectivityProbe.prefixesToAccesslist = prefixesToAccesslist;
                } else if ("createdTimeUtc".equals(fieldName)) {
                    deserializedConnectivityProbe.createdTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectivityProbe;
        });
    }
}
