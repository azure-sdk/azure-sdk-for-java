// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.fluent.RpUnbilledPrefixesClient;
import com.azure.resourcemanager.peering.fluent.models.RpUnbilledPrefixInner;
import com.azure.resourcemanager.peering.models.RpUnbilledPrefix;
import com.azure.resourcemanager.peering.models.RpUnbilledPrefixes;

public final class RpUnbilledPrefixesImpl implements RpUnbilledPrefixes {
    private static final ClientLogger LOGGER = new ClientLogger(RpUnbilledPrefixesImpl.class);

    private final RpUnbilledPrefixesClient innerClient;

    private final com.azure.resourcemanager.peering.PeeringManager serviceManager;

    public RpUnbilledPrefixesImpl(RpUnbilledPrefixesClient innerClient,
        com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RpUnbilledPrefix> list(String resourceGroupName, String peeringName) {
        PagedIterable<RpUnbilledPrefixInner> inner = this.serviceClient().list(resourceGroupName, peeringName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RpUnbilledPrefixImpl(inner1, this.manager()));
    }

    public PagedIterable<RpUnbilledPrefix> list(String resourceGroupName, String peeringName, Boolean consolidate,
        Context context) {
        PagedIterable<RpUnbilledPrefixInner> inner
            = this.serviceClient().list(resourceGroupName, peeringName, consolidate, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RpUnbilledPrefixImpl(inner1, this.manager()));
    }

    private RpUnbilledPrefixesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.peering.PeeringManager manager() {
        return this.serviceManager;
    }
}
