// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * The Connection Monitor Test class.
 */
@Fluent
public final class ConnectionMonitorTestInner extends ProxyResource {
    /*
     * The properties that define a Connection Monitor Test.
     */
    private ConnectionMonitorTestProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ConnectionMonitorTestInner class.
     */
    public ConnectionMonitorTestInner() {
    }

    /**
     * Get the innerProperties property: The properties that define a Connection Monitor Test.
     * 
     * @return the innerProperties value.
     */
    private ConnectionMonitorTestProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the sourceAgent property: The Connection Monitor test source agent.
     * 
     * @return the sourceAgent value.
     */
    public String sourceAgent() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceAgent();
    }

    /**
     * Set the sourceAgent property: The Connection Monitor test source agent.
     * 
     * @param sourceAgent the sourceAgent value to set.
     * @return the ConnectionMonitorTestInner object itself.
     */
    public ConnectionMonitorTestInner withSourceAgent(String sourceAgent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectionMonitorTestProperties();
        }
        this.innerProperties().withSourceAgent(sourceAgent);
        return this;
    }

    /**
     * Get the destination property: The Connection Monitor test destination.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.innerProperties() == null ? null : this.innerProperties().destination();
    }

    /**
     * Set the destination property: The Connection Monitor test destination.
     * 
     * @param destination the destination value to set.
     * @return the ConnectionMonitorTestInner object itself.
     */
    public ConnectionMonitorTestInner withDestination(String destination) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectionMonitorTestProperties();
        }
        this.innerProperties().withDestination(destination);
        return this;
    }

    /**
     * Get the destinationPort property: The Connection Monitor test destination port.
     * 
     * @return the destinationPort value.
     */
    public Integer destinationPort() {
        return this.innerProperties() == null ? null : this.innerProperties().destinationPort();
    }

    /**
     * Set the destinationPort property: The Connection Monitor test destination port.
     * 
     * @param destinationPort the destinationPort value to set.
     * @return the ConnectionMonitorTestInner object itself.
     */
    public ConnectionMonitorTestInner withDestinationPort(Integer destinationPort) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectionMonitorTestProperties();
        }
        this.innerProperties().withDestinationPort(destinationPort);
        return this;
    }

    /**
     * Get the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     * 
     * @return the testFrequencyInSec value.
     */
    public Integer testFrequencyInSec() {
        return this.innerProperties() == null ? null : this.innerProperties().testFrequencyInSec();
    }

    /**
     * Set the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     * 
     * @param testFrequencyInSec the testFrequencyInSec value to set.
     * @return the ConnectionMonitorTestInner object itself.
     */
    public ConnectionMonitorTestInner withTestFrequencyInSec(Integer testFrequencyInSec) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectionMonitorTestProperties();
        }
        this.innerProperties().withTestFrequencyInSec(testFrequencyInSec);
        return this;
    }

    /**
     * Get the isTestSuccessful property: The flag that indicates if the Connection Monitor test is successful or not.
     * 
     * @return the isTestSuccessful value.
     */
    public Boolean isTestSuccessful() {
        return this.innerProperties() == null ? null : this.innerProperties().isTestSuccessful();
    }

    /**
     * Get the path property: The path representing the Connection Monitor test.
     * 
     * @return the path value.
     */
    public List<String> path() {
        return this.innerProperties() == null ? null : this.innerProperties().path();
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionMonitorTestInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionMonitorTestInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectionMonitorTestInner.
     */
    public static ConnectionMonitorTestInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionMonitorTestInner deserializedConnectionMonitorTestInner = new ConnectionMonitorTestInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectionMonitorTestInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedConnectionMonitorTestInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedConnectionMonitorTestInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedConnectionMonitorTestInner.innerProperties
                        = ConnectionMonitorTestProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionMonitorTestInner;
        });
    }
}
