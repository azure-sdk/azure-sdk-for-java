// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.Command;
import java.io.IOException;

/**
 * Looking glass output model.
 */
@Fluent
public final class LookingGlassOutputInner implements JsonSerializable<LookingGlassOutputInner> {
    /*
     * Invoked command
     */
    private Command command;

    /*
     * Output of the command
     */
    private String output;

    /**
     * Creates an instance of LookingGlassOutputInner class.
     */
    public LookingGlassOutputInner() {
    }

    /**
     * Get the command property: Invoked command.
     * 
     * @return the command value.
     */
    public Command command() {
        return this.command;
    }

    /**
     * Set the command property: Invoked command.
     * 
     * @param command the command value to set.
     * @return the LookingGlassOutputInner object itself.
     */
    public LookingGlassOutputInner withCommand(Command command) {
        this.command = command;
        return this;
    }

    /**
     * Get the output property: Output of the command.
     * 
     * @return the output value.
     */
    public String output() {
        return this.output;
    }

    /**
     * Set the output property: Output of the command.
     * 
     * @param output the output value to set.
     * @return the LookingGlassOutputInner object itself.
     */
    public LookingGlassOutputInner withOutput(String output) {
        this.output = output;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("command", this.command == null ? null : this.command.toString());
        jsonWriter.writeStringField("output", this.output);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LookingGlassOutputInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LookingGlassOutputInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LookingGlassOutputInner.
     */
    public static LookingGlassOutputInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LookingGlassOutputInner deserializedLookingGlassOutputInner = new LookingGlassOutputInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    deserializedLookingGlassOutputInner.command = Command.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    deserializedLookingGlassOutputInner.output = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLookingGlassOutputInner;
        });
    }
}
