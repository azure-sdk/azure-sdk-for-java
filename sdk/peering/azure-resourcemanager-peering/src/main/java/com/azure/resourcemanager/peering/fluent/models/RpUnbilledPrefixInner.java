// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Routing Preference unbilled prefix.
 */
@Immutable
public final class RpUnbilledPrefixInner implements JsonSerializable<RpUnbilledPrefixInner> {
    /*
     * The prefix.
     */
    private String prefix;

    /*
     * The Azure region.
     */
    private String azureRegion;

    /*
     * The peer ASN.
     */
    private Integer peerAsn;

    /**
     * Creates an instance of RpUnbilledPrefixInner class.
     */
    public RpUnbilledPrefixInner() {
    }

    /**
     * Get the prefix property: The prefix.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Get the azureRegion property: The Azure region.
     * 
     * @return the azureRegion value.
     */
    public String azureRegion() {
        return this.azureRegion;
    }

    /**
     * Get the peerAsn property: The peer ASN.
     * 
     * @return the peerAsn value.
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RpUnbilledPrefixInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RpUnbilledPrefixInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RpUnbilledPrefixInner.
     */
    public static RpUnbilledPrefixInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RpUnbilledPrefixInner deserializedRpUnbilledPrefixInner = new RpUnbilledPrefixInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedRpUnbilledPrefixInner.prefix = reader.getString();
                } else if ("azureRegion".equals(fieldName)) {
                    deserializedRpUnbilledPrefixInner.azureRegion = reader.getString();
                } else if ("peerAsn".equals(fieldName)) {
                    deserializedRpUnbilledPrefixInner.peerAsn = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRpUnbilledPrefixInner;
        });
    }
}
