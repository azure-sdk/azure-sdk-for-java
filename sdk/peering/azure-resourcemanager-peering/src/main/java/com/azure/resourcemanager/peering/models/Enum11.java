// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Defines values for Enum11.
 */
public final class Enum11 extends ExpandableStringEnum<Enum11> {
    /**
     * Static value None for Enum11.
     */
    public static final Enum11 NONE = fromString("None");

    /**
     * Static value Idle for Enum11.
     */
    public static final Enum11 IDLE = fromString("Idle");

    /**
     * Static value Connect for Enum11.
     */
    public static final Enum11 CONNECT = fromString("Connect");

    /**
     * Static value Active for Enum11.
     */
    public static final Enum11 ACTIVE = fromString("Active");

    /**
     * Static value OpenSent for Enum11.
     */
    public static final Enum11 OPEN_SENT = fromString("OpenSent");

    /**
     * Static value OpenConfirm for Enum11.
     */
    public static final Enum11 OPEN_CONFIRM = fromString("OpenConfirm");

    /**
     * Static value OpenReceived for Enum11.
     */
    public static final Enum11 OPEN_RECEIVED = fromString("OpenReceived");

    /**
     * Static value Established for Enum11.
     */
    public static final Enum11 ESTABLISHED = fromString("Established");

    /**
     * Static value PendingAdd for Enum11.
     */
    public static final Enum11 PENDING_ADD = fromString("PendingAdd");

    /**
     * Static value PendingUpdate for Enum11.
     */
    public static final Enum11 PENDING_UPDATE = fromString("PendingUpdate");

    /**
     * Static value PendingRemove for Enum11.
     */
    public static final Enum11 PENDING_REMOVE = fromString("PendingRemove");

    /**
     * Creates a new instance of Enum11 value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public Enum11() {
    }

    /**
     * Creates or finds a Enum11 from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding Enum11.
     */
    public static Enum11 fromString(String name) {
        return fromString(name, Enum11.class);
    }

    /**
     * Gets known Enum11 values.
     * 
     * @return known Enum11 values.
     */
    public static Collection<Enum11> values() {
        return values(Enum11.class);
    }
}
