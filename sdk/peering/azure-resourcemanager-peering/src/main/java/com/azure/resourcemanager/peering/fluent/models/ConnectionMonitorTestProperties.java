// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * The properties that define a Connection Monitor Test.
 */
@Fluent
public final class ConnectionMonitorTestProperties implements JsonSerializable<ConnectionMonitorTestProperties> {
    /*
     * The Connection Monitor test source agent
     */
    private String sourceAgent;

    /*
     * The Connection Monitor test destination
     */
    private String destination;

    /*
     * The Connection Monitor test destination port
     */
    private Integer destinationPort;

    /*
     * The Connection Monitor test frequency in seconds
     */
    private Integer testFrequencyInSec;

    /*
     * The flag that indicates if the Connection Monitor test is successful or not.
     */
    private Boolean isTestSuccessful;

    /*
     * The path representing the Connection Monitor test.
     */
    private List<String> path;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ConnectionMonitorTestProperties class.
     */
    public ConnectionMonitorTestProperties() {
    }

    /**
     * Get the sourceAgent property: The Connection Monitor test source agent.
     * 
     * @return the sourceAgent value.
     */
    public String sourceAgent() {
        return this.sourceAgent;
    }

    /**
     * Set the sourceAgent property: The Connection Monitor test source agent.
     * 
     * @param sourceAgent the sourceAgent value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withSourceAgent(String sourceAgent) {
        this.sourceAgent = sourceAgent;
        return this;
    }

    /**
     * Get the destination property: The Connection Monitor test destination.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The Connection Monitor test destination.
     * 
     * @param destination the destination value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the destinationPort property: The Connection Monitor test destination port.
     * 
     * @return the destinationPort value.
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }

    /**
     * Set the destinationPort property: The Connection Monitor test destination port.
     * 
     * @param destinationPort the destinationPort value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withDestinationPort(Integer destinationPort) {
        this.destinationPort = destinationPort;
        return this;
    }

    /**
     * Get the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     * 
     * @return the testFrequencyInSec value.
     */
    public Integer testFrequencyInSec() {
        return this.testFrequencyInSec;
    }

    /**
     * Set the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     * 
     * @param testFrequencyInSec the testFrequencyInSec value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withTestFrequencyInSec(Integer testFrequencyInSec) {
        this.testFrequencyInSec = testFrequencyInSec;
        return this;
    }

    /**
     * Get the isTestSuccessful property: The flag that indicates if the Connection Monitor test is successful or not.
     * 
     * @return the isTestSuccessful value.
     */
    public Boolean isTestSuccessful() {
        return this.isTestSuccessful;
    }

    /**
     * Get the path property: The path representing the Connection Monitor test.
     * 
     * @return the path value.
     */
    public List<String> path() {
        return this.path;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceAgent", this.sourceAgent);
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeNumberField("destinationPort", this.destinationPort);
        jsonWriter.writeNumberField("testFrequencyInSec", this.testFrequencyInSec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionMonitorTestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionMonitorTestProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionMonitorTestProperties.
     */
    public static ConnectionMonitorTestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionMonitorTestProperties deserializedConnectionMonitorTestProperties
                = new ConnectionMonitorTestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceAgent".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.sourceAgent = reader.getString();
                } else if ("destination".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.destination = reader.getString();
                } else if ("destinationPort".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.destinationPort
                        = reader.getNullable(JsonReader::getInt);
                } else if ("testFrequencyInSec".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.testFrequencyInSec
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isTestSuccessful".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.isTestSuccessful
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("path".equals(fieldName)) {
                    List<String> path = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectionMonitorTestProperties.path = path;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConnectionMonitorTestProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionMonitorTestProperties;
        });
    }
}
