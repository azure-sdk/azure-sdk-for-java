// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties that define a Log Analytics Workspace.
 */
@Immutable
public final class LogAnalyticsWorkspaceProperties implements JsonSerializable<LogAnalyticsWorkspaceProperties> {
    /*
     * The Workspace ID.
     */
    private String workspaceId;

    /*
     * The Workspace Key.
     */
    private String key;

    /*
     * The list of connected agents.
     */
    private List<String> connectedAgents;

    /**
     * Creates an instance of LogAnalyticsWorkspaceProperties class.
     */
    public LogAnalyticsWorkspaceProperties() {
    }

    /**
     * Get the workspaceId property: The Workspace ID.
     * 
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get the key property: The Workspace Key.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Get the connectedAgents property: The list of connected agents.
     * 
     * @return the connectedAgents value.
     */
    public List<String> connectedAgents() {
        return this.connectedAgents;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogAnalyticsWorkspaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogAnalyticsWorkspaceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogAnalyticsWorkspaceProperties.
     */
    public static LogAnalyticsWorkspaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogAnalyticsWorkspaceProperties deserializedLogAnalyticsWorkspaceProperties
                = new LogAnalyticsWorkspaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workspaceID".equals(fieldName)) {
                    deserializedLogAnalyticsWorkspaceProperties.workspaceId = reader.getString();
                } else if ("key".equals(fieldName)) {
                    deserializedLogAnalyticsWorkspaceProperties.key = reader.getString();
                } else if ("connectedAgents".equals(fieldName)) {
                    List<String> connectedAgents = reader.readArray(reader1 -> reader1.getString());
                    deserializedLogAnalyticsWorkspaceProperties.connectedAgents = connectedAgents;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogAnalyticsWorkspaceProperties;
        });
    }
}
