// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridconnectivity.models.CloudNativeType;
import com.azure.resourcemanager.hybridconnectivity.models.ResourceProvisioningState;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationStatus;
import java.io.IOException;

/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
@Fluent
public final class InventoryResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private InventoryProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of InventoryResourceInner class.
     */
    public InventoryResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private InventoryProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the cloudNativeType property: Gets or sets the cloud native resource type.
     * 
     * @return the cloudNativeType value.
     */
    public CloudNativeType cloudNativeType() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudNativeType();
    }

    /**
     * Set the cloudNativeType property: Gets or sets the cloud native resource type.
     * 
     * @param cloudNativeType the cloudNativeType value to set.
     * @return the InventoryResourceInner object itself.
     */
    public InventoryResourceInner withCloudNativeType(CloudNativeType cloudNativeType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InventoryProperties();
        }
        this.innerProperties().withCloudNativeType(cloudNativeType);
        return this;
    }

    /**
     * Get the cloudNativeResourceId property: Gets or sets the cloud native resource name.
     * 
     * @return the cloudNativeResourceId value.
     */
    public String cloudNativeResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudNativeResourceId();
    }

    /**
     * Set the cloudNativeResourceId property: Gets or sets the cloud native resource name.
     * 
     * @param cloudNativeResourceId the cloudNativeResourceId value to set.
     * @return the InventoryResourceInner object itself.
     */
    public InventoryResourceInner withCloudNativeResourceId(String cloudNativeResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InventoryProperties();
        }
        this.innerProperties().withCloudNativeResourceId(cloudNativeResourceId);
        return this;
    }

    /**
     * Get the azureResourceId property: Gets or sets the mapped azure resource id.
     * 
     * @return the azureResourceId value.
     */
    public String azureResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().azureResourceId();
    }

    /**
     * Set the azureResourceId property: Gets or sets the mapped azure resource id.
     * 
     * @param azureResourceId the azureResourceId value to set.
     * @return the InventoryResourceInner object itself.
     */
    public InventoryResourceInner withAzureResourceId(String azureResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InventoryProperties();
        }
        this.innerProperties().withAzureResourceId(azureResourceId);
        return this;
    }

    /**
     * Get the status property: Gets or sets the status of the inventory.
     * 
     * @return the status value.
     */
    public SolutionConfigurationStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: Gets or sets the status of the inventory.
     * 
     * @param status the status value to set.
     * @return the InventoryResourceInner object itself.
     */
    public InventoryResourceInner withStatus(SolutionConfigurationStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InventoryProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the statusDetails property: Gets or sets the status details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Set the statusDetails property: Gets or sets the status details.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the InventoryResourceInner object itself.
     */
    public InventoryResourceInner withStatusDetails(String statusDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InventoryProperties();
        }
        this.innerProperties().withStatusDetails(statusDetails);
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InventoryResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InventoryResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InventoryResourceInner.
     */
    public static InventoryResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InventoryResourceInner deserializedInventoryResourceInner = new InventoryResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedInventoryResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedInventoryResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedInventoryResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedInventoryResourceInner.innerProperties = InventoryProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedInventoryResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInventoryResourceInner;
        });
    }
}
