// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.ServiceConfigurationsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.HybridConnectivityServiceConfigurationInner;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityServiceConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurations;

public final class ServiceConfigurationsImpl implements ServiceConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(ServiceConfigurationsImpl.class);

    private final ServiceConfigurationsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public ServiceConfigurationsImpl(ServiceConfigurationsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<HybridConnectivityServiceConfiguration> getWithResponse(String resourceUri, String endpointName,
        String serviceConfigurationName, Context context) {
        Response<HybridConnectivityServiceConfigurationInner> inner
            = this.serviceClient().getWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HybridConnectivityServiceConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridConnectivityServiceConfiguration get(String resourceUri, String endpointName,
        String serviceConfigurationName) {
        HybridConnectivityServiceConfigurationInner inner
            = this.serviceClient().get(resourceUri, endpointName, serviceConfigurationName);
        if (inner != null) {
            return new HybridConnectivityServiceConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceUri, String endpointName, String serviceConfigurationName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    public void delete(String resourceUri, String endpointName, String serviceConfigurationName) {
        this.serviceClient().delete(resourceUri, endpointName, serviceConfigurationName);
    }

    public PagedIterable<HybridConnectivityServiceConfiguration> listByEndpointResource(String resourceUri,
        String endpointName) {
        PagedIterable<HybridConnectivityServiceConfigurationInner> inner
            = this.serviceClient().listByEndpointResource(resourceUri, endpointName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new HybridConnectivityServiceConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<HybridConnectivityServiceConfiguration> listByEndpointResource(String resourceUri,
        String endpointName, Context context) {
        PagedIterable<HybridConnectivityServiceConfigurationInner> inner
            = this.serviceClient().listByEndpointResource(resourceUri, endpointName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new HybridConnectivityServiceConfigurationImpl(inner1, this.manager()));
    }

    public HybridConnectivityServiceConfiguration getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, serviceConfigurationName, Context.NONE).getValue();
    }

    public Response<HybridConnectivityServiceConfiguration> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.", id)));
        }
        this.deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.", id)));
        }
        return this.deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    private ServiceConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public HybridConnectivityServiceConfigurationImpl define(String name) {
        return new HybridConnectivityServiceConfigurationImpl(name, this.manager());
    }
}
